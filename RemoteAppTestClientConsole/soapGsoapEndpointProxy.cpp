/* soapGsoapEndpointProxy.cpp
   Generated by gSOAP 2.8.89 for spr.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapGsoapEndpointProxy.h"

GsoapEndpointProxy::GsoapEndpointProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	GsoapEndpointProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

GsoapEndpointProxy::GsoapEndpointProxy(const GsoapEndpointProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

GsoapEndpointProxy::GsoapEndpointProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	GsoapEndpointProxy_init(_soap->imode, _soap->omode);
}

GsoapEndpointProxy::GsoapEndpointProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	GsoapEndpointProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

GsoapEndpointProxy::GsoapEndpointProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	GsoapEndpointProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

GsoapEndpointProxy::GsoapEndpointProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	GsoapEndpointProxy_init(iomode, iomode);
}

GsoapEndpointProxy::GsoapEndpointProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	GsoapEndpointProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

GsoapEndpointProxy::GsoapEndpointProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	GsoapEndpointProxy_init(imode, omode);
}

GsoapEndpointProxy::~GsoapEndpointProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void GsoapEndpointProxy::GsoapEndpointProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "arr", "http://schemas.microsoft.com/2003/10/Serialization/Arrays", NULL, NULL },
        { "name", "http://tempuri.org/GsoapEndpoint", NULL, NULL },
        { "tempuri", "http://tempuri.org/", NULL, NULL },
        { "name2", "http://tempuri.org/SoapEndpoint", NULL, NULL },
        { "c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL },
        { "ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL },
        { "saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL },
        { "saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL },
        { "xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL },
        { "wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL },
        { "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL },
        { "chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL },
        { "wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL },
        { "wsp", "http://schemas.xmlsoap.org/ws/2004/09/policy", NULL, NULL },
        { "wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL },
        { "wst", "http://docs.oasis-open.org/ws-sx/ws-trust/200512", "http://schemas.xmlsoap.org/ws/2005/02/trust", NULL },
        { "netrm", "http://schemas.microsoft.com/ws/2006/05/rm", NULL, NULL },
        { "wsrm", "http://schemas.xmlsoap.org/ws/2005/02/rm", "http://docs.oasis-open.org/ws-rx/wsrm/200702", NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

GsoapEndpointProxy *GsoapEndpointProxy::copy()
{	GsoapEndpointProxy *dup = SOAP_NEW_UNMANAGED(GsoapEndpointProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

GsoapEndpointProxy& GsoapEndpointProxy::operator=(const GsoapEndpointProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void GsoapEndpointProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void GsoapEndpointProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	GsoapEndpointProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void GsoapEndpointProxy::soap_noheader()
{	this->soap->header = NULL;
}

void GsoapEndpointProxy::soap_header(struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, int __sizeIssuedTokens, struct wst__RequestSecurityTokenResponseCollectionType *wst__IssuedTokens, char *wst__RequestType, struct wsrm__SequenceType *wsrm__Sequence, int __sizeAckRequested, struct wsrm__AckRequestedType *wsrm__AckRequested, int __sizeSequenceAcknowledgement, struct _wsrm__SequenceAcknowledgement *wsrm__SequenceAcknowledgement, struct wsrm__SequenceFaultType *wsrm__SequenceFault)
{
	::soap_header(this->soap);
	this->soap->header->wsse__Security = wsse__Security;
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->__sizeIssuedTokens = __sizeIssuedTokens;
	this->soap->header->wst__IssuedTokens = wst__IssuedTokens;
	this->soap->header->wst__RequestType = wst__RequestType;
	this->soap->header->wsrm__Sequence = wsrm__Sequence;
	this->soap->header->__sizeAckRequested = __sizeAckRequested;
	this->soap->header->wsrm__AckRequested = wsrm__AckRequested;
	this->soap->header->__sizeSequenceAcknowledgement = __sizeSequenceAcknowledgement;
	this->soap->header->wsrm__SequenceAcknowledgement = wsrm__SequenceAcknowledgement;
	this->soap->header->wsrm__SequenceFault = wsrm__SequenceFault;
}

::SOAP_ENV__Header *GsoapEndpointProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *GsoapEndpointProxy::soap_fault()
{	return this->soap->fault;
}

const char *GsoapEndpointProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *GsoapEndpointProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *GsoapEndpointProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int GsoapEndpointProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int GsoapEndpointProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void GsoapEndpointProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void GsoapEndpointProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *GsoapEndpointProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int GsoapEndpointProxy::send_GetNamesOfMethods(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfMethods *tempuri__GetNamesOfMethods)
{
	struct __name__GetNamesOfMethods soap_tmp___name__GetNamesOfMethods;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfMethods";
	soap_tmp___name__GetNamesOfMethods.tempuri__GetNamesOfMethods = tempuri__GetNamesOfMethods;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetNamesOfMethods(soap, &soap_tmp___name__GetNamesOfMethods);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetNamesOfMethods(soap, &soap_tmp___name__GetNamesOfMethods, "-name:GetNamesOfMethods", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetNamesOfMethods(soap, &soap_tmp___name__GetNamesOfMethods, "-name:GetNamesOfMethods", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetNamesOfMethods(_tempuri__GetNamesOfMethodsResponse &tempuri__GetNamesOfMethodsResponse)
{
	tempuri__GetNamesOfMethodsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetNamesOfMethodsResponse.soap_get(soap, "tempuri:GetNamesOfMethodsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetNamesOfMethodsOfAssayType(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfMethodsOfAssayType *tempuri__GetNamesOfMethodsOfAssayType)
{
	struct __name__GetNamesOfMethodsOfAssayType soap_tmp___name__GetNamesOfMethodsOfAssayType;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfMethodsOfAssayType";
	soap_tmp___name__GetNamesOfMethodsOfAssayType.tempuri__GetNamesOfMethodsOfAssayType = tempuri__GetNamesOfMethodsOfAssayType;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetNamesOfMethodsOfAssayType(soap, &soap_tmp___name__GetNamesOfMethodsOfAssayType);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetNamesOfMethodsOfAssayType(soap, &soap_tmp___name__GetNamesOfMethodsOfAssayType, "-name:GetNamesOfMethodsOfAssayType", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetNamesOfMethodsOfAssayType(soap, &soap_tmp___name__GetNamesOfMethodsOfAssayType, "-name:GetNamesOfMethodsOfAssayType", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetNamesOfMethodsOfAssayType(_tempuri__GetNamesOfMethodsOfAssayTypeResponse &tempuri__GetNamesOfMethodsOfAssayTypeResponse)
{
	tempuri__GetNamesOfMethodsOfAssayTypeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetNamesOfMethodsOfAssayTypeResponse.soap_get(soap, "tempuri:GetNamesOfMethodsOfAssayTypeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetAssayTypesOfAllMethods(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypesOfAllMethods *tempuri__GetAssayTypesOfAllMethods)
{
	struct __name__GetAssayTypesOfAllMethods soap_tmp___name__GetAssayTypesOfAllMethods;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypesOfAllMethods";
	soap_tmp___name__GetAssayTypesOfAllMethods.tempuri__GetAssayTypesOfAllMethods = tempuri__GetAssayTypesOfAllMethods;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetAssayTypesOfAllMethods(soap, &soap_tmp___name__GetAssayTypesOfAllMethods);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetAssayTypesOfAllMethods(soap, &soap_tmp___name__GetAssayTypesOfAllMethods, "-name:GetAssayTypesOfAllMethods", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetAssayTypesOfAllMethods(soap, &soap_tmp___name__GetAssayTypesOfAllMethods, "-name:GetAssayTypesOfAllMethods", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetAssayTypesOfAllMethods(_tempuri__GetAssayTypesOfAllMethodsResponse &tempuri__GetAssayTypesOfAllMethodsResponse)
{
	tempuri__GetAssayTypesOfAllMethodsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetAssayTypesOfAllMethodsResponse.soap_get(soap, "tempuri:GetAssayTypesOfAllMethodsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetNameOfCurrentMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNameOfCurrentMethod *tempuri__GetNameOfCurrentMethod)
{
	struct __name__GetNameOfCurrentMethod soap_tmp___name__GetNameOfCurrentMethod;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetNameOfCurrentMethod";
	soap_tmp___name__GetNameOfCurrentMethod.tempuri__GetNameOfCurrentMethod = tempuri__GetNameOfCurrentMethod;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetNameOfCurrentMethod(soap, &soap_tmp___name__GetNameOfCurrentMethod);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetNameOfCurrentMethod(soap, &soap_tmp___name__GetNameOfCurrentMethod, "-name:GetNameOfCurrentMethod", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetNameOfCurrentMethod(soap, &soap_tmp___name__GetNameOfCurrentMethod, "-name:GetNameOfCurrentMethod", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetNameOfCurrentMethod(_tempuri__GetNameOfCurrentMethodResponse &tempuri__GetNameOfCurrentMethodResponse)
{
	tempuri__GetNameOfCurrentMethodResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetNameOfCurrentMethodResponse.soap_get(soap, "tempuri:GetNameOfCurrentMethodResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetAssayTypeOfCurrentMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfCurrentMethod *tempuri__GetAssayTypeOfCurrentMethod)
{
	struct __name__GetAssayTypeOfCurrentMethod soap_tmp___name__GetAssayTypeOfCurrentMethod;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfCurrentMethod";
	soap_tmp___name__GetAssayTypeOfCurrentMethod.tempuri__GetAssayTypeOfCurrentMethod = tempuri__GetAssayTypeOfCurrentMethod;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetAssayTypeOfCurrentMethod(soap, &soap_tmp___name__GetAssayTypeOfCurrentMethod);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetAssayTypeOfCurrentMethod(soap, &soap_tmp___name__GetAssayTypeOfCurrentMethod, "-name:GetAssayTypeOfCurrentMethod", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetAssayTypeOfCurrentMethod(soap, &soap_tmp___name__GetAssayTypeOfCurrentMethod, "-name:GetAssayTypeOfCurrentMethod", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetAssayTypeOfCurrentMethod(_tempuri__GetAssayTypeOfCurrentMethodResponse &tempuri__GetAssayTypeOfCurrentMethodResponse)
{
	tempuri__GetAssayTypeOfCurrentMethodResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetAssayTypeOfCurrentMethodResponse.soap_get(soap, "tempuri:GetAssayTypeOfCurrentMethodResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetAssayTypeOfMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfMethod *tempuri__GetAssayTypeOfMethod)
{
	struct __name__GetAssayTypeOfMethod soap_tmp___name__GetAssayTypeOfMethod;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfMethod";
	soap_tmp___name__GetAssayTypeOfMethod.tempuri__GetAssayTypeOfMethod = tempuri__GetAssayTypeOfMethod;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetAssayTypeOfMethod(soap, &soap_tmp___name__GetAssayTypeOfMethod);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetAssayTypeOfMethod(soap, &soap_tmp___name__GetAssayTypeOfMethod, "-name:GetAssayTypeOfMethod", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetAssayTypeOfMethod(soap, &soap_tmp___name__GetAssayTypeOfMethod, "-name:GetAssayTypeOfMethod", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetAssayTypeOfMethod(_tempuri__GetAssayTypeOfMethodResponse &tempuri__GetAssayTypeOfMethodResponse)
{
	tempuri__GetAssayTypeOfMethodResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetAssayTypeOfMethodResponse.soap_get(soap, "tempuri:GetAssayTypeOfMethodResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetNamesOfRunsets(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfRunsets *tempuri__GetNamesOfRunsets)
{
	struct __name__GetNamesOfRunsets soap_tmp___name__GetNamesOfRunsets;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfRunsets";
	soap_tmp___name__GetNamesOfRunsets.tempuri__GetNamesOfRunsets = tempuri__GetNamesOfRunsets;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetNamesOfRunsets(soap, &soap_tmp___name__GetNamesOfRunsets);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetNamesOfRunsets(soap, &soap_tmp___name__GetNamesOfRunsets, "-name:GetNamesOfRunsets", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetNamesOfRunsets(soap, &soap_tmp___name__GetNamesOfRunsets, "-name:GetNamesOfRunsets", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetNamesOfRunsets(_tempuri__GetNamesOfRunsetsResponse &tempuri__GetNamesOfRunsetsResponse)
{
	tempuri__GetNamesOfRunsetsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetNamesOfRunsetsResponse.soap_get(soap, "tempuri:GetNamesOfRunsetsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetNamesOfRunsetsOfAssayType(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfRunsetsOfAssayType *tempuri__GetNamesOfRunsetsOfAssayType)
{
	struct __name__GetNamesOfRunsetsOfAssayType soap_tmp___name__GetNamesOfRunsetsOfAssayType;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfRunsetsOfAssayType";
	soap_tmp___name__GetNamesOfRunsetsOfAssayType.tempuri__GetNamesOfRunsetsOfAssayType = tempuri__GetNamesOfRunsetsOfAssayType;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetNamesOfRunsetsOfAssayType(soap, &soap_tmp___name__GetNamesOfRunsetsOfAssayType);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetNamesOfRunsetsOfAssayType(soap, &soap_tmp___name__GetNamesOfRunsetsOfAssayType, "-name:GetNamesOfRunsetsOfAssayType", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetNamesOfRunsetsOfAssayType(soap, &soap_tmp___name__GetNamesOfRunsetsOfAssayType, "-name:GetNamesOfRunsetsOfAssayType", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetNamesOfRunsetsOfAssayType(_tempuri__GetNamesOfRunsetsOfAssayTypeResponse &tempuri__GetNamesOfRunsetsOfAssayTypeResponse)
{
	tempuri__GetNamesOfRunsetsOfAssayTypeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetNamesOfRunsetsOfAssayTypeResponse.soap_get(soap, "tempuri:GetNamesOfRunsetsOfAssayTypeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetAssayTypesOfAllRunsets(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypesOfAllRunsets *tempuri__GetAssayTypesOfAllRunsets)
{
	struct __name__GetAssayTypesOfAllRunsets soap_tmp___name__GetAssayTypesOfAllRunsets;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypesOfAllRunsets";
	soap_tmp___name__GetAssayTypesOfAllRunsets.tempuri__GetAssayTypesOfAllRunsets = tempuri__GetAssayTypesOfAllRunsets;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetAssayTypesOfAllRunsets(soap, &soap_tmp___name__GetAssayTypesOfAllRunsets);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetAssayTypesOfAllRunsets(soap, &soap_tmp___name__GetAssayTypesOfAllRunsets, "-name:GetAssayTypesOfAllRunsets", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetAssayTypesOfAllRunsets(soap, &soap_tmp___name__GetAssayTypesOfAllRunsets, "-name:GetAssayTypesOfAllRunsets", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetAssayTypesOfAllRunsets(_tempuri__GetAssayTypesOfAllRunsetsResponse &tempuri__GetAssayTypesOfAllRunsetsResponse)
{
	tempuri__GetAssayTypesOfAllRunsetsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetAssayTypesOfAllRunsetsResponse.soap_get(soap, "tempuri:GetAssayTypesOfAllRunsetsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetNameOfCurrentRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNameOfCurrentRunset *tempuri__GetNameOfCurrentRunset)
{
	struct __name__GetNameOfCurrentRunset soap_tmp___name__GetNameOfCurrentRunset;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetNameOfCurrentRunset";
	soap_tmp___name__GetNameOfCurrentRunset.tempuri__GetNameOfCurrentRunset = tempuri__GetNameOfCurrentRunset;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetNameOfCurrentRunset(soap, &soap_tmp___name__GetNameOfCurrentRunset);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetNameOfCurrentRunset(soap, &soap_tmp___name__GetNameOfCurrentRunset, "-name:GetNameOfCurrentRunset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetNameOfCurrentRunset(soap, &soap_tmp___name__GetNameOfCurrentRunset, "-name:GetNameOfCurrentRunset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetNameOfCurrentRunset(_tempuri__GetNameOfCurrentRunsetResponse &tempuri__GetNameOfCurrentRunsetResponse)
{
	tempuri__GetNameOfCurrentRunsetResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetNameOfCurrentRunsetResponse.soap_get(soap, "tempuri:GetNameOfCurrentRunsetResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetAssayTypeOfCurrentRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfCurrentRunset *tempuri__GetAssayTypeOfCurrentRunset)
{
	struct __name__GetAssayTypeOfCurrentRunset soap_tmp___name__GetAssayTypeOfCurrentRunset;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfCurrentRunset";
	soap_tmp___name__GetAssayTypeOfCurrentRunset.tempuri__GetAssayTypeOfCurrentRunset = tempuri__GetAssayTypeOfCurrentRunset;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetAssayTypeOfCurrentRunset(soap, &soap_tmp___name__GetAssayTypeOfCurrentRunset);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetAssayTypeOfCurrentRunset(soap, &soap_tmp___name__GetAssayTypeOfCurrentRunset, "-name:GetAssayTypeOfCurrentRunset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetAssayTypeOfCurrentRunset(soap, &soap_tmp___name__GetAssayTypeOfCurrentRunset, "-name:GetAssayTypeOfCurrentRunset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetAssayTypeOfCurrentRunset(_tempuri__GetAssayTypeOfCurrentRunsetResponse &tempuri__GetAssayTypeOfCurrentRunsetResponse)
{
	tempuri__GetAssayTypeOfCurrentRunsetResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetAssayTypeOfCurrentRunsetResponse.soap_get(soap, "tempuri:GetAssayTypeOfCurrentRunsetResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetAssayTypeOfRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfRunset *tempuri__GetAssayTypeOfRunset)
{
	struct __name__GetAssayTypeOfRunset soap_tmp___name__GetAssayTypeOfRunset;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfRunset";
	soap_tmp___name__GetAssayTypeOfRunset.tempuri__GetAssayTypeOfRunset = tempuri__GetAssayTypeOfRunset;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetAssayTypeOfRunset(soap, &soap_tmp___name__GetAssayTypeOfRunset);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetAssayTypeOfRunset(soap, &soap_tmp___name__GetAssayTypeOfRunset, "-name:GetAssayTypeOfRunset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetAssayTypeOfRunset(soap, &soap_tmp___name__GetAssayTypeOfRunset, "-name:GetAssayTypeOfRunset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetAssayTypeOfRunset(_tempuri__GetAssayTypeOfRunsetResponse &tempuri__GetAssayTypeOfRunsetResponse)
{
	tempuri__GetAssayTypeOfRunsetResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetAssayTypeOfRunsetResponse.soap_get(soap, "tempuri:GetAssayTypeOfRunsetResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetMethodNamesOfRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetMethodNamesOfRunset *tempuri__GetMethodNamesOfRunset)
{
	struct __name__GetMethodNamesOfRunset soap_tmp___name__GetMethodNamesOfRunset;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetMethodNamesOfRunset";
	soap_tmp___name__GetMethodNamesOfRunset.tempuri__GetMethodNamesOfRunset = tempuri__GetMethodNamesOfRunset;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetMethodNamesOfRunset(soap, &soap_tmp___name__GetMethodNamesOfRunset);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetMethodNamesOfRunset(soap, &soap_tmp___name__GetMethodNamesOfRunset, "-name:GetMethodNamesOfRunset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetMethodNamesOfRunset(soap, &soap_tmp___name__GetMethodNamesOfRunset, "-name:GetMethodNamesOfRunset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetMethodNamesOfRunset(_tempuri__GetMethodNamesOfRunsetResponse &tempuri__GetMethodNamesOfRunsetResponse)
{
	tempuri__GetMethodNamesOfRunsetResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetMethodNamesOfRunsetResponse.soap_get(soap, "tempuri:GetMethodNamesOfRunsetResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_SelectMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__SelectMethod *tempuri__SelectMethod)
{
	struct __name__SelectMethod soap_tmp___name__SelectMethod;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/SelectMethod";
	soap_tmp___name__SelectMethod.tempuri__SelectMethod = tempuri__SelectMethod;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__SelectMethod(soap, &soap_tmp___name__SelectMethod);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__SelectMethod(soap, &soap_tmp___name__SelectMethod, "-name:SelectMethod", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__SelectMethod(soap, &soap_tmp___name__SelectMethod, "-name:SelectMethod", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_SelectMethod(_tempuri__SelectMethodResponse &tempuri__SelectMethodResponse)
{
	tempuri__SelectMethodResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__SelectMethodResponse.soap_get(soap, "tempuri:SelectMethodResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_SelectRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__SelectRunset *tempuri__SelectRunset)
{
	struct __name__SelectRunset soap_tmp___name__SelectRunset;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/SelectRunset";
	soap_tmp___name__SelectRunset.tempuri__SelectRunset = tempuri__SelectRunset;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__SelectRunset(soap, &soap_tmp___name__SelectRunset);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__SelectRunset(soap, &soap_tmp___name__SelectRunset, "-name:SelectRunset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__SelectRunset(soap, &soap_tmp___name__SelectRunset, "-name:SelectRunset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_SelectRunset(_tempuri__SelectRunsetResponse &tempuri__SelectRunsetResponse)
{
	tempuri__SelectRunsetResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__SelectRunsetResponse.soap_get(soap, "tempuri:SelectRunsetResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_CreateRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__CreateRunset *tempuri__CreateRunset)
{
	struct __name__CreateRunset soap_tmp___name__CreateRunset;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/CreateRunset";
	soap_tmp___name__CreateRunset.tempuri__CreateRunset = tempuri__CreateRunset;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__CreateRunset(soap, &soap_tmp___name__CreateRunset);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__CreateRunset(soap, &soap_tmp___name__CreateRunset, "-name:CreateRunset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__CreateRunset(soap, &soap_tmp___name__CreateRunset, "-name:CreateRunset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_CreateRunset(_tempuri__CreateRunsetResponse &tempuri__CreateRunsetResponse)
{
	tempuri__CreateRunsetResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__CreateRunsetResponse.soap_get(soap, "tempuri:CreateRunsetResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_SetSamplePlateId(const char *soap_endpoint_url, const char *soap_action, _tempuri__SetSamplePlateId *tempuri__SetSamplePlateId)
{
	struct __name__SetSamplePlateId soap_tmp___name__SetSamplePlateId;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/SetSamplePlateId";
	soap_tmp___name__SetSamplePlateId.tempuri__SetSamplePlateId = tempuri__SetSamplePlateId;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__SetSamplePlateId(soap, &soap_tmp___name__SetSamplePlateId);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__SetSamplePlateId(soap, &soap_tmp___name__SetSamplePlateId, "-name:SetSamplePlateId", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__SetSamplePlateId(soap, &soap_tmp___name__SetSamplePlateId, "-name:SetSamplePlateId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_SetSamplePlateId(_tempuri__SetSamplePlateIdResponse &tempuri__SetSamplePlateIdResponse)
{
	tempuri__SetSamplePlateIdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__SetSamplePlateIdResponse.soap_get(soap, "tempuri:SetSamplePlateIdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetSamplePlateId(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetSamplePlateId *tempuri__GetSamplePlateId)
{
	struct __name__GetSamplePlateId soap_tmp___name__GetSamplePlateId;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetSamplePlateId";
	soap_tmp___name__GetSamplePlateId.tempuri__GetSamplePlateId = tempuri__GetSamplePlateId;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetSamplePlateId(soap, &soap_tmp___name__GetSamplePlateId);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetSamplePlateId(soap, &soap_tmp___name__GetSamplePlateId, "-name:GetSamplePlateId", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetSamplePlateId(soap, &soap_tmp___name__GetSamplePlateId, "-name:GetSamplePlateId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetSamplePlateId(_tempuri__GetSamplePlateIdResponse &tempuri__GetSamplePlateIdResponse)
{
	tempuri__GetSamplePlateIdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetSamplePlateIdResponse.soap_get(soap, "tempuri:GetSamplePlateIdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetCurrentSamplePlateId(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetCurrentSamplePlateId *tempuri__GetCurrentSamplePlateId)
{
	struct __name__GetCurrentSamplePlateId soap_tmp___name__GetCurrentSamplePlateId;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetCurrentSamplePlateId";
	soap_tmp___name__GetCurrentSamplePlateId.tempuri__GetCurrentSamplePlateId = tempuri__GetCurrentSamplePlateId;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetCurrentSamplePlateId(soap, &soap_tmp___name__GetCurrentSamplePlateId);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetCurrentSamplePlateId(soap, &soap_tmp___name__GetCurrentSamplePlateId, "-name:GetCurrentSamplePlateId", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetCurrentSamplePlateId(soap, &soap_tmp___name__GetCurrentSamplePlateId, "-name:GetCurrentSamplePlateId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetCurrentSamplePlateId(_tempuri__GetCurrentSamplePlateIdResponse &tempuri__GetCurrentSamplePlateIdResponse)
{
	tempuri__GetCurrentSamplePlateIdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetCurrentSamplePlateIdResponse.soap_get(soap, "tempuri:GetCurrentSamplePlateIdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_MoveSamplePlateTrayOut(const char *soap_endpoint_url, const char *soap_action, _tempuri__MoveSamplePlateTrayOut *tempuri__MoveSamplePlateTrayOut)
{
	struct __name__MoveSamplePlateTrayOut soap_tmp___name__MoveSamplePlateTrayOut;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/MoveSamplePlateTrayOut";
	soap_tmp___name__MoveSamplePlateTrayOut.tempuri__MoveSamplePlateTrayOut = tempuri__MoveSamplePlateTrayOut;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__MoveSamplePlateTrayOut(soap, &soap_tmp___name__MoveSamplePlateTrayOut);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__MoveSamplePlateTrayOut(soap, &soap_tmp___name__MoveSamplePlateTrayOut, "-name:MoveSamplePlateTrayOut", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__MoveSamplePlateTrayOut(soap, &soap_tmp___name__MoveSamplePlateTrayOut, "-name:MoveSamplePlateTrayOut", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_MoveSamplePlateTrayOut(_tempuri__MoveSamplePlateTrayOutResponse &tempuri__MoveSamplePlateTrayOutResponse)
{
	tempuri__MoveSamplePlateTrayOutResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__MoveSamplePlateTrayOutResponse.soap_get(soap, "tempuri:MoveSamplePlateTrayOutResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_MoveSamplePlateTrayIn(const char *soap_endpoint_url, const char *soap_action, _tempuri__MoveSamplePlateTrayIn *tempuri__MoveSamplePlateTrayIn)
{
	struct __name__MoveSamplePlateTrayIn soap_tmp___name__MoveSamplePlateTrayIn;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/MoveSamplePlateTrayIn";
	soap_tmp___name__MoveSamplePlateTrayIn.tempuri__MoveSamplePlateTrayIn = tempuri__MoveSamplePlateTrayIn;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__MoveSamplePlateTrayIn(soap, &soap_tmp___name__MoveSamplePlateTrayIn);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__MoveSamplePlateTrayIn(soap, &soap_tmp___name__MoveSamplePlateTrayIn, "-name:MoveSamplePlateTrayIn", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__MoveSamplePlateTrayIn(soap, &soap_tmp___name__MoveSamplePlateTrayIn, "-name:MoveSamplePlateTrayIn", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_MoveSamplePlateTrayIn(_tempuri__MoveSamplePlateTrayInResponse &tempuri__MoveSamplePlateTrayInResponse)
{
	tempuri__MoveSamplePlateTrayInResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__MoveSamplePlateTrayInResponse.soap_get(soap, "tempuri:MoveSamplePlateTrayInResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_StartSelectedRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__StartSelectedRunset *tempuri__StartSelectedRunset)
{
	struct __name__StartSelectedRunset soap_tmp___name__StartSelectedRunset;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/StartSelectedRunset";
	soap_tmp___name__StartSelectedRunset.tempuri__StartSelectedRunset = tempuri__StartSelectedRunset;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__StartSelectedRunset(soap, &soap_tmp___name__StartSelectedRunset);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__StartSelectedRunset(soap, &soap_tmp___name__StartSelectedRunset, "-name:StartSelectedRunset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__StartSelectedRunset(soap, &soap_tmp___name__StartSelectedRunset, "-name:StartSelectedRunset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_StartSelectedRunset(_tempuri__StartSelectedRunsetResponse &tempuri__StartSelectedRunsetResponse)
{
	tempuri__StartSelectedRunsetResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__StartSelectedRunsetResponse.soap_get(soap, "tempuri:StartSelectedRunsetResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_StartSelectedRunsetFrom(const char *soap_endpoint_url, const char *soap_action, _tempuri__StartSelectedRunsetFrom *tempuri__StartSelectedRunsetFrom)
{
	struct __name__StartSelectedRunsetFrom soap_tmp___name__StartSelectedRunsetFrom;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/StartSelectedRunsetFrom";
	soap_tmp___name__StartSelectedRunsetFrom.tempuri__StartSelectedRunsetFrom = tempuri__StartSelectedRunsetFrom;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__StartSelectedRunsetFrom(soap, &soap_tmp___name__StartSelectedRunsetFrom);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__StartSelectedRunsetFrom(soap, &soap_tmp___name__StartSelectedRunsetFrom, "-name:StartSelectedRunsetFrom", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__StartSelectedRunsetFrom(soap, &soap_tmp___name__StartSelectedRunsetFrom, "-name:StartSelectedRunsetFrom", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_StartSelectedRunsetFrom(_tempuri__StartSelectedRunsetFromResponse &tempuri__StartSelectedRunsetFromResponse)
{
	tempuri__StartSelectedRunsetFromResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__StartSelectedRunsetFromResponse.soap_get(soap, "tempuri:StartSelectedRunsetFromResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_PauseRunsetAfter(const char *soap_endpoint_url, const char *soap_action, _tempuri__PauseRunsetAfter *tempuri__PauseRunsetAfter)
{
	struct __name__PauseRunsetAfter soap_tmp___name__PauseRunsetAfter;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/PauseRunsetAfter";
	soap_tmp___name__PauseRunsetAfter.tempuri__PauseRunsetAfter = tempuri__PauseRunsetAfter;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__PauseRunsetAfter(soap, &soap_tmp___name__PauseRunsetAfter);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__PauseRunsetAfter(soap, &soap_tmp___name__PauseRunsetAfter, "-name:PauseRunsetAfter", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__PauseRunsetAfter(soap, &soap_tmp___name__PauseRunsetAfter, "-name:PauseRunsetAfter", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_PauseRunsetAfter(_tempuri__PauseRunsetAfterResponse &tempuri__PauseRunsetAfterResponse)
{
	tempuri__PauseRunsetAfterResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__PauseRunsetAfterResponse.soap_get(soap, "tempuri:PauseRunsetAfterResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_ResumeRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__ResumeRunset *tempuri__ResumeRunset)
{
	struct __name__ResumeRunset soap_tmp___name__ResumeRunset;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/ResumeRunset";
	soap_tmp___name__ResumeRunset.tempuri__ResumeRunset = tempuri__ResumeRunset;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__ResumeRunset(soap, &soap_tmp___name__ResumeRunset);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__ResumeRunset(soap, &soap_tmp___name__ResumeRunset, "-name:ResumeRunset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__ResumeRunset(soap, &soap_tmp___name__ResumeRunset, "-name:ResumeRunset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_ResumeRunset(_tempuri__ResumeRunsetResponse &tempuri__ResumeRunsetResponse)
{
	tempuri__ResumeRunsetResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__ResumeRunsetResponse.soap_get(soap, "tempuri:ResumeRunsetResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_ResetRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__ResetRunset *tempuri__ResetRunset)
{
	struct __name__ResetRunset soap_tmp___name__ResetRunset;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/ResetRunset";
	soap_tmp___name__ResetRunset.tempuri__ResetRunset = tempuri__ResetRunset;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__ResetRunset(soap, &soap_tmp___name__ResetRunset);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__ResetRunset(soap, &soap_tmp___name__ResetRunset, "-name:ResetRunset", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__ResetRunset(soap, &soap_tmp___name__ResetRunset, "-name:ResetRunset", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_ResetRunset(_tempuri__ResetRunsetResponse &tempuri__ResetRunsetResponse)
{
	tempuri__ResetRunsetResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__ResetRunsetResponse.soap_get(soap, "tempuri:ResetRunsetResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_AbortScript(const char *soap_endpoint_url, const char *soap_action, _tempuri__AbortScript *tempuri__AbortScript)
{
	struct __name__AbortScript soap_tmp___name__AbortScript;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/AbortScript";
	soap_tmp___name__AbortScript.tempuri__AbortScript = tempuri__AbortScript;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__AbortScript(soap, &soap_tmp___name__AbortScript);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__AbortScript(soap, &soap_tmp___name__AbortScript, "-name:AbortScript", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__AbortScript(soap, &soap_tmp___name__AbortScript, "-name:AbortScript", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_AbortScript(_tempuri__AbortScriptResponse &tempuri__AbortScriptResponse)
{
	tempuri__AbortScriptResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__AbortScriptResponse.soap_get(soap, "tempuri:AbortScriptResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_LeaveStandby(const char *soap_endpoint_url, const char *soap_action, _tempuri__LeaveStandby *tempuri__LeaveStandby)
{
	struct __name__LeaveStandby soap_tmp___name__LeaveStandby;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/LeaveStandby";
	soap_tmp___name__LeaveStandby.tempuri__LeaveStandby = tempuri__LeaveStandby;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__LeaveStandby(soap, &soap_tmp___name__LeaveStandby);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__LeaveStandby(soap, &soap_tmp___name__LeaveStandby, "-name:LeaveStandby", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__LeaveStandby(soap, &soap_tmp___name__LeaveStandby, "-name:LeaveStandby", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_LeaveStandby(_tempuri__LeaveStandbyResponse &tempuri__LeaveStandbyResponse)
{
	tempuri__LeaveStandbyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__LeaveStandbyResponse.soap_get(soap, "tempuri:LeaveStandbyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_SetStandbyAfterFinish(const char *soap_endpoint_url, const char *soap_action, _tempuri__SetStandbyAfterFinish *tempuri__SetStandbyAfterFinish)
{
	struct __name__SetStandbyAfterFinish soap_tmp___name__SetStandbyAfterFinish;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/SetStandbyAfterFinish";
	soap_tmp___name__SetStandbyAfterFinish.tempuri__SetStandbyAfterFinish = tempuri__SetStandbyAfterFinish;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__SetStandbyAfterFinish(soap, &soap_tmp___name__SetStandbyAfterFinish);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__SetStandbyAfterFinish(soap, &soap_tmp___name__SetStandbyAfterFinish, "-name:SetStandbyAfterFinish", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__SetStandbyAfterFinish(soap, &soap_tmp___name__SetStandbyAfterFinish, "-name:SetStandbyAfterFinish", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_SetStandbyAfterFinish(_tempuri__SetStandbyAfterFinishResponse &tempuri__SetStandbyAfterFinishResponse)
{
	tempuri__SetStandbyAfterFinishResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__SetStandbyAfterFinishResponse.soap_get(soap, "tempuri:SetStandbyAfterFinishResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetStandbyAfterFinish(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetStandbyAfterFinish *tempuri__GetStandbyAfterFinish)
{
	struct __name__GetStandbyAfterFinish soap_tmp___name__GetStandbyAfterFinish;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetStandbyAfterFinish";
	soap_tmp___name__GetStandbyAfterFinish.tempuri__GetStandbyAfterFinish = tempuri__GetStandbyAfterFinish;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetStandbyAfterFinish(soap, &soap_tmp___name__GetStandbyAfterFinish);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetStandbyAfterFinish(soap, &soap_tmp___name__GetStandbyAfterFinish, "-name:GetStandbyAfterFinish", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetStandbyAfterFinish(soap, &soap_tmp___name__GetStandbyAfterFinish, "-name:GetStandbyAfterFinish", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetStandbyAfterFinish(_tempuri__GetStandbyAfterFinishResponse &tempuri__GetStandbyAfterFinishResponse)
{
	tempuri__GetStandbyAfterFinishResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetStandbyAfterFinishResponse.soap_get(soap, "tempuri:GetStandbyAfterFinishResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetNamesOfMaintenanceProcedures(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfMaintenanceProcedures *tempuri__GetNamesOfMaintenanceProcedures)
{
	struct __name__GetNamesOfMaintenanceProcedures soap_tmp___name__GetNamesOfMaintenanceProcedures;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfMaintenanceProcedures";
	soap_tmp___name__GetNamesOfMaintenanceProcedures.tempuri__GetNamesOfMaintenanceProcedures = tempuri__GetNamesOfMaintenanceProcedures;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetNamesOfMaintenanceProcedures(soap, &soap_tmp___name__GetNamesOfMaintenanceProcedures);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetNamesOfMaintenanceProcedures(soap, &soap_tmp___name__GetNamesOfMaintenanceProcedures, "-name:GetNamesOfMaintenanceProcedures", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetNamesOfMaintenanceProcedures(soap, &soap_tmp___name__GetNamesOfMaintenanceProcedures, "-name:GetNamesOfMaintenanceProcedures", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetNamesOfMaintenanceProcedures(_tempuri__GetNamesOfMaintenanceProceduresResponse &tempuri__GetNamesOfMaintenanceProceduresResponse)
{
	tempuri__GetNamesOfMaintenanceProceduresResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetNamesOfMaintenanceProceduresResponse.soap_get(soap, "tempuri:GetNamesOfMaintenanceProceduresResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_RunMaintenanceProcedure(const char *soap_endpoint_url, const char *soap_action, _tempuri__RunMaintenanceProcedure *tempuri__RunMaintenanceProcedure)
{
	struct __name__RunMaintenanceProcedure soap_tmp___name__RunMaintenanceProcedure;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/RunMaintenanceProcedure";
	soap_tmp___name__RunMaintenanceProcedure.tempuri__RunMaintenanceProcedure = tempuri__RunMaintenanceProcedure;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__RunMaintenanceProcedure(soap, &soap_tmp___name__RunMaintenanceProcedure);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__RunMaintenanceProcedure(soap, &soap_tmp___name__RunMaintenanceProcedure, "-name:RunMaintenanceProcedure", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__RunMaintenanceProcedure(soap, &soap_tmp___name__RunMaintenanceProcedure, "-name:RunMaintenanceProcedure", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_RunMaintenanceProcedure(_tempuri__RunMaintenanceProcedureResponse &tempuri__RunMaintenanceProcedureResponse)
{
	tempuri__RunMaintenanceProcedureResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__RunMaintenanceProcedureResponse.soap_get(soap, "tempuri:RunMaintenanceProcedureResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetOperationMode(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetOperationMode *tempuri__GetOperationMode)
{
	struct __name__GetOperationMode soap_tmp___name__GetOperationMode;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetOperationMode";
	soap_tmp___name__GetOperationMode.tempuri__GetOperationMode = tempuri__GetOperationMode;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetOperationMode(soap, &soap_tmp___name__GetOperationMode);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetOperationMode(soap, &soap_tmp___name__GetOperationMode, "-name:GetOperationMode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetOperationMode(soap, &soap_tmp___name__GetOperationMode, "-name:GetOperationMode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetOperationMode(_tempuri__GetOperationModeResponse &tempuri__GetOperationModeResponse)
{
	tempuri__GetOperationModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetOperationModeResponse.soap_get(soap, "tempuri:GetOperationModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_IsChipDocked(const char *soap_endpoint_url, const char *soap_action, _tempuri__IsChipDocked *tempuri__IsChipDocked)
{
	struct __name__IsChipDocked soap_tmp___name__IsChipDocked;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/IsChipDocked";
	soap_tmp___name__IsChipDocked.tempuri__IsChipDocked = tempuri__IsChipDocked;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__IsChipDocked(soap, &soap_tmp___name__IsChipDocked);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__IsChipDocked(soap, &soap_tmp___name__IsChipDocked, "-name:IsChipDocked", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__IsChipDocked(soap, &soap_tmp___name__IsChipDocked, "-name:IsChipDocked", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_IsChipDocked(_tempuri__IsChipDockedResponse &tempuri__IsChipDockedResponse)
{
	tempuri__IsChipDockedResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__IsChipDockedResponse.soap_get(soap, "tempuri:IsChipDockedResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_IsSamplePlateTrayIn(const char *soap_endpoint_url, const char *soap_action, _tempuri__IsSamplePlateTrayIn *tempuri__IsSamplePlateTrayIn)
{
	struct __name__IsSamplePlateTrayIn soap_tmp___name__IsSamplePlateTrayIn;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/IsSamplePlateTrayIn";
	soap_tmp___name__IsSamplePlateTrayIn.tempuri__IsSamplePlateTrayIn = tempuri__IsSamplePlateTrayIn;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__IsSamplePlateTrayIn(soap, &soap_tmp___name__IsSamplePlateTrayIn);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__IsSamplePlateTrayIn(soap, &soap_tmp___name__IsSamplePlateTrayIn, "-name:IsSamplePlateTrayIn", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__IsSamplePlateTrayIn(soap, &soap_tmp___name__IsSamplePlateTrayIn, "-name:IsSamplePlateTrayIn", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_IsSamplePlateTrayIn(_tempuri__IsSamplePlateTrayInResponse &tempuri__IsSamplePlateTrayInResponse)
{
	tempuri__IsSamplePlateTrayInResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__IsSamplePlateTrayInResponse.soap_get(soap, "tempuri:IsSamplePlateTrayInResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_HasMessage(const char *soap_endpoint_url, const char *soap_action, _tempuri__HasMessage *tempuri__HasMessage)
{
	struct __name__HasMessage soap_tmp___name__HasMessage;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/HasMessage";
	soap_tmp___name__HasMessage.tempuri__HasMessage = tempuri__HasMessage;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__HasMessage(soap, &soap_tmp___name__HasMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__HasMessage(soap, &soap_tmp___name__HasMessage, "-name:HasMessage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__HasMessage(soap, &soap_tmp___name__HasMessage, "-name:HasMessage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_HasMessage(_tempuri__HasMessageResponse &tempuri__HasMessageResponse)
{
	tempuri__HasMessageResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__HasMessageResponse.soap_get(soap, "tempuri:HasMessageResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetMessage(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetMessage *tempuri__GetMessage)
{
	struct __name__GetMessage soap_tmp___name__GetMessage;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetMessage";
	soap_tmp___name__GetMessage.tempuri__GetMessage = tempuri__GetMessage;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetMessage(soap, &soap_tmp___name__GetMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetMessage(soap, &soap_tmp___name__GetMessage, "-name:GetMessage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetMessage(soap, &soap_tmp___name__GetMessage, "-name:GetMessage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetMessage(_tempuri__GetMessageResponse &tempuri__GetMessageResponse)
{
	tempuri__GetMessageResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetMessageResponse.soap_get(soap, "tempuri:GetMessageResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_HasErrors(const char *soap_endpoint_url, const char *soap_action, _tempuri__HasErrors *tempuri__HasErrors)
{
	struct __name__HasErrors soap_tmp___name__HasErrors;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/HasErrors";
	soap_tmp___name__HasErrors.tempuri__HasErrors = tempuri__HasErrors;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__HasErrors(soap, &soap_tmp___name__HasErrors);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__HasErrors(soap, &soap_tmp___name__HasErrors, "-name:HasErrors", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__HasErrors(soap, &soap_tmp___name__HasErrors, "-name:HasErrors", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_HasErrors(_tempuri__HasErrorsResponse &tempuri__HasErrorsResponse)
{
	tempuri__HasErrorsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__HasErrorsResponse.soap_get(soap, "tempuri:HasErrorsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetErrors(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetErrors *tempuri__GetErrors)
{
	struct __name__GetErrors soap_tmp___name__GetErrors;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetErrors";
	soap_tmp___name__GetErrors.tempuri__GetErrors = tempuri__GetErrors;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetErrors(soap, &soap_tmp___name__GetErrors);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetErrors(soap, &soap_tmp___name__GetErrors, "-name:GetErrors", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetErrors(soap, &soap_tmp___name__GetErrors, "-name:GetErrors", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetErrors(_tempuri__GetErrorsResponse &tempuri__GetErrorsResponse)
{
	tempuri__GetErrorsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetErrorsResponse.soap_get(soap, "tempuri:GetErrorsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_HasWarnings(const char *soap_endpoint_url, const char *soap_action, _tempuri__HasWarnings *tempuri__HasWarnings)
{
	struct __name__HasWarnings soap_tmp___name__HasWarnings;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/HasWarnings";
	soap_tmp___name__HasWarnings.tempuri__HasWarnings = tempuri__HasWarnings;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__HasWarnings(soap, &soap_tmp___name__HasWarnings);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__HasWarnings(soap, &soap_tmp___name__HasWarnings, "-name:HasWarnings", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__HasWarnings(soap, &soap_tmp___name__HasWarnings, "-name:HasWarnings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_HasWarnings(_tempuri__HasWarningsResponse &tempuri__HasWarningsResponse)
{
	tempuri__HasWarningsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__HasWarningsResponse.soap_get(soap, "tempuri:HasWarningsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int GsoapEndpointProxy::send_GetWarnings(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetWarnings *tempuri__GetWarnings)
{
	struct __name__GetWarnings soap_tmp___name__GetWarnings;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9001/bruker-spr/gsoap";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IBrukerSprRemoteService/GetWarnings";
	soap_tmp___name__GetWarnings.tempuri__GetWarnings = tempuri__GetWarnings;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name__GetWarnings(soap, &soap_tmp___name__GetWarnings);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name__GetWarnings(soap, &soap_tmp___name__GetWarnings, "-name:GetWarnings", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name__GetWarnings(soap, &soap_tmp___name__GetWarnings, "-name:GetWarnings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int GsoapEndpointProxy::recv_GetWarnings(_tempuri__GetWarningsResponse &tempuri__GetWarningsResponse)
{
	tempuri__GetWarningsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tempuri__GetWarningsResponse.soap_get(soap, "tempuri:GetWarningsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
