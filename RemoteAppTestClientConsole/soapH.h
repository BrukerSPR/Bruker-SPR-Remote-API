/* soapH.h
   Generated by gSOAP 2.8.89 for spr.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__duration(struct soap*, LONG64 *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__duration2s(struct soap*, LONG64);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__duration(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__duration(struct soap*, const char*, LONG64 *);
SOAP_FMAC1 LONG64 * SOAP_FMAC2 soap_in_xsd__duration(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_xsd__duration(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__duration(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, LONG64 *p)
{
	if (soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wst__KeySize is a typedef synonym of unsignedInt */

#ifndef SOAP_TYPE__wst__KeySize_DEFINED
#define SOAP_TYPE__wst__KeySize_DEFINED

#define soap_default__wst__KeySize soap_default_unsignedInt


#define soap__wst__KeySize2s soap_unsignedInt2s


#define soap_out__wst__KeySize soap_out_unsignedInt


#define soap_s2_wst__KeySize soap_s2unsignedInt


#define soap_in__wst__KeySize soap_in_unsignedInt


#define soap_instantiate__wst__KeySize soap_instantiate_unsignedInt


#define soap_new__wst__KeySize soap_new_unsignedInt

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__KeySize(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write__wst__KeySize(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__KeySize(soap, p, "wst:KeySize", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__KeySize(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__KeySize(soap, p, "wst:KeySize", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__KeySize(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__KeySize(soap, p, "wst:KeySize", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__KeySize(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__KeySize(soap, p, "wst:KeySize", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__KeySize soap_get_unsignedInt


#define soap_read__wst__KeySize soap_read_unsignedInt


#define soap_GET__wst__KeySize soap_GET_unsignedInt


#define soap_POST_recv__wst__KeySize soap_POST_recv_unsignedInt

#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__RetryAfter is a typedef synonym of ULONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter_DEFINED
#define SOAP_TYPE__wsa5__RetryAfter_DEFINED

#define soap_default__wsa5__RetryAfter soap_default_ULONG64


#define soap__wsa5__RetryAfter2s soap_ULONG642s


#define soap_out__wsa5__RetryAfter soap_out_ULONG64


#define soap_s2_wsa5__RetryAfter soap_s2ULONG64


#define soap_in__wsa5__RetryAfter soap_in_ULONG64


#define soap_instantiate__wsa5__RetryAfter soap_instantiate_ULONG64


#define soap_new__wsa5__RetryAfter soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RetryAfter(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write__wsa5__RetryAfter(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RetryAfter soap_get_ULONG64


#define soap_read__wsa5__RetryAfter soap_read_ULONG64


#define soap_GET__wsa5__RetryAfter soap_GET_ULONG64


#define soap_POST_recv__wsa5__RetryAfter soap_POST_recv_ULONG64

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__IncompleteSequenceBehaviorType_DEFINED
#define SOAP_TYPE_wsrm__IncompleteSequenceBehaviorType_DEFINED

inline void soap_default_wsrm__IncompleteSequenceBehaviorType(struct soap *soap, enum wsrm__IncompleteSequenceBehaviorType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsrm__IncompleteSequenceBehaviorType
	*a = SOAP_DEFAULT_wsrm__IncompleteSequenceBehaviorType;
#else
	*a = (enum wsrm__IncompleteSequenceBehaviorType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__IncompleteSequenceBehaviorType(struct soap*, const char*, int, const enum wsrm__IncompleteSequenceBehaviorType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsrm__IncompleteSequenceBehaviorType2s(struct soap*, enum wsrm__IncompleteSequenceBehaviorType);
SOAP_FMAC3 enum wsrm__IncompleteSequenceBehaviorType * SOAP_FMAC4 soap_in_wsrm__IncompleteSequenceBehaviorType(struct soap*, const char*, enum wsrm__IncompleteSequenceBehaviorType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsrm__IncompleteSequenceBehaviorType(struct soap*, const char*, enum wsrm__IncompleteSequenceBehaviorType *);

SOAP_FMAC3 enum wsrm__IncompleteSequenceBehaviorType * SOAP_FMAC4 soap_new_wsrm__IncompleteSequenceBehaviorType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__IncompleteSequenceBehaviorType(struct soap*, const enum wsrm__IncompleteSequenceBehaviorType *, const char*, const char*);

inline int soap_write_wsrm__IncompleteSequenceBehaviorType(struct soap *soap, enum wsrm__IncompleteSequenceBehaviorType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsrm__IncompleteSequenceBehaviorType(soap, p, "wsrm:IncompleteSequenceBehaviorType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsrm__IncompleteSequenceBehaviorType(struct soap *soap, const char *URL, enum wsrm__IncompleteSequenceBehaviorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsrm__IncompleteSequenceBehaviorType(soap, p, "wsrm:IncompleteSequenceBehaviorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__IncompleteSequenceBehaviorType(struct soap *soap, const char *URL, enum wsrm__IncompleteSequenceBehaviorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsrm__IncompleteSequenceBehaviorType(soap, p, "wsrm:IncompleteSequenceBehaviorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__IncompleteSequenceBehaviorType(struct soap *soap, const char *URL, enum wsrm__IncompleteSequenceBehaviorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsrm__IncompleteSequenceBehaviorType(soap, p, "wsrm:IncompleteSequenceBehaviorType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsrm__IncompleteSequenceBehaviorType * SOAP_FMAC4 soap_get_wsrm__IncompleteSequenceBehaviorType(struct soap*, enum wsrm__IncompleteSequenceBehaviorType *, const char*, const char*);

inline int soap_read_wsrm__IncompleteSequenceBehaviorType(struct soap *soap, enum wsrm__IncompleteSequenceBehaviorType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsrm__IncompleteSequenceBehaviorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__IncompleteSequenceBehaviorType(struct soap *soap, const char *URL, enum wsrm__IncompleteSequenceBehaviorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__IncompleteSequenceBehaviorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__IncompleteSequenceBehaviorType(struct soap *soap, enum wsrm__IncompleteSequenceBehaviorType *p)
{
	if (::soap_read_wsrm__IncompleteSequenceBehaviorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__FaultCodes_DEFINED
#define SOAP_TYPE_wsrm__FaultCodes_DEFINED

inline void soap_default_wsrm__FaultCodes(struct soap *soap, enum wsrm__FaultCodes *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsrm__FaultCodes
	*a = SOAP_DEFAULT_wsrm__FaultCodes;
#else
	*a = (enum wsrm__FaultCodes)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__FaultCodes(struct soap*, const char*, int, const enum wsrm__FaultCodes *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsrm__FaultCodes2s(struct soap*, enum wsrm__FaultCodes);
SOAP_FMAC3 enum wsrm__FaultCodes * SOAP_FMAC4 soap_in_wsrm__FaultCodes(struct soap*, const char*, enum wsrm__FaultCodes *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsrm__FaultCodes(struct soap*, const char*, enum wsrm__FaultCodes *);

SOAP_FMAC3 enum wsrm__FaultCodes * SOAP_FMAC4 soap_new_wsrm__FaultCodes(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__FaultCodes(struct soap*, const enum wsrm__FaultCodes *, const char*, const char*);

inline int soap_write_wsrm__FaultCodes(struct soap *soap, enum wsrm__FaultCodes const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsrm__FaultCodes(soap, p, "wsrm:FaultCodes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsrm__FaultCodes(struct soap *soap, const char *URL, enum wsrm__FaultCodes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsrm__FaultCodes(soap, p, "wsrm:FaultCodes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__FaultCodes(struct soap *soap, const char *URL, enum wsrm__FaultCodes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsrm__FaultCodes(soap, p, "wsrm:FaultCodes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__FaultCodes(struct soap *soap, const char *URL, enum wsrm__FaultCodes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsrm__FaultCodes(soap, p, "wsrm:FaultCodes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsrm__FaultCodes * SOAP_FMAC4 soap_get_wsrm__FaultCodes(struct soap*, enum wsrm__FaultCodes *, const char*, const char*);

inline int soap_read_wsrm__FaultCodes(struct soap *soap, enum wsrm__FaultCodes *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsrm__FaultCodes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__FaultCodes(struct soap *soap, const char *URL, enum wsrm__FaultCodes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__FaultCodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__FaultCodes(struct soap *soap, enum wsrm__FaultCodes *p)
{
	if (::soap_read_wsrm__FaultCodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
#define SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED

inline void soap_default__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__wsa5__IsReferenceParameter
	*a = SOAP_DEFAULT__wsa5__IsReferenceParameter;
#else
	*a = (enum _wsa5__IsReferenceParameter)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_write__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_read__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__wsa5__IsReferenceParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesType_DEFINED

inline void soap_default_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesType
	*a = SOAP_DEFAULT_wsa5__FaultCodesType;
#else
	*a = (enum wsa5__FaultCodesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_new_wsa5__FaultCodesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_write_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_read_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType_DEFINED
#define SOAP_TYPE_wsa5__RelationshipType_DEFINED

inline void soap_default_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipType
	*a = SOAP_DEFAULT_wsa5__RelationshipType;
#else
	*a = (enum wsa5__RelationshipType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_new_wsa5__RelationshipType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_write_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_read_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__DecisionType_DEFINED
#define SOAP_TYPE_saml2__DecisionType_DEFINED

inline void soap_default_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_saml2__DecisionType
	*a = SOAP_DEFAULT_saml2__DecisionType;
#else
	*a = (enum saml2__DecisionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__DecisionType(struct soap*, const char*, int, const enum saml2__DecisionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml2__DecisionType2s(struct soap*, enum saml2__DecisionType);
SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_in_saml2__DecisionType(struct soap*, const char*, enum saml2__DecisionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml2__DecisionType(struct soap*, const char*, enum saml2__DecisionType *);

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_new_saml2__DecisionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__DecisionType(struct soap*, const enum saml2__DecisionType *, const char*, const char*);

inline int soap_write_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_get_saml2__DecisionType(struct soap*, enum saml2__DecisionType *, const char*, const char*);

inline int soap_read_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_saml2__DecisionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p)
{
	if (::soap_read_saml2__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__DecisionType_DEFINED
#define SOAP_TYPE_saml1__DecisionType_DEFINED

inline void soap_default_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_saml1__DecisionType
	*a = SOAP_DEFAULT_saml1__DecisionType;
#else
	*a = (enum saml1__DecisionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DecisionType(struct soap*, const char*, int, const enum saml1__DecisionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml1__DecisionType2s(struct soap*, enum saml1__DecisionType);
SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_in_saml1__DecisionType(struct soap*, const char*, enum saml1__DecisionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml1__DecisionType(struct soap*, const char*, enum saml1__DecisionType *);

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_new_saml1__DecisionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DecisionType(struct soap*, const enum saml1__DecisionType *, const char*, const char*);

inline int soap_write_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_get_saml1__DecisionType(struct soap*, enum saml1__DecisionType *, const char*, const char*);

inline int soap_read_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_saml1__DecisionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p)
{
	if (::soap_read_saml1__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeType_DEFINED
#define SOAP_TYPE_wsc__FaultCodeType_DEFINED

inline void soap_default_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsc__FaultCodeType
	*a = SOAP_DEFAULT_wsc__FaultCodeType;
#else
	*a = (enum wsc__FaultCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeType(struct soap*, const char*, int, const enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsc__FaultCodeType2s(struct soap*, enum wsc__FaultCodeType);
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_in_wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *);

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_new_wsc__FaultCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeType(struct soap*, const enum wsc__FaultCodeType *, const char*, const char*);

inline int soap_write_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_get_wsc__FaultCodeType(struct soap*, enum wsc__FaultCodeType *, const char*, const char*);

inline int soap_read_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsc__FaultCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__FaultCodeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p)
{
	if (::soap_read_wsc__FaultCodeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsse__FaultcodeEnum_DEFINED
#define SOAP_TYPE_wsse__FaultcodeEnum_DEFINED

inline void soap_default_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsse__FaultcodeEnum
	*a = SOAP_DEFAULT_wsse__FaultcodeEnum;
#else
	*a = (enum wsse__FaultcodeEnum)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__FaultcodeEnum(struct soap*, const char*, int, const enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsse__FaultcodeEnum2s(struct soap*, enum wsse__FaultcodeEnum);
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_in_wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *);

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_new_wsse__FaultcodeEnum(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__FaultcodeEnum(struct soap*, const enum wsse__FaultcodeEnum *, const char*, const char*);

inline int soap_write_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_get_wsse__FaultcodeEnum(struct soap*, enum wsse__FaultcodeEnum *, const char*, const char*);

inline int soap_read_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsse__FaultcodeEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsse__FaultcodeEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p)
{
	if (::soap_read_wsse__FaultcodeEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsu__tTimestampFault_DEFINED
#define SOAP_TYPE_wsu__tTimestampFault_DEFINED

inline void soap_default_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsu__tTimestampFault
	*a = SOAP_DEFAULT_wsu__tTimestampFault;
#else
	*a = (enum wsu__tTimestampFault)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsu__tTimestampFault(struct soap*, const char*, int, const enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsu__tTimestampFault2s(struct soap*, enum wsu__tTimestampFault);
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_in_wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *);

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_new_wsu__tTimestampFault(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsu__tTimestampFault(struct soap*, const enum wsu__tTimestampFault *, const char*, const char*);

inline int soap_write_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_get_wsu__tTimestampFault(struct soap*, enum wsu__tTimestampFault *, const char*, const char*);

inline int soap_read_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsu__tTimestampFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsu__tTimestampFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p)
{
	if (::soap_read_wsu__tTimestampFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_arr__ArrayOfstring_DEFINED
#define SOAP_TYPE_arr__ArrayOfstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfstring(struct soap*, const char*, int, const arr__ArrayOfstring *, const char*);
SOAP_FMAC3 arr__ArrayOfstring * SOAP_FMAC4 soap_in_arr__ArrayOfstring(struct soap*, const char*, arr__ArrayOfstring *, const char*);
SOAP_FMAC1 arr__ArrayOfstring * SOAP_FMAC2 soap_instantiate_arr__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline arr__ArrayOfstring * soap_new_arr__ArrayOfstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_arr__ArrayOfstring(soap, n, NULL, NULL, NULL);
}

inline arr__ArrayOfstring * soap_new_req_arr__ArrayOfstring(
	struct soap *soap)
{
	arr__ArrayOfstring *_p = ::soap_new_arr__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline arr__ArrayOfstring * soap_new_set_arr__ArrayOfstring(
	struct soap *soap,
	const std::vector<std::string> & string)
{
	arr__ArrayOfstring *_p = ::soap_new_arr__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->arr__ArrayOfstring::string = string;
	}
	return _p;
}

inline int soap_write_arr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfstring", p->soap_type() == SOAP_TYPE_arr__ArrayOfstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_arr__ArrayOfstring(struct soap *soap, const char *URL, arr__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfstring", p->soap_type() == SOAP_TYPE_arr__ArrayOfstring ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_arr__ArrayOfstring(struct soap *soap, const char *URL, arr__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfstring", p->soap_type() == SOAP_TYPE_arr__ArrayOfstring ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_arr__ArrayOfstring(struct soap *soap, const char *URL, arr__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfstring", p->soap_type() == SOAP_TYPE_arr__ArrayOfstring ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 arr__ArrayOfstring * SOAP_FMAC4 soap_get_arr__ArrayOfstring(struct soap*, arr__ArrayOfstring *, const char*, const char*);

inline int soap_read_arr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_arr__ArrayOfstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_arr__ArrayOfstring(struct soap *soap, const char *URL, arr__ArrayOfstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_arr__ArrayOfstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_arr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring *p)
{
	if (::soap_read_arr__ArrayOfstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetWarningsResponse_DEFINED
#define SOAP_TYPE__tempuri__GetWarningsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetWarningsResponse(struct soap*, const char*, int, const _tempuri__GetWarningsResponse *, const char*);
SOAP_FMAC3 _tempuri__GetWarningsResponse * SOAP_FMAC4 soap_in__tempuri__GetWarningsResponse(struct soap*, const char*, _tempuri__GetWarningsResponse *, const char*);
SOAP_FMAC1 _tempuri__GetWarningsResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetWarningsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetWarningsResponse * soap_new__tempuri__GetWarningsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetWarningsResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetWarningsResponse * soap_new_req__tempuri__GetWarningsResponse(
	struct soap *soap)
{
	_tempuri__GetWarningsResponse *_p = ::soap_new__tempuri__GetWarningsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetWarningsResponse * soap_new_set__tempuri__GetWarningsResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetWarningsResult)
{
	_tempuri__GetWarningsResponse *_p = ::soap_new__tempuri__GetWarningsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetWarningsResponse::GetWarningsResult = GetWarningsResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetWarningsResponse(struct soap *soap, _tempuri__GetWarningsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetWarningsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetWarningsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetWarningsResponse(struct soap *soap, const char *URL, _tempuri__GetWarningsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetWarningsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetWarningsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetWarningsResponse(struct soap *soap, const char *URL, _tempuri__GetWarningsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetWarningsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetWarningsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetWarningsResponse(struct soap *soap, const char *URL, _tempuri__GetWarningsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetWarningsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetWarningsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetWarningsResponse * SOAP_FMAC4 soap_get__tempuri__GetWarningsResponse(struct soap*, _tempuri__GetWarningsResponse *, const char*, const char*);

inline int soap_read__tempuri__GetWarningsResponse(struct soap *soap, _tempuri__GetWarningsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetWarningsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetWarningsResponse(struct soap *soap, const char *URL, _tempuri__GetWarningsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetWarningsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetWarningsResponse(struct soap *soap, _tempuri__GetWarningsResponse *p)
{
	if (::soap_read__tempuri__GetWarningsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetWarnings_DEFINED
#define SOAP_TYPE__tempuri__GetWarnings_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetWarnings(struct soap*, const char*, int, const _tempuri__GetWarnings *, const char*);
SOAP_FMAC3 _tempuri__GetWarnings * SOAP_FMAC4 soap_in__tempuri__GetWarnings(struct soap*, const char*, _tempuri__GetWarnings *, const char*);
SOAP_FMAC1 _tempuri__GetWarnings * SOAP_FMAC2 soap_instantiate__tempuri__GetWarnings(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetWarnings * soap_new__tempuri__GetWarnings(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetWarnings(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetWarnings * soap_new_req__tempuri__GetWarnings(
	struct soap *soap)
{
	_tempuri__GetWarnings *_p = ::soap_new__tempuri__GetWarnings(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetWarnings * soap_new_set__tempuri__GetWarnings(
	struct soap *soap)
{
	_tempuri__GetWarnings *_p = ::soap_new__tempuri__GetWarnings(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetWarnings(struct soap *soap, _tempuri__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetWarnings", p->soap_type() == SOAP_TYPE__tempuri__GetWarnings ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetWarnings(struct soap *soap, const char *URL, _tempuri__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetWarnings", p->soap_type() == SOAP_TYPE__tempuri__GetWarnings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetWarnings(struct soap *soap, const char *URL, _tempuri__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetWarnings", p->soap_type() == SOAP_TYPE__tempuri__GetWarnings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetWarnings(struct soap *soap, const char *URL, _tempuri__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetWarnings", p->soap_type() == SOAP_TYPE__tempuri__GetWarnings ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetWarnings * SOAP_FMAC4 soap_get__tempuri__GetWarnings(struct soap*, _tempuri__GetWarnings *, const char*, const char*);

inline int soap_read__tempuri__GetWarnings(struct soap *soap, _tempuri__GetWarnings *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetWarnings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetWarnings(struct soap *soap, const char *URL, _tempuri__GetWarnings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetWarnings(struct soap *soap, _tempuri__GetWarnings *p)
{
	if (::soap_read__tempuri__GetWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__HasWarningsResponse_DEFINED
#define SOAP_TYPE__tempuri__HasWarningsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__HasWarningsResponse(struct soap*, const char*, int, const _tempuri__HasWarningsResponse *, const char*);
SOAP_FMAC3 _tempuri__HasWarningsResponse * SOAP_FMAC4 soap_in__tempuri__HasWarningsResponse(struct soap*, const char*, _tempuri__HasWarningsResponse *, const char*);
SOAP_FMAC1 _tempuri__HasWarningsResponse * SOAP_FMAC2 soap_instantiate__tempuri__HasWarningsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__HasWarningsResponse * soap_new__tempuri__HasWarningsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__HasWarningsResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__HasWarningsResponse * soap_new_req__tempuri__HasWarningsResponse(
	struct soap *soap)
{
	_tempuri__HasWarningsResponse *_p = ::soap_new__tempuri__HasWarningsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__HasWarningsResponse * soap_new_set__tempuri__HasWarningsResponse(
	struct soap *soap,
	bool *HasWarningsResult)
{
	_tempuri__HasWarningsResponse *_p = ::soap_new__tempuri__HasWarningsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__HasWarningsResponse::HasWarningsResult = HasWarningsResult;
	}
	return _p;
}

inline int soap_write__tempuri__HasWarningsResponse(struct soap *soap, _tempuri__HasWarningsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasWarningsResponse", p->soap_type() == SOAP_TYPE__tempuri__HasWarningsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__HasWarningsResponse(struct soap *soap, const char *URL, _tempuri__HasWarningsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasWarningsResponse", p->soap_type() == SOAP_TYPE__tempuri__HasWarningsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__HasWarningsResponse(struct soap *soap, const char *URL, _tempuri__HasWarningsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasWarningsResponse", p->soap_type() == SOAP_TYPE__tempuri__HasWarningsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__HasWarningsResponse(struct soap *soap, const char *URL, _tempuri__HasWarningsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasWarningsResponse", p->soap_type() == SOAP_TYPE__tempuri__HasWarningsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__HasWarningsResponse * SOAP_FMAC4 soap_get__tempuri__HasWarningsResponse(struct soap*, _tempuri__HasWarningsResponse *, const char*, const char*);

inline int soap_read__tempuri__HasWarningsResponse(struct soap *soap, _tempuri__HasWarningsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__HasWarningsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__HasWarningsResponse(struct soap *soap, const char *URL, _tempuri__HasWarningsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__HasWarningsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__HasWarningsResponse(struct soap *soap, _tempuri__HasWarningsResponse *p)
{
	if (::soap_read__tempuri__HasWarningsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__HasWarnings_DEFINED
#define SOAP_TYPE__tempuri__HasWarnings_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__HasWarnings(struct soap*, const char*, int, const _tempuri__HasWarnings *, const char*);
SOAP_FMAC3 _tempuri__HasWarnings * SOAP_FMAC4 soap_in__tempuri__HasWarnings(struct soap*, const char*, _tempuri__HasWarnings *, const char*);
SOAP_FMAC1 _tempuri__HasWarnings * SOAP_FMAC2 soap_instantiate__tempuri__HasWarnings(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__HasWarnings * soap_new__tempuri__HasWarnings(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__HasWarnings(soap, n, NULL, NULL, NULL);
}

inline _tempuri__HasWarnings * soap_new_req__tempuri__HasWarnings(
	struct soap *soap)
{
	_tempuri__HasWarnings *_p = ::soap_new__tempuri__HasWarnings(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__HasWarnings * soap_new_set__tempuri__HasWarnings(
	struct soap *soap)
{
	_tempuri__HasWarnings *_p = ::soap_new__tempuri__HasWarnings(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__HasWarnings(struct soap *soap, _tempuri__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasWarnings", p->soap_type() == SOAP_TYPE__tempuri__HasWarnings ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__HasWarnings(struct soap *soap, const char *URL, _tempuri__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasWarnings", p->soap_type() == SOAP_TYPE__tempuri__HasWarnings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__HasWarnings(struct soap *soap, const char *URL, _tempuri__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasWarnings", p->soap_type() == SOAP_TYPE__tempuri__HasWarnings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__HasWarnings(struct soap *soap, const char *URL, _tempuri__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasWarnings", p->soap_type() == SOAP_TYPE__tempuri__HasWarnings ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__HasWarnings * SOAP_FMAC4 soap_get__tempuri__HasWarnings(struct soap*, _tempuri__HasWarnings *, const char*, const char*);

inline int soap_read__tempuri__HasWarnings(struct soap *soap, _tempuri__HasWarnings *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__HasWarnings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__HasWarnings(struct soap *soap, const char *URL, _tempuri__HasWarnings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__HasWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__HasWarnings(struct soap *soap, _tempuri__HasWarnings *p)
{
	if (::soap_read__tempuri__HasWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetErrorsResponse_DEFINED
#define SOAP_TYPE__tempuri__GetErrorsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetErrorsResponse(struct soap*, const char*, int, const _tempuri__GetErrorsResponse *, const char*);
SOAP_FMAC3 _tempuri__GetErrorsResponse * SOAP_FMAC4 soap_in__tempuri__GetErrorsResponse(struct soap*, const char*, _tempuri__GetErrorsResponse *, const char*);
SOAP_FMAC1 _tempuri__GetErrorsResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetErrorsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetErrorsResponse * soap_new__tempuri__GetErrorsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetErrorsResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetErrorsResponse * soap_new_req__tempuri__GetErrorsResponse(
	struct soap *soap)
{
	_tempuri__GetErrorsResponse *_p = ::soap_new__tempuri__GetErrorsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetErrorsResponse * soap_new_set__tempuri__GetErrorsResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetErrorsResult)
{
	_tempuri__GetErrorsResponse *_p = ::soap_new__tempuri__GetErrorsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetErrorsResponse::GetErrorsResult = GetErrorsResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetErrorsResponse(struct soap *soap, _tempuri__GetErrorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetErrorsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetErrorsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetErrorsResponse(struct soap *soap, const char *URL, _tempuri__GetErrorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetErrorsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetErrorsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetErrorsResponse(struct soap *soap, const char *URL, _tempuri__GetErrorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetErrorsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetErrorsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetErrorsResponse(struct soap *soap, const char *URL, _tempuri__GetErrorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetErrorsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetErrorsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetErrorsResponse * SOAP_FMAC4 soap_get__tempuri__GetErrorsResponse(struct soap*, _tempuri__GetErrorsResponse *, const char*, const char*);

inline int soap_read__tempuri__GetErrorsResponse(struct soap *soap, _tempuri__GetErrorsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetErrorsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetErrorsResponse(struct soap *soap, const char *URL, _tempuri__GetErrorsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetErrorsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetErrorsResponse(struct soap *soap, _tempuri__GetErrorsResponse *p)
{
	if (::soap_read__tempuri__GetErrorsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetErrors_DEFINED
#define SOAP_TYPE__tempuri__GetErrors_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetErrors(struct soap*, const char*, int, const _tempuri__GetErrors *, const char*);
SOAP_FMAC3 _tempuri__GetErrors * SOAP_FMAC4 soap_in__tempuri__GetErrors(struct soap*, const char*, _tempuri__GetErrors *, const char*);
SOAP_FMAC1 _tempuri__GetErrors * SOAP_FMAC2 soap_instantiate__tempuri__GetErrors(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetErrors * soap_new__tempuri__GetErrors(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetErrors(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetErrors * soap_new_req__tempuri__GetErrors(
	struct soap *soap)
{
	_tempuri__GetErrors *_p = ::soap_new__tempuri__GetErrors(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetErrors * soap_new_set__tempuri__GetErrors(
	struct soap *soap)
{
	_tempuri__GetErrors *_p = ::soap_new__tempuri__GetErrors(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetErrors(struct soap *soap, _tempuri__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetErrors", p->soap_type() == SOAP_TYPE__tempuri__GetErrors ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetErrors(struct soap *soap, const char *URL, _tempuri__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetErrors", p->soap_type() == SOAP_TYPE__tempuri__GetErrors ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetErrors(struct soap *soap, const char *URL, _tempuri__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetErrors", p->soap_type() == SOAP_TYPE__tempuri__GetErrors ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetErrors(struct soap *soap, const char *URL, _tempuri__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetErrors", p->soap_type() == SOAP_TYPE__tempuri__GetErrors ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetErrors * SOAP_FMAC4 soap_get__tempuri__GetErrors(struct soap*, _tempuri__GetErrors *, const char*, const char*);

inline int soap_read__tempuri__GetErrors(struct soap *soap, _tempuri__GetErrors *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetErrors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetErrors(struct soap *soap, const char *URL, _tempuri__GetErrors *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetErrors(struct soap *soap, _tempuri__GetErrors *p)
{
	if (::soap_read__tempuri__GetErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__HasErrorsResponse_DEFINED
#define SOAP_TYPE__tempuri__HasErrorsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__HasErrorsResponse(struct soap*, const char*, int, const _tempuri__HasErrorsResponse *, const char*);
SOAP_FMAC3 _tempuri__HasErrorsResponse * SOAP_FMAC4 soap_in__tempuri__HasErrorsResponse(struct soap*, const char*, _tempuri__HasErrorsResponse *, const char*);
SOAP_FMAC1 _tempuri__HasErrorsResponse * SOAP_FMAC2 soap_instantiate__tempuri__HasErrorsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__HasErrorsResponse * soap_new__tempuri__HasErrorsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__HasErrorsResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__HasErrorsResponse * soap_new_req__tempuri__HasErrorsResponse(
	struct soap *soap)
{
	_tempuri__HasErrorsResponse *_p = ::soap_new__tempuri__HasErrorsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__HasErrorsResponse * soap_new_set__tempuri__HasErrorsResponse(
	struct soap *soap,
	bool *HasErrorsResult)
{
	_tempuri__HasErrorsResponse *_p = ::soap_new__tempuri__HasErrorsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__HasErrorsResponse::HasErrorsResult = HasErrorsResult;
	}
	return _p;
}

inline int soap_write__tempuri__HasErrorsResponse(struct soap *soap, _tempuri__HasErrorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasErrorsResponse", p->soap_type() == SOAP_TYPE__tempuri__HasErrorsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__HasErrorsResponse(struct soap *soap, const char *URL, _tempuri__HasErrorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasErrorsResponse", p->soap_type() == SOAP_TYPE__tempuri__HasErrorsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__HasErrorsResponse(struct soap *soap, const char *URL, _tempuri__HasErrorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasErrorsResponse", p->soap_type() == SOAP_TYPE__tempuri__HasErrorsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__HasErrorsResponse(struct soap *soap, const char *URL, _tempuri__HasErrorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasErrorsResponse", p->soap_type() == SOAP_TYPE__tempuri__HasErrorsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__HasErrorsResponse * SOAP_FMAC4 soap_get__tempuri__HasErrorsResponse(struct soap*, _tempuri__HasErrorsResponse *, const char*, const char*);

inline int soap_read__tempuri__HasErrorsResponse(struct soap *soap, _tempuri__HasErrorsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__HasErrorsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__HasErrorsResponse(struct soap *soap, const char *URL, _tempuri__HasErrorsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__HasErrorsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__HasErrorsResponse(struct soap *soap, _tempuri__HasErrorsResponse *p)
{
	if (::soap_read__tempuri__HasErrorsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__HasErrors_DEFINED
#define SOAP_TYPE__tempuri__HasErrors_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__HasErrors(struct soap*, const char*, int, const _tempuri__HasErrors *, const char*);
SOAP_FMAC3 _tempuri__HasErrors * SOAP_FMAC4 soap_in__tempuri__HasErrors(struct soap*, const char*, _tempuri__HasErrors *, const char*);
SOAP_FMAC1 _tempuri__HasErrors * SOAP_FMAC2 soap_instantiate__tempuri__HasErrors(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__HasErrors * soap_new__tempuri__HasErrors(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__HasErrors(soap, n, NULL, NULL, NULL);
}

inline _tempuri__HasErrors * soap_new_req__tempuri__HasErrors(
	struct soap *soap)
{
	_tempuri__HasErrors *_p = ::soap_new__tempuri__HasErrors(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__HasErrors * soap_new_set__tempuri__HasErrors(
	struct soap *soap)
{
	_tempuri__HasErrors *_p = ::soap_new__tempuri__HasErrors(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__HasErrors(struct soap *soap, _tempuri__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasErrors", p->soap_type() == SOAP_TYPE__tempuri__HasErrors ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__HasErrors(struct soap *soap, const char *URL, _tempuri__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasErrors", p->soap_type() == SOAP_TYPE__tempuri__HasErrors ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__HasErrors(struct soap *soap, const char *URL, _tempuri__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasErrors", p->soap_type() == SOAP_TYPE__tempuri__HasErrors ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__HasErrors(struct soap *soap, const char *URL, _tempuri__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasErrors", p->soap_type() == SOAP_TYPE__tempuri__HasErrors ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__HasErrors * SOAP_FMAC4 soap_get__tempuri__HasErrors(struct soap*, _tempuri__HasErrors *, const char*, const char*);

inline int soap_read__tempuri__HasErrors(struct soap *soap, _tempuri__HasErrors *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__HasErrors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__HasErrors(struct soap *soap, const char *URL, _tempuri__HasErrors *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__HasErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__HasErrors(struct soap *soap, _tempuri__HasErrors *p)
{
	if (::soap_read__tempuri__HasErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetMessageResponse_DEFINED
#define SOAP_TYPE__tempuri__GetMessageResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetMessageResponse(struct soap*, const char*, int, const _tempuri__GetMessageResponse *, const char*);
SOAP_FMAC3 _tempuri__GetMessageResponse * SOAP_FMAC4 soap_in__tempuri__GetMessageResponse(struct soap*, const char*, _tempuri__GetMessageResponse *, const char*);
SOAP_FMAC1 _tempuri__GetMessageResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetMessageResponse * soap_new__tempuri__GetMessageResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetMessageResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetMessageResponse * soap_new_req__tempuri__GetMessageResponse(
	struct soap *soap)
{
	_tempuri__GetMessageResponse *_p = ::soap_new__tempuri__GetMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetMessageResponse * soap_new_set__tempuri__GetMessageResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetMessageResult)
{
	_tempuri__GetMessageResponse *_p = ::soap_new__tempuri__GetMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetMessageResponse::GetMessageResult = GetMessageResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetMessageResponse(struct soap *soap, _tempuri__GetMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMessageResponse", p->soap_type() == SOAP_TYPE__tempuri__GetMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetMessageResponse(struct soap *soap, const char *URL, _tempuri__GetMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMessageResponse", p->soap_type() == SOAP_TYPE__tempuri__GetMessageResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetMessageResponse(struct soap *soap, const char *URL, _tempuri__GetMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMessageResponse", p->soap_type() == SOAP_TYPE__tempuri__GetMessageResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetMessageResponse(struct soap *soap, const char *URL, _tempuri__GetMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMessageResponse", p->soap_type() == SOAP_TYPE__tempuri__GetMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetMessageResponse * SOAP_FMAC4 soap_get__tempuri__GetMessageResponse(struct soap*, _tempuri__GetMessageResponse *, const char*, const char*);

inline int soap_read__tempuri__GetMessageResponse(struct soap *soap, _tempuri__GetMessageResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetMessageResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetMessageResponse(struct soap *soap, const char *URL, _tempuri__GetMessageResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetMessageResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetMessageResponse(struct soap *soap, _tempuri__GetMessageResponse *p)
{
	if (::soap_read__tempuri__GetMessageResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetMessage_DEFINED
#define SOAP_TYPE__tempuri__GetMessage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetMessage(struct soap*, const char*, int, const _tempuri__GetMessage *, const char*);
SOAP_FMAC3 _tempuri__GetMessage * SOAP_FMAC4 soap_in__tempuri__GetMessage(struct soap*, const char*, _tempuri__GetMessage *, const char*);
SOAP_FMAC1 _tempuri__GetMessage * SOAP_FMAC2 soap_instantiate__tempuri__GetMessage(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetMessage * soap_new__tempuri__GetMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetMessage(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetMessage * soap_new_req__tempuri__GetMessage(
	struct soap *soap)
{
	_tempuri__GetMessage *_p = ::soap_new__tempuri__GetMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetMessage * soap_new_set__tempuri__GetMessage(
	struct soap *soap)
{
	_tempuri__GetMessage *_p = ::soap_new__tempuri__GetMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetMessage(struct soap *soap, _tempuri__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMessage", p->soap_type() == SOAP_TYPE__tempuri__GetMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetMessage(struct soap *soap, const char *URL, _tempuri__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMessage", p->soap_type() == SOAP_TYPE__tempuri__GetMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetMessage(struct soap *soap, const char *URL, _tempuri__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMessage", p->soap_type() == SOAP_TYPE__tempuri__GetMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetMessage(struct soap *soap, const char *URL, _tempuri__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMessage", p->soap_type() == SOAP_TYPE__tempuri__GetMessage ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetMessage * SOAP_FMAC4 soap_get__tempuri__GetMessage(struct soap*, _tempuri__GetMessage *, const char*, const char*);

inline int soap_read__tempuri__GetMessage(struct soap *soap, _tempuri__GetMessage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetMessage(struct soap *soap, const char *URL, _tempuri__GetMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetMessage(struct soap *soap, _tempuri__GetMessage *p)
{
	if (::soap_read__tempuri__GetMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__HasMessageResponse_DEFINED
#define SOAP_TYPE__tempuri__HasMessageResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__HasMessageResponse(struct soap*, const char*, int, const _tempuri__HasMessageResponse *, const char*);
SOAP_FMAC3 _tempuri__HasMessageResponse * SOAP_FMAC4 soap_in__tempuri__HasMessageResponse(struct soap*, const char*, _tempuri__HasMessageResponse *, const char*);
SOAP_FMAC1 _tempuri__HasMessageResponse * SOAP_FMAC2 soap_instantiate__tempuri__HasMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__HasMessageResponse * soap_new__tempuri__HasMessageResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__HasMessageResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__HasMessageResponse * soap_new_req__tempuri__HasMessageResponse(
	struct soap *soap)
{
	_tempuri__HasMessageResponse *_p = ::soap_new__tempuri__HasMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__HasMessageResponse * soap_new_set__tempuri__HasMessageResponse(
	struct soap *soap,
	bool *HasMessageResult)
{
	_tempuri__HasMessageResponse *_p = ::soap_new__tempuri__HasMessageResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__HasMessageResponse::HasMessageResult = HasMessageResult;
	}
	return _p;
}

inline int soap_write__tempuri__HasMessageResponse(struct soap *soap, _tempuri__HasMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasMessageResponse", p->soap_type() == SOAP_TYPE__tempuri__HasMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__HasMessageResponse(struct soap *soap, const char *URL, _tempuri__HasMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasMessageResponse", p->soap_type() == SOAP_TYPE__tempuri__HasMessageResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__HasMessageResponse(struct soap *soap, const char *URL, _tempuri__HasMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasMessageResponse", p->soap_type() == SOAP_TYPE__tempuri__HasMessageResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__HasMessageResponse(struct soap *soap, const char *URL, _tempuri__HasMessageResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasMessageResponse", p->soap_type() == SOAP_TYPE__tempuri__HasMessageResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__HasMessageResponse * SOAP_FMAC4 soap_get__tempuri__HasMessageResponse(struct soap*, _tempuri__HasMessageResponse *, const char*, const char*);

inline int soap_read__tempuri__HasMessageResponse(struct soap *soap, _tempuri__HasMessageResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__HasMessageResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__HasMessageResponse(struct soap *soap, const char *URL, _tempuri__HasMessageResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__HasMessageResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__HasMessageResponse(struct soap *soap, _tempuri__HasMessageResponse *p)
{
	if (::soap_read__tempuri__HasMessageResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__HasMessage_DEFINED
#define SOAP_TYPE__tempuri__HasMessage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__HasMessage(struct soap*, const char*, int, const _tempuri__HasMessage *, const char*);
SOAP_FMAC3 _tempuri__HasMessage * SOAP_FMAC4 soap_in__tempuri__HasMessage(struct soap*, const char*, _tempuri__HasMessage *, const char*);
SOAP_FMAC1 _tempuri__HasMessage * SOAP_FMAC2 soap_instantiate__tempuri__HasMessage(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__HasMessage * soap_new__tempuri__HasMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__HasMessage(soap, n, NULL, NULL, NULL);
}

inline _tempuri__HasMessage * soap_new_req__tempuri__HasMessage(
	struct soap *soap)
{
	_tempuri__HasMessage *_p = ::soap_new__tempuri__HasMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__HasMessage * soap_new_set__tempuri__HasMessage(
	struct soap *soap)
{
	_tempuri__HasMessage *_p = ::soap_new__tempuri__HasMessage(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__HasMessage(struct soap *soap, _tempuri__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasMessage", p->soap_type() == SOAP_TYPE__tempuri__HasMessage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__HasMessage(struct soap *soap, const char *URL, _tempuri__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasMessage", p->soap_type() == SOAP_TYPE__tempuri__HasMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__HasMessage(struct soap *soap, const char *URL, _tempuri__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasMessage", p->soap_type() == SOAP_TYPE__tempuri__HasMessage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__HasMessage(struct soap *soap, const char *URL, _tempuri__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:HasMessage", p->soap_type() == SOAP_TYPE__tempuri__HasMessage ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__HasMessage * SOAP_FMAC4 soap_get__tempuri__HasMessage(struct soap*, _tempuri__HasMessage *, const char*, const char*);

inline int soap_read__tempuri__HasMessage(struct soap *soap, _tempuri__HasMessage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__HasMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__HasMessage(struct soap *soap, const char *URL, _tempuri__HasMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__HasMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__HasMessage(struct soap *soap, _tempuri__HasMessage *p)
{
	if (::soap_read__tempuri__HasMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__IsSamplePlateTrayInResponse_DEFINED
#define SOAP_TYPE__tempuri__IsSamplePlateTrayInResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__IsSamplePlateTrayInResponse(struct soap*, const char*, int, const _tempuri__IsSamplePlateTrayInResponse *, const char*);
SOAP_FMAC3 _tempuri__IsSamplePlateTrayInResponse * SOAP_FMAC4 soap_in__tempuri__IsSamplePlateTrayInResponse(struct soap*, const char*, _tempuri__IsSamplePlateTrayInResponse *, const char*);
SOAP_FMAC1 _tempuri__IsSamplePlateTrayInResponse * SOAP_FMAC2 soap_instantiate__tempuri__IsSamplePlateTrayInResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__IsSamplePlateTrayInResponse * soap_new__tempuri__IsSamplePlateTrayInResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__IsSamplePlateTrayInResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__IsSamplePlateTrayInResponse * soap_new_req__tempuri__IsSamplePlateTrayInResponse(
	struct soap *soap)
{
	_tempuri__IsSamplePlateTrayInResponse *_p = ::soap_new__tempuri__IsSamplePlateTrayInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__IsSamplePlateTrayInResponse * soap_new_set__tempuri__IsSamplePlateTrayInResponse(
	struct soap *soap,
	int *IsSamplePlateTrayInResult)
{
	_tempuri__IsSamplePlateTrayInResponse *_p = ::soap_new__tempuri__IsSamplePlateTrayInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__IsSamplePlateTrayInResponse::IsSamplePlateTrayInResult = IsSamplePlateTrayInResult;
	}
	return _p;
}

inline int soap_write__tempuri__IsSamplePlateTrayInResponse(struct soap *soap, _tempuri__IsSamplePlateTrayInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsSamplePlateTrayInResponse", p->soap_type() == SOAP_TYPE__tempuri__IsSamplePlateTrayInResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__IsSamplePlateTrayInResponse(struct soap *soap, const char *URL, _tempuri__IsSamplePlateTrayInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsSamplePlateTrayInResponse", p->soap_type() == SOAP_TYPE__tempuri__IsSamplePlateTrayInResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__IsSamplePlateTrayInResponse(struct soap *soap, const char *URL, _tempuri__IsSamplePlateTrayInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsSamplePlateTrayInResponse", p->soap_type() == SOAP_TYPE__tempuri__IsSamplePlateTrayInResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__IsSamplePlateTrayInResponse(struct soap *soap, const char *URL, _tempuri__IsSamplePlateTrayInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsSamplePlateTrayInResponse", p->soap_type() == SOAP_TYPE__tempuri__IsSamplePlateTrayInResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__IsSamplePlateTrayInResponse * SOAP_FMAC4 soap_get__tempuri__IsSamplePlateTrayInResponse(struct soap*, _tempuri__IsSamplePlateTrayInResponse *, const char*, const char*);

inline int soap_read__tempuri__IsSamplePlateTrayInResponse(struct soap *soap, _tempuri__IsSamplePlateTrayInResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__IsSamplePlateTrayInResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__IsSamplePlateTrayInResponse(struct soap *soap, const char *URL, _tempuri__IsSamplePlateTrayInResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__IsSamplePlateTrayInResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__IsSamplePlateTrayInResponse(struct soap *soap, _tempuri__IsSamplePlateTrayInResponse *p)
{
	if (::soap_read__tempuri__IsSamplePlateTrayInResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__IsSamplePlateTrayIn_DEFINED
#define SOAP_TYPE__tempuri__IsSamplePlateTrayIn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__IsSamplePlateTrayIn(struct soap*, const char*, int, const _tempuri__IsSamplePlateTrayIn *, const char*);
SOAP_FMAC3 _tempuri__IsSamplePlateTrayIn * SOAP_FMAC4 soap_in__tempuri__IsSamplePlateTrayIn(struct soap*, const char*, _tempuri__IsSamplePlateTrayIn *, const char*);
SOAP_FMAC1 _tempuri__IsSamplePlateTrayIn * SOAP_FMAC2 soap_instantiate__tempuri__IsSamplePlateTrayIn(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__IsSamplePlateTrayIn * soap_new__tempuri__IsSamplePlateTrayIn(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__IsSamplePlateTrayIn(soap, n, NULL, NULL, NULL);
}

inline _tempuri__IsSamplePlateTrayIn * soap_new_req__tempuri__IsSamplePlateTrayIn(
	struct soap *soap)
{
	_tempuri__IsSamplePlateTrayIn *_p = ::soap_new__tempuri__IsSamplePlateTrayIn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__IsSamplePlateTrayIn * soap_new_set__tempuri__IsSamplePlateTrayIn(
	struct soap *soap)
{
	_tempuri__IsSamplePlateTrayIn *_p = ::soap_new__tempuri__IsSamplePlateTrayIn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__IsSamplePlateTrayIn(struct soap *soap, _tempuri__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsSamplePlateTrayIn", p->soap_type() == SOAP_TYPE__tempuri__IsSamplePlateTrayIn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__IsSamplePlateTrayIn(struct soap *soap, const char *URL, _tempuri__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsSamplePlateTrayIn", p->soap_type() == SOAP_TYPE__tempuri__IsSamplePlateTrayIn ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__IsSamplePlateTrayIn(struct soap *soap, const char *URL, _tempuri__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsSamplePlateTrayIn", p->soap_type() == SOAP_TYPE__tempuri__IsSamplePlateTrayIn ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__IsSamplePlateTrayIn(struct soap *soap, const char *URL, _tempuri__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsSamplePlateTrayIn", p->soap_type() == SOAP_TYPE__tempuri__IsSamplePlateTrayIn ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__IsSamplePlateTrayIn * SOAP_FMAC4 soap_get__tempuri__IsSamplePlateTrayIn(struct soap*, _tempuri__IsSamplePlateTrayIn *, const char*, const char*);

inline int soap_read__tempuri__IsSamplePlateTrayIn(struct soap *soap, _tempuri__IsSamplePlateTrayIn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__IsSamplePlateTrayIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__IsSamplePlateTrayIn(struct soap *soap, const char *URL, _tempuri__IsSamplePlateTrayIn *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__IsSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__IsSamplePlateTrayIn(struct soap *soap, _tempuri__IsSamplePlateTrayIn *p)
{
	if (::soap_read__tempuri__IsSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__IsChipDockedResponse_DEFINED
#define SOAP_TYPE__tempuri__IsChipDockedResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__IsChipDockedResponse(struct soap*, const char*, int, const _tempuri__IsChipDockedResponse *, const char*);
SOAP_FMAC3 _tempuri__IsChipDockedResponse * SOAP_FMAC4 soap_in__tempuri__IsChipDockedResponse(struct soap*, const char*, _tempuri__IsChipDockedResponse *, const char*);
SOAP_FMAC1 _tempuri__IsChipDockedResponse * SOAP_FMAC2 soap_instantiate__tempuri__IsChipDockedResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__IsChipDockedResponse * soap_new__tempuri__IsChipDockedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__IsChipDockedResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__IsChipDockedResponse * soap_new_req__tempuri__IsChipDockedResponse(
	struct soap *soap)
{
	_tempuri__IsChipDockedResponse *_p = ::soap_new__tempuri__IsChipDockedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__IsChipDockedResponse * soap_new_set__tempuri__IsChipDockedResponse(
	struct soap *soap,
	int *IsChipDockedResult)
{
	_tempuri__IsChipDockedResponse *_p = ::soap_new__tempuri__IsChipDockedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__IsChipDockedResponse::IsChipDockedResult = IsChipDockedResult;
	}
	return _p;
}

inline int soap_write__tempuri__IsChipDockedResponse(struct soap *soap, _tempuri__IsChipDockedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsChipDockedResponse", p->soap_type() == SOAP_TYPE__tempuri__IsChipDockedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__IsChipDockedResponse(struct soap *soap, const char *URL, _tempuri__IsChipDockedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsChipDockedResponse", p->soap_type() == SOAP_TYPE__tempuri__IsChipDockedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__IsChipDockedResponse(struct soap *soap, const char *URL, _tempuri__IsChipDockedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsChipDockedResponse", p->soap_type() == SOAP_TYPE__tempuri__IsChipDockedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__IsChipDockedResponse(struct soap *soap, const char *URL, _tempuri__IsChipDockedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsChipDockedResponse", p->soap_type() == SOAP_TYPE__tempuri__IsChipDockedResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__IsChipDockedResponse * SOAP_FMAC4 soap_get__tempuri__IsChipDockedResponse(struct soap*, _tempuri__IsChipDockedResponse *, const char*, const char*);

inline int soap_read__tempuri__IsChipDockedResponse(struct soap *soap, _tempuri__IsChipDockedResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__IsChipDockedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__IsChipDockedResponse(struct soap *soap, const char *URL, _tempuri__IsChipDockedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__IsChipDockedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__IsChipDockedResponse(struct soap *soap, _tempuri__IsChipDockedResponse *p)
{
	if (::soap_read__tempuri__IsChipDockedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__IsChipDocked_DEFINED
#define SOAP_TYPE__tempuri__IsChipDocked_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__IsChipDocked(struct soap*, const char*, int, const _tempuri__IsChipDocked *, const char*);
SOAP_FMAC3 _tempuri__IsChipDocked * SOAP_FMAC4 soap_in__tempuri__IsChipDocked(struct soap*, const char*, _tempuri__IsChipDocked *, const char*);
SOAP_FMAC1 _tempuri__IsChipDocked * SOAP_FMAC2 soap_instantiate__tempuri__IsChipDocked(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__IsChipDocked * soap_new__tempuri__IsChipDocked(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__IsChipDocked(soap, n, NULL, NULL, NULL);
}

inline _tempuri__IsChipDocked * soap_new_req__tempuri__IsChipDocked(
	struct soap *soap)
{
	_tempuri__IsChipDocked *_p = ::soap_new__tempuri__IsChipDocked(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__IsChipDocked * soap_new_set__tempuri__IsChipDocked(
	struct soap *soap)
{
	_tempuri__IsChipDocked *_p = ::soap_new__tempuri__IsChipDocked(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__IsChipDocked(struct soap *soap, _tempuri__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsChipDocked", p->soap_type() == SOAP_TYPE__tempuri__IsChipDocked ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__IsChipDocked(struct soap *soap, const char *URL, _tempuri__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsChipDocked", p->soap_type() == SOAP_TYPE__tempuri__IsChipDocked ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__IsChipDocked(struct soap *soap, const char *URL, _tempuri__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsChipDocked", p->soap_type() == SOAP_TYPE__tempuri__IsChipDocked ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__IsChipDocked(struct soap *soap, const char *URL, _tempuri__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:IsChipDocked", p->soap_type() == SOAP_TYPE__tempuri__IsChipDocked ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__IsChipDocked * SOAP_FMAC4 soap_get__tempuri__IsChipDocked(struct soap*, _tempuri__IsChipDocked *, const char*, const char*);

inline int soap_read__tempuri__IsChipDocked(struct soap *soap, _tempuri__IsChipDocked *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__IsChipDocked(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__IsChipDocked(struct soap *soap, const char *URL, _tempuri__IsChipDocked *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__IsChipDocked(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__IsChipDocked(struct soap *soap, _tempuri__IsChipDocked *p)
{
	if (::soap_read__tempuri__IsChipDocked(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetOperationModeResponse_DEFINED
#define SOAP_TYPE__tempuri__GetOperationModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetOperationModeResponse(struct soap*, const char*, int, const _tempuri__GetOperationModeResponse *, const char*);
SOAP_FMAC3 _tempuri__GetOperationModeResponse * SOAP_FMAC4 soap_in__tempuri__GetOperationModeResponse(struct soap*, const char*, _tempuri__GetOperationModeResponse *, const char*);
SOAP_FMAC1 _tempuri__GetOperationModeResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetOperationModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetOperationModeResponse * soap_new__tempuri__GetOperationModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetOperationModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetOperationModeResponse * soap_new_req__tempuri__GetOperationModeResponse(
	struct soap *soap)
{
	_tempuri__GetOperationModeResponse *_p = ::soap_new__tempuri__GetOperationModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetOperationModeResponse * soap_new_set__tempuri__GetOperationModeResponse(
	struct soap *soap,
	int *GetOperationModeResult)
{
	_tempuri__GetOperationModeResponse *_p = ::soap_new__tempuri__GetOperationModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetOperationModeResponse::GetOperationModeResult = GetOperationModeResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetOperationModeResponse(struct soap *soap, _tempuri__GetOperationModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetOperationModeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetOperationModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetOperationModeResponse(struct soap *soap, const char *URL, _tempuri__GetOperationModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetOperationModeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetOperationModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetOperationModeResponse(struct soap *soap, const char *URL, _tempuri__GetOperationModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetOperationModeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetOperationModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetOperationModeResponse(struct soap *soap, const char *URL, _tempuri__GetOperationModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetOperationModeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetOperationModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetOperationModeResponse * SOAP_FMAC4 soap_get__tempuri__GetOperationModeResponse(struct soap*, _tempuri__GetOperationModeResponse *, const char*, const char*);

inline int soap_read__tempuri__GetOperationModeResponse(struct soap *soap, _tempuri__GetOperationModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetOperationModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetOperationModeResponse(struct soap *soap, const char *URL, _tempuri__GetOperationModeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetOperationModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetOperationModeResponse(struct soap *soap, _tempuri__GetOperationModeResponse *p)
{
	if (::soap_read__tempuri__GetOperationModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetOperationMode_DEFINED
#define SOAP_TYPE__tempuri__GetOperationMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetOperationMode(struct soap*, const char*, int, const _tempuri__GetOperationMode *, const char*);
SOAP_FMAC3 _tempuri__GetOperationMode * SOAP_FMAC4 soap_in__tempuri__GetOperationMode(struct soap*, const char*, _tempuri__GetOperationMode *, const char*);
SOAP_FMAC1 _tempuri__GetOperationMode * SOAP_FMAC2 soap_instantiate__tempuri__GetOperationMode(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetOperationMode * soap_new__tempuri__GetOperationMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetOperationMode(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetOperationMode * soap_new_req__tempuri__GetOperationMode(
	struct soap *soap)
{
	_tempuri__GetOperationMode *_p = ::soap_new__tempuri__GetOperationMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetOperationMode * soap_new_set__tempuri__GetOperationMode(
	struct soap *soap)
{
	_tempuri__GetOperationMode *_p = ::soap_new__tempuri__GetOperationMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetOperationMode(struct soap *soap, _tempuri__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetOperationMode", p->soap_type() == SOAP_TYPE__tempuri__GetOperationMode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetOperationMode(struct soap *soap, const char *URL, _tempuri__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetOperationMode", p->soap_type() == SOAP_TYPE__tempuri__GetOperationMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetOperationMode(struct soap *soap, const char *URL, _tempuri__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetOperationMode", p->soap_type() == SOAP_TYPE__tempuri__GetOperationMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetOperationMode(struct soap *soap, const char *URL, _tempuri__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetOperationMode", p->soap_type() == SOAP_TYPE__tempuri__GetOperationMode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetOperationMode * SOAP_FMAC4 soap_get__tempuri__GetOperationMode(struct soap*, _tempuri__GetOperationMode *, const char*, const char*);

inline int soap_read__tempuri__GetOperationMode(struct soap *soap, _tempuri__GetOperationMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetOperationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetOperationMode(struct soap *soap, const char *URL, _tempuri__GetOperationMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetOperationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetOperationMode(struct soap *soap, _tempuri__GetOperationMode *p)
{
	if (::soap_read__tempuri__GetOperationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__RunMaintenanceProcedureResponse_DEFINED
#define SOAP_TYPE__tempuri__RunMaintenanceProcedureResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__RunMaintenanceProcedureResponse(struct soap*, const char*, int, const _tempuri__RunMaintenanceProcedureResponse *, const char*);
SOAP_FMAC3 _tempuri__RunMaintenanceProcedureResponse * SOAP_FMAC4 soap_in__tempuri__RunMaintenanceProcedureResponse(struct soap*, const char*, _tempuri__RunMaintenanceProcedureResponse *, const char*);
SOAP_FMAC1 _tempuri__RunMaintenanceProcedureResponse * SOAP_FMAC2 soap_instantiate__tempuri__RunMaintenanceProcedureResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__RunMaintenanceProcedureResponse * soap_new__tempuri__RunMaintenanceProcedureResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__RunMaintenanceProcedureResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__RunMaintenanceProcedureResponse * soap_new_req__tempuri__RunMaintenanceProcedureResponse(
	struct soap *soap)
{
	_tempuri__RunMaintenanceProcedureResponse *_p = ::soap_new__tempuri__RunMaintenanceProcedureResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__RunMaintenanceProcedureResponse * soap_new_set__tempuri__RunMaintenanceProcedureResponse(
	struct soap *soap,
	bool *RunMaintenanceProcedureResult)
{
	_tempuri__RunMaintenanceProcedureResponse *_p = ::soap_new__tempuri__RunMaintenanceProcedureResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__RunMaintenanceProcedureResponse::RunMaintenanceProcedureResult = RunMaintenanceProcedureResult;
	}
	return _p;
}

inline int soap_write__tempuri__RunMaintenanceProcedureResponse(struct soap *soap, _tempuri__RunMaintenanceProcedureResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:RunMaintenanceProcedureResponse", p->soap_type() == SOAP_TYPE__tempuri__RunMaintenanceProcedureResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__RunMaintenanceProcedureResponse(struct soap *soap, const char *URL, _tempuri__RunMaintenanceProcedureResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:RunMaintenanceProcedureResponse", p->soap_type() == SOAP_TYPE__tempuri__RunMaintenanceProcedureResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__RunMaintenanceProcedureResponse(struct soap *soap, const char *URL, _tempuri__RunMaintenanceProcedureResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:RunMaintenanceProcedureResponse", p->soap_type() == SOAP_TYPE__tempuri__RunMaintenanceProcedureResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__RunMaintenanceProcedureResponse(struct soap *soap, const char *URL, _tempuri__RunMaintenanceProcedureResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:RunMaintenanceProcedureResponse", p->soap_type() == SOAP_TYPE__tempuri__RunMaintenanceProcedureResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__RunMaintenanceProcedureResponse * SOAP_FMAC4 soap_get__tempuri__RunMaintenanceProcedureResponse(struct soap*, _tempuri__RunMaintenanceProcedureResponse *, const char*, const char*);

inline int soap_read__tempuri__RunMaintenanceProcedureResponse(struct soap *soap, _tempuri__RunMaintenanceProcedureResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__RunMaintenanceProcedureResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__RunMaintenanceProcedureResponse(struct soap *soap, const char *URL, _tempuri__RunMaintenanceProcedureResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__RunMaintenanceProcedureResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__RunMaintenanceProcedureResponse(struct soap *soap, _tempuri__RunMaintenanceProcedureResponse *p)
{
	if (::soap_read__tempuri__RunMaintenanceProcedureResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__RunMaintenanceProcedure_DEFINED
#define SOAP_TYPE__tempuri__RunMaintenanceProcedure_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__RunMaintenanceProcedure(struct soap*, const char*, int, const _tempuri__RunMaintenanceProcedure *, const char*);
SOAP_FMAC3 _tempuri__RunMaintenanceProcedure * SOAP_FMAC4 soap_in__tempuri__RunMaintenanceProcedure(struct soap*, const char*, _tempuri__RunMaintenanceProcedure *, const char*);
SOAP_FMAC1 _tempuri__RunMaintenanceProcedure * SOAP_FMAC2 soap_instantiate__tempuri__RunMaintenanceProcedure(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__RunMaintenanceProcedure * soap_new__tempuri__RunMaintenanceProcedure(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__RunMaintenanceProcedure(soap, n, NULL, NULL, NULL);
}

inline _tempuri__RunMaintenanceProcedure * soap_new_req__tempuri__RunMaintenanceProcedure(
	struct soap *soap)
{
	_tempuri__RunMaintenanceProcedure *_p = ::soap_new__tempuri__RunMaintenanceProcedure(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__RunMaintenanceProcedure * soap_new_set__tempuri__RunMaintenanceProcedure(
	struct soap *soap,
	std::string *procedureName)
{
	_tempuri__RunMaintenanceProcedure *_p = ::soap_new__tempuri__RunMaintenanceProcedure(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__RunMaintenanceProcedure::procedureName = procedureName;
	}
	return _p;
}

inline int soap_write__tempuri__RunMaintenanceProcedure(struct soap *soap, _tempuri__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:RunMaintenanceProcedure", p->soap_type() == SOAP_TYPE__tempuri__RunMaintenanceProcedure ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__RunMaintenanceProcedure(struct soap *soap, const char *URL, _tempuri__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:RunMaintenanceProcedure", p->soap_type() == SOAP_TYPE__tempuri__RunMaintenanceProcedure ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__RunMaintenanceProcedure(struct soap *soap, const char *URL, _tempuri__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:RunMaintenanceProcedure", p->soap_type() == SOAP_TYPE__tempuri__RunMaintenanceProcedure ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__RunMaintenanceProcedure(struct soap *soap, const char *URL, _tempuri__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:RunMaintenanceProcedure", p->soap_type() == SOAP_TYPE__tempuri__RunMaintenanceProcedure ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__RunMaintenanceProcedure * SOAP_FMAC4 soap_get__tempuri__RunMaintenanceProcedure(struct soap*, _tempuri__RunMaintenanceProcedure *, const char*, const char*);

inline int soap_read__tempuri__RunMaintenanceProcedure(struct soap *soap, _tempuri__RunMaintenanceProcedure *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__RunMaintenanceProcedure(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__RunMaintenanceProcedure(struct soap *soap, const char *URL, _tempuri__RunMaintenanceProcedure *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__RunMaintenanceProcedure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__RunMaintenanceProcedure(struct soap *soap, _tempuri__RunMaintenanceProcedure *p)
{
	if (::soap_read__tempuri__RunMaintenanceProcedure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfMaintenanceProceduresResponse_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfMaintenanceProceduresResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap*, const char*, int, const _tempuri__GetNamesOfMaintenanceProceduresResponse *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfMaintenanceProceduresResponse * SOAP_FMAC4 soap_in__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap*, const char*, _tempuri__GetNamesOfMaintenanceProceduresResponse *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfMaintenanceProceduresResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfMaintenanceProceduresResponse * soap_new__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfMaintenanceProceduresResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfMaintenanceProceduresResponse * soap_new_req__tempuri__GetNamesOfMaintenanceProceduresResponse(
	struct soap *soap)
{
	_tempuri__GetNamesOfMaintenanceProceduresResponse *_p = ::soap_new__tempuri__GetNamesOfMaintenanceProceduresResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfMaintenanceProceduresResponse * soap_new_set__tempuri__GetNamesOfMaintenanceProceduresResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetNamesOfMaintenanceProceduresResult)
{
	_tempuri__GetNamesOfMaintenanceProceduresResponse *_p = ::soap_new__tempuri__GetNamesOfMaintenanceProceduresResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetNamesOfMaintenanceProceduresResponse::GetNamesOfMaintenanceProceduresResult = GetNamesOfMaintenanceProceduresResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap *soap, _tempuri__GetNamesOfMaintenanceProceduresResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMaintenanceProceduresResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMaintenanceProceduresResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMaintenanceProceduresResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMaintenanceProceduresResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMaintenanceProceduresResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMaintenanceProceduresResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMaintenanceProceduresResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMaintenanceProceduresResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMaintenanceProceduresResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMaintenanceProceduresResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMaintenanceProceduresResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfMaintenanceProceduresResponse * SOAP_FMAC4 soap_get__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap*, _tempuri__GetNamesOfMaintenanceProceduresResponse *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap *soap, _tempuri__GetNamesOfMaintenanceProceduresResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfMaintenanceProceduresResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMaintenanceProceduresResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfMaintenanceProceduresResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfMaintenanceProceduresResponse(struct soap *soap, _tempuri__GetNamesOfMaintenanceProceduresResponse *p)
{
	if (::soap_read__tempuri__GetNamesOfMaintenanceProceduresResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfMaintenanceProcedures_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfMaintenanceProcedures_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfMaintenanceProcedures(struct soap*, const char*, int, const _tempuri__GetNamesOfMaintenanceProcedures *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfMaintenanceProcedures * SOAP_FMAC4 soap_in__tempuri__GetNamesOfMaintenanceProcedures(struct soap*, const char*, _tempuri__GetNamesOfMaintenanceProcedures *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfMaintenanceProcedures * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfMaintenanceProcedures(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfMaintenanceProcedures * soap_new__tempuri__GetNamesOfMaintenanceProcedures(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfMaintenanceProcedures(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfMaintenanceProcedures * soap_new_req__tempuri__GetNamesOfMaintenanceProcedures(
	struct soap *soap)
{
	_tempuri__GetNamesOfMaintenanceProcedures *_p = ::soap_new__tempuri__GetNamesOfMaintenanceProcedures(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfMaintenanceProcedures * soap_new_set__tempuri__GetNamesOfMaintenanceProcedures(
	struct soap *soap)
{
	_tempuri__GetNamesOfMaintenanceProcedures *_p = ::soap_new__tempuri__GetNamesOfMaintenanceProcedures(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfMaintenanceProcedures(struct soap *soap, _tempuri__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMaintenanceProcedures", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMaintenanceProcedures ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, _tempuri__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMaintenanceProcedures", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMaintenanceProcedures ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, _tempuri__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMaintenanceProcedures", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMaintenanceProcedures ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, _tempuri__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMaintenanceProcedures", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMaintenanceProcedures ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfMaintenanceProcedures * SOAP_FMAC4 soap_get__tempuri__GetNamesOfMaintenanceProcedures(struct soap*, _tempuri__GetNamesOfMaintenanceProcedures *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfMaintenanceProcedures(struct soap *soap, _tempuri__GetNamesOfMaintenanceProcedures *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfMaintenanceProcedures(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, _tempuri__GetNamesOfMaintenanceProcedures *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfMaintenanceProcedures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfMaintenanceProcedures(struct soap *soap, _tempuri__GetNamesOfMaintenanceProcedures *p)
{
	if (::soap_read__tempuri__GetNamesOfMaintenanceProcedures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetStandbyAfterFinishResponse_DEFINED
#define SOAP_TYPE__tempuri__GetStandbyAfterFinishResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetStandbyAfterFinishResponse(struct soap*, const char*, int, const _tempuri__GetStandbyAfterFinishResponse *, const char*);
SOAP_FMAC3 _tempuri__GetStandbyAfterFinishResponse * SOAP_FMAC4 soap_in__tempuri__GetStandbyAfterFinishResponse(struct soap*, const char*, _tempuri__GetStandbyAfterFinishResponse *, const char*);
SOAP_FMAC1 _tempuri__GetStandbyAfterFinishResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetStandbyAfterFinishResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetStandbyAfterFinishResponse * soap_new__tempuri__GetStandbyAfterFinishResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetStandbyAfterFinishResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetStandbyAfterFinishResponse * soap_new_req__tempuri__GetStandbyAfterFinishResponse(
	struct soap *soap)
{
	_tempuri__GetStandbyAfterFinishResponse *_p = ::soap_new__tempuri__GetStandbyAfterFinishResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetStandbyAfterFinishResponse * soap_new_set__tempuri__GetStandbyAfterFinishResponse(
	struct soap *soap,
	bool *GetStandbyAfterFinishResult)
{
	_tempuri__GetStandbyAfterFinishResponse *_p = ::soap_new__tempuri__GetStandbyAfterFinishResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetStandbyAfterFinishResponse::GetStandbyAfterFinishResult = GetStandbyAfterFinishResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetStandbyAfterFinishResponse(struct soap *soap, _tempuri__GetStandbyAfterFinishResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetStandbyAfterFinishResponse", p->soap_type() == SOAP_TYPE__tempuri__GetStandbyAfterFinishResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetStandbyAfterFinishResponse(struct soap *soap, const char *URL, _tempuri__GetStandbyAfterFinishResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetStandbyAfterFinishResponse", p->soap_type() == SOAP_TYPE__tempuri__GetStandbyAfterFinishResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetStandbyAfterFinishResponse(struct soap *soap, const char *URL, _tempuri__GetStandbyAfterFinishResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetStandbyAfterFinishResponse", p->soap_type() == SOAP_TYPE__tempuri__GetStandbyAfterFinishResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetStandbyAfterFinishResponse(struct soap *soap, const char *URL, _tempuri__GetStandbyAfterFinishResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetStandbyAfterFinishResponse", p->soap_type() == SOAP_TYPE__tempuri__GetStandbyAfterFinishResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetStandbyAfterFinishResponse * SOAP_FMAC4 soap_get__tempuri__GetStandbyAfterFinishResponse(struct soap*, _tempuri__GetStandbyAfterFinishResponse *, const char*, const char*);

inline int soap_read__tempuri__GetStandbyAfterFinishResponse(struct soap *soap, _tempuri__GetStandbyAfterFinishResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetStandbyAfterFinishResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetStandbyAfterFinishResponse(struct soap *soap, const char *URL, _tempuri__GetStandbyAfterFinishResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetStandbyAfterFinishResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetStandbyAfterFinishResponse(struct soap *soap, _tempuri__GetStandbyAfterFinishResponse *p)
{
	if (::soap_read__tempuri__GetStandbyAfterFinishResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetStandbyAfterFinish_DEFINED
#define SOAP_TYPE__tempuri__GetStandbyAfterFinish_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetStandbyAfterFinish(struct soap*, const char*, int, const _tempuri__GetStandbyAfterFinish *, const char*);
SOAP_FMAC3 _tempuri__GetStandbyAfterFinish * SOAP_FMAC4 soap_in__tempuri__GetStandbyAfterFinish(struct soap*, const char*, _tempuri__GetStandbyAfterFinish *, const char*);
SOAP_FMAC1 _tempuri__GetStandbyAfterFinish * SOAP_FMAC2 soap_instantiate__tempuri__GetStandbyAfterFinish(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetStandbyAfterFinish * soap_new__tempuri__GetStandbyAfterFinish(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetStandbyAfterFinish(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetStandbyAfterFinish * soap_new_req__tempuri__GetStandbyAfterFinish(
	struct soap *soap)
{
	_tempuri__GetStandbyAfterFinish *_p = ::soap_new__tempuri__GetStandbyAfterFinish(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetStandbyAfterFinish * soap_new_set__tempuri__GetStandbyAfterFinish(
	struct soap *soap)
{
	_tempuri__GetStandbyAfterFinish *_p = ::soap_new__tempuri__GetStandbyAfterFinish(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetStandbyAfterFinish(struct soap *soap, _tempuri__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetStandbyAfterFinish", p->soap_type() == SOAP_TYPE__tempuri__GetStandbyAfterFinish ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetStandbyAfterFinish(struct soap *soap, const char *URL, _tempuri__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetStandbyAfterFinish", p->soap_type() == SOAP_TYPE__tempuri__GetStandbyAfterFinish ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetStandbyAfterFinish(struct soap *soap, const char *URL, _tempuri__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetStandbyAfterFinish", p->soap_type() == SOAP_TYPE__tempuri__GetStandbyAfterFinish ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetStandbyAfterFinish(struct soap *soap, const char *URL, _tempuri__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetStandbyAfterFinish", p->soap_type() == SOAP_TYPE__tempuri__GetStandbyAfterFinish ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetStandbyAfterFinish * SOAP_FMAC4 soap_get__tempuri__GetStandbyAfterFinish(struct soap*, _tempuri__GetStandbyAfterFinish *, const char*, const char*);

inline int soap_read__tempuri__GetStandbyAfterFinish(struct soap *soap, _tempuri__GetStandbyAfterFinish *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetStandbyAfterFinish(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetStandbyAfterFinish(struct soap *soap, const char *URL, _tempuri__GetStandbyAfterFinish *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetStandbyAfterFinish(struct soap *soap, _tempuri__GetStandbyAfterFinish *p)
{
	if (::soap_read__tempuri__GetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__SetStandbyAfterFinishResponse_DEFINED
#define SOAP_TYPE__tempuri__SetStandbyAfterFinishResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetStandbyAfterFinishResponse(struct soap*, const char*, int, const _tempuri__SetStandbyAfterFinishResponse *, const char*);
SOAP_FMAC3 _tempuri__SetStandbyAfterFinishResponse * SOAP_FMAC4 soap_in__tempuri__SetStandbyAfterFinishResponse(struct soap*, const char*, _tempuri__SetStandbyAfterFinishResponse *, const char*);
SOAP_FMAC1 _tempuri__SetStandbyAfterFinishResponse * SOAP_FMAC2 soap_instantiate__tempuri__SetStandbyAfterFinishResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SetStandbyAfterFinishResponse * soap_new__tempuri__SetStandbyAfterFinishResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SetStandbyAfterFinishResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SetStandbyAfterFinishResponse * soap_new_req__tempuri__SetStandbyAfterFinishResponse(
	struct soap *soap)
{
	_tempuri__SetStandbyAfterFinishResponse *_p = ::soap_new__tempuri__SetStandbyAfterFinishResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SetStandbyAfterFinishResponse * soap_new_set__tempuri__SetStandbyAfterFinishResponse(
	struct soap *soap,
	bool *SetStandbyAfterFinishResult)
{
	_tempuri__SetStandbyAfterFinishResponse *_p = ::soap_new__tempuri__SetStandbyAfterFinishResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SetStandbyAfterFinishResponse::SetStandbyAfterFinishResult = SetStandbyAfterFinishResult;
	}
	return _p;
}

inline int soap_write__tempuri__SetStandbyAfterFinishResponse(struct soap *soap, _tempuri__SetStandbyAfterFinishResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetStandbyAfterFinishResponse", p->soap_type() == SOAP_TYPE__tempuri__SetStandbyAfterFinishResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SetStandbyAfterFinishResponse(struct soap *soap, const char *URL, _tempuri__SetStandbyAfterFinishResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetStandbyAfterFinishResponse", p->soap_type() == SOAP_TYPE__tempuri__SetStandbyAfterFinishResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__SetStandbyAfterFinishResponse(struct soap *soap, const char *URL, _tempuri__SetStandbyAfterFinishResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetStandbyAfterFinishResponse", p->soap_type() == SOAP_TYPE__tempuri__SetStandbyAfterFinishResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SetStandbyAfterFinishResponse(struct soap *soap, const char *URL, _tempuri__SetStandbyAfterFinishResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetStandbyAfterFinishResponse", p->soap_type() == SOAP_TYPE__tempuri__SetStandbyAfterFinishResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SetStandbyAfterFinishResponse * SOAP_FMAC4 soap_get__tempuri__SetStandbyAfterFinishResponse(struct soap*, _tempuri__SetStandbyAfterFinishResponse *, const char*, const char*);

inline int soap_read__tempuri__SetStandbyAfterFinishResponse(struct soap *soap, _tempuri__SetStandbyAfterFinishResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__SetStandbyAfterFinishResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SetStandbyAfterFinishResponse(struct soap *soap, const char *URL, _tempuri__SetStandbyAfterFinishResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__SetStandbyAfterFinishResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__SetStandbyAfterFinishResponse(struct soap *soap, _tempuri__SetStandbyAfterFinishResponse *p)
{
	if (::soap_read__tempuri__SetStandbyAfterFinishResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__SetStandbyAfterFinish_DEFINED
#define SOAP_TYPE__tempuri__SetStandbyAfterFinish_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetStandbyAfterFinish(struct soap*, const char*, int, const _tempuri__SetStandbyAfterFinish *, const char*);
SOAP_FMAC3 _tempuri__SetStandbyAfterFinish * SOAP_FMAC4 soap_in__tempuri__SetStandbyAfterFinish(struct soap*, const char*, _tempuri__SetStandbyAfterFinish *, const char*);
SOAP_FMAC1 _tempuri__SetStandbyAfterFinish * SOAP_FMAC2 soap_instantiate__tempuri__SetStandbyAfterFinish(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SetStandbyAfterFinish * soap_new__tempuri__SetStandbyAfterFinish(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SetStandbyAfterFinish(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SetStandbyAfterFinish * soap_new_req__tempuri__SetStandbyAfterFinish(
	struct soap *soap)
{
	_tempuri__SetStandbyAfterFinish *_p = ::soap_new__tempuri__SetStandbyAfterFinish(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SetStandbyAfterFinish * soap_new_set__tempuri__SetStandbyAfterFinish(
	struct soap *soap,
	bool *goToStandby)
{
	_tempuri__SetStandbyAfterFinish *_p = ::soap_new__tempuri__SetStandbyAfterFinish(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SetStandbyAfterFinish::goToStandby = goToStandby;
	}
	return _p;
}

inline int soap_write__tempuri__SetStandbyAfterFinish(struct soap *soap, _tempuri__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetStandbyAfterFinish", p->soap_type() == SOAP_TYPE__tempuri__SetStandbyAfterFinish ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SetStandbyAfterFinish(struct soap *soap, const char *URL, _tempuri__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetStandbyAfterFinish", p->soap_type() == SOAP_TYPE__tempuri__SetStandbyAfterFinish ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__SetStandbyAfterFinish(struct soap *soap, const char *URL, _tempuri__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetStandbyAfterFinish", p->soap_type() == SOAP_TYPE__tempuri__SetStandbyAfterFinish ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SetStandbyAfterFinish(struct soap *soap, const char *URL, _tempuri__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetStandbyAfterFinish", p->soap_type() == SOAP_TYPE__tempuri__SetStandbyAfterFinish ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SetStandbyAfterFinish * SOAP_FMAC4 soap_get__tempuri__SetStandbyAfterFinish(struct soap*, _tempuri__SetStandbyAfterFinish *, const char*, const char*);

inline int soap_read__tempuri__SetStandbyAfterFinish(struct soap *soap, _tempuri__SetStandbyAfterFinish *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__SetStandbyAfterFinish(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SetStandbyAfterFinish(struct soap *soap, const char *URL, _tempuri__SetStandbyAfterFinish *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__SetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__SetStandbyAfterFinish(struct soap *soap, _tempuri__SetStandbyAfterFinish *p)
{
	if (::soap_read__tempuri__SetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__LeaveStandbyResponse_DEFINED
#define SOAP_TYPE__tempuri__LeaveStandbyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LeaveStandbyResponse(struct soap*, const char*, int, const _tempuri__LeaveStandbyResponse *, const char*);
SOAP_FMAC3 _tempuri__LeaveStandbyResponse * SOAP_FMAC4 soap_in__tempuri__LeaveStandbyResponse(struct soap*, const char*, _tempuri__LeaveStandbyResponse *, const char*);
SOAP_FMAC1 _tempuri__LeaveStandbyResponse * SOAP_FMAC2 soap_instantiate__tempuri__LeaveStandbyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LeaveStandbyResponse * soap_new__tempuri__LeaveStandbyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LeaveStandbyResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LeaveStandbyResponse * soap_new_req__tempuri__LeaveStandbyResponse(
	struct soap *soap)
{
	_tempuri__LeaveStandbyResponse *_p = ::soap_new__tempuri__LeaveStandbyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LeaveStandbyResponse * soap_new_set__tempuri__LeaveStandbyResponse(
	struct soap *soap,
	bool *LeaveStandbyResult)
{
	_tempuri__LeaveStandbyResponse *_p = ::soap_new__tempuri__LeaveStandbyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__LeaveStandbyResponse::LeaveStandbyResult = LeaveStandbyResult;
	}
	return _p;
}

inline int soap_write__tempuri__LeaveStandbyResponse(struct soap *soap, _tempuri__LeaveStandbyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LeaveStandbyResponse", p->soap_type() == SOAP_TYPE__tempuri__LeaveStandbyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LeaveStandbyResponse(struct soap *soap, const char *URL, _tempuri__LeaveStandbyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LeaveStandbyResponse", p->soap_type() == SOAP_TYPE__tempuri__LeaveStandbyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__LeaveStandbyResponse(struct soap *soap, const char *URL, _tempuri__LeaveStandbyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LeaveStandbyResponse", p->soap_type() == SOAP_TYPE__tempuri__LeaveStandbyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LeaveStandbyResponse(struct soap *soap, const char *URL, _tempuri__LeaveStandbyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LeaveStandbyResponse", p->soap_type() == SOAP_TYPE__tempuri__LeaveStandbyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LeaveStandbyResponse * SOAP_FMAC4 soap_get__tempuri__LeaveStandbyResponse(struct soap*, _tempuri__LeaveStandbyResponse *, const char*, const char*);

inline int soap_read__tempuri__LeaveStandbyResponse(struct soap *soap, _tempuri__LeaveStandbyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__LeaveStandbyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LeaveStandbyResponse(struct soap *soap, const char *URL, _tempuri__LeaveStandbyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__LeaveStandbyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__LeaveStandbyResponse(struct soap *soap, _tempuri__LeaveStandbyResponse *p)
{
	if (::soap_read__tempuri__LeaveStandbyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__LeaveStandby_DEFINED
#define SOAP_TYPE__tempuri__LeaveStandby_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__LeaveStandby(struct soap*, const char*, int, const _tempuri__LeaveStandby *, const char*);
SOAP_FMAC3 _tempuri__LeaveStandby * SOAP_FMAC4 soap_in__tempuri__LeaveStandby(struct soap*, const char*, _tempuri__LeaveStandby *, const char*);
SOAP_FMAC1 _tempuri__LeaveStandby * SOAP_FMAC2 soap_instantiate__tempuri__LeaveStandby(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__LeaveStandby * soap_new__tempuri__LeaveStandby(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__LeaveStandby(soap, n, NULL, NULL, NULL);
}

inline _tempuri__LeaveStandby * soap_new_req__tempuri__LeaveStandby(
	struct soap *soap)
{
	_tempuri__LeaveStandby *_p = ::soap_new__tempuri__LeaveStandby(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__LeaveStandby * soap_new_set__tempuri__LeaveStandby(
	struct soap *soap)
{
	_tempuri__LeaveStandby *_p = ::soap_new__tempuri__LeaveStandby(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__LeaveStandby(struct soap *soap, _tempuri__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LeaveStandby", p->soap_type() == SOAP_TYPE__tempuri__LeaveStandby ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__LeaveStandby(struct soap *soap, const char *URL, _tempuri__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LeaveStandby", p->soap_type() == SOAP_TYPE__tempuri__LeaveStandby ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__LeaveStandby(struct soap *soap, const char *URL, _tempuri__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LeaveStandby", p->soap_type() == SOAP_TYPE__tempuri__LeaveStandby ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__LeaveStandby(struct soap *soap, const char *URL, _tempuri__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:LeaveStandby", p->soap_type() == SOAP_TYPE__tempuri__LeaveStandby ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__LeaveStandby * SOAP_FMAC4 soap_get__tempuri__LeaveStandby(struct soap*, _tempuri__LeaveStandby *, const char*, const char*);

inline int soap_read__tempuri__LeaveStandby(struct soap *soap, _tempuri__LeaveStandby *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__LeaveStandby(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__LeaveStandby(struct soap *soap, const char *URL, _tempuri__LeaveStandby *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__LeaveStandby(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__LeaveStandby(struct soap *soap, _tempuri__LeaveStandby *p)
{
	if (::soap_read__tempuri__LeaveStandby(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__AbortScriptResponse_DEFINED
#define SOAP_TYPE__tempuri__AbortScriptResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AbortScriptResponse(struct soap*, const char*, int, const _tempuri__AbortScriptResponse *, const char*);
SOAP_FMAC3 _tempuri__AbortScriptResponse * SOAP_FMAC4 soap_in__tempuri__AbortScriptResponse(struct soap*, const char*, _tempuri__AbortScriptResponse *, const char*);
SOAP_FMAC1 _tempuri__AbortScriptResponse * SOAP_FMAC2 soap_instantiate__tempuri__AbortScriptResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AbortScriptResponse * soap_new__tempuri__AbortScriptResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AbortScriptResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AbortScriptResponse * soap_new_req__tempuri__AbortScriptResponse(
	struct soap *soap)
{
	_tempuri__AbortScriptResponse *_p = ::soap_new__tempuri__AbortScriptResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AbortScriptResponse * soap_new_set__tempuri__AbortScriptResponse(
	struct soap *soap,
	bool *AbortScriptResult)
{
	_tempuri__AbortScriptResponse *_p = ::soap_new__tempuri__AbortScriptResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__AbortScriptResponse::AbortScriptResult = AbortScriptResult;
	}
	return _p;
}

inline int soap_write__tempuri__AbortScriptResponse(struct soap *soap, _tempuri__AbortScriptResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AbortScriptResponse", p->soap_type() == SOAP_TYPE__tempuri__AbortScriptResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AbortScriptResponse(struct soap *soap, const char *URL, _tempuri__AbortScriptResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AbortScriptResponse", p->soap_type() == SOAP_TYPE__tempuri__AbortScriptResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__AbortScriptResponse(struct soap *soap, const char *URL, _tempuri__AbortScriptResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AbortScriptResponse", p->soap_type() == SOAP_TYPE__tempuri__AbortScriptResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AbortScriptResponse(struct soap *soap, const char *URL, _tempuri__AbortScriptResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AbortScriptResponse", p->soap_type() == SOAP_TYPE__tempuri__AbortScriptResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AbortScriptResponse * SOAP_FMAC4 soap_get__tempuri__AbortScriptResponse(struct soap*, _tempuri__AbortScriptResponse *, const char*, const char*);

inline int soap_read__tempuri__AbortScriptResponse(struct soap *soap, _tempuri__AbortScriptResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__AbortScriptResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AbortScriptResponse(struct soap *soap, const char *URL, _tempuri__AbortScriptResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__AbortScriptResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__AbortScriptResponse(struct soap *soap, _tempuri__AbortScriptResponse *p)
{
	if (::soap_read__tempuri__AbortScriptResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__AbortScript_DEFINED
#define SOAP_TYPE__tempuri__AbortScript_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__AbortScript(struct soap*, const char*, int, const _tempuri__AbortScript *, const char*);
SOAP_FMAC3 _tempuri__AbortScript * SOAP_FMAC4 soap_in__tempuri__AbortScript(struct soap*, const char*, _tempuri__AbortScript *, const char*);
SOAP_FMAC1 _tempuri__AbortScript * SOAP_FMAC2 soap_instantiate__tempuri__AbortScript(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__AbortScript * soap_new__tempuri__AbortScript(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__AbortScript(soap, n, NULL, NULL, NULL);
}

inline _tempuri__AbortScript * soap_new_req__tempuri__AbortScript(
	struct soap *soap)
{
	_tempuri__AbortScript *_p = ::soap_new__tempuri__AbortScript(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__AbortScript * soap_new_set__tempuri__AbortScript(
	struct soap *soap)
{
	_tempuri__AbortScript *_p = ::soap_new__tempuri__AbortScript(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__AbortScript(struct soap *soap, _tempuri__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AbortScript", p->soap_type() == SOAP_TYPE__tempuri__AbortScript ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__AbortScript(struct soap *soap, const char *URL, _tempuri__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AbortScript", p->soap_type() == SOAP_TYPE__tempuri__AbortScript ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__AbortScript(struct soap *soap, const char *URL, _tempuri__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AbortScript", p->soap_type() == SOAP_TYPE__tempuri__AbortScript ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__AbortScript(struct soap *soap, const char *URL, _tempuri__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:AbortScript", p->soap_type() == SOAP_TYPE__tempuri__AbortScript ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__AbortScript * SOAP_FMAC4 soap_get__tempuri__AbortScript(struct soap*, _tempuri__AbortScript *, const char*, const char*);

inline int soap_read__tempuri__AbortScript(struct soap *soap, _tempuri__AbortScript *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__AbortScript(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__AbortScript(struct soap *soap, const char *URL, _tempuri__AbortScript *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__AbortScript(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__AbortScript(struct soap *soap, _tempuri__AbortScript *p)
{
	if (::soap_read__tempuri__AbortScript(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__ResetRunsetResponse_DEFINED
#define SOAP_TYPE__tempuri__ResetRunsetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ResetRunsetResponse(struct soap*, const char*, int, const _tempuri__ResetRunsetResponse *, const char*);
SOAP_FMAC3 _tempuri__ResetRunsetResponse * SOAP_FMAC4 soap_in__tempuri__ResetRunsetResponse(struct soap*, const char*, _tempuri__ResetRunsetResponse *, const char*);
SOAP_FMAC1 _tempuri__ResetRunsetResponse * SOAP_FMAC2 soap_instantiate__tempuri__ResetRunsetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ResetRunsetResponse * soap_new__tempuri__ResetRunsetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ResetRunsetResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ResetRunsetResponse * soap_new_req__tempuri__ResetRunsetResponse(
	struct soap *soap)
{
	_tempuri__ResetRunsetResponse *_p = ::soap_new__tempuri__ResetRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__ResetRunsetResponse * soap_new_set__tempuri__ResetRunsetResponse(
	struct soap *soap,
	bool *ResetRunsetResult)
{
	_tempuri__ResetRunsetResponse *_p = ::soap_new__tempuri__ResetRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ResetRunsetResponse::ResetRunsetResult = ResetRunsetResult;
	}
	return _p;
}

inline int soap_write__tempuri__ResetRunsetResponse(struct soap *soap, _tempuri__ResetRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResetRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__ResetRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ResetRunsetResponse(struct soap *soap, const char *URL, _tempuri__ResetRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResetRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__ResetRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__ResetRunsetResponse(struct soap *soap, const char *URL, _tempuri__ResetRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResetRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__ResetRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ResetRunsetResponse(struct soap *soap, const char *URL, _tempuri__ResetRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResetRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__ResetRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ResetRunsetResponse * SOAP_FMAC4 soap_get__tempuri__ResetRunsetResponse(struct soap*, _tempuri__ResetRunsetResponse *, const char*, const char*);

inline int soap_read__tempuri__ResetRunsetResponse(struct soap *soap, _tempuri__ResetRunsetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__ResetRunsetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ResetRunsetResponse(struct soap *soap, const char *URL, _tempuri__ResetRunsetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__ResetRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__ResetRunsetResponse(struct soap *soap, _tempuri__ResetRunsetResponse *p)
{
	if (::soap_read__tempuri__ResetRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__ResetRunset_DEFINED
#define SOAP_TYPE__tempuri__ResetRunset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ResetRunset(struct soap*, const char*, int, const _tempuri__ResetRunset *, const char*);
SOAP_FMAC3 _tempuri__ResetRunset * SOAP_FMAC4 soap_in__tempuri__ResetRunset(struct soap*, const char*, _tempuri__ResetRunset *, const char*);
SOAP_FMAC1 _tempuri__ResetRunset * SOAP_FMAC2 soap_instantiate__tempuri__ResetRunset(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ResetRunset * soap_new__tempuri__ResetRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ResetRunset(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ResetRunset * soap_new_req__tempuri__ResetRunset(
	struct soap *soap)
{
	_tempuri__ResetRunset *_p = ::soap_new__tempuri__ResetRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__ResetRunset * soap_new_set__tempuri__ResetRunset(
	struct soap *soap)
{
	_tempuri__ResetRunset *_p = ::soap_new__tempuri__ResetRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__ResetRunset(struct soap *soap, _tempuri__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResetRunset", p->soap_type() == SOAP_TYPE__tempuri__ResetRunset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ResetRunset(struct soap *soap, const char *URL, _tempuri__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResetRunset", p->soap_type() == SOAP_TYPE__tempuri__ResetRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__ResetRunset(struct soap *soap, const char *URL, _tempuri__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResetRunset", p->soap_type() == SOAP_TYPE__tempuri__ResetRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ResetRunset(struct soap *soap, const char *URL, _tempuri__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResetRunset", p->soap_type() == SOAP_TYPE__tempuri__ResetRunset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ResetRunset * SOAP_FMAC4 soap_get__tempuri__ResetRunset(struct soap*, _tempuri__ResetRunset *, const char*, const char*);

inline int soap_read__tempuri__ResetRunset(struct soap *soap, _tempuri__ResetRunset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__ResetRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ResetRunset(struct soap *soap, const char *URL, _tempuri__ResetRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__ResetRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__ResetRunset(struct soap *soap, _tempuri__ResetRunset *p)
{
	if (::soap_read__tempuri__ResetRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__ResumeRunsetResponse_DEFINED
#define SOAP_TYPE__tempuri__ResumeRunsetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ResumeRunsetResponse(struct soap*, const char*, int, const _tempuri__ResumeRunsetResponse *, const char*);
SOAP_FMAC3 _tempuri__ResumeRunsetResponse * SOAP_FMAC4 soap_in__tempuri__ResumeRunsetResponse(struct soap*, const char*, _tempuri__ResumeRunsetResponse *, const char*);
SOAP_FMAC1 _tempuri__ResumeRunsetResponse * SOAP_FMAC2 soap_instantiate__tempuri__ResumeRunsetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ResumeRunsetResponse * soap_new__tempuri__ResumeRunsetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ResumeRunsetResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ResumeRunsetResponse * soap_new_req__tempuri__ResumeRunsetResponse(
	struct soap *soap)
{
	_tempuri__ResumeRunsetResponse *_p = ::soap_new__tempuri__ResumeRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__ResumeRunsetResponse * soap_new_set__tempuri__ResumeRunsetResponse(
	struct soap *soap,
	bool *ResumeRunsetResult)
{
	_tempuri__ResumeRunsetResponse *_p = ::soap_new__tempuri__ResumeRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__ResumeRunsetResponse::ResumeRunsetResult = ResumeRunsetResult;
	}
	return _p;
}

inline int soap_write__tempuri__ResumeRunsetResponse(struct soap *soap, _tempuri__ResumeRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResumeRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__ResumeRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ResumeRunsetResponse(struct soap *soap, const char *URL, _tempuri__ResumeRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResumeRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__ResumeRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__ResumeRunsetResponse(struct soap *soap, const char *URL, _tempuri__ResumeRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResumeRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__ResumeRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ResumeRunsetResponse(struct soap *soap, const char *URL, _tempuri__ResumeRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResumeRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__ResumeRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ResumeRunsetResponse * SOAP_FMAC4 soap_get__tempuri__ResumeRunsetResponse(struct soap*, _tempuri__ResumeRunsetResponse *, const char*, const char*);

inline int soap_read__tempuri__ResumeRunsetResponse(struct soap *soap, _tempuri__ResumeRunsetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__ResumeRunsetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ResumeRunsetResponse(struct soap *soap, const char *URL, _tempuri__ResumeRunsetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__ResumeRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__ResumeRunsetResponse(struct soap *soap, _tempuri__ResumeRunsetResponse *p)
{
	if (::soap_read__tempuri__ResumeRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__ResumeRunset_DEFINED
#define SOAP_TYPE__tempuri__ResumeRunset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ResumeRunset(struct soap*, const char*, int, const _tempuri__ResumeRunset *, const char*);
SOAP_FMAC3 _tempuri__ResumeRunset * SOAP_FMAC4 soap_in__tempuri__ResumeRunset(struct soap*, const char*, _tempuri__ResumeRunset *, const char*);
SOAP_FMAC1 _tempuri__ResumeRunset * SOAP_FMAC2 soap_instantiate__tempuri__ResumeRunset(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__ResumeRunset * soap_new__tempuri__ResumeRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__ResumeRunset(soap, n, NULL, NULL, NULL);
}

inline _tempuri__ResumeRunset * soap_new_req__tempuri__ResumeRunset(
	struct soap *soap)
{
	_tempuri__ResumeRunset *_p = ::soap_new__tempuri__ResumeRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__ResumeRunset * soap_new_set__tempuri__ResumeRunset(
	struct soap *soap)
{
	_tempuri__ResumeRunset *_p = ::soap_new__tempuri__ResumeRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__ResumeRunset(struct soap *soap, _tempuri__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResumeRunset", p->soap_type() == SOAP_TYPE__tempuri__ResumeRunset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__ResumeRunset(struct soap *soap, const char *URL, _tempuri__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResumeRunset", p->soap_type() == SOAP_TYPE__tempuri__ResumeRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__ResumeRunset(struct soap *soap, const char *URL, _tempuri__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResumeRunset", p->soap_type() == SOAP_TYPE__tempuri__ResumeRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__ResumeRunset(struct soap *soap, const char *URL, _tempuri__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:ResumeRunset", p->soap_type() == SOAP_TYPE__tempuri__ResumeRunset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__ResumeRunset * SOAP_FMAC4 soap_get__tempuri__ResumeRunset(struct soap*, _tempuri__ResumeRunset *, const char*, const char*);

inline int soap_read__tempuri__ResumeRunset(struct soap *soap, _tempuri__ResumeRunset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__ResumeRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__ResumeRunset(struct soap *soap, const char *URL, _tempuri__ResumeRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__ResumeRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__ResumeRunset(struct soap *soap, _tempuri__ResumeRunset *p)
{
	if (::soap_read__tempuri__ResumeRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__PauseRunsetAfterResponse_DEFINED
#define SOAP_TYPE__tempuri__PauseRunsetAfterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__PauseRunsetAfterResponse(struct soap*, const char*, int, const _tempuri__PauseRunsetAfterResponse *, const char*);
SOAP_FMAC3 _tempuri__PauseRunsetAfterResponse * SOAP_FMAC4 soap_in__tempuri__PauseRunsetAfterResponse(struct soap*, const char*, _tempuri__PauseRunsetAfterResponse *, const char*);
SOAP_FMAC1 _tempuri__PauseRunsetAfterResponse * SOAP_FMAC2 soap_instantiate__tempuri__PauseRunsetAfterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__PauseRunsetAfterResponse * soap_new__tempuri__PauseRunsetAfterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__PauseRunsetAfterResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__PauseRunsetAfterResponse * soap_new_req__tempuri__PauseRunsetAfterResponse(
	struct soap *soap)
{
	_tempuri__PauseRunsetAfterResponse *_p = ::soap_new__tempuri__PauseRunsetAfterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__PauseRunsetAfterResponse * soap_new_set__tempuri__PauseRunsetAfterResponse(
	struct soap *soap,
	bool *PauseRunsetAfterResult)
{
	_tempuri__PauseRunsetAfterResponse *_p = ::soap_new__tempuri__PauseRunsetAfterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__PauseRunsetAfterResponse::PauseRunsetAfterResult = PauseRunsetAfterResult;
	}
	return _p;
}

inline int soap_write__tempuri__PauseRunsetAfterResponse(struct soap *soap, _tempuri__PauseRunsetAfterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:PauseRunsetAfterResponse", p->soap_type() == SOAP_TYPE__tempuri__PauseRunsetAfterResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__PauseRunsetAfterResponse(struct soap *soap, const char *URL, _tempuri__PauseRunsetAfterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:PauseRunsetAfterResponse", p->soap_type() == SOAP_TYPE__tempuri__PauseRunsetAfterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__PauseRunsetAfterResponse(struct soap *soap, const char *URL, _tempuri__PauseRunsetAfterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:PauseRunsetAfterResponse", p->soap_type() == SOAP_TYPE__tempuri__PauseRunsetAfterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__PauseRunsetAfterResponse(struct soap *soap, const char *URL, _tempuri__PauseRunsetAfterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:PauseRunsetAfterResponse", p->soap_type() == SOAP_TYPE__tempuri__PauseRunsetAfterResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__PauseRunsetAfterResponse * SOAP_FMAC4 soap_get__tempuri__PauseRunsetAfterResponse(struct soap*, _tempuri__PauseRunsetAfterResponse *, const char*, const char*);

inline int soap_read__tempuri__PauseRunsetAfterResponse(struct soap *soap, _tempuri__PauseRunsetAfterResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__PauseRunsetAfterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__PauseRunsetAfterResponse(struct soap *soap, const char *URL, _tempuri__PauseRunsetAfterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__PauseRunsetAfterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__PauseRunsetAfterResponse(struct soap *soap, _tempuri__PauseRunsetAfterResponse *p)
{
	if (::soap_read__tempuri__PauseRunsetAfterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__PauseRunsetAfter_DEFINED
#define SOAP_TYPE__tempuri__PauseRunsetAfter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__PauseRunsetAfter(struct soap*, const char*, int, const _tempuri__PauseRunsetAfter *, const char*);
SOAP_FMAC3 _tempuri__PauseRunsetAfter * SOAP_FMAC4 soap_in__tempuri__PauseRunsetAfter(struct soap*, const char*, _tempuri__PauseRunsetAfter *, const char*);
SOAP_FMAC1 _tempuri__PauseRunsetAfter * SOAP_FMAC2 soap_instantiate__tempuri__PauseRunsetAfter(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__PauseRunsetAfter * soap_new__tempuri__PauseRunsetAfter(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__PauseRunsetAfter(soap, n, NULL, NULL, NULL);
}

inline _tempuri__PauseRunsetAfter * soap_new_req__tempuri__PauseRunsetAfter(
	struct soap *soap)
{
	_tempuri__PauseRunsetAfter *_p = ::soap_new__tempuri__PauseRunsetAfter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__PauseRunsetAfter * soap_new_set__tempuri__PauseRunsetAfter(
	struct soap *soap,
	int *pauseMode)
{
	_tempuri__PauseRunsetAfter *_p = ::soap_new__tempuri__PauseRunsetAfter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__PauseRunsetAfter::pauseMode = pauseMode;
	}
	return _p;
}

inline int soap_write__tempuri__PauseRunsetAfter(struct soap *soap, _tempuri__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:PauseRunsetAfter", p->soap_type() == SOAP_TYPE__tempuri__PauseRunsetAfter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__PauseRunsetAfter(struct soap *soap, const char *URL, _tempuri__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:PauseRunsetAfter", p->soap_type() == SOAP_TYPE__tempuri__PauseRunsetAfter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__PauseRunsetAfter(struct soap *soap, const char *URL, _tempuri__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:PauseRunsetAfter", p->soap_type() == SOAP_TYPE__tempuri__PauseRunsetAfter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__PauseRunsetAfter(struct soap *soap, const char *URL, _tempuri__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:PauseRunsetAfter", p->soap_type() == SOAP_TYPE__tempuri__PauseRunsetAfter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__PauseRunsetAfter * SOAP_FMAC4 soap_get__tempuri__PauseRunsetAfter(struct soap*, _tempuri__PauseRunsetAfter *, const char*, const char*);

inline int soap_read__tempuri__PauseRunsetAfter(struct soap *soap, _tempuri__PauseRunsetAfter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__PauseRunsetAfter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__PauseRunsetAfter(struct soap *soap, const char *URL, _tempuri__PauseRunsetAfter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__PauseRunsetAfter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__PauseRunsetAfter(struct soap *soap, _tempuri__PauseRunsetAfter *p)
{
	if (::soap_read__tempuri__PauseRunsetAfter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__StartSelectedRunsetFromResponse_DEFINED
#define SOAP_TYPE__tempuri__StartSelectedRunsetFromResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__StartSelectedRunsetFromResponse(struct soap*, const char*, int, const _tempuri__StartSelectedRunsetFromResponse *, const char*);
SOAP_FMAC3 _tempuri__StartSelectedRunsetFromResponse * SOAP_FMAC4 soap_in__tempuri__StartSelectedRunsetFromResponse(struct soap*, const char*, _tempuri__StartSelectedRunsetFromResponse *, const char*);
SOAP_FMAC1 _tempuri__StartSelectedRunsetFromResponse * SOAP_FMAC2 soap_instantiate__tempuri__StartSelectedRunsetFromResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__StartSelectedRunsetFromResponse * soap_new__tempuri__StartSelectedRunsetFromResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__StartSelectedRunsetFromResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__StartSelectedRunsetFromResponse * soap_new_req__tempuri__StartSelectedRunsetFromResponse(
	struct soap *soap)
{
	_tempuri__StartSelectedRunsetFromResponse *_p = ::soap_new__tempuri__StartSelectedRunsetFromResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__StartSelectedRunsetFromResponse * soap_new_set__tempuri__StartSelectedRunsetFromResponse(
	struct soap *soap,
	bool *StartSelectedRunsetFromResult)
{
	_tempuri__StartSelectedRunsetFromResponse *_p = ::soap_new__tempuri__StartSelectedRunsetFromResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__StartSelectedRunsetFromResponse::StartSelectedRunsetFromResult = StartSelectedRunsetFromResult;
	}
	return _p;
}

inline int soap_write__tempuri__StartSelectedRunsetFromResponse(struct soap *soap, _tempuri__StartSelectedRunsetFromResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetFromResponse", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetFromResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__StartSelectedRunsetFromResponse(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetFromResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetFromResponse", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetFromResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__StartSelectedRunsetFromResponse(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetFromResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetFromResponse", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetFromResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__StartSelectedRunsetFromResponse(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetFromResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetFromResponse", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetFromResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__StartSelectedRunsetFromResponse * SOAP_FMAC4 soap_get__tempuri__StartSelectedRunsetFromResponse(struct soap*, _tempuri__StartSelectedRunsetFromResponse *, const char*, const char*);

inline int soap_read__tempuri__StartSelectedRunsetFromResponse(struct soap *soap, _tempuri__StartSelectedRunsetFromResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__StartSelectedRunsetFromResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__StartSelectedRunsetFromResponse(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetFromResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__StartSelectedRunsetFromResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__StartSelectedRunsetFromResponse(struct soap *soap, _tempuri__StartSelectedRunsetFromResponse *p)
{
	if (::soap_read__tempuri__StartSelectedRunsetFromResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__StartSelectedRunsetFrom_DEFINED
#define SOAP_TYPE__tempuri__StartSelectedRunsetFrom_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__StartSelectedRunsetFrom(struct soap*, const char*, int, const _tempuri__StartSelectedRunsetFrom *, const char*);
SOAP_FMAC3 _tempuri__StartSelectedRunsetFrom * SOAP_FMAC4 soap_in__tempuri__StartSelectedRunsetFrom(struct soap*, const char*, _tempuri__StartSelectedRunsetFrom *, const char*);
SOAP_FMAC1 _tempuri__StartSelectedRunsetFrom * SOAP_FMAC2 soap_instantiate__tempuri__StartSelectedRunsetFrom(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__StartSelectedRunsetFrom * soap_new__tempuri__StartSelectedRunsetFrom(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__StartSelectedRunsetFrom(soap, n, NULL, NULL, NULL);
}

inline _tempuri__StartSelectedRunsetFrom * soap_new_req__tempuri__StartSelectedRunsetFrom(
	struct soap *soap)
{
	_tempuri__StartSelectedRunsetFrom *_p = ::soap_new__tempuri__StartSelectedRunsetFrom(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__StartSelectedRunsetFrom * soap_new_set__tempuri__StartSelectedRunsetFrom(
	struct soap *soap,
	int *methodIndex)
{
	_tempuri__StartSelectedRunsetFrom *_p = ::soap_new__tempuri__StartSelectedRunsetFrom(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__StartSelectedRunsetFrom::methodIndex = methodIndex;
	}
	return _p;
}

inline int soap_write__tempuri__StartSelectedRunsetFrom(struct soap *soap, _tempuri__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetFrom", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetFrom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__StartSelectedRunsetFrom(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetFrom", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetFrom ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__StartSelectedRunsetFrom(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetFrom", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetFrom ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__StartSelectedRunsetFrom(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetFrom", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetFrom ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__StartSelectedRunsetFrom * SOAP_FMAC4 soap_get__tempuri__StartSelectedRunsetFrom(struct soap*, _tempuri__StartSelectedRunsetFrom *, const char*, const char*);

inline int soap_read__tempuri__StartSelectedRunsetFrom(struct soap *soap, _tempuri__StartSelectedRunsetFrom *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__StartSelectedRunsetFrom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__StartSelectedRunsetFrom(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetFrom *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__StartSelectedRunsetFrom(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__StartSelectedRunsetFrom(struct soap *soap, _tempuri__StartSelectedRunsetFrom *p)
{
	if (::soap_read__tempuri__StartSelectedRunsetFrom(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__StartSelectedRunsetResponse_DEFINED
#define SOAP_TYPE__tempuri__StartSelectedRunsetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__StartSelectedRunsetResponse(struct soap*, const char*, int, const _tempuri__StartSelectedRunsetResponse *, const char*);
SOAP_FMAC3 _tempuri__StartSelectedRunsetResponse * SOAP_FMAC4 soap_in__tempuri__StartSelectedRunsetResponse(struct soap*, const char*, _tempuri__StartSelectedRunsetResponse *, const char*);
SOAP_FMAC1 _tempuri__StartSelectedRunsetResponse * SOAP_FMAC2 soap_instantiate__tempuri__StartSelectedRunsetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__StartSelectedRunsetResponse * soap_new__tempuri__StartSelectedRunsetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__StartSelectedRunsetResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__StartSelectedRunsetResponse * soap_new_req__tempuri__StartSelectedRunsetResponse(
	struct soap *soap)
{
	_tempuri__StartSelectedRunsetResponse *_p = ::soap_new__tempuri__StartSelectedRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__StartSelectedRunsetResponse * soap_new_set__tempuri__StartSelectedRunsetResponse(
	struct soap *soap,
	bool *StartSelectedRunsetResult)
{
	_tempuri__StartSelectedRunsetResponse *_p = ::soap_new__tempuri__StartSelectedRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__StartSelectedRunsetResponse::StartSelectedRunsetResult = StartSelectedRunsetResult;
	}
	return _p;
}

inline int soap_write__tempuri__StartSelectedRunsetResponse(struct soap *soap, _tempuri__StartSelectedRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__StartSelectedRunsetResponse(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__StartSelectedRunsetResponse(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__StartSelectedRunsetResponse(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__StartSelectedRunsetResponse * SOAP_FMAC4 soap_get__tempuri__StartSelectedRunsetResponse(struct soap*, _tempuri__StartSelectedRunsetResponse *, const char*, const char*);

inline int soap_read__tempuri__StartSelectedRunsetResponse(struct soap *soap, _tempuri__StartSelectedRunsetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__StartSelectedRunsetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__StartSelectedRunsetResponse(struct soap *soap, const char *URL, _tempuri__StartSelectedRunsetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__StartSelectedRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__StartSelectedRunsetResponse(struct soap *soap, _tempuri__StartSelectedRunsetResponse *p)
{
	if (::soap_read__tempuri__StartSelectedRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__StartSelectedRunset_DEFINED
#define SOAP_TYPE__tempuri__StartSelectedRunset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__StartSelectedRunset(struct soap*, const char*, int, const _tempuri__StartSelectedRunset *, const char*);
SOAP_FMAC3 _tempuri__StartSelectedRunset * SOAP_FMAC4 soap_in__tempuri__StartSelectedRunset(struct soap*, const char*, _tempuri__StartSelectedRunset *, const char*);
SOAP_FMAC1 _tempuri__StartSelectedRunset * SOAP_FMAC2 soap_instantiate__tempuri__StartSelectedRunset(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__StartSelectedRunset * soap_new__tempuri__StartSelectedRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__StartSelectedRunset(soap, n, NULL, NULL, NULL);
}

inline _tempuri__StartSelectedRunset * soap_new_req__tempuri__StartSelectedRunset(
	struct soap *soap)
{
	_tempuri__StartSelectedRunset *_p = ::soap_new__tempuri__StartSelectedRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__StartSelectedRunset * soap_new_set__tempuri__StartSelectedRunset(
	struct soap *soap)
{
	_tempuri__StartSelectedRunset *_p = ::soap_new__tempuri__StartSelectedRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__StartSelectedRunset(struct soap *soap, _tempuri__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunset", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__StartSelectedRunset(struct soap *soap, const char *URL, _tempuri__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunset", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__StartSelectedRunset(struct soap *soap, const char *URL, _tempuri__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunset", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__StartSelectedRunset(struct soap *soap, const char *URL, _tempuri__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:StartSelectedRunset", p->soap_type() == SOAP_TYPE__tempuri__StartSelectedRunset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__StartSelectedRunset * SOAP_FMAC4 soap_get__tempuri__StartSelectedRunset(struct soap*, _tempuri__StartSelectedRunset *, const char*, const char*);

inline int soap_read__tempuri__StartSelectedRunset(struct soap *soap, _tempuri__StartSelectedRunset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__StartSelectedRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__StartSelectedRunset(struct soap *soap, const char *URL, _tempuri__StartSelectedRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__StartSelectedRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__StartSelectedRunset(struct soap *soap, _tempuri__StartSelectedRunset *p)
{
	if (::soap_read__tempuri__StartSelectedRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__MoveSamplePlateTrayInResponse_DEFINED
#define SOAP_TYPE__tempuri__MoveSamplePlateTrayInResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__MoveSamplePlateTrayInResponse(struct soap*, const char*, int, const _tempuri__MoveSamplePlateTrayInResponse *, const char*);
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayInResponse * SOAP_FMAC4 soap_in__tempuri__MoveSamplePlateTrayInResponse(struct soap*, const char*, _tempuri__MoveSamplePlateTrayInResponse *, const char*);
SOAP_FMAC1 _tempuri__MoveSamplePlateTrayInResponse * SOAP_FMAC2 soap_instantiate__tempuri__MoveSamplePlateTrayInResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__MoveSamplePlateTrayInResponse * soap_new__tempuri__MoveSamplePlateTrayInResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__MoveSamplePlateTrayInResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__MoveSamplePlateTrayInResponse * soap_new_req__tempuri__MoveSamplePlateTrayInResponse(
	struct soap *soap)
{
	_tempuri__MoveSamplePlateTrayInResponse *_p = ::soap_new__tempuri__MoveSamplePlateTrayInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__MoveSamplePlateTrayInResponse * soap_new_set__tempuri__MoveSamplePlateTrayInResponse(
	struct soap *soap,
	bool *MoveSamplePlateTrayInResult)
{
	_tempuri__MoveSamplePlateTrayInResponse *_p = ::soap_new__tempuri__MoveSamplePlateTrayInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__MoveSamplePlateTrayInResponse::MoveSamplePlateTrayInResult = MoveSamplePlateTrayInResult;
	}
	return _p;
}

inline int soap_write__tempuri__MoveSamplePlateTrayInResponse(struct soap *soap, _tempuri__MoveSamplePlateTrayInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayInResponse", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayInResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__MoveSamplePlateTrayInResponse(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayInResponse", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayInResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__MoveSamplePlateTrayInResponse(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayInResponse", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayInResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__MoveSamplePlateTrayInResponse(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayInResponse", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayInResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayInResponse * SOAP_FMAC4 soap_get__tempuri__MoveSamplePlateTrayInResponse(struct soap*, _tempuri__MoveSamplePlateTrayInResponse *, const char*, const char*);

inline int soap_read__tempuri__MoveSamplePlateTrayInResponse(struct soap *soap, _tempuri__MoveSamplePlateTrayInResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__MoveSamplePlateTrayInResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__MoveSamplePlateTrayInResponse(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayInResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__MoveSamplePlateTrayInResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__MoveSamplePlateTrayInResponse(struct soap *soap, _tempuri__MoveSamplePlateTrayInResponse *p)
{
	if (::soap_read__tempuri__MoveSamplePlateTrayInResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__MoveSamplePlateTrayIn_DEFINED
#define SOAP_TYPE__tempuri__MoveSamplePlateTrayIn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__MoveSamplePlateTrayIn(struct soap*, const char*, int, const _tempuri__MoveSamplePlateTrayIn *, const char*);
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayIn * SOAP_FMAC4 soap_in__tempuri__MoveSamplePlateTrayIn(struct soap*, const char*, _tempuri__MoveSamplePlateTrayIn *, const char*);
SOAP_FMAC1 _tempuri__MoveSamplePlateTrayIn * SOAP_FMAC2 soap_instantiate__tempuri__MoveSamplePlateTrayIn(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__MoveSamplePlateTrayIn * soap_new__tempuri__MoveSamplePlateTrayIn(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__MoveSamplePlateTrayIn(soap, n, NULL, NULL, NULL);
}

inline _tempuri__MoveSamplePlateTrayIn * soap_new_req__tempuri__MoveSamplePlateTrayIn(
	struct soap *soap)
{
	_tempuri__MoveSamplePlateTrayIn *_p = ::soap_new__tempuri__MoveSamplePlateTrayIn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__MoveSamplePlateTrayIn * soap_new_set__tempuri__MoveSamplePlateTrayIn(
	struct soap *soap)
{
	_tempuri__MoveSamplePlateTrayIn *_p = ::soap_new__tempuri__MoveSamplePlateTrayIn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__MoveSamplePlateTrayIn(struct soap *soap, _tempuri__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayIn", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayIn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayIn", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayIn ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayIn", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayIn ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayIn", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayIn ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayIn * SOAP_FMAC4 soap_get__tempuri__MoveSamplePlateTrayIn(struct soap*, _tempuri__MoveSamplePlateTrayIn *, const char*, const char*);

inline int soap_read__tempuri__MoveSamplePlateTrayIn(struct soap *soap, _tempuri__MoveSamplePlateTrayIn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__MoveSamplePlateTrayIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayIn *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__MoveSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__MoveSamplePlateTrayIn(struct soap *soap, _tempuri__MoveSamplePlateTrayIn *p)
{
	if (::soap_read__tempuri__MoveSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__MoveSamplePlateTrayOutResponse_DEFINED
#define SOAP_TYPE__tempuri__MoveSamplePlateTrayOutResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__MoveSamplePlateTrayOutResponse(struct soap*, const char*, int, const _tempuri__MoveSamplePlateTrayOutResponse *, const char*);
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayOutResponse * SOAP_FMAC4 soap_in__tempuri__MoveSamplePlateTrayOutResponse(struct soap*, const char*, _tempuri__MoveSamplePlateTrayOutResponse *, const char*);
SOAP_FMAC1 _tempuri__MoveSamplePlateTrayOutResponse * SOAP_FMAC2 soap_instantiate__tempuri__MoveSamplePlateTrayOutResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__MoveSamplePlateTrayOutResponse * soap_new__tempuri__MoveSamplePlateTrayOutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__MoveSamplePlateTrayOutResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__MoveSamplePlateTrayOutResponse * soap_new_req__tempuri__MoveSamplePlateTrayOutResponse(
	struct soap *soap)
{
	_tempuri__MoveSamplePlateTrayOutResponse *_p = ::soap_new__tempuri__MoveSamplePlateTrayOutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__MoveSamplePlateTrayOutResponse * soap_new_set__tempuri__MoveSamplePlateTrayOutResponse(
	struct soap *soap,
	bool *MoveSamplePlateTrayOutResult)
{
	_tempuri__MoveSamplePlateTrayOutResponse *_p = ::soap_new__tempuri__MoveSamplePlateTrayOutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__MoveSamplePlateTrayOutResponse::MoveSamplePlateTrayOutResult = MoveSamplePlateTrayOutResult;
	}
	return _p;
}

inline int soap_write__tempuri__MoveSamplePlateTrayOutResponse(struct soap *soap, _tempuri__MoveSamplePlateTrayOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayOutResponse", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayOutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__MoveSamplePlateTrayOutResponse(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayOutResponse", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayOutResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__MoveSamplePlateTrayOutResponse(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayOutResponse", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayOutResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__MoveSamplePlateTrayOutResponse(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayOutResponse", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayOutResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayOutResponse * SOAP_FMAC4 soap_get__tempuri__MoveSamplePlateTrayOutResponse(struct soap*, _tempuri__MoveSamplePlateTrayOutResponse *, const char*, const char*);

inline int soap_read__tempuri__MoveSamplePlateTrayOutResponse(struct soap *soap, _tempuri__MoveSamplePlateTrayOutResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__MoveSamplePlateTrayOutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__MoveSamplePlateTrayOutResponse(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayOutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__MoveSamplePlateTrayOutResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__MoveSamplePlateTrayOutResponse(struct soap *soap, _tempuri__MoveSamplePlateTrayOutResponse *p)
{
	if (::soap_read__tempuri__MoveSamplePlateTrayOutResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__MoveSamplePlateTrayOut_DEFINED
#define SOAP_TYPE__tempuri__MoveSamplePlateTrayOut_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__MoveSamplePlateTrayOut(struct soap*, const char*, int, const _tempuri__MoveSamplePlateTrayOut *, const char*);
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayOut * SOAP_FMAC4 soap_in__tempuri__MoveSamplePlateTrayOut(struct soap*, const char*, _tempuri__MoveSamplePlateTrayOut *, const char*);
SOAP_FMAC1 _tempuri__MoveSamplePlateTrayOut * SOAP_FMAC2 soap_instantiate__tempuri__MoveSamplePlateTrayOut(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__MoveSamplePlateTrayOut * soap_new__tempuri__MoveSamplePlateTrayOut(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__MoveSamplePlateTrayOut(soap, n, NULL, NULL, NULL);
}

inline _tempuri__MoveSamplePlateTrayOut * soap_new_req__tempuri__MoveSamplePlateTrayOut(
	struct soap *soap)
{
	_tempuri__MoveSamplePlateTrayOut *_p = ::soap_new__tempuri__MoveSamplePlateTrayOut(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__MoveSamplePlateTrayOut * soap_new_set__tempuri__MoveSamplePlateTrayOut(
	struct soap *soap)
{
	_tempuri__MoveSamplePlateTrayOut *_p = ::soap_new__tempuri__MoveSamplePlateTrayOut(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__MoveSamplePlateTrayOut(struct soap *soap, _tempuri__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayOut", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayOut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayOut", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayOut ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayOut", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayOut ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:MoveSamplePlateTrayOut", p->soap_type() == SOAP_TYPE__tempuri__MoveSamplePlateTrayOut ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayOut * SOAP_FMAC4 soap_get__tempuri__MoveSamplePlateTrayOut(struct soap*, _tempuri__MoveSamplePlateTrayOut *, const char*, const char*);

inline int soap_read__tempuri__MoveSamplePlateTrayOut(struct soap *soap, _tempuri__MoveSamplePlateTrayOut *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__MoveSamplePlateTrayOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, _tempuri__MoveSamplePlateTrayOut *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__MoveSamplePlateTrayOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__MoveSamplePlateTrayOut(struct soap *soap, _tempuri__MoveSamplePlateTrayOut *p)
{
	if (::soap_read__tempuri__MoveSamplePlateTrayOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetCurrentSamplePlateIdResponse_DEFINED
#define SOAP_TYPE__tempuri__GetCurrentSamplePlateIdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetCurrentSamplePlateIdResponse(struct soap*, const char*, int, const _tempuri__GetCurrentSamplePlateIdResponse *, const char*);
SOAP_FMAC3 _tempuri__GetCurrentSamplePlateIdResponse * SOAP_FMAC4 soap_in__tempuri__GetCurrentSamplePlateIdResponse(struct soap*, const char*, _tempuri__GetCurrentSamplePlateIdResponse *, const char*);
SOAP_FMAC1 _tempuri__GetCurrentSamplePlateIdResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetCurrentSamplePlateIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetCurrentSamplePlateIdResponse * soap_new__tempuri__GetCurrentSamplePlateIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetCurrentSamplePlateIdResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetCurrentSamplePlateIdResponse * soap_new_req__tempuri__GetCurrentSamplePlateIdResponse(
	struct soap *soap)
{
	_tempuri__GetCurrentSamplePlateIdResponse *_p = ::soap_new__tempuri__GetCurrentSamplePlateIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetCurrentSamplePlateIdResponse * soap_new_set__tempuri__GetCurrentSamplePlateIdResponse(
	struct soap *soap,
	std::string *GetCurrentSamplePlateIdResult)
{
	_tempuri__GetCurrentSamplePlateIdResponse *_p = ::soap_new__tempuri__GetCurrentSamplePlateIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetCurrentSamplePlateIdResponse::GetCurrentSamplePlateIdResult = GetCurrentSamplePlateIdResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetCurrentSamplePlateIdResponse(struct soap *soap, _tempuri__GetCurrentSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetCurrentSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__GetCurrentSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetCurrentSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__GetCurrentSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetCurrentSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__GetCurrentSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetCurrentSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__GetCurrentSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetCurrentSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__GetCurrentSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetCurrentSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__GetCurrentSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetCurrentSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__GetCurrentSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetCurrentSamplePlateIdResponse * SOAP_FMAC4 soap_get__tempuri__GetCurrentSamplePlateIdResponse(struct soap*, _tempuri__GetCurrentSamplePlateIdResponse *, const char*, const char*);

inline int soap_read__tempuri__GetCurrentSamplePlateIdResponse(struct soap *soap, _tempuri__GetCurrentSamplePlateIdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetCurrentSamplePlateIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetCurrentSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__GetCurrentSamplePlateIdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetCurrentSamplePlateIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetCurrentSamplePlateIdResponse(struct soap *soap, _tempuri__GetCurrentSamplePlateIdResponse *p)
{
	if (::soap_read__tempuri__GetCurrentSamplePlateIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetCurrentSamplePlateId_DEFINED
#define SOAP_TYPE__tempuri__GetCurrentSamplePlateId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetCurrentSamplePlateId(struct soap*, const char*, int, const _tempuri__GetCurrentSamplePlateId *, const char*);
SOAP_FMAC3 _tempuri__GetCurrentSamplePlateId * SOAP_FMAC4 soap_in__tempuri__GetCurrentSamplePlateId(struct soap*, const char*, _tempuri__GetCurrentSamplePlateId *, const char*);
SOAP_FMAC1 _tempuri__GetCurrentSamplePlateId * SOAP_FMAC2 soap_instantiate__tempuri__GetCurrentSamplePlateId(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetCurrentSamplePlateId * soap_new__tempuri__GetCurrentSamplePlateId(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetCurrentSamplePlateId(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetCurrentSamplePlateId * soap_new_req__tempuri__GetCurrentSamplePlateId(
	struct soap *soap)
{
	_tempuri__GetCurrentSamplePlateId *_p = ::soap_new__tempuri__GetCurrentSamplePlateId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetCurrentSamplePlateId * soap_new_set__tempuri__GetCurrentSamplePlateId(
	struct soap *soap)
{
	_tempuri__GetCurrentSamplePlateId *_p = ::soap_new__tempuri__GetCurrentSamplePlateId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetCurrentSamplePlateId(struct soap *soap, _tempuri__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetCurrentSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__GetCurrentSamplePlateId ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetCurrentSamplePlateId(struct soap *soap, const char *URL, _tempuri__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetCurrentSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__GetCurrentSamplePlateId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetCurrentSamplePlateId(struct soap *soap, const char *URL, _tempuri__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetCurrentSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__GetCurrentSamplePlateId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetCurrentSamplePlateId(struct soap *soap, const char *URL, _tempuri__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetCurrentSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__GetCurrentSamplePlateId ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetCurrentSamplePlateId * SOAP_FMAC4 soap_get__tempuri__GetCurrentSamplePlateId(struct soap*, _tempuri__GetCurrentSamplePlateId *, const char*, const char*);

inline int soap_read__tempuri__GetCurrentSamplePlateId(struct soap *soap, _tempuri__GetCurrentSamplePlateId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetCurrentSamplePlateId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetCurrentSamplePlateId(struct soap *soap, const char *URL, _tempuri__GetCurrentSamplePlateId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetCurrentSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetCurrentSamplePlateId(struct soap *soap, _tempuri__GetCurrentSamplePlateId *p)
{
	if (::soap_read__tempuri__GetCurrentSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetSamplePlateIdResponse_DEFINED
#define SOAP_TYPE__tempuri__GetSamplePlateIdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetSamplePlateIdResponse(struct soap*, const char*, int, const _tempuri__GetSamplePlateIdResponse *, const char*);
SOAP_FMAC3 _tempuri__GetSamplePlateIdResponse * SOAP_FMAC4 soap_in__tempuri__GetSamplePlateIdResponse(struct soap*, const char*, _tempuri__GetSamplePlateIdResponse *, const char*);
SOAP_FMAC1 _tempuri__GetSamplePlateIdResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetSamplePlateIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetSamplePlateIdResponse * soap_new__tempuri__GetSamplePlateIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetSamplePlateIdResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetSamplePlateIdResponse * soap_new_req__tempuri__GetSamplePlateIdResponse(
	struct soap *soap)
{
	_tempuri__GetSamplePlateIdResponse *_p = ::soap_new__tempuri__GetSamplePlateIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetSamplePlateIdResponse * soap_new_set__tempuri__GetSamplePlateIdResponse(
	struct soap *soap,
	std::string *GetSamplePlateIdResult)
{
	_tempuri__GetSamplePlateIdResponse *_p = ::soap_new__tempuri__GetSamplePlateIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetSamplePlateIdResponse::GetSamplePlateIdResult = GetSamplePlateIdResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetSamplePlateIdResponse(struct soap *soap, _tempuri__GetSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__GetSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__GetSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__GetSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__GetSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__GetSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__GetSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__GetSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetSamplePlateIdResponse * SOAP_FMAC4 soap_get__tempuri__GetSamplePlateIdResponse(struct soap*, _tempuri__GetSamplePlateIdResponse *, const char*, const char*);

inline int soap_read__tempuri__GetSamplePlateIdResponse(struct soap *soap, _tempuri__GetSamplePlateIdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetSamplePlateIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__GetSamplePlateIdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetSamplePlateIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetSamplePlateIdResponse(struct soap *soap, _tempuri__GetSamplePlateIdResponse *p)
{
	if (::soap_read__tempuri__GetSamplePlateIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetSamplePlateId_DEFINED
#define SOAP_TYPE__tempuri__GetSamplePlateId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetSamplePlateId(struct soap*, const char*, int, const _tempuri__GetSamplePlateId *, const char*);
SOAP_FMAC3 _tempuri__GetSamplePlateId * SOAP_FMAC4 soap_in__tempuri__GetSamplePlateId(struct soap*, const char*, _tempuri__GetSamplePlateId *, const char*);
SOAP_FMAC1 _tempuri__GetSamplePlateId * SOAP_FMAC2 soap_instantiate__tempuri__GetSamplePlateId(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetSamplePlateId * soap_new__tempuri__GetSamplePlateId(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetSamplePlateId(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetSamplePlateId * soap_new_req__tempuri__GetSamplePlateId(
	struct soap *soap)
{
	_tempuri__GetSamplePlateId *_p = ::soap_new__tempuri__GetSamplePlateId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetSamplePlateId * soap_new_set__tempuri__GetSamplePlateId(
	struct soap *soap,
	int *methodIndex)
{
	_tempuri__GetSamplePlateId *_p = ::soap_new__tempuri__GetSamplePlateId(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetSamplePlateId::methodIndex = methodIndex;
	}
	return _p;
}

inline int soap_write__tempuri__GetSamplePlateId(struct soap *soap, _tempuri__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__GetSamplePlateId ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetSamplePlateId(struct soap *soap, const char *URL, _tempuri__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__GetSamplePlateId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetSamplePlateId(struct soap *soap, const char *URL, _tempuri__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__GetSamplePlateId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetSamplePlateId(struct soap *soap, const char *URL, _tempuri__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__GetSamplePlateId ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetSamplePlateId * SOAP_FMAC4 soap_get__tempuri__GetSamplePlateId(struct soap*, _tempuri__GetSamplePlateId *, const char*, const char*);

inline int soap_read__tempuri__GetSamplePlateId(struct soap *soap, _tempuri__GetSamplePlateId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetSamplePlateId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetSamplePlateId(struct soap *soap, const char *URL, _tempuri__GetSamplePlateId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetSamplePlateId(struct soap *soap, _tempuri__GetSamplePlateId *p)
{
	if (::soap_read__tempuri__GetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__SetSamplePlateIdResponse_DEFINED
#define SOAP_TYPE__tempuri__SetSamplePlateIdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetSamplePlateIdResponse(struct soap*, const char*, int, const _tempuri__SetSamplePlateIdResponse *, const char*);
SOAP_FMAC3 _tempuri__SetSamplePlateIdResponse * SOAP_FMAC4 soap_in__tempuri__SetSamplePlateIdResponse(struct soap*, const char*, _tempuri__SetSamplePlateIdResponse *, const char*);
SOAP_FMAC1 _tempuri__SetSamplePlateIdResponse * SOAP_FMAC2 soap_instantiate__tempuri__SetSamplePlateIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SetSamplePlateIdResponse * soap_new__tempuri__SetSamplePlateIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SetSamplePlateIdResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SetSamplePlateIdResponse * soap_new_req__tempuri__SetSamplePlateIdResponse(
	struct soap *soap)
{
	_tempuri__SetSamplePlateIdResponse *_p = ::soap_new__tempuri__SetSamplePlateIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SetSamplePlateIdResponse * soap_new_set__tempuri__SetSamplePlateIdResponse(
	struct soap *soap,
	bool *SetSamplePlateIdResult)
{
	_tempuri__SetSamplePlateIdResponse *_p = ::soap_new__tempuri__SetSamplePlateIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SetSamplePlateIdResponse::SetSamplePlateIdResult = SetSamplePlateIdResult;
	}
	return _p;
}

inline int soap_write__tempuri__SetSamplePlateIdResponse(struct soap *soap, _tempuri__SetSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__SetSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SetSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__SetSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__SetSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__SetSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__SetSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__SetSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SetSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__SetSamplePlateIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetSamplePlateIdResponse", p->soap_type() == SOAP_TYPE__tempuri__SetSamplePlateIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SetSamplePlateIdResponse * SOAP_FMAC4 soap_get__tempuri__SetSamplePlateIdResponse(struct soap*, _tempuri__SetSamplePlateIdResponse *, const char*, const char*);

inline int soap_read__tempuri__SetSamplePlateIdResponse(struct soap *soap, _tempuri__SetSamplePlateIdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__SetSamplePlateIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SetSamplePlateIdResponse(struct soap *soap, const char *URL, _tempuri__SetSamplePlateIdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__SetSamplePlateIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__SetSamplePlateIdResponse(struct soap *soap, _tempuri__SetSamplePlateIdResponse *p)
{
	if (::soap_read__tempuri__SetSamplePlateIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__SetSamplePlateId_DEFINED
#define SOAP_TYPE__tempuri__SetSamplePlateId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetSamplePlateId(struct soap*, const char*, int, const _tempuri__SetSamplePlateId *, const char*);
SOAP_FMAC3 _tempuri__SetSamplePlateId * SOAP_FMAC4 soap_in__tempuri__SetSamplePlateId(struct soap*, const char*, _tempuri__SetSamplePlateId *, const char*);
SOAP_FMAC1 _tempuri__SetSamplePlateId * SOAP_FMAC2 soap_instantiate__tempuri__SetSamplePlateId(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SetSamplePlateId * soap_new__tempuri__SetSamplePlateId(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SetSamplePlateId(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SetSamplePlateId * soap_new_req__tempuri__SetSamplePlateId(
	struct soap *soap)
{
	_tempuri__SetSamplePlateId *_p = ::soap_new__tempuri__SetSamplePlateId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SetSamplePlateId * soap_new_set__tempuri__SetSamplePlateId(
	struct soap *soap,
	int *methodIndex,
	std::string *plateId)
{
	_tempuri__SetSamplePlateId *_p = ::soap_new__tempuri__SetSamplePlateId(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SetSamplePlateId::methodIndex = methodIndex;
		_p->_tempuri__SetSamplePlateId::plateId = plateId;
	}
	return _p;
}

inline int soap_write__tempuri__SetSamplePlateId(struct soap *soap, _tempuri__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__SetSamplePlateId ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SetSamplePlateId(struct soap *soap, const char *URL, _tempuri__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__SetSamplePlateId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__SetSamplePlateId(struct soap *soap, const char *URL, _tempuri__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__SetSamplePlateId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SetSamplePlateId(struct soap *soap, const char *URL, _tempuri__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SetSamplePlateId", p->soap_type() == SOAP_TYPE__tempuri__SetSamplePlateId ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SetSamplePlateId * SOAP_FMAC4 soap_get__tempuri__SetSamplePlateId(struct soap*, _tempuri__SetSamplePlateId *, const char*, const char*);

inline int soap_read__tempuri__SetSamplePlateId(struct soap *soap, _tempuri__SetSamplePlateId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__SetSamplePlateId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SetSamplePlateId(struct soap *soap, const char *URL, _tempuri__SetSamplePlateId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__SetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__SetSamplePlateId(struct soap *soap, _tempuri__SetSamplePlateId *p)
{
	if (::soap_read__tempuri__SetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__CreateRunsetResponse_DEFINED
#define SOAP_TYPE__tempuri__CreateRunsetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__CreateRunsetResponse(struct soap*, const char*, int, const _tempuri__CreateRunsetResponse *, const char*);
SOAP_FMAC3 _tempuri__CreateRunsetResponse * SOAP_FMAC4 soap_in__tempuri__CreateRunsetResponse(struct soap*, const char*, _tempuri__CreateRunsetResponse *, const char*);
SOAP_FMAC1 _tempuri__CreateRunsetResponse * SOAP_FMAC2 soap_instantiate__tempuri__CreateRunsetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__CreateRunsetResponse * soap_new__tempuri__CreateRunsetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__CreateRunsetResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__CreateRunsetResponse * soap_new_req__tempuri__CreateRunsetResponse(
	struct soap *soap)
{
	_tempuri__CreateRunsetResponse *_p = ::soap_new__tempuri__CreateRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__CreateRunsetResponse * soap_new_set__tempuri__CreateRunsetResponse(
	struct soap *soap,
	bool *CreateRunsetResult)
{
	_tempuri__CreateRunsetResponse *_p = ::soap_new__tempuri__CreateRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__CreateRunsetResponse::CreateRunsetResult = CreateRunsetResult;
	}
	return _p;
}

inline int soap_write__tempuri__CreateRunsetResponse(struct soap *soap, _tempuri__CreateRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:CreateRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__CreateRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__CreateRunsetResponse(struct soap *soap, const char *URL, _tempuri__CreateRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:CreateRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__CreateRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__CreateRunsetResponse(struct soap *soap, const char *URL, _tempuri__CreateRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:CreateRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__CreateRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__CreateRunsetResponse(struct soap *soap, const char *URL, _tempuri__CreateRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:CreateRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__CreateRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__CreateRunsetResponse * SOAP_FMAC4 soap_get__tempuri__CreateRunsetResponse(struct soap*, _tempuri__CreateRunsetResponse *, const char*, const char*);

inline int soap_read__tempuri__CreateRunsetResponse(struct soap *soap, _tempuri__CreateRunsetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__CreateRunsetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__CreateRunsetResponse(struct soap *soap, const char *URL, _tempuri__CreateRunsetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__CreateRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__CreateRunsetResponse(struct soap *soap, _tempuri__CreateRunsetResponse *p)
{
	if (::soap_read__tempuri__CreateRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__CreateRunset_DEFINED
#define SOAP_TYPE__tempuri__CreateRunset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__CreateRunset(struct soap*, const char*, int, const _tempuri__CreateRunset *, const char*);
SOAP_FMAC3 _tempuri__CreateRunset * SOAP_FMAC4 soap_in__tempuri__CreateRunset(struct soap*, const char*, _tempuri__CreateRunset *, const char*);
SOAP_FMAC1 _tempuri__CreateRunset * SOAP_FMAC2 soap_instantiate__tempuri__CreateRunset(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__CreateRunset * soap_new__tempuri__CreateRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__CreateRunset(soap, n, NULL, NULL, NULL);
}

inline _tempuri__CreateRunset * soap_new_req__tempuri__CreateRunset(
	struct soap *soap)
{
	_tempuri__CreateRunset *_p = ::soap_new__tempuri__CreateRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__CreateRunset * soap_new_set__tempuri__CreateRunset(
	struct soap *soap,
	arr__ArrayOfstring *methodNames)
{
	_tempuri__CreateRunset *_p = ::soap_new__tempuri__CreateRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__CreateRunset::methodNames = methodNames;
	}
	return _p;
}

inline int soap_write__tempuri__CreateRunset(struct soap *soap, _tempuri__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:CreateRunset", p->soap_type() == SOAP_TYPE__tempuri__CreateRunset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__CreateRunset(struct soap *soap, const char *URL, _tempuri__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:CreateRunset", p->soap_type() == SOAP_TYPE__tempuri__CreateRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__CreateRunset(struct soap *soap, const char *URL, _tempuri__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:CreateRunset", p->soap_type() == SOAP_TYPE__tempuri__CreateRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__CreateRunset(struct soap *soap, const char *URL, _tempuri__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:CreateRunset", p->soap_type() == SOAP_TYPE__tempuri__CreateRunset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__CreateRunset * SOAP_FMAC4 soap_get__tempuri__CreateRunset(struct soap*, _tempuri__CreateRunset *, const char*, const char*);

inline int soap_read__tempuri__CreateRunset(struct soap *soap, _tempuri__CreateRunset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__CreateRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__CreateRunset(struct soap *soap, const char *URL, _tempuri__CreateRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__CreateRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__CreateRunset(struct soap *soap, _tempuri__CreateRunset *p)
{
	if (::soap_read__tempuri__CreateRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__SelectRunsetResponse_DEFINED
#define SOAP_TYPE__tempuri__SelectRunsetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SelectRunsetResponse(struct soap*, const char*, int, const _tempuri__SelectRunsetResponse *, const char*);
SOAP_FMAC3 _tempuri__SelectRunsetResponse * SOAP_FMAC4 soap_in__tempuri__SelectRunsetResponse(struct soap*, const char*, _tempuri__SelectRunsetResponse *, const char*);
SOAP_FMAC1 _tempuri__SelectRunsetResponse * SOAP_FMAC2 soap_instantiate__tempuri__SelectRunsetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SelectRunsetResponse * soap_new__tempuri__SelectRunsetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SelectRunsetResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SelectRunsetResponse * soap_new_req__tempuri__SelectRunsetResponse(
	struct soap *soap)
{
	_tempuri__SelectRunsetResponse *_p = ::soap_new__tempuri__SelectRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SelectRunsetResponse * soap_new_set__tempuri__SelectRunsetResponse(
	struct soap *soap,
	bool *SelectRunsetResult)
{
	_tempuri__SelectRunsetResponse *_p = ::soap_new__tempuri__SelectRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SelectRunsetResponse::SelectRunsetResult = SelectRunsetResult;
	}
	return _p;
}

inline int soap_write__tempuri__SelectRunsetResponse(struct soap *soap, _tempuri__SelectRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__SelectRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SelectRunsetResponse(struct soap *soap, const char *URL, _tempuri__SelectRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__SelectRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__SelectRunsetResponse(struct soap *soap, const char *URL, _tempuri__SelectRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__SelectRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SelectRunsetResponse(struct soap *soap, const char *URL, _tempuri__SelectRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__SelectRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SelectRunsetResponse * SOAP_FMAC4 soap_get__tempuri__SelectRunsetResponse(struct soap*, _tempuri__SelectRunsetResponse *, const char*, const char*);

inline int soap_read__tempuri__SelectRunsetResponse(struct soap *soap, _tempuri__SelectRunsetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__SelectRunsetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SelectRunsetResponse(struct soap *soap, const char *URL, _tempuri__SelectRunsetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__SelectRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__SelectRunsetResponse(struct soap *soap, _tempuri__SelectRunsetResponse *p)
{
	if (::soap_read__tempuri__SelectRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__SelectRunset_DEFINED
#define SOAP_TYPE__tempuri__SelectRunset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SelectRunset(struct soap*, const char*, int, const _tempuri__SelectRunset *, const char*);
SOAP_FMAC3 _tempuri__SelectRunset * SOAP_FMAC4 soap_in__tempuri__SelectRunset(struct soap*, const char*, _tempuri__SelectRunset *, const char*);
SOAP_FMAC1 _tempuri__SelectRunset * SOAP_FMAC2 soap_instantiate__tempuri__SelectRunset(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SelectRunset * soap_new__tempuri__SelectRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SelectRunset(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SelectRunset * soap_new_req__tempuri__SelectRunset(
	struct soap *soap)
{
	_tempuri__SelectRunset *_p = ::soap_new__tempuri__SelectRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SelectRunset * soap_new_set__tempuri__SelectRunset(
	struct soap *soap,
	std::string *runsetName)
{
	_tempuri__SelectRunset *_p = ::soap_new__tempuri__SelectRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SelectRunset::runsetName = runsetName;
	}
	return _p;
}

inline int soap_write__tempuri__SelectRunset(struct soap *soap, _tempuri__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectRunset", p->soap_type() == SOAP_TYPE__tempuri__SelectRunset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SelectRunset(struct soap *soap, const char *URL, _tempuri__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectRunset", p->soap_type() == SOAP_TYPE__tempuri__SelectRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__SelectRunset(struct soap *soap, const char *URL, _tempuri__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectRunset", p->soap_type() == SOAP_TYPE__tempuri__SelectRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SelectRunset(struct soap *soap, const char *URL, _tempuri__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectRunset", p->soap_type() == SOAP_TYPE__tempuri__SelectRunset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SelectRunset * SOAP_FMAC4 soap_get__tempuri__SelectRunset(struct soap*, _tempuri__SelectRunset *, const char*, const char*);

inline int soap_read__tempuri__SelectRunset(struct soap *soap, _tempuri__SelectRunset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__SelectRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SelectRunset(struct soap *soap, const char *URL, _tempuri__SelectRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__SelectRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__SelectRunset(struct soap *soap, _tempuri__SelectRunset *p)
{
	if (::soap_read__tempuri__SelectRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__SelectMethodResponse_DEFINED
#define SOAP_TYPE__tempuri__SelectMethodResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SelectMethodResponse(struct soap*, const char*, int, const _tempuri__SelectMethodResponse *, const char*);
SOAP_FMAC3 _tempuri__SelectMethodResponse * SOAP_FMAC4 soap_in__tempuri__SelectMethodResponse(struct soap*, const char*, _tempuri__SelectMethodResponse *, const char*);
SOAP_FMAC1 _tempuri__SelectMethodResponse * SOAP_FMAC2 soap_instantiate__tempuri__SelectMethodResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SelectMethodResponse * soap_new__tempuri__SelectMethodResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SelectMethodResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SelectMethodResponse * soap_new_req__tempuri__SelectMethodResponse(
	struct soap *soap)
{
	_tempuri__SelectMethodResponse *_p = ::soap_new__tempuri__SelectMethodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SelectMethodResponse * soap_new_set__tempuri__SelectMethodResponse(
	struct soap *soap,
	bool *SelectMethodResult)
{
	_tempuri__SelectMethodResponse *_p = ::soap_new__tempuri__SelectMethodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SelectMethodResponse::SelectMethodResult = SelectMethodResult;
	}
	return _p;
}

inline int soap_write__tempuri__SelectMethodResponse(struct soap *soap, _tempuri__SelectMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__SelectMethodResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SelectMethodResponse(struct soap *soap, const char *URL, _tempuri__SelectMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__SelectMethodResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__SelectMethodResponse(struct soap *soap, const char *URL, _tempuri__SelectMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__SelectMethodResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SelectMethodResponse(struct soap *soap, const char *URL, _tempuri__SelectMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__SelectMethodResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SelectMethodResponse * SOAP_FMAC4 soap_get__tempuri__SelectMethodResponse(struct soap*, _tempuri__SelectMethodResponse *, const char*, const char*);

inline int soap_read__tempuri__SelectMethodResponse(struct soap *soap, _tempuri__SelectMethodResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__SelectMethodResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SelectMethodResponse(struct soap *soap, const char *URL, _tempuri__SelectMethodResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__SelectMethodResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__SelectMethodResponse(struct soap *soap, _tempuri__SelectMethodResponse *p)
{
	if (::soap_read__tempuri__SelectMethodResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__SelectMethod_DEFINED
#define SOAP_TYPE__tempuri__SelectMethod_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SelectMethod(struct soap*, const char*, int, const _tempuri__SelectMethod *, const char*);
SOAP_FMAC3 _tempuri__SelectMethod * SOAP_FMAC4 soap_in__tempuri__SelectMethod(struct soap*, const char*, _tempuri__SelectMethod *, const char*);
SOAP_FMAC1 _tempuri__SelectMethod * SOAP_FMAC2 soap_instantiate__tempuri__SelectMethod(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__SelectMethod * soap_new__tempuri__SelectMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__SelectMethod(soap, n, NULL, NULL, NULL);
}

inline _tempuri__SelectMethod * soap_new_req__tempuri__SelectMethod(
	struct soap *soap)
{
	_tempuri__SelectMethod *_p = ::soap_new__tempuri__SelectMethod(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__SelectMethod * soap_new_set__tempuri__SelectMethod(
	struct soap *soap,
	std::string *methodName)
{
	_tempuri__SelectMethod *_p = ::soap_new__tempuri__SelectMethod(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__SelectMethod::methodName = methodName;
	}
	return _p;
}

inline int soap_write__tempuri__SelectMethod(struct soap *soap, _tempuri__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectMethod", p->soap_type() == SOAP_TYPE__tempuri__SelectMethod ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__SelectMethod(struct soap *soap, const char *URL, _tempuri__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectMethod", p->soap_type() == SOAP_TYPE__tempuri__SelectMethod ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__SelectMethod(struct soap *soap, const char *URL, _tempuri__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectMethod", p->soap_type() == SOAP_TYPE__tempuri__SelectMethod ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__SelectMethod(struct soap *soap, const char *URL, _tempuri__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:SelectMethod", p->soap_type() == SOAP_TYPE__tempuri__SelectMethod ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__SelectMethod * SOAP_FMAC4 soap_get__tempuri__SelectMethod(struct soap*, _tempuri__SelectMethod *, const char*, const char*);

inline int soap_read__tempuri__SelectMethod(struct soap *soap, _tempuri__SelectMethod *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__SelectMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__SelectMethod(struct soap *soap, const char *URL, _tempuri__SelectMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__SelectMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__SelectMethod(struct soap *soap, _tempuri__SelectMethod *p)
{
	if (::soap_read__tempuri__SelectMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetMethodNamesOfRunsetResponse_DEFINED
#define SOAP_TYPE__tempuri__GetMethodNamesOfRunsetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetMethodNamesOfRunsetResponse(struct soap*, const char*, int, const _tempuri__GetMethodNamesOfRunsetResponse *, const char*);
SOAP_FMAC3 _tempuri__GetMethodNamesOfRunsetResponse * SOAP_FMAC4 soap_in__tempuri__GetMethodNamesOfRunsetResponse(struct soap*, const char*, _tempuri__GetMethodNamesOfRunsetResponse *, const char*);
SOAP_FMAC1 _tempuri__GetMethodNamesOfRunsetResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetMethodNamesOfRunsetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetMethodNamesOfRunsetResponse * soap_new__tempuri__GetMethodNamesOfRunsetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetMethodNamesOfRunsetResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetMethodNamesOfRunsetResponse * soap_new_req__tempuri__GetMethodNamesOfRunsetResponse(
	struct soap *soap)
{
	_tempuri__GetMethodNamesOfRunsetResponse *_p = ::soap_new__tempuri__GetMethodNamesOfRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetMethodNamesOfRunsetResponse * soap_new_set__tempuri__GetMethodNamesOfRunsetResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetMethodNamesOfRunsetResult)
{
	_tempuri__GetMethodNamesOfRunsetResponse *_p = ::soap_new__tempuri__GetMethodNamesOfRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetMethodNamesOfRunsetResponse::GetMethodNamesOfRunsetResult = GetMethodNamesOfRunsetResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetMethodNamesOfRunsetResponse(struct soap *soap, _tempuri__GetMethodNamesOfRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMethodNamesOfRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetMethodNamesOfRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetMethodNamesOfRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetMethodNamesOfRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMethodNamesOfRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetMethodNamesOfRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetMethodNamesOfRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetMethodNamesOfRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMethodNamesOfRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetMethodNamesOfRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetMethodNamesOfRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetMethodNamesOfRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMethodNamesOfRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetMethodNamesOfRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetMethodNamesOfRunsetResponse * SOAP_FMAC4 soap_get__tempuri__GetMethodNamesOfRunsetResponse(struct soap*, _tempuri__GetMethodNamesOfRunsetResponse *, const char*, const char*);

inline int soap_read__tempuri__GetMethodNamesOfRunsetResponse(struct soap *soap, _tempuri__GetMethodNamesOfRunsetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetMethodNamesOfRunsetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetMethodNamesOfRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetMethodNamesOfRunsetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetMethodNamesOfRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetMethodNamesOfRunsetResponse(struct soap *soap, _tempuri__GetMethodNamesOfRunsetResponse *p)
{
	if (::soap_read__tempuri__GetMethodNamesOfRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetMethodNamesOfRunset_DEFINED
#define SOAP_TYPE__tempuri__GetMethodNamesOfRunset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetMethodNamesOfRunset(struct soap*, const char*, int, const _tempuri__GetMethodNamesOfRunset *, const char*);
SOAP_FMAC3 _tempuri__GetMethodNamesOfRunset * SOAP_FMAC4 soap_in__tempuri__GetMethodNamesOfRunset(struct soap*, const char*, _tempuri__GetMethodNamesOfRunset *, const char*);
SOAP_FMAC1 _tempuri__GetMethodNamesOfRunset * SOAP_FMAC2 soap_instantiate__tempuri__GetMethodNamesOfRunset(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetMethodNamesOfRunset * soap_new__tempuri__GetMethodNamesOfRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetMethodNamesOfRunset(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetMethodNamesOfRunset * soap_new_req__tempuri__GetMethodNamesOfRunset(
	struct soap *soap)
{
	_tempuri__GetMethodNamesOfRunset *_p = ::soap_new__tempuri__GetMethodNamesOfRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetMethodNamesOfRunset * soap_new_set__tempuri__GetMethodNamesOfRunset(
	struct soap *soap,
	std::string *runsetName)
{
	_tempuri__GetMethodNamesOfRunset *_p = ::soap_new__tempuri__GetMethodNamesOfRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetMethodNamesOfRunset::runsetName = runsetName;
	}
	return _p;
}

inline int soap_write__tempuri__GetMethodNamesOfRunset(struct soap *soap, _tempuri__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMethodNamesOfRunset", p->soap_type() == SOAP_TYPE__tempuri__GetMethodNamesOfRunset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetMethodNamesOfRunset(struct soap *soap, const char *URL, _tempuri__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMethodNamesOfRunset", p->soap_type() == SOAP_TYPE__tempuri__GetMethodNamesOfRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetMethodNamesOfRunset(struct soap *soap, const char *URL, _tempuri__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMethodNamesOfRunset", p->soap_type() == SOAP_TYPE__tempuri__GetMethodNamesOfRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetMethodNamesOfRunset(struct soap *soap, const char *URL, _tempuri__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetMethodNamesOfRunset", p->soap_type() == SOAP_TYPE__tempuri__GetMethodNamesOfRunset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetMethodNamesOfRunset * SOAP_FMAC4 soap_get__tempuri__GetMethodNamesOfRunset(struct soap*, _tempuri__GetMethodNamesOfRunset *, const char*, const char*);

inline int soap_read__tempuri__GetMethodNamesOfRunset(struct soap *soap, _tempuri__GetMethodNamesOfRunset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetMethodNamesOfRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetMethodNamesOfRunset(struct soap *soap, const char *URL, _tempuri__GetMethodNamesOfRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetMethodNamesOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetMethodNamesOfRunset(struct soap *soap, _tempuri__GetMethodNamesOfRunset *p)
{
	if (::soap_read__tempuri__GetMethodNamesOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypeOfRunsetResponse_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypeOfRunsetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypeOfRunsetResponse(struct soap*, const char*, int, const _tempuri__GetAssayTypeOfRunsetResponse *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfRunsetResponse * SOAP_FMAC4 soap_in__tempuri__GetAssayTypeOfRunsetResponse(struct soap*, const char*, _tempuri__GetAssayTypeOfRunsetResponse *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypeOfRunsetResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypeOfRunsetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypeOfRunsetResponse * soap_new__tempuri__GetAssayTypeOfRunsetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypeOfRunsetResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypeOfRunsetResponse * soap_new_req__tempuri__GetAssayTypeOfRunsetResponse(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfRunsetResponse *_p = ::soap_new__tempuri__GetAssayTypeOfRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypeOfRunsetResponse * soap_new_set__tempuri__GetAssayTypeOfRunsetResponse(
	struct soap *soap,
	std::string *GetAssayTypeOfRunsetResult)
{
	_tempuri__GetAssayTypeOfRunsetResponse *_p = ::soap_new__tempuri__GetAssayTypeOfRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetAssayTypeOfRunsetResponse::GetAssayTypeOfRunsetResult = GetAssayTypeOfRunsetResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypeOfRunsetResponse(struct soap *soap, _tempuri__GetAssayTypeOfRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypeOfRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypeOfRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypeOfRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypeOfRunsetResponse * SOAP_FMAC4 soap_get__tempuri__GetAssayTypeOfRunsetResponse(struct soap*, _tempuri__GetAssayTypeOfRunsetResponse *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypeOfRunsetResponse(struct soap *soap, _tempuri__GetAssayTypeOfRunsetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypeOfRunsetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypeOfRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfRunsetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypeOfRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypeOfRunsetResponse(struct soap *soap, _tempuri__GetAssayTypeOfRunsetResponse *p)
{
	if (::soap_read__tempuri__GetAssayTypeOfRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypeOfRunset_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypeOfRunset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypeOfRunset(struct soap*, const char*, int, const _tempuri__GetAssayTypeOfRunset *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfRunset * SOAP_FMAC4 soap_in__tempuri__GetAssayTypeOfRunset(struct soap*, const char*, _tempuri__GetAssayTypeOfRunset *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypeOfRunset * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypeOfRunset(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypeOfRunset * soap_new__tempuri__GetAssayTypeOfRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypeOfRunset(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypeOfRunset * soap_new_req__tempuri__GetAssayTypeOfRunset(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfRunset *_p = ::soap_new__tempuri__GetAssayTypeOfRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypeOfRunset * soap_new_set__tempuri__GetAssayTypeOfRunset(
	struct soap *soap,
	std::string *runsetName)
{
	_tempuri__GetAssayTypeOfRunset *_p = ::soap_new__tempuri__GetAssayTypeOfRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetAssayTypeOfRunset::runsetName = runsetName;
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypeOfRunset(struct soap *soap, _tempuri__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfRunset", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfRunset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypeOfRunset(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfRunset", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypeOfRunset(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfRunset", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypeOfRunset(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfRunset", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfRunset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypeOfRunset * SOAP_FMAC4 soap_get__tempuri__GetAssayTypeOfRunset(struct soap*, _tempuri__GetAssayTypeOfRunset *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypeOfRunset(struct soap *soap, _tempuri__GetAssayTypeOfRunset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypeOfRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypeOfRunset(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypeOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypeOfRunset(struct soap *soap, _tempuri__GetAssayTypeOfRunset *p)
{
	if (::soap_read__tempuri__GetAssayTypeOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunsetResponse_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunsetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap*, const char*, int, const _tempuri__GetAssayTypeOfCurrentRunsetResponse *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentRunsetResponse * SOAP_FMAC4 soap_in__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap*, const char*, _tempuri__GetAssayTypeOfCurrentRunsetResponse *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypeOfCurrentRunsetResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypeOfCurrentRunsetResponse * soap_new__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypeOfCurrentRunsetResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypeOfCurrentRunsetResponse * soap_new_req__tempuri__GetAssayTypeOfCurrentRunsetResponse(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfCurrentRunsetResponse *_p = ::soap_new__tempuri__GetAssayTypeOfCurrentRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypeOfCurrentRunsetResponse * soap_new_set__tempuri__GetAssayTypeOfCurrentRunsetResponse(
	struct soap *soap,
	std::string *GetAssayTypeOfCurrentRunsetResult)
{
	_tempuri__GetAssayTypeOfCurrentRunsetResponse *_p = ::soap_new__tempuri__GetAssayTypeOfCurrentRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetAssayTypeOfCurrentRunsetResponse::GetAssayTypeOfCurrentRunsetResult = GetAssayTypeOfCurrentRunsetResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap *soap, _tempuri__GetAssayTypeOfCurrentRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentRunsetResponse * SOAP_FMAC4 soap_get__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap*, _tempuri__GetAssayTypeOfCurrentRunsetResponse *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap *soap, _tempuri__GetAssayTypeOfCurrentRunsetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypeOfCurrentRunsetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentRunsetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypeOfCurrentRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypeOfCurrentRunsetResponse(struct soap *soap, _tempuri__GetAssayTypeOfCurrentRunsetResponse *p)
{
	if (::soap_read__tempuri__GetAssayTypeOfCurrentRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunset_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypeOfCurrentRunset(struct soap*, const char*, int, const _tempuri__GetAssayTypeOfCurrentRunset *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentRunset * SOAP_FMAC4 soap_in__tempuri__GetAssayTypeOfCurrentRunset(struct soap*, const char*, _tempuri__GetAssayTypeOfCurrentRunset *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypeOfCurrentRunset * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypeOfCurrentRunset(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypeOfCurrentRunset * soap_new__tempuri__GetAssayTypeOfCurrentRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypeOfCurrentRunset(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypeOfCurrentRunset * soap_new_req__tempuri__GetAssayTypeOfCurrentRunset(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfCurrentRunset *_p = ::soap_new__tempuri__GetAssayTypeOfCurrentRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypeOfCurrentRunset * soap_new_set__tempuri__GetAssayTypeOfCurrentRunset(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfCurrentRunset *_p = ::soap_new__tempuri__GetAssayTypeOfCurrentRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypeOfCurrentRunset(struct soap *soap, _tempuri__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentRunset", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentRunset", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentRunset", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentRunset", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentRunset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentRunset * SOAP_FMAC4 soap_get__tempuri__GetAssayTypeOfCurrentRunset(struct soap*, _tempuri__GetAssayTypeOfCurrentRunset *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypeOfCurrentRunset(struct soap *soap, _tempuri__GetAssayTypeOfCurrentRunset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypeOfCurrentRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypeOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypeOfCurrentRunset(struct soap *soap, _tempuri__GetAssayTypeOfCurrentRunset *p)
{
	if (::soap_read__tempuri__GetAssayTypeOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNameOfCurrentRunsetResponse_DEFINED
#define SOAP_TYPE__tempuri__GetNameOfCurrentRunsetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNameOfCurrentRunsetResponse(struct soap*, const char*, int, const _tempuri__GetNameOfCurrentRunsetResponse *, const char*);
SOAP_FMAC3 _tempuri__GetNameOfCurrentRunsetResponse * SOAP_FMAC4 soap_in__tempuri__GetNameOfCurrentRunsetResponse(struct soap*, const char*, _tempuri__GetNameOfCurrentRunsetResponse *, const char*);
SOAP_FMAC1 _tempuri__GetNameOfCurrentRunsetResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetNameOfCurrentRunsetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNameOfCurrentRunsetResponse * soap_new__tempuri__GetNameOfCurrentRunsetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNameOfCurrentRunsetResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNameOfCurrentRunsetResponse * soap_new_req__tempuri__GetNameOfCurrentRunsetResponse(
	struct soap *soap)
{
	_tempuri__GetNameOfCurrentRunsetResponse *_p = ::soap_new__tempuri__GetNameOfCurrentRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNameOfCurrentRunsetResponse * soap_new_set__tempuri__GetNameOfCurrentRunsetResponse(
	struct soap *soap,
	std::string *GetNameOfCurrentRunsetResult)
{
	_tempuri__GetNameOfCurrentRunsetResponse *_p = ::soap_new__tempuri__GetNameOfCurrentRunsetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetNameOfCurrentRunsetResponse::GetNameOfCurrentRunsetResult = GetNameOfCurrentRunsetResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetNameOfCurrentRunsetResponse(struct soap *soap, _tempuri__GetNameOfCurrentRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNameOfCurrentRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNameOfCurrentRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentRunsetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNameOfCurrentRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentRunsetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentRunsetResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentRunsetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNameOfCurrentRunsetResponse * SOAP_FMAC4 soap_get__tempuri__GetNameOfCurrentRunsetResponse(struct soap*, _tempuri__GetNameOfCurrentRunsetResponse *, const char*, const char*);

inline int soap_read__tempuri__GetNameOfCurrentRunsetResponse(struct soap *soap, _tempuri__GetNameOfCurrentRunsetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNameOfCurrentRunsetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNameOfCurrentRunsetResponse(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentRunsetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNameOfCurrentRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNameOfCurrentRunsetResponse(struct soap *soap, _tempuri__GetNameOfCurrentRunsetResponse *p)
{
	if (::soap_read__tempuri__GetNameOfCurrentRunsetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNameOfCurrentRunset_DEFINED
#define SOAP_TYPE__tempuri__GetNameOfCurrentRunset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNameOfCurrentRunset(struct soap*, const char*, int, const _tempuri__GetNameOfCurrentRunset *, const char*);
SOAP_FMAC3 _tempuri__GetNameOfCurrentRunset * SOAP_FMAC4 soap_in__tempuri__GetNameOfCurrentRunset(struct soap*, const char*, _tempuri__GetNameOfCurrentRunset *, const char*);
SOAP_FMAC1 _tempuri__GetNameOfCurrentRunset * SOAP_FMAC2 soap_instantiate__tempuri__GetNameOfCurrentRunset(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNameOfCurrentRunset * soap_new__tempuri__GetNameOfCurrentRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNameOfCurrentRunset(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNameOfCurrentRunset * soap_new_req__tempuri__GetNameOfCurrentRunset(
	struct soap *soap)
{
	_tempuri__GetNameOfCurrentRunset *_p = ::soap_new__tempuri__GetNameOfCurrentRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNameOfCurrentRunset * soap_new_set__tempuri__GetNameOfCurrentRunset(
	struct soap *soap)
{
	_tempuri__GetNameOfCurrentRunset *_p = ::soap_new__tempuri__GetNameOfCurrentRunset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetNameOfCurrentRunset(struct soap *soap, _tempuri__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentRunset", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentRunset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNameOfCurrentRunset(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentRunset", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNameOfCurrentRunset(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentRunset", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentRunset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNameOfCurrentRunset(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentRunset", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentRunset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNameOfCurrentRunset * SOAP_FMAC4 soap_get__tempuri__GetNameOfCurrentRunset(struct soap*, _tempuri__GetNameOfCurrentRunset *, const char*, const char*);

inline int soap_read__tempuri__GetNameOfCurrentRunset(struct soap *soap, _tempuri__GetNameOfCurrentRunset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNameOfCurrentRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNameOfCurrentRunset(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNameOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNameOfCurrentRunset(struct soap *soap, _tempuri__GetNameOfCurrentRunset *p)
{
	if (::soap_read__tempuri__GetNameOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsetsResponse_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsetsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap*, const char*, int, const _tempuri__GetAssayTypesOfAllRunsetsResponse *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllRunsetsResponse * SOAP_FMAC4 soap_in__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap*, const char*, _tempuri__GetAssayTypesOfAllRunsetsResponse *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypesOfAllRunsetsResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypesOfAllRunsetsResponse * soap_new__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypesOfAllRunsetsResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypesOfAllRunsetsResponse * soap_new_req__tempuri__GetAssayTypesOfAllRunsetsResponse(
	struct soap *soap)
{
	_tempuri__GetAssayTypesOfAllRunsetsResponse *_p = ::soap_new__tempuri__GetAssayTypesOfAllRunsetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypesOfAllRunsetsResponse * soap_new_set__tempuri__GetAssayTypesOfAllRunsetsResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetAssayTypesOfAllRunsetsResult)
{
	_tempuri__GetAssayTypesOfAllRunsetsResponse *_p = ::soap_new__tempuri__GetAssayTypesOfAllRunsetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetAssayTypesOfAllRunsetsResponse::GetAssayTypesOfAllRunsetsResult = GetAssayTypesOfAllRunsetsResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap *soap, _tempuri__GetAssayTypesOfAllRunsetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllRunsetsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllRunsetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllRunsetsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllRunsetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllRunsetsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllRunsetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllRunsetsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllRunsetsResponse * SOAP_FMAC4 soap_get__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap*, _tempuri__GetAssayTypesOfAllRunsetsResponse *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap *soap, _tempuri__GetAssayTypesOfAllRunsetsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypesOfAllRunsetsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllRunsetsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypesOfAllRunsetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypesOfAllRunsetsResponse(struct soap *soap, _tempuri__GetAssayTypesOfAllRunsetsResponse *p)
{
	if (::soap_read__tempuri__GetAssayTypesOfAllRunsetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsets_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypesOfAllRunsets(struct soap*, const char*, int, const _tempuri__GetAssayTypesOfAllRunsets *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllRunsets * SOAP_FMAC4 soap_in__tempuri__GetAssayTypesOfAllRunsets(struct soap*, const char*, _tempuri__GetAssayTypesOfAllRunsets *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypesOfAllRunsets * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypesOfAllRunsets(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypesOfAllRunsets * soap_new__tempuri__GetAssayTypesOfAllRunsets(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypesOfAllRunsets(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypesOfAllRunsets * soap_new_req__tempuri__GetAssayTypesOfAllRunsets(
	struct soap *soap)
{
	_tempuri__GetAssayTypesOfAllRunsets *_p = ::soap_new__tempuri__GetAssayTypesOfAllRunsets(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypesOfAllRunsets * soap_new_set__tempuri__GetAssayTypesOfAllRunsets(
	struct soap *soap)
{
	_tempuri__GetAssayTypesOfAllRunsets *_p = ::soap_new__tempuri__GetAssayTypesOfAllRunsets(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypesOfAllRunsets(struct soap *soap, _tempuri__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllRunsets", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllRunsets", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllRunsets", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllRunsets", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllRunsets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllRunsets * SOAP_FMAC4 soap_get__tempuri__GetAssayTypesOfAllRunsets(struct soap*, _tempuri__GetAssayTypesOfAllRunsets *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypesOfAllRunsets(struct soap *soap, _tempuri__GetAssayTypesOfAllRunsets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypesOfAllRunsets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllRunsets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypesOfAllRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypesOfAllRunsets(struct soap *soap, _tempuri__GetAssayTypesOfAllRunsets *p)
{
	if (::soap_read__tempuri__GetAssayTypesOfAllRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayTypeResponse_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayTypeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap*, const char*, int, const _tempuri__GetNamesOfRunsetsOfAssayTypeResponse *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfRunsetsOfAssayTypeResponse * SOAP_FMAC4 soap_in__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap*, const char*, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfRunsetsOfAssayTypeResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfRunsetsOfAssayTypeResponse * soap_new__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfRunsetsOfAssayTypeResponse * soap_new_req__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(
	struct soap *soap)
{
	_tempuri__GetNamesOfRunsetsOfAssayTypeResponse *_p = ::soap_new__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfRunsetsOfAssayTypeResponse * soap_new_set__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetNamesOfRunsetsOfAssayTypeResult)
{
	_tempuri__GetNamesOfRunsetsOfAssayTypeResponse *_p = ::soap_new__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetNamesOfRunsetsOfAssayTypeResponse::GetNamesOfRunsetsOfAssayTypeResult = GetNamesOfRunsetsOfAssayTypeResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap *soap, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsOfAssayTypeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsOfAssayTypeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsOfAssayTypeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsOfAssayTypeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfRunsetsOfAssayTypeResponse * SOAP_FMAC4 soap_get__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap*, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap *soap, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(struct soap *soap, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse *p)
{
	if (::soap_read__tempuri__GetNamesOfRunsetsOfAssayTypeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayType_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfRunsetsOfAssayType(struct soap*, const char*, int, const _tempuri__GetNamesOfRunsetsOfAssayType *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfRunsetsOfAssayType * SOAP_FMAC4 soap_in__tempuri__GetNamesOfRunsetsOfAssayType(struct soap*, const char*, _tempuri__GetNamesOfRunsetsOfAssayType *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfRunsetsOfAssayType * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfRunsetsOfAssayType(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfRunsetsOfAssayType * soap_new__tempuri__GetNamesOfRunsetsOfAssayType(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfRunsetsOfAssayType(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfRunsetsOfAssayType * soap_new_req__tempuri__GetNamesOfRunsetsOfAssayType(
	struct soap *soap)
{
	_tempuri__GetNamesOfRunsetsOfAssayType *_p = ::soap_new__tempuri__GetNamesOfRunsetsOfAssayType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfRunsetsOfAssayType * soap_new_set__tempuri__GetNamesOfRunsetsOfAssayType(
	struct soap *soap,
	std::string *assayType)
{
	_tempuri__GetNamesOfRunsetsOfAssayType *_p = ::soap_new__tempuri__GetNamesOfRunsetsOfAssayType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetNamesOfRunsetsOfAssayType::assayType = assayType;
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfRunsetsOfAssayType(struct soap *soap, _tempuri__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsOfAssayType", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsOfAssayType", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsOfAssayType", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsOfAssayType", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsOfAssayType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfRunsetsOfAssayType * SOAP_FMAC4 soap_get__tempuri__GetNamesOfRunsetsOfAssayType(struct soap*, _tempuri__GetNamesOfRunsetsOfAssayType *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfRunsetsOfAssayType(struct soap *soap, _tempuri__GetNamesOfRunsetsOfAssayType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfRunsetsOfAssayType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsOfAssayType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfRunsetsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfRunsetsOfAssayType(struct soap *soap, _tempuri__GetNamesOfRunsetsOfAssayType *p)
{
	if (::soap_read__tempuri__GetNamesOfRunsetsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfRunsetsResponse_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfRunsetsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfRunsetsResponse(struct soap*, const char*, int, const _tempuri__GetNamesOfRunsetsResponse *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfRunsetsResponse * SOAP_FMAC4 soap_in__tempuri__GetNamesOfRunsetsResponse(struct soap*, const char*, _tempuri__GetNamesOfRunsetsResponse *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfRunsetsResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfRunsetsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfRunsetsResponse * soap_new__tempuri__GetNamesOfRunsetsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfRunsetsResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfRunsetsResponse * soap_new_req__tempuri__GetNamesOfRunsetsResponse(
	struct soap *soap)
{
	_tempuri__GetNamesOfRunsetsResponse *_p = ::soap_new__tempuri__GetNamesOfRunsetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfRunsetsResponse * soap_new_set__tempuri__GetNamesOfRunsetsResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetNamesOfRunsetsResult)
{
	_tempuri__GetNamesOfRunsetsResponse *_p = ::soap_new__tempuri__GetNamesOfRunsetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetNamesOfRunsetsResponse::GetNamesOfRunsetsResult = GetNamesOfRunsetsResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfRunsetsResponse(struct soap *soap, _tempuri__GetNamesOfRunsetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfRunsetsResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfRunsetsResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfRunsetsResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsetsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfRunsetsResponse * SOAP_FMAC4 soap_get__tempuri__GetNamesOfRunsetsResponse(struct soap*, _tempuri__GetNamesOfRunsetsResponse *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfRunsetsResponse(struct soap *soap, _tempuri__GetNamesOfRunsetsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfRunsetsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfRunsetsResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsetsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfRunsetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfRunsetsResponse(struct soap *soap, _tempuri__GetNamesOfRunsetsResponse *p)
{
	if (::soap_read__tempuri__GetNamesOfRunsetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfRunsets_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfRunsets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfRunsets(struct soap*, const char*, int, const _tempuri__GetNamesOfRunsets *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfRunsets * SOAP_FMAC4 soap_in__tempuri__GetNamesOfRunsets(struct soap*, const char*, _tempuri__GetNamesOfRunsets *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfRunsets * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfRunsets(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfRunsets * soap_new__tempuri__GetNamesOfRunsets(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfRunsets(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfRunsets * soap_new_req__tempuri__GetNamesOfRunsets(
	struct soap *soap)
{
	_tempuri__GetNamesOfRunsets *_p = ::soap_new__tempuri__GetNamesOfRunsets(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfRunsets * soap_new_set__tempuri__GetNamesOfRunsets(
	struct soap *soap)
{
	_tempuri__GetNamesOfRunsets *_p = ::soap_new__tempuri__GetNamesOfRunsets(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfRunsets(struct soap *soap, _tempuri__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsets", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfRunsets(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsets", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfRunsets(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsets", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfRunsets(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfRunsets", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfRunsets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfRunsets * SOAP_FMAC4 soap_get__tempuri__GetNamesOfRunsets(struct soap*, _tempuri__GetNamesOfRunsets *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfRunsets(struct soap *soap, _tempuri__GetNamesOfRunsets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfRunsets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfRunsets(struct soap *soap, const char *URL, _tempuri__GetNamesOfRunsets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfRunsets(struct soap *soap, _tempuri__GetNamesOfRunsets *p)
{
	if (::soap_read__tempuri__GetNamesOfRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypeOfMethodResponse_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypeOfMethodResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypeOfMethodResponse(struct soap*, const char*, int, const _tempuri__GetAssayTypeOfMethodResponse *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfMethodResponse * SOAP_FMAC4 soap_in__tempuri__GetAssayTypeOfMethodResponse(struct soap*, const char*, _tempuri__GetAssayTypeOfMethodResponse *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypeOfMethodResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypeOfMethodResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypeOfMethodResponse * soap_new__tempuri__GetAssayTypeOfMethodResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypeOfMethodResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypeOfMethodResponse * soap_new_req__tempuri__GetAssayTypeOfMethodResponse(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfMethodResponse *_p = ::soap_new__tempuri__GetAssayTypeOfMethodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypeOfMethodResponse * soap_new_set__tempuri__GetAssayTypeOfMethodResponse(
	struct soap *soap,
	std::string *GetAssayTypeOfMethodResult)
{
	_tempuri__GetAssayTypeOfMethodResponse *_p = ::soap_new__tempuri__GetAssayTypeOfMethodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetAssayTypeOfMethodResponse::GetAssayTypeOfMethodResult = GetAssayTypeOfMethodResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypeOfMethodResponse(struct soap *soap, _tempuri__GetAssayTypeOfMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfMethodResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypeOfMethodResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfMethodResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypeOfMethodResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfMethodResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypeOfMethodResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfMethodResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypeOfMethodResponse * SOAP_FMAC4 soap_get__tempuri__GetAssayTypeOfMethodResponse(struct soap*, _tempuri__GetAssayTypeOfMethodResponse *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypeOfMethodResponse(struct soap *soap, _tempuri__GetAssayTypeOfMethodResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypeOfMethodResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypeOfMethodResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfMethodResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypeOfMethodResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypeOfMethodResponse(struct soap *soap, _tempuri__GetAssayTypeOfMethodResponse *p)
{
	if (::soap_read__tempuri__GetAssayTypeOfMethodResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypeOfMethod_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypeOfMethod_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypeOfMethod(struct soap*, const char*, int, const _tempuri__GetAssayTypeOfMethod *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfMethod * SOAP_FMAC4 soap_in__tempuri__GetAssayTypeOfMethod(struct soap*, const char*, _tempuri__GetAssayTypeOfMethod *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypeOfMethod * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypeOfMethod(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypeOfMethod * soap_new__tempuri__GetAssayTypeOfMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypeOfMethod(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypeOfMethod * soap_new_req__tempuri__GetAssayTypeOfMethod(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfMethod *_p = ::soap_new__tempuri__GetAssayTypeOfMethod(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypeOfMethod * soap_new_set__tempuri__GetAssayTypeOfMethod(
	struct soap *soap,
	std::string *methodName)
{
	_tempuri__GetAssayTypeOfMethod *_p = ::soap_new__tempuri__GetAssayTypeOfMethod(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetAssayTypeOfMethod::methodName = methodName;
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypeOfMethod(struct soap *soap, _tempuri__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfMethod", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfMethod ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypeOfMethod(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfMethod", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfMethod ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypeOfMethod(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfMethod", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfMethod ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypeOfMethod(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfMethod", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfMethod ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypeOfMethod * SOAP_FMAC4 soap_get__tempuri__GetAssayTypeOfMethod(struct soap*, _tempuri__GetAssayTypeOfMethod *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypeOfMethod(struct soap *soap, _tempuri__GetAssayTypeOfMethod *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypeOfMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypeOfMethod(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypeOfMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypeOfMethod(struct soap *soap, _tempuri__GetAssayTypeOfMethod *p)
{
	if (::soap_read__tempuri__GetAssayTypeOfMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethodResponse_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethodResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap*, const char*, int, const _tempuri__GetAssayTypeOfCurrentMethodResponse *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentMethodResponse * SOAP_FMAC4 soap_in__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap*, const char*, _tempuri__GetAssayTypeOfCurrentMethodResponse *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypeOfCurrentMethodResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypeOfCurrentMethodResponse * soap_new__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypeOfCurrentMethodResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypeOfCurrentMethodResponse * soap_new_req__tempuri__GetAssayTypeOfCurrentMethodResponse(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfCurrentMethodResponse *_p = ::soap_new__tempuri__GetAssayTypeOfCurrentMethodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypeOfCurrentMethodResponse * soap_new_set__tempuri__GetAssayTypeOfCurrentMethodResponse(
	struct soap *soap,
	std::string *GetAssayTypeOfCurrentMethodResult)
{
	_tempuri__GetAssayTypeOfCurrentMethodResponse *_p = ::soap_new__tempuri__GetAssayTypeOfCurrentMethodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetAssayTypeOfCurrentMethodResponse::GetAssayTypeOfCurrentMethodResult = GetAssayTypeOfCurrentMethodResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap *soap, _tempuri__GetAssayTypeOfCurrentMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethodResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethodResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethodResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethodResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentMethodResponse * SOAP_FMAC4 soap_get__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap*, _tempuri__GetAssayTypeOfCurrentMethodResponse *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap *soap, _tempuri__GetAssayTypeOfCurrentMethodResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypeOfCurrentMethodResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentMethodResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypeOfCurrentMethodResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypeOfCurrentMethodResponse(struct soap *soap, _tempuri__GetAssayTypeOfCurrentMethodResponse *p)
{
	if (::soap_read__tempuri__GetAssayTypeOfCurrentMethodResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethod_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethod_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypeOfCurrentMethod(struct soap*, const char*, int, const _tempuri__GetAssayTypeOfCurrentMethod *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentMethod * SOAP_FMAC4 soap_in__tempuri__GetAssayTypeOfCurrentMethod(struct soap*, const char*, _tempuri__GetAssayTypeOfCurrentMethod *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypeOfCurrentMethod * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypeOfCurrentMethod(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypeOfCurrentMethod * soap_new__tempuri__GetAssayTypeOfCurrentMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypeOfCurrentMethod(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypeOfCurrentMethod * soap_new_req__tempuri__GetAssayTypeOfCurrentMethod(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfCurrentMethod *_p = ::soap_new__tempuri__GetAssayTypeOfCurrentMethod(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypeOfCurrentMethod * soap_new_set__tempuri__GetAssayTypeOfCurrentMethod(
	struct soap *soap)
{
	_tempuri__GetAssayTypeOfCurrentMethod *_p = ::soap_new__tempuri__GetAssayTypeOfCurrentMethod(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypeOfCurrentMethod(struct soap *soap, _tempuri__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentMethod", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethod ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentMethod", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethod ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentMethod", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethod ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypeOfCurrentMethod", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypeOfCurrentMethod ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentMethod * SOAP_FMAC4 soap_get__tempuri__GetAssayTypeOfCurrentMethod(struct soap*, _tempuri__GetAssayTypeOfCurrentMethod *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypeOfCurrentMethod(struct soap *soap, _tempuri__GetAssayTypeOfCurrentMethod *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypeOfCurrentMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, _tempuri__GetAssayTypeOfCurrentMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypeOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypeOfCurrentMethod(struct soap *soap, _tempuri__GetAssayTypeOfCurrentMethod *p)
{
	if (::soap_read__tempuri__GetAssayTypeOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNameOfCurrentMethodResponse_DEFINED
#define SOAP_TYPE__tempuri__GetNameOfCurrentMethodResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNameOfCurrentMethodResponse(struct soap*, const char*, int, const _tempuri__GetNameOfCurrentMethodResponse *, const char*);
SOAP_FMAC3 _tempuri__GetNameOfCurrentMethodResponse * SOAP_FMAC4 soap_in__tempuri__GetNameOfCurrentMethodResponse(struct soap*, const char*, _tempuri__GetNameOfCurrentMethodResponse *, const char*);
SOAP_FMAC1 _tempuri__GetNameOfCurrentMethodResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetNameOfCurrentMethodResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNameOfCurrentMethodResponse * soap_new__tempuri__GetNameOfCurrentMethodResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNameOfCurrentMethodResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNameOfCurrentMethodResponse * soap_new_req__tempuri__GetNameOfCurrentMethodResponse(
	struct soap *soap)
{
	_tempuri__GetNameOfCurrentMethodResponse *_p = ::soap_new__tempuri__GetNameOfCurrentMethodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNameOfCurrentMethodResponse * soap_new_set__tempuri__GetNameOfCurrentMethodResponse(
	struct soap *soap,
	std::string *GetNameOfCurrentMethodResult)
{
	_tempuri__GetNameOfCurrentMethodResponse *_p = ::soap_new__tempuri__GetNameOfCurrentMethodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetNameOfCurrentMethodResponse::GetNameOfCurrentMethodResult = GetNameOfCurrentMethodResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetNameOfCurrentMethodResponse(struct soap *soap, _tempuri__GetNameOfCurrentMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentMethodResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNameOfCurrentMethodResponse(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentMethodResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNameOfCurrentMethodResponse(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentMethodResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNameOfCurrentMethodResponse(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentMethodResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentMethodResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentMethodResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNameOfCurrentMethodResponse * SOAP_FMAC4 soap_get__tempuri__GetNameOfCurrentMethodResponse(struct soap*, _tempuri__GetNameOfCurrentMethodResponse *, const char*, const char*);

inline int soap_read__tempuri__GetNameOfCurrentMethodResponse(struct soap *soap, _tempuri__GetNameOfCurrentMethodResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNameOfCurrentMethodResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNameOfCurrentMethodResponse(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentMethodResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNameOfCurrentMethodResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNameOfCurrentMethodResponse(struct soap *soap, _tempuri__GetNameOfCurrentMethodResponse *p)
{
	if (::soap_read__tempuri__GetNameOfCurrentMethodResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNameOfCurrentMethod_DEFINED
#define SOAP_TYPE__tempuri__GetNameOfCurrentMethod_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNameOfCurrentMethod(struct soap*, const char*, int, const _tempuri__GetNameOfCurrentMethod *, const char*);
SOAP_FMAC3 _tempuri__GetNameOfCurrentMethod * SOAP_FMAC4 soap_in__tempuri__GetNameOfCurrentMethod(struct soap*, const char*, _tempuri__GetNameOfCurrentMethod *, const char*);
SOAP_FMAC1 _tempuri__GetNameOfCurrentMethod * SOAP_FMAC2 soap_instantiate__tempuri__GetNameOfCurrentMethod(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNameOfCurrentMethod * soap_new__tempuri__GetNameOfCurrentMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNameOfCurrentMethod(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNameOfCurrentMethod * soap_new_req__tempuri__GetNameOfCurrentMethod(
	struct soap *soap)
{
	_tempuri__GetNameOfCurrentMethod *_p = ::soap_new__tempuri__GetNameOfCurrentMethod(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNameOfCurrentMethod * soap_new_set__tempuri__GetNameOfCurrentMethod(
	struct soap *soap)
{
	_tempuri__GetNameOfCurrentMethod *_p = ::soap_new__tempuri__GetNameOfCurrentMethod(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetNameOfCurrentMethod(struct soap *soap, _tempuri__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentMethod", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentMethod ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNameOfCurrentMethod(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentMethod", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentMethod ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNameOfCurrentMethod(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentMethod", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentMethod ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNameOfCurrentMethod(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNameOfCurrentMethod", p->soap_type() == SOAP_TYPE__tempuri__GetNameOfCurrentMethod ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNameOfCurrentMethod * SOAP_FMAC4 soap_get__tempuri__GetNameOfCurrentMethod(struct soap*, _tempuri__GetNameOfCurrentMethod *, const char*, const char*);

inline int soap_read__tempuri__GetNameOfCurrentMethod(struct soap *soap, _tempuri__GetNameOfCurrentMethod *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNameOfCurrentMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNameOfCurrentMethod(struct soap *soap, const char *URL, _tempuri__GetNameOfCurrentMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNameOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNameOfCurrentMethod(struct soap *soap, _tempuri__GetNameOfCurrentMethod *p)
{
	if (::soap_read__tempuri__GetNameOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypesOfAllMethodsResponse_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypesOfAllMethodsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap*, const char*, int, const _tempuri__GetAssayTypesOfAllMethodsResponse *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllMethodsResponse * SOAP_FMAC4 soap_in__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap*, const char*, _tempuri__GetAssayTypesOfAllMethodsResponse *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypesOfAllMethodsResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypesOfAllMethodsResponse * soap_new__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypesOfAllMethodsResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypesOfAllMethodsResponse * soap_new_req__tempuri__GetAssayTypesOfAllMethodsResponse(
	struct soap *soap)
{
	_tempuri__GetAssayTypesOfAllMethodsResponse *_p = ::soap_new__tempuri__GetAssayTypesOfAllMethodsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypesOfAllMethodsResponse * soap_new_set__tempuri__GetAssayTypesOfAllMethodsResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetAssayTypesOfAllMethodsResult)
{
	_tempuri__GetAssayTypesOfAllMethodsResponse *_p = ::soap_new__tempuri__GetAssayTypesOfAllMethodsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetAssayTypesOfAllMethodsResponse::GetAssayTypesOfAllMethodsResult = GetAssayTypesOfAllMethodsResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap *soap, _tempuri__GetAssayTypesOfAllMethodsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllMethodsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllMethodsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllMethodsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllMethodsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllMethodsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllMethodsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllMethodsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllMethodsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllMethodsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllMethodsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllMethodsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllMethodsResponse * SOAP_FMAC4 soap_get__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap*, _tempuri__GetAssayTypesOfAllMethodsResponse *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap *soap, _tempuri__GetAssayTypesOfAllMethodsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypesOfAllMethodsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllMethodsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypesOfAllMethodsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypesOfAllMethodsResponse(struct soap *soap, _tempuri__GetAssayTypesOfAllMethodsResponse *p)
{
	if (::soap_read__tempuri__GetAssayTypesOfAllMethodsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetAssayTypesOfAllMethods_DEFINED
#define SOAP_TYPE__tempuri__GetAssayTypesOfAllMethods_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetAssayTypesOfAllMethods(struct soap*, const char*, int, const _tempuri__GetAssayTypesOfAllMethods *, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllMethods * SOAP_FMAC4 soap_in__tempuri__GetAssayTypesOfAllMethods(struct soap*, const char*, _tempuri__GetAssayTypesOfAllMethods *, const char*);
SOAP_FMAC1 _tempuri__GetAssayTypesOfAllMethods * SOAP_FMAC2 soap_instantiate__tempuri__GetAssayTypesOfAllMethods(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetAssayTypesOfAllMethods * soap_new__tempuri__GetAssayTypesOfAllMethods(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetAssayTypesOfAllMethods(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetAssayTypesOfAllMethods * soap_new_req__tempuri__GetAssayTypesOfAllMethods(
	struct soap *soap)
{
	_tempuri__GetAssayTypesOfAllMethods *_p = ::soap_new__tempuri__GetAssayTypesOfAllMethods(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetAssayTypesOfAllMethods * soap_new_set__tempuri__GetAssayTypesOfAllMethods(
	struct soap *soap)
{
	_tempuri__GetAssayTypesOfAllMethods *_p = ::soap_new__tempuri__GetAssayTypesOfAllMethods(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetAssayTypesOfAllMethods(struct soap *soap, _tempuri__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllMethods", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllMethods ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllMethods", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllMethods ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllMethods", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllMethods ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetAssayTypesOfAllMethods", p->soap_type() == SOAP_TYPE__tempuri__GetAssayTypesOfAllMethods ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllMethods * SOAP_FMAC4 soap_get__tempuri__GetAssayTypesOfAllMethods(struct soap*, _tempuri__GetAssayTypesOfAllMethods *, const char*, const char*);

inline int soap_read__tempuri__GetAssayTypesOfAllMethods(struct soap *soap, _tempuri__GetAssayTypesOfAllMethods *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetAssayTypesOfAllMethods(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, _tempuri__GetAssayTypesOfAllMethods *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetAssayTypesOfAllMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetAssayTypesOfAllMethods(struct soap *soap, _tempuri__GetAssayTypesOfAllMethods *p)
{
	if (::soap_read__tempuri__GetAssayTypesOfAllMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayTypeResponse_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayTypeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap*, const char*, int, const _tempuri__GetNamesOfMethodsOfAssayTypeResponse *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfMethodsOfAssayTypeResponse * SOAP_FMAC4 soap_in__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap*, const char*, _tempuri__GetNamesOfMethodsOfAssayTypeResponse *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfMethodsOfAssayTypeResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfMethodsOfAssayTypeResponse * soap_new__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfMethodsOfAssayTypeResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfMethodsOfAssayTypeResponse * soap_new_req__tempuri__GetNamesOfMethodsOfAssayTypeResponse(
	struct soap *soap)
{
	_tempuri__GetNamesOfMethodsOfAssayTypeResponse *_p = ::soap_new__tempuri__GetNamesOfMethodsOfAssayTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfMethodsOfAssayTypeResponse * soap_new_set__tempuri__GetNamesOfMethodsOfAssayTypeResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetNamesOfMethodsOfAssayTypeResult)
{
	_tempuri__GetNamesOfMethodsOfAssayTypeResponse *_p = ::soap_new__tempuri__GetNamesOfMethodsOfAssayTypeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetNamesOfMethodsOfAssayTypeResponse::GetNamesOfMethodsOfAssayTypeResult = GetNamesOfMethodsOfAssayTypeResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap *soap, _tempuri__GetNamesOfMethodsOfAssayTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsOfAssayTypeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsOfAssayTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsOfAssayTypeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsOfAssayTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsOfAssayTypeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsOfAssayTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsOfAssayTypeResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfMethodsOfAssayTypeResponse * SOAP_FMAC4 soap_get__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap*, _tempuri__GetNamesOfMethodsOfAssayTypeResponse *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap *soap, _tempuri__GetNamesOfMethodsOfAssayTypeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfMethodsOfAssayTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsOfAssayTypeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfMethodsOfAssayTypeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfMethodsOfAssayTypeResponse(struct soap *soap, _tempuri__GetNamesOfMethodsOfAssayTypeResponse *p)
{
	if (::soap_read__tempuri__GetNamesOfMethodsOfAssayTypeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayType_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfMethodsOfAssayType(struct soap*, const char*, int, const _tempuri__GetNamesOfMethodsOfAssayType *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfMethodsOfAssayType * SOAP_FMAC4 soap_in__tempuri__GetNamesOfMethodsOfAssayType(struct soap*, const char*, _tempuri__GetNamesOfMethodsOfAssayType *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfMethodsOfAssayType * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfMethodsOfAssayType(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfMethodsOfAssayType * soap_new__tempuri__GetNamesOfMethodsOfAssayType(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfMethodsOfAssayType(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfMethodsOfAssayType * soap_new_req__tempuri__GetNamesOfMethodsOfAssayType(
	struct soap *soap)
{
	_tempuri__GetNamesOfMethodsOfAssayType *_p = ::soap_new__tempuri__GetNamesOfMethodsOfAssayType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfMethodsOfAssayType * soap_new_set__tempuri__GetNamesOfMethodsOfAssayType(
	struct soap *soap,
	std::string *assayType)
{
	_tempuri__GetNamesOfMethodsOfAssayType *_p = ::soap_new__tempuri__GetNamesOfMethodsOfAssayType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetNamesOfMethodsOfAssayType::assayType = assayType;
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfMethodsOfAssayType(struct soap *soap, _tempuri__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsOfAssayType", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsOfAssayType", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsOfAssayType", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsOfAssayType", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsOfAssayType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfMethodsOfAssayType * SOAP_FMAC4 soap_get__tempuri__GetNamesOfMethodsOfAssayType(struct soap*, _tempuri__GetNamesOfMethodsOfAssayType *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfMethodsOfAssayType(struct soap *soap, _tempuri__GetNamesOfMethodsOfAssayType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfMethodsOfAssayType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsOfAssayType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfMethodsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfMethodsOfAssayType(struct soap *soap, _tempuri__GetNamesOfMethodsOfAssayType *p)
{
	if (::soap_read__tempuri__GetNamesOfMethodsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfMethodsResponse_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfMethodsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfMethodsResponse(struct soap*, const char*, int, const _tempuri__GetNamesOfMethodsResponse *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfMethodsResponse * SOAP_FMAC4 soap_in__tempuri__GetNamesOfMethodsResponse(struct soap*, const char*, _tempuri__GetNamesOfMethodsResponse *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfMethodsResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfMethodsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfMethodsResponse * soap_new__tempuri__GetNamesOfMethodsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfMethodsResponse(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfMethodsResponse * soap_new_req__tempuri__GetNamesOfMethodsResponse(
	struct soap *soap)
{
	_tempuri__GetNamesOfMethodsResponse *_p = ::soap_new__tempuri__GetNamesOfMethodsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfMethodsResponse * soap_new_set__tempuri__GetNamesOfMethodsResponse(
	struct soap *soap,
	arr__ArrayOfstring *GetNamesOfMethodsResult)
{
	_tempuri__GetNamesOfMethodsResponse *_p = ::soap_new__tempuri__GetNamesOfMethodsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tempuri__GetNamesOfMethodsResponse::GetNamesOfMethodsResult = GetNamesOfMethodsResult;
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfMethodsResponse(struct soap *soap, _tempuri__GetNamesOfMethodsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfMethodsResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfMethodsResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfMethodsResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethodsResponse", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethodsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfMethodsResponse * SOAP_FMAC4 soap_get__tempuri__GetNamesOfMethodsResponse(struct soap*, _tempuri__GetNamesOfMethodsResponse *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfMethodsResponse(struct soap *soap, _tempuri__GetNamesOfMethodsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfMethodsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfMethodsResponse(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethodsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfMethodsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfMethodsResponse(struct soap *soap, _tempuri__GetNamesOfMethodsResponse *p)
{
	if (::soap_read__tempuri__GetNamesOfMethodsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tempuri__GetNamesOfMethods_DEFINED
#define SOAP_TYPE__tempuri__GetNamesOfMethods_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesOfMethods(struct soap*, const char*, int, const _tempuri__GetNamesOfMethods *, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfMethods * SOAP_FMAC4 soap_in__tempuri__GetNamesOfMethods(struct soap*, const char*, _tempuri__GetNamesOfMethods *, const char*);
SOAP_FMAC1 _tempuri__GetNamesOfMethods * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesOfMethods(struct soap*, int, const char*, const char*, size_t*);

inline _tempuri__GetNamesOfMethods * soap_new__tempuri__GetNamesOfMethods(struct soap *soap, int n = -1)
{
	return soap_instantiate__tempuri__GetNamesOfMethods(soap, n, NULL, NULL, NULL);
}

inline _tempuri__GetNamesOfMethods * soap_new_req__tempuri__GetNamesOfMethods(
	struct soap *soap)
{
	_tempuri__GetNamesOfMethods *_p = ::soap_new__tempuri__GetNamesOfMethods(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tempuri__GetNamesOfMethods * soap_new_set__tempuri__GetNamesOfMethods(
	struct soap *soap)
{
	_tempuri__GetNamesOfMethods *_p = ::soap_new__tempuri__GetNamesOfMethods(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tempuri__GetNamesOfMethods(struct soap *soap, _tempuri__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethods", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethods ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tempuri__GetNamesOfMethods(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethods", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethods ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tempuri__GetNamesOfMethods(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethods", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethods ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tempuri__GetNamesOfMethods(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tempuri:GetNamesOfMethods", p->soap_type() == SOAP_TYPE__tempuri__GetNamesOfMethods ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tempuri__GetNamesOfMethods * SOAP_FMAC4 soap_get__tempuri__GetNamesOfMethods(struct soap*, _tempuri__GetNamesOfMethods *, const char*, const char*);

inline int soap_read__tempuri__GetNamesOfMethods(struct soap *soap, _tempuri__GetNamesOfMethods *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tempuri__GetNamesOfMethods(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tempuri__GetNamesOfMethods(struct soap *soap, const char *URL, _tempuri__GetNamesOfMethods *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tempuri__GetNamesOfMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tempuri__GetNamesOfMethods(struct soap *soap, _tempuri__GetNamesOfMethods *p)
{
	if (::soap_read__tempuri__GetNamesOfMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsrm__LastMessage_DEFINED
#define SOAP_TYPE___wsrm__LastMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsrm__LastMessage(struct soap*, struct __wsrm__LastMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsrm__LastMessage(struct soap*, const struct __wsrm__LastMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsrm__LastMessage(struct soap*, const char*, int, const struct __wsrm__LastMessage *, const char*);
SOAP_FMAC3 struct __wsrm__LastMessage * SOAP_FMAC4 soap_in___wsrm__LastMessage(struct soap*, const char*, struct __wsrm__LastMessage *, const char*);
SOAP_FMAC1 struct __wsrm__LastMessage * SOAP_FMAC2 soap_instantiate___wsrm__LastMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsrm__LastMessage * soap_new___wsrm__LastMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsrm__LastMessage(soap, n, NULL, NULL, NULL);
}

inline struct __wsrm__LastMessage * soap_new_req___wsrm__LastMessage(
	struct soap *soap)
{
	struct __wsrm__LastMessage *_p = ::soap_new___wsrm__LastMessage(soap);
	if (_p)
	{	::soap_default___wsrm__LastMessage(soap, _p);
	}
	return _p;
}

inline struct __wsrm__LastMessage * soap_new_set___wsrm__LastMessage(
	struct soap *soap)
{
	struct __wsrm__LastMessage *_p = ::soap_new___wsrm__LastMessage(soap);
	if (_p)
	{	::soap_default___wsrm__LastMessage(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsrm__LastMessage(struct soap*, const struct __wsrm__LastMessage *, const char*, const char*);

inline int soap_write___wsrm__LastMessage(struct soap *soap, struct __wsrm__LastMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsrm__LastMessage(soap, p), 0) || ::soap_put___wsrm__LastMessage(soap, p, "-wsrm:LastMessage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsrm__LastMessage(struct soap *soap, const char *URL, struct __wsrm__LastMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__LastMessage(soap, p), 0) || ::soap_put___wsrm__LastMessage(soap, p, "-wsrm:LastMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsrm__LastMessage(struct soap *soap, const char *URL, struct __wsrm__LastMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__LastMessage(soap, p), 0) || ::soap_put___wsrm__LastMessage(soap, p, "-wsrm:LastMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsrm__LastMessage(struct soap *soap, const char *URL, struct __wsrm__LastMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__LastMessage(soap, p), 0) || ::soap_put___wsrm__LastMessage(soap, p, "-wsrm:LastMessage", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsrm__LastMessage * SOAP_FMAC4 soap_get___wsrm__LastMessage(struct soap*, struct __wsrm__LastMessage *, const char*, const char*);

inline int soap_read___wsrm__LastMessage(struct soap *soap, struct __wsrm__LastMessage *p)
{
	if (p)
	{	::soap_default___wsrm__LastMessage(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsrm__LastMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsrm__LastMessage(struct soap *soap, const char *URL, struct __wsrm__LastMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsrm__LastMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsrm__LastMessage(struct soap *soap, struct __wsrm__LastMessage *p)
{
	if (::soap_read___wsrm__LastMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsrm__AckRequested_DEFINED
#define SOAP_TYPE___wsrm__AckRequested_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsrm__AckRequested(struct soap*, struct __wsrm__AckRequested *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsrm__AckRequested(struct soap*, const struct __wsrm__AckRequested *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsrm__AckRequested(struct soap*, const char*, int, const struct __wsrm__AckRequested *, const char*);
SOAP_FMAC3 struct __wsrm__AckRequested * SOAP_FMAC4 soap_in___wsrm__AckRequested(struct soap*, const char*, struct __wsrm__AckRequested *, const char*);
SOAP_FMAC1 struct __wsrm__AckRequested * SOAP_FMAC2 soap_instantiate___wsrm__AckRequested(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsrm__AckRequested * soap_new___wsrm__AckRequested(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsrm__AckRequested(soap, n, NULL, NULL, NULL);
}

inline struct __wsrm__AckRequested * soap_new_req___wsrm__AckRequested(
	struct soap *soap)
{
	struct __wsrm__AckRequested *_p = ::soap_new___wsrm__AckRequested(soap);
	if (_p)
	{	::soap_default___wsrm__AckRequested(soap, _p);
	}
	return _p;
}

inline struct __wsrm__AckRequested * soap_new_set___wsrm__AckRequested(
	struct soap *soap)
{
	struct __wsrm__AckRequested *_p = ::soap_new___wsrm__AckRequested(soap);
	if (_p)
	{	::soap_default___wsrm__AckRequested(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsrm__AckRequested(struct soap*, const struct __wsrm__AckRequested *, const char*, const char*);

inline int soap_write___wsrm__AckRequested(struct soap *soap, struct __wsrm__AckRequested const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsrm__AckRequested(soap, p), 0) || ::soap_put___wsrm__AckRequested(soap, p, "-wsrm:AckRequested", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsrm__AckRequested(struct soap *soap, const char *URL, struct __wsrm__AckRequested const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__AckRequested(soap, p), 0) || ::soap_put___wsrm__AckRequested(soap, p, "-wsrm:AckRequested", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsrm__AckRequested(struct soap *soap, const char *URL, struct __wsrm__AckRequested const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__AckRequested(soap, p), 0) || ::soap_put___wsrm__AckRequested(soap, p, "-wsrm:AckRequested", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsrm__AckRequested(struct soap *soap, const char *URL, struct __wsrm__AckRequested const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__AckRequested(soap, p), 0) || ::soap_put___wsrm__AckRequested(soap, p, "-wsrm:AckRequested", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsrm__AckRequested * SOAP_FMAC4 soap_get___wsrm__AckRequested(struct soap*, struct __wsrm__AckRequested *, const char*, const char*);

inline int soap_read___wsrm__AckRequested(struct soap *soap, struct __wsrm__AckRequested *p)
{
	if (p)
	{	::soap_default___wsrm__AckRequested(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsrm__AckRequested(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsrm__AckRequested(struct soap *soap, const char *URL, struct __wsrm__AckRequested *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsrm__AckRequested(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsrm__AckRequested(struct soap *soap, struct __wsrm__AckRequested *p)
{
	if (::soap_read___wsrm__AckRequested(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsrm__SequenceAcknowledgement_DEFINED
#define SOAP_TYPE___wsrm__SequenceAcknowledgement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsrm__SequenceAcknowledgement(struct soap*, struct __wsrm__SequenceAcknowledgement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsrm__SequenceAcknowledgement(struct soap*, const struct __wsrm__SequenceAcknowledgement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsrm__SequenceAcknowledgement(struct soap*, const char*, int, const struct __wsrm__SequenceAcknowledgement *, const char*);
SOAP_FMAC3 struct __wsrm__SequenceAcknowledgement * SOAP_FMAC4 soap_in___wsrm__SequenceAcknowledgement(struct soap*, const char*, struct __wsrm__SequenceAcknowledgement *, const char*);
SOAP_FMAC1 struct __wsrm__SequenceAcknowledgement * SOAP_FMAC2 soap_instantiate___wsrm__SequenceAcknowledgement(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsrm__SequenceAcknowledgement * soap_new___wsrm__SequenceAcknowledgement(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsrm__SequenceAcknowledgement(soap, n, NULL, NULL, NULL);
}

inline struct __wsrm__SequenceAcknowledgement * soap_new_req___wsrm__SequenceAcknowledgement(
	struct soap *soap)
{
	struct __wsrm__SequenceAcknowledgement *_p = ::soap_new___wsrm__SequenceAcknowledgement(soap);
	if (_p)
	{	::soap_default___wsrm__SequenceAcknowledgement(soap, _p);
	}
	return _p;
}

inline struct __wsrm__SequenceAcknowledgement * soap_new_set___wsrm__SequenceAcknowledgement(
	struct soap *soap)
{
	struct __wsrm__SequenceAcknowledgement *_p = ::soap_new___wsrm__SequenceAcknowledgement(soap);
	if (_p)
	{	::soap_default___wsrm__SequenceAcknowledgement(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsrm__SequenceAcknowledgement(struct soap*, const struct __wsrm__SequenceAcknowledgement *, const char*, const char*);

inline int soap_write___wsrm__SequenceAcknowledgement(struct soap *soap, struct __wsrm__SequenceAcknowledgement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsrm__SequenceAcknowledgement(soap, p), 0) || ::soap_put___wsrm__SequenceAcknowledgement(soap, p, "-wsrm:SequenceAcknowledgement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsrm__SequenceAcknowledgement(struct soap *soap, const char *URL, struct __wsrm__SequenceAcknowledgement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__SequenceAcknowledgement(soap, p), 0) || ::soap_put___wsrm__SequenceAcknowledgement(soap, p, "-wsrm:SequenceAcknowledgement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsrm__SequenceAcknowledgement(struct soap *soap, const char *URL, struct __wsrm__SequenceAcknowledgement const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__SequenceAcknowledgement(soap, p), 0) || ::soap_put___wsrm__SequenceAcknowledgement(soap, p, "-wsrm:SequenceAcknowledgement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsrm__SequenceAcknowledgement(struct soap *soap, const char *URL, struct __wsrm__SequenceAcknowledgement const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__SequenceAcknowledgement(soap, p), 0) || ::soap_put___wsrm__SequenceAcknowledgement(soap, p, "-wsrm:SequenceAcknowledgement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsrm__SequenceAcknowledgement * SOAP_FMAC4 soap_get___wsrm__SequenceAcknowledgement(struct soap*, struct __wsrm__SequenceAcknowledgement *, const char*, const char*);

inline int soap_read___wsrm__SequenceAcknowledgement(struct soap *soap, struct __wsrm__SequenceAcknowledgement *p)
{
	if (p)
	{	::soap_default___wsrm__SequenceAcknowledgement(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsrm__SequenceAcknowledgement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsrm__SequenceAcknowledgement(struct soap *soap, const char *URL, struct __wsrm__SequenceAcknowledgement *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsrm__SequenceAcknowledgement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsrm__SequenceAcknowledgement(struct soap *soap, struct __wsrm__SequenceAcknowledgement *p)
{
	if (::soap_read___wsrm__SequenceAcknowledgement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsrm__TerminateSequenceResponse_DEFINED
#define SOAP_TYPE___wsrm__TerminateSequenceResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsrm__TerminateSequenceResponse(struct soap*, struct __wsrm__TerminateSequenceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsrm__TerminateSequenceResponse(struct soap*, const struct __wsrm__TerminateSequenceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsrm__TerminateSequenceResponse(struct soap*, const char*, int, const struct __wsrm__TerminateSequenceResponse *, const char*);
SOAP_FMAC3 struct __wsrm__TerminateSequenceResponse * SOAP_FMAC4 soap_in___wsrm__TerminateSequenceResponse(struct soap*, const char*, struct __wsrm__TerminateSequenceResponse *, const char*);
SOAP_FMAC1 struct __wsrm__TerminateSequenceResponse * SOAP_FMAC2 soap_instantiate___wsrm__TerminateSequenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsrm__TerminateSequenceResponse * soap_new___wsrm__TerminateSequenceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsrm__TerminateSequenceResponse(soap, n, NULL, NULL, NULL);
}

inline struct __wsrm__TerminateSequenceResponse * soap_new_req___wsrm__TerminateSequenceResponse(
	struct soap *soap)
{
	struct __wsrm__TerminateSequenceResponse *_p = ::soap_new___wsrm__TerminateSequenceResponse(soap);
	if (_p)
	{	::soap_default___wsrm__TerminateSequenceResponse(soap, _p);
	}
	return _p;
}

inline struct __wsrm__TerminateSequenceResponse * soap_new_set___wsrm__TerminateSequenceResponse(
	struct soap *soap,
	struct wsrm__TerminateSequenceResponseType *wsrm__TerminateSequenceResponse)
{
	struct __wsrm__TerminateSequenceResponse *_p = ::soap_new___wsrm__TerminateSequenceResponse(soap);
	if (_p)
	{	::soap_default___wsrm__TerminateSequenceResponse(soap, _p);
		_p->wsrm__TerminateSequenceResponse = wsrm__TerminateSequenceResponse;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsrm__TerminateSequenceResponse(struct soap*, const struct __wsrm__TerminateSequenceResponse *, const char*, const char*);

inline int soap_write___wsrm__TerminateSequenceResponse(struct soap *soap, struct __wsrm__TerminateSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsrm__TerminateSequenceResponse(soap, p), 0) || ::soap_put___wsrm__TerminateSequenceResponse(soap, p, "-wsrm:TerminateSequenceResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsrm__TerminateSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__TerminateSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__TerminateSequenceResponse(soap, p), 0) || ::soap_put___wsrm__TerminateSequenceResponse(soap, p, "-wsrm:TerminateSequenceResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsrm__TerminateSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__TerminateSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__TerminateSequenceResponse(soap, p), 0) || ::soap_put___wsrm__TerminateSequenceResponse(soap, p, "-wsrm:TerminateSequenceResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsrm__TerminateSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__TerminateSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__TerminateSequenceResponse(soap, p), 0) || ::soap_put___wsrm__TerminateSequenceResponse(soap, p, "-wsrm:TerminateSequenceResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsrm__TerminateSequenceResponse * SOAP_FMAC4 soap_get___wsrm__TerminateSequenceResponse(struct soap*, struct __wsrm__TerminateSequenceResponse *, const char*, const char*);

inline int soap_read___wsrm__TerminateSequenceResponse(struct soap *soap, struct __wsrm__TerminateSequenceResponse *p)
{
	if (p)
	{	::soap_default___wsrm__TerminateSequenceResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsrm__TerminateSequenceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsrm__TerminateSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__TerminateSequenceResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsrm__TerminateSequenceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsrm__TerminateSequenceResponse(struct soap *soap, struct __wsrm__TerminateSequenceResponse *p)
{
	if (::soap_read___wsrm__TerminateSequenceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsrm__CloseSequenceResponse_DEFINED
#define SOAP_TYPE___wsrm__CloseSequenceResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsrm__CloseSequenceResponse(struct soap*, struct __wsrm__CloseSequenceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsrm__CloseSequenceResponse(struct soap*, const struct __wsrm__CloseSequenceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsrm__CloseSequenceResponse(struct soap*, const char*, int, const struct __wsrm__CloseSequenceResponse *, const char*);
SOAP_FMAC3 struct __wsrm__CloseSequenceResponse * SOAP_FMAC4 soap_in___wsrm__CloseSequenceResponse(struct soap*, const char*, struct __wsrm__CloseSequenceResponse *, const char*);
SOAP_FMAC1 struct __wsrm__CloseSequenceResponse * SOAP_FMAC2 soap_instantiate___wsrm__CloseSequenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsrm__CloseSequenceResponse * soap_new___wsrm__CloseSequenceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsrm__CloseSequenceResponse(soap, n, NULL, NULL, NULL);
}

inline struct __wsrm__CloseSequenceResponse * soap_new_req___wsrm__CloseSequenceResponse(
	struct soap *soap)
{
	struct __wsrm__CloseSequenceResponse *_p = ::soap_new___wsrm__CloseSequenceResponse(soap);
	if (_p)
	{	::soap_default___wsrm__CloseSequenceResponse(soap, _p);
	}
	return _p;
}

inline struct __wsrm__CloseSequenceResponse * soap_new_set___wsrm__CloseSequenceResponse(
	struct soap *soap,
	struct wsrm__CloseSequenceResponseType *wsrm__CloseSequenceResponse)
{
	struct __wsrm__CloseSequenceResponse *_p = ::soap_new___wsrm__CloseSequenceResponse(soap);
	if (_p)
	{	::soap_default___wsrm__CloseSequenceResponse(soap, _p);
		_p->wsrm__CloseSequenceResponse = wsrm__CloseSequenceResponse;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsrm__CloseSequenceResponse(struct soap*, const struct __wsrm__CloseSequenceResponse *, const char*, const char*);

inline int soap_write___wsrm__CloseSequenceResponse(struct soap *soap, struct __wsrm__CloseSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsrm__CloseSequenceResponse(soap, p), 0) || ::soap_put___wsrm__CloseSequenceResponse(soap, p, "-wsrm:CloseSequenceResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsrm__CloseSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__CloseSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CloseSequenceResponse(soap, p), 0) || ::soap_put___wsrm__CloseSequenceResponse(soap, p, "-wsrm:CloseSequenceResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsrm__CloseSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__CloseSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CloseSequenceResponse(soap, p), 0) || ::soap_put___wsrm__CloseSequenceResponse(soap, p, "-wsrm:CloseSequenceResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsrm__CloseSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__CloseSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CloseSequenceResponse(soap, p), 0) || ::soap_put___wsrm__CloseSequenceResponse(soap, p, "-wsrm:CloseSequenceResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsrm__CloseSequenceResponse * SOAP_FMAC4 soap_get___wsrm__CloseSequenceResponse(struct soap*, struct __wsrm__CloseSequenceResponse *, const char*, const char*);

inline int soap_read___wsrm__CloseSequenceResponse(struct soap *soap, struct __wsrm__CloseSequenceResponse *p)
{
	if (p)
	{	::soap_default___wsrm__CloseSequenceResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsrm__CloseSequenceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsrm__CloseSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__CloseSequenceResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsrm__CloseSequenceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsrm__CloseSequenceResponse(struct soap *soap, struct __wsrm__CloseSequenceResponse *p)
{
	if (::soap_read___wsrm__CloseSequenceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsrm__CreateSequenceResponse_DEFINED
#define SOAP_TYPE___wsrm__CreateSequenceResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsrm__CreateSequenceResponse(struct soap*, struct __wsrm__CreateSequenceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsrm__CreateSequenceResponse(struct soap*, const struct __wsrm__CreateSequenceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsrm__CreateSequenceResponse(struct soap*, const char*, int, const struct __wsrm__CreateSequenceResponse *, const char*);
SOAP_FMAC3 struct __wsrm__CreateSequenceResponse * SOAP_FMAC4 soap_in___wsrm__CreateSequenceResponse(struct soap*, const char*, struct __wsrm__CreateSequenceResponse *, const char*);
SOAP_FMAC1 struct __wsrm__CreateSequenceResponse * SOAP_FMAC2 soap_instantiate___wsrm__CreateSequenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsrm__CreateSequenceResponse * soap_new___wsrm__CreateSequenceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsrm__CreateSequenceResponse(soap, n, NULL, NULL, NULL);
}

inline struct __wsrm__CreateSequenceResponse * soap_new_req___wsrm__CreateSequenceResponse(
	struct soap *soap)
{
	struct __wsrm__CreateSequenceResponse *_p = ::soap_new___wsrm__CreateSequenceResponse(soap);
	if (_p)
	{	::soap_default___wsrm__CreateSequenceResponse(soap, _p);
	}
	return _p;
}

inline struct __wsrm__CreateSequenceResponse * soap_new_set___wsrm__CreateSequenceResponse(
	struct soap *soap,
	struct wsrm__CreateSequenceResponseType *wsrm__CreateSequenceResponse)
{
	struct __wsrm__CreateSequenceResponse *_p = ::soap_new___wsrm__CreateSequenceResponse(soap);
	if (_p)
	{	::soap_default___wsrm__CreateSequenceResponse(soap, _p);
		_p->wsrm__CreateSequenceResponse = wsrm__CreateSequenceResponse;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsrm__CreateSequenceResponse(struct soap*, const struct __wsrm__CreateSequenceResponse *, const char*, const char*);

inline int soap_write___wsrm__CreateSequenceResponse(struct soap *soap, struct __wsrm__CreateSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsrm__CreateSequenceResponse(soap, p), 0) || ::soap_put___wsrm__CreateSequenceResponse(soap, p, "-wsrm:CreateSequenceResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsrm__CreateSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__CreateSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CreateSequenceResponse(soap, p), 0) || ::soap_put___wsrm__CreateSequenceResponse(soap, p, "-wsrm:CreateSequenceResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsrm__CreateSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__CreateSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CreateSequenceResponse(soap, p), 0) || ::soap_put___wsrm__CreateSequenceResponse(soap, p, "-wsrm:CreateSequenceResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsrm__CreateSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__CreateSequenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CreateSequenceResponse(soap, p), 0) || ::soap_put___wsrm__CreateSequenceResponse(soap, p, "-wsrm:CreateSequenceResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsrm__CreateSequenceResponse * SOAP_FMAC4 soap_get___wsrm__CreateSequenceResponse(struct soap*, struct __wsrm__CreateSequenceResponse *, const char*, const char*);

inline int soap_read___wsrm__CreateSequenceResponse(struct soap *soap, struct __wsrm__CreateSequenceResponse *p)
{
	if (p)
	{	::soap_default___wsrm__CreateSequenceResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsrm__CreateSequenceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsrm__CreateSequenceResponse(struct soap *soap, const char *URL, struct __wsrm__CreateSequenceResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsrm__CreateSequenceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsrm__CreateSequenceResponse(struct soap *soap, struct __wsrm__CreateSequenceResponse *p)
{
	if (::soap_read___wsrm__CreateSequenceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsrm__TerminateSequence_DEFINED
#define SOAP_TYPE___wsrm__TerminateSequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsrm__TerminateSequence(struct soap*, struct __wsrm__TerminateSequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsrm__TerminateSequence(struct soap*, const struct __wsrm__TerminateSequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsrm__TerminateSequence(struct soap*, const char*, int, const struct __wsrm__TerminateSequence *, const char*);
SOAP_FMAC3 struct __wsrm__TerminateSequence * SOAP_FMAC4 soap_in___wsrm__TerminateSequence(struct soap*, const char*, struct __wsrm__TerminateSequence *, const char*);
SOAP_FMAC1 struct __wsrm__TerminateSequence * SOAP_FMAC2 soap_instantiate___wsrm__TerminateSequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsrm__TerminateSequence * soap_new___wsrm__TerminateSequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsrm__TerminateSequence(soap, n, NULL, NULL, NULL);
}

inline struct __wsrm__TerminateSequence * soap_new_req___wsrm__TerminateSequence(
	struct soap *soap)
{
	struct __wsrm__TerminateSequence *_p = ::soap_new___wsrm__TerminateSequence(soap);
	if (_p)
	{	::soap_default___wsrm__TerminateSequence(soap, _p);
	}
	return _p;
}

inline struct __wsrm__TerminateSequence * soap_new_set___wsrm__TerminateSequence(
	struct soap *soap,
	struct wsrm__TerminateSequenceType *wsrm__TerminateSequence)
{
	struct __wsrm__TerminateSequence *_p = ::soap_new___wsrm__TerminateSequence(soap);
	if (_p)
	{	::soap_default___wsrm__TerminateSequence(soap, _p);
		_p->wsrm__TerminateSequence = wsrm__TerminateSequence;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsrm__TerminateSequence(struct soap*, const struct __wsrm__TerminateSequence *, const char*, const char*);

inline int soap_write___wsrm__TerminateSequence(struct soap *soap, struct __wsrm__TerminateSequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsrm__TerminateSequence(soap, p), 0) || ::soap_put___wsrm__TerminateSequence(soap, p, "-wsrm:TerminateSequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsrm__TerminateSequence(struct soap *soap, const char *URL, struct __wsrm__TerminateSequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__TerminateSequence(soap, p), 0) || ::soap_put___wsrm__TerminateSequence(soap, p, "-wsrm:TerminateSequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsrm__TerminateSequence(struct soap *soap, const char *URL, struct __wsrm__TerminateSequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__TerminateSequence(soap, p), 0) || ::soap_put___wsrm__TerminateSequence(soap, p, "-wsrm:TerminateSequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsrm__TerminateSequence(struct soap *soap, const char *URL, struct __wsrm__TerminateSequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__TerminateSequence(soap, p), 0) || ::soap_put___wsrm__TerminateSequence(soap, p, "-wsrm:TerminateSequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsrm__TerminateSequence * SOAP_FMAC4 soap_get___wsrm__TerminateSequence(struct soap*, struct __wsrm__TerminateSequence *, const char*, const char*);

inline int soap_read___wsrm__TerminateSequence(struct soap *soap, struct __wsrm__TerminateSequence *p)
{
	if (p)
	{	::soap_default___wsrm__TerminateSequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsrm__TerminateSequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsrm__TerminateSequence(struct soap *soap, const char *URL, struct __wsrm__TerminateSequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsrm__TerminateSequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsrm__TerminateSequence(struct soap *soap, struct __wsrm__TerminateSequence *p)
{
	if (::soap_read___wsrm__TerminateSequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsrm__CloseSequence_DEFINED
#define SOAP_TYPE___wsrm__CloseSequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsrm__CloseSequence(struct soap*, struct __wsrm__CloseSequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsrm__CloseSequence(struct soap*, const struct __wsrm__CloseSequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsrm__CloseSequence(struct soap*, const char*, int, const struct __wsrm__CloseSequence *, const char*);
SOAP_FMAC3 struct __wsrm__CloseSequence * SOAP_FMAC4 soap_in___wsrm__CloseSequence(struct soap*, const char*, struct __wsrm__CloseSequence *, const char*);
SOAP_FMAC1 struct __wsrm__CloseSequence * SOAP_FMAC2 soap_instantiate___wsrm__CloseSequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsrm__CloseSequence * soap_new___wsrm__CloseSequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsrm__CloseSequence(soap, n, NULL, NULL, NULL);
}

inline struct __wsrm__CloseSequence * soap_new_req___wsrm__CloseSequence(
	struct soap *soap)
{
	struct __wsrm__CloseSequence *_p = ::soap_new___wsrm__CloseSequence(soap);
	if (_p)
	{	::soap_default___wsrm__CloseSequence(soap, _p);
	}
	return _p;
}

inline struct __wsrm__CloseSequence * soap_new_set___wsrm__CloseSequence(
	struct soap *soap,
	struct wsrm__CloseSequenceType *wsrm__CloseSequence)
{
	struct __wsrm__CloseSequence *_p = ::soap_new___wsrm__CloseSequence(soap);
	if (_p)
	{	::soap_default___wsrm__CloseSequence(soap, _p);
		_p->wsrm__CloseSequence = wsrm__CloseSequence;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsrm__CloseSequence(struct soap*, const struct __wsrm__CloseSequence *, const char*, const char*);

inline int soap_write___wsrm__CloseSequence(struct soap *soap, struct __wsrm__CloseSequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsrm__CloseSequence(soap, p), 0) || ::soap_put___wsrm__CloseSequence(soap, p, "-wsrm:CloseSequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsrm__CloseSequence(struct soap *soap, const char *URL, struct __wsrm__CloseSequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CloseSequence(soap, p), 0) || ::soap_put___wsrm__CloseSequence(soap, p, "-wsrm:CloseSequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsrm__CloseSequence(struct soap *soap, const char *URL, struct __wsrm__CloseSequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CloseSequence(soap, p), 0) || ::soap_put___wsrm__CloseSequence(soap, p, "-wsrm:CloseSequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsrm__CloseSequence(struct soap *soap, const char *URL, struct __wsrm__CloseSequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CloseSequence(soap, p), 0) || ::soap_put___wsrm__CloseSequence(soap, p, "-wsrm:CloseSequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsrm__CloseSequence * SOAP_FMAC4 soap_get___wsrm__CloseSequence(struct soap*, struct __wsrm__CloseSequence *, const char*, const char*);

inline int soap_read___wsrm__CloseSequence(struct soap *soap, struct __wsrm__CloseSequence *p)
{
	if (p)
	{	::soap_default___wsrm__CloseSequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsrm__CloseSequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsrm__CloseSequence(struct soap *soap, const char *URL, struct __wsrm__CloseSequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsrm__CloseSequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsrm__CloseSequence(struct soap *soap, struct __wsrm__CloseSequence *p)
{
	if (::soap_read___wsrm__CloseSequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsrm__CreateSequence_DEFINED
#define SOAP_TYPE___wsrm__CreateSequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsrm__CreateSequence(struct soap*, struct __wsrm__CreateSequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsrm__CreateSequence(struct soap*, const struct __wsrm__CreateSequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsrm__CreateSequence(struct soap*, const char*, int, const struct __wsrm__CreateSequence *, const char*);
SOAP_FMAC3 struct __wsrm__CreateSequence * SOAP_FMAC4 soap_in___wsrm__CreateSequence(struct soap*, const char*, struct __wsrm__CreateSequence *, const char*);
SOAP_FMAC1 struct __wsrm__CreateSequence * SOAP_FMAC2 soap_instantiate___wsrm__CreateSequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsrm__CreateSequence * soap_new___wsrm__CreateSequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsrm__CreateSequence(soap, n, NULL, NULL, NULL);
}

inline struct __wsrm__CreateSequence * soap_new_req___wsrm__CreateSequence(
	struct soap *soap)
{
	struct __wsrm__CreateSequence *_p = ::soap_new___wsrm__CreateSequence(soap);
	if (_p)
	{	::soap_default___wsrm__CreateSequence(soap, _p);
	}
	return _p;
}

inline struct __wsrm__CreateSequence * soap_new_set___wsrm__CreateSequence(
	struct soap *soap,
	struct wsrm__CreateSequenceType *wsrm__CreateSequence)
{
	struct __wsrm__CreateSequence *_p = ::soap_new___wsrm__CreateSequence(soap);
	if (_p)
	{	::soap_default___wsrm__CreateSequence(soap, _p);
		_p->wsrm__CreateSequence = wsrm__CreateSequence;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsrm__CreateSequence(struct soap*, const struct __wsrm__CreateSequence *, const char*, const char*);

inline int soap_write___wsrm__CreateSequence(struct soap *soap, struct __wsrm__CreateSequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsrm__CreateSequence(soap, p), 0) || ::soap_put___wsrm__CreateSequence(soap, p, "-wsrm:CreateSequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsrm__CreateSequence(struct soap *soap, const char *URL, struct __wsrm__CreateSequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CreateSequence(soap, p), 0) || ::soap_put___wsrm__CreateSequence(soap, p, "-wsrm:CreateSequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsrm__CreateSequence(struct soap *soap, const char *URL, struct __wsrm__CreateSequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CreateSequence(soap, p), 0) || ::soap_put___wsrm__CreateSequence(soap, p, "-wsrm:CreateSequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsrm__CreateSequence(struct soap *soap, const char *URL, struct __wsrm__CreateSequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsrm__CreateSequence(soap, p), 0) || ::soap_put___wsrm__CreateSequence(soap, p, "-wsrm:CreateSequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsrm__CreateSequence * SOAP_FMAC4 soap_get___wsrm__CreateSequence(struct soap*, struct __wsrm__CreateSequence *, const char*, const char*);

inline int soap_read___wsrm__CreateSequence(struct soap *soap, struct __wsrm__CreateSequence *p)
{
	if (p)
	{	::soap_default___wsrm__CreateSequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsrm__CreateSequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsrm__CreateSequence(struct soap *soap, const char *URL, struct __wsrm__CreateSequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsrm__CreateSequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsrm__CreateSequence(struct soap *soap, struct __wsrm__CreateSequence *p)
{
	if (::soap_read___wsrm__CreateSequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsrm__SequenceAcknowledgement_None_DEFINED
#define SOAP_TYPE__wsrm__SequenceAcknowledgement_None_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsrm__SequenceAcknowledgement_None(struct soap*, struct _wsrm__SequenceAcknowledgement_None *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsrm__SequenceAcknowledgement_None(struct soap*, const struct _wsrm__SequenceAcknowledgement_None *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrm__SequenceAcknowledgement_None(struct soap*, const char*, int, const struct _wsrm__SequenceAcknowledgement_None *, const char*);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_None * SOAP_FMAC4 soap_in__wsrm__SequenceAcknowledgement_None(struct soap*, const char*, struct _wsrm__SequenceAcknowledgement_None *, const char*);
SOAP_FMAC1 struct _wsrm__SequenceAcknowledgement_None * SOAP_FMAC2 soap_instantiate__wsrm__SequenceAcknowledgement_None(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsrm__SequenceAcknowledgement_None * soap_new__wsrm__SequenceAcknowledgement_None(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrm__SequenceAcknowledgement_None(soap, n, NULL, NULL, NULL);
}

inline struct _wsrm__SequenceAcknowledgement_None * soap_new_req__wsrm__SequenceAcknowledgement_None(
	struct soap *soap)
{
	struct _wsrm__SequenceAcknowledgement_None *_p = ::soap_new__wsrm__SequenceAcknowledgement_None(soap);
	if (_p)
	{	::soap_default__wsrm__SequenceAcknowledgement_None(soap, _p);
	}
	return _p;
}

inline struct _wsrm__SequenceAcknowledgement_None * soap_new_set__wsrm__SequenceAcknowledgement_None(
	struct soap *soap)
{
	struct _wsrm__SequenceAcknowledgement_None *_p = ::soap_new__wsrm__SequenceAcknowledgement_None(soap);
	if (_p)
	{	::soap_default__wsrm__SequenceAcknowledgement_None(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrm__SequenceAcknowledgement_None(struct soap*, const struct _wsrm__SequenceAcknowledgement_None *, const char*, const char*);

inline int soap_write__wsrm__SequenceAcknowledgement_None(struct soap *soap, struct _wsrm__SequenceAcknowledgement_None const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsrm__SequenceAcknowledgement_None(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_None(soap, p, "wsrm:SequenceAcknowledgement-None", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsrm__SequenceAcknowledgement_None(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_None const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement_None(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_None(soap, p, "wsrm:SequenceAcknowledgement-None", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsrm__SequenceAcknowledgement_None(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_None const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement_None(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_None(soap, p, "wsrm:SequenceAcknowledgement-None", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrm__SequenceAcknowledgement_None(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_None const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement_None(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_None(soap, p, "wsrm:SequenceAcknowledgement-None", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_None * SOAP_FMAC4 soap_get__wsrm__SequenceAcknowledgement_None(struct soap*, struct _wsrm__SequenceAcknowledgement_None *, const char*, const char*);

inline int soap_read__wsrm__SequenceAcknowledgement_None(struct soap *soap, struct _wsrm__SequenceAcknowledgement_None *p)
{
	if (p)
	{	::soap_default__wsrm__SequenceAcknowledgement_None(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsrm__SequenceAcknowledgement_None(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsrm__SequenceAcknowledgement_None(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_None *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsrm__SequenceAcknowledgement_None(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsrm__SequenceAcknowledgement_None(struct soap *soap, struct _wsrm__SequenceAcknowledgement_None *p)
{
	if (::soap_read__wsrm__SequenceAcknowledgement_None(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsrm__SequenceAcknowledgement_AcknowledgementRange_DEFINED
#define SOAP_TYPE__wsrm__SequenceAcknowledgement_AcknowledgementRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, const struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, const char*, int, const struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *, const char*);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_AcknowledgementRange * SOAP_FMAC4 soap_in__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, const char*, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *, const char*);
SOAP_FMAC1 struct _wsrm__SequenceAcknowledgement_AcknowledgementRange * SOAP_FMAC2 soap_instantiate__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsrm__SequenceAcknowledgement_AcknowledgementRange * soap_new__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, n, NULL, NULL, NULL);
}

inline struct _wsrm__SequenceAcknowledgement_AcknowledgementRange * soap_new_req__wsrm__SequenceAcknowledgement_AcknowledgementRange(
	struct soap *soap,
	ULONG64 Upper,
	ULONG64 Lower)
{
	struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *_p = ::soap_new__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap);
	if (_p)
	{	::soap_default__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, _p);
		_p->Upper = Upper;
		_p->Lower = Lower;
	}
	return _p;
}

inline struct _wsrm__SequenceAcknowledgement_AcknowledgementRange * soap_new_set__wsrm__SequenceAcknowledgement_AcknowledgementRange(
	struct soap *soap,
	ULONG64 Upper,
	ULONG64 Lower)
{
	struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *_p = ::soap_new__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap);
	if (_p)
	{	::soap_default__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, _p);
		_p->Upper = Upper;
		_p->Lower = Lower;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, const struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *, const char*, const char*);

inline int soap_write__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap *soap, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p, "wsrm:SequenceAcknowledgement-AcknowledgementRange", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p, "wsrm:SequenceAcknowledgement-AcknowledgementRange", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p, "wsrm:SequenceAcknowledgement-AcknowledgementRange", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p, "wsrm:SequenceAcknowledgement-AcknowledgementRange", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_AcknowledgementRange * SOAP_FMAC4 soap_get__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *, const char*, const char*);

inline int soap_read__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap *soap, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *p)
{
	if (p)
	{	::soap_default__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap *soap, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *p)
{
	if (::soap_read__wsrm__SequenceAcknowledgement_AcknowledgementRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsrm__SequenceAcknowledgement_Final_DEFINED
#define SOAP_TYPE__wsrm__SequenceAcknowledgement_Final_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsrm__SequenceAcknowledgement_Final(struct soap*, struct _wsrm__SequenceAcknowledgement_Final *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsrm__SequenceAcknowledgement_Final(struct soap*, const struct _wsrm__SequenceAcknowledgement_Final *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrm__SequenceAcknowledgement_Final(struct soap*, const char*, int, const struct _wsrm__SequenceAcknowledgement_Final *, const char*);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_Final * SOAP_FMAC4 soap_in__wsrm__SequenceAcknowledgement_Final(struct soap*, const char*, struct _wsrm__SequenceAcknowledgement_Final *, const char*);
SOAP_FMAC1 struct _wsrm__SequenceAcknowledgement_Final * SOAP_FMAC2 soap_instantiate__wsrm__SequenceAcknowledgement_Final(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsrm__SequenceAcknowledgement_Final * soap_new__wsrm__SequenceAcknowledgement_Final(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrm__SequenceAcknowledgement_Final(soap, n, NULL, NULL, NULL);
}

inline struct _wsrm__SequenceAcknowledgement_Final * soap_new_req__wsrm__SequenceAcknowledgement_Final(
	struct soap *soap)
{
	struct _wsrm__SequenceAcknowledgement_Final *_p = ::soap_new__wsrm__SequenceAcknowledgement_Final(soap);
	if (_p)
	{	::soap_default__wsrm__SequenceAcknowledgement_Final(soap, _p);
	}
	return _p;
}

inline struct _wsrm__SequenceAcknowledgement_Final * soap_new_set__wsrm__SequenceAcknowledgement_Final(
	struct soap *soap)
{
	struct _wsrm__SequenceAcknowledgement_Final *_p = ::soap_new__wsrm__SequenceAcknowledgement_Final(soap);
	if (_p)
	{	::soap_default__wsrm__SequenceAcknowledgement_Final(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrm__SequenceAcknowledgement_Final(struct soap*, const struct _wsrm__SequenceAcknowledgement_Final *, const char*, const char*);

inline int soap_write__wsrm__SequenceAcknowledgement_Final(struct soap *soap, struct _wsrm__SequenceAcknowledgement_Final const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsrm__SequenceAcknowledgement_Final(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_Final(soap, p, "wsrm:SequenceAcknowledgement-Final", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsrm__SequenceAcknowledgement_Final(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_Final const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement_Final(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_Final(soap, p, "wsrm:SequenceAcknowledgement-Final", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsrm__SequenceAcknowledgement_Final(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_Final const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement_Final(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_Final(soap, p, "wsrm:SequenceAcknowledgement-Final", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrm__SequenceAcknowledgement_Final(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_Final const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement_Final(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement_Final(soap, p, "wsrm:SequenceAcknowledgement-Final", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_Final * SOAP_FMAC4 soap_get__wsrm__SequenceAcknowledgement_Final(struct soap*, struct _wsrm__SequenceAcknowledgement_Final *, const char*, const char*);

inline int soap_read__wsrm__SequenceAcknowledgement_Final(struct soap *soap, struct _wsrm__SequenceAcknowledgement_Final *p)
{
	if (p)
	{	::soap_default__wsrm__SequenceAcknowledgement_Final(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsrm__SequenceAcknowledgement_Final(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsrm__SequenceAcknowledgement_Final(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement_Final *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsrm__SequenceAcknowledgement_Final(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsrm__SequenceAcknowledgement_Final(struct soap *soap, struct _wsrm__SequenceAcknowledgement_Final *p)
{
	if (::soap_read__wsrm__SequenceAcknowledgement_Final(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsrm__UsesSequenceSSL_DEFINED
#define SOAP_TYPE__wsrm__UsesSequenceSSL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsrm__UsesSequenceSSL(struct soap*, struct _wsrm__UsesSequenceSSL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsrm__UsesSequenceSSL(struct soap*, const struct _wsrm__UsesSequenceSSL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrm__UsesSequenceSSL(struct soap*, const char*, int, const struct _wsrm__UsesSequenceSSL *, const char*);
SOAP_FMAC3 struct _wsrm__UsesSequenceSSL * SOAP_FMAC4 soap_in__wsrm__UsesSequenceSSL(struct soap*, const char*, struct _wsrm__UsesSequenceSSL *, const char*);
SOAP_FMAC1 struct _wsrm__UsesSequenceSSL * SOAP_FMAC2 soap_instantiate__wsrm__UsesSequenceSSL(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsrm__UsesSequenceSSL * soap_new__wsrm__UsesSequenceSSL(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrm__UsesSequenceSSL(soap, n, NULL, NULL, NULL);
}

inline struct _wsrm__UsesSequenceSSL * soap_new_req__wsrm__UsesSequenceSSL(
	struct soap *soap)
{
	struct _wsrm__UsesSequenceSSL *_p = ::soap_new__wsrm__UsesSequenceSSL(soap);
	if (_p)
	{	::soap_default__wsrm__UsesSequenceSSL(soap, _p);
	}
	return _p;
}

inline struct _wsrm__UsesSequenceSSL * soap_new_set__wsrm__UsesSequenceSSL(
	struct soap *soap)
{
	struct _wsrm__UsesSequenceSSL *_p = ::soap_new__wsrm__UsesSequenceSSL(soap);
	if (_p)
	{	::soap_default__wsrm__UsesSequenceSSL(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrm__UsesSequenceSSL(struct soap*, const struct _wsrm__UsesSequenceSSL *, const char*, const char*);

inline int soap_write__wsrm__UsesSequenceSSL(struct soap *soap, struct _wsrm__UsesSequenceSSL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsrm__UsesSequenceSSL(soap, p), 0) || ::soap_put__wsrm__UsesSequenceSSL(soap, p, "wsrm:UsesSequenceSSL", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsrm__UsesSequenceSSL(struct soap *soap, const char *URL, struct _wsrm__UsesSequenceSSL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__UsesSequenceSSL(soap, p), 0) || ::soap_put__wsrm__UsesSequenceSSL(soap, p, "wsrm:UsesSequenceSSL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsrm__UsesSequenceSSL(struct soap *soap, const char *URL, struct _wsrm__UsesSequenceSSL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__UsesSequenceSSL(soap, p), 0) || ::soap_put__wsrm__UsesSequenceSSL(soap, p, "wsrm:UsesSequenceSSL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrm__UsesSequenceSSL(struct soap *soap, const char *URL, struct _wsrm__UsesSequenceSSL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__UsesSequenceSSL(soap, p), 0) || ::soap_put__wsrm__UsesSequenceSSL(soap, p, "wsrm:UsesSequenceSSL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsrm__UsesSequenceSSL * SOAP_FMAC4 soap_get__wsrm__UsesSequenceSSL(struct soap*, struct _wsrm__UsesSequenceSSL *, const char*, const char*);

inline int soap_read__wsrm__UsesSequenceSSL(struct soap *soap, struct _wsrm__UsesSequenceSSL *p)
{
	if (p)
	{	::soap_default__wsrm__UsesSequenceSSL(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsrm__UsesSequenceSSL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsrm__UsesSequenceSSL(struct soap *soap, const char *URL, struct _wsrm__UsesSequenceSSL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsrm__UsesSequenceSSL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsrm__UsesSequenceSSL(struct soap *soap, struct _wsrm__UsesSequenceSSL *p)
{
	if (::soap_read__wsrm__UsesSequenceSSL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsrm__UsesSequenceSTR_DEFINED
#define SOAP_TYPE__wsrm__UsesSequenceSTR_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsrm__UsesSequenceSTR(struct soap*, struct _wsrm__UsesSequenceSTR *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsrm__UsesSequenceSTR(struct soap*, const struct _wsrm__UsesSequenceSTR *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrm__UsesSequenceSTR(struct soap*, const char*, int, const struct _wsrm__UsesSequenceSTR *, const char*);
SOAP_FMAC3 struct _wsrm__UsesSequenceSTR * SOAP_FMAC4 soap_in__wsrm__UsesSequenceSTR(struct soap*, const char*, struct _wsrm__UsesSequenceSTR *, const char*);
SOAP_FMAC1 struct _wsrm__UsesSequenceSTR * SOAP_FMAC2 soap_instantiate__wsrm__UsesSequenceSTR(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsrm__UsesSequenceSTR * soap_new__wsrm__UsesSequenceSTR(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrm__UsesSequenceSTR(soap, n, NULL, NULL, NULL);
}

inline struct _wsrm__UsesSequenceSTR * soap_new_req__wsrm__UsesSequenceSTR(
	struct soap *soap)
{
	struct _wsrm__UsesSequenceSTR *_p = ::soap_new__wsrm__UsesSequenceSTR(soap);
	if (_p)
	{	::soap_default__wsrm__UsesSequenceSTR(soap, _p);
	}
	return _p;
}

inline struct _wsrm__UsesSequenceSTR * soap_new_set__wsrm__UsesSequenceSTR(
	struct soap *soap)
{
	struct _wsrm__UsesSequenceSTR *_p = ::soap_new__wsrm__UsesSequenceSTR(soap);
	if (_p)
	{	::soap_default__wsrm__UsesSequenceSTR(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrm__UsesSequenceSTR(struct soap*, const struct _wsrm__UsesSequenceSTR *, const char*, const char*);

inline int soap_write__wsrm__UsesSequenceSTR(struct soap *soap, struct _wsrm__UsesSequenceSTR const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsrm__UsesSequenceSTR(soap, p), 0) || ::soap_put__wsrm__UsesSequenceSTR(soap, p, "wsrm:UsesSequenceSTR", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsrm__UsesSequenceSTR(struct soap *soap, const char *URL, struct _wsrm__UsesSequenceSTR const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__UsesSequenceSTR(soap, p), 0) || ::soap_put__wsrm__UsesSequenceSTR(soap, p, "wsrm:UsesSequenceSTR", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsrm__UsesSequenceSTR(struct soap *soap, const char *URL, struct _wsrm__UsesSequenceSTR const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__UsesSequenceSTR(soap, p), 0) || ::soap_put__wsrm__UsesSequenceSTR(soap, p, "wsrm:UsesSequenceSTR", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrm__UsesSequenceSTR(struct soap *soap, const char *URL, struct _wsrm__UsesSequenceSTR const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__UsesSequenceSTR(soap, p), 0) || ::soap_put__wsrm__UsesSequenceSTR(soap, p, "wsrm:UsesSequenceSTR", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsrm__UsesSequenceSTR * SOAP_FMAC4 soap_get__wsrm__UsesSequenceSTR(struct soap*, struct _wsrm__UsesSequenceSTR *, const char*, const char*);

inline int soap_read__wsrm__UsesSequenceSTR(struct soap *soap, struct _wsrm__UsesSequenceSTR *p)
{
	if (p)
	{	::soap_default__wsrm__UsesSequenceSTR(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsrm__UsesSequenceSTR(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsrm__UsesSequenceSTR(struct soap *soap, const char *URL, struct _wsrm__UsesSequenceSTR *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsrm__UsesSequenceSTR(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsrm__UsesSequenceSTR(struct soap *soap, struct _wsrm__UsesSequenceSTR *p)
{
	if (::soap_read__wsrm__UsesSequenceSTR(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsrm__SequenceAcknowledgement_DEFINED
#define SOAP_TYPE__wsrm__SequenceAcknowledgement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsrm__SequenceAcknowledgement(struct soap*, struct _wsrm__SequenceAcknowledgement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsrm__SequenceAcknowledgement(struct soap*, const struct _wsrm__SequenceAcknowledgement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrm__SequenceAcknowledgement(struct soap*, const char*, int, const struct _wsrm__SequenceAcknowledgement *, const char*);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement * SOAP_FMAC4 soap_in__wsrm__SequenceAcknowledgement(struct soap*, const char*, struct _wsrm__SequenceAcknowledgement *, const char*);
SOAP_FMAC1 struct _wsrm__SequenceAcknowledgement * SOAP_FMAC2 soap_instantiate__wsrm__SequenceAcknowledgement(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsrm__SequenceAcknowledgement * soap_new__wsrm__SequenceAcknowledgement(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsrm__SequenceAcknowledgement(soap, n, NULL, NULL, NULL);
}

inline struct _wsrm__SequenceAcknowledgement * soap_new_req__wsrm__SequenceAcknowledgement(
	struct soap *soap,
	char *Identifier,
	int __sizeNack,
	ULONG64 *Nack,
	int __sizeAcknowledgementRange,
	struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *AcknowledgementRange)
{
	struct _wsrm__SequenceAcknowledgement *_p = ::soap_new__wsrm__SequenceAcknowledgement(soap);
	if (_p)
	{	::soap_default__wsrm__SequenceAcknowledgement(soap, _p);
		_p->Identifier = Identifier;
		_p->__sizeNack = __sizeNack;
		_p->Nack = Nack;
		_p->__sizeAcknowledgementRange = __sizeAcknowledgementRange;
		_p->AcknowledgementRange = AcknowledgementRange;
	}
	return _p;
}

inline struct _wsrm__SequenceAcknowledgement * soap_new_set__wsrm__SequenceAcknowledgement(
	struct soap *soap,
	char *Identifier,
	int __sizeNack,
	ULONG64 *Nack,
	struct _wsrm__SequenceAcknowledgement_Final *Final,
	int __sizeAcknowledgementRange,
	struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *AcknowledgementRange,
	struct _wsrm__SequenceAcknowledgement_None *None,
	int *netrm__BufferRemaining,
	char *__any)
{
	struct _wsrm__SequenceAcknowledgement *_p = ::soap_new__wsrm__SequenceAcknowledgement(soap);
	if (_p)
	{	::soap_default__wsrm__SequenceAcknowledgement(soap, _p);
		_p->Identifier = Identifier;
		_p->__sizeNack = __sizeNack;
		_p->Nack = Nack;
		_p->Final = Final;
		_p->__sizeAcknowledgementRange = __sizeAcknowledgementRange;
		_p->AcknowledgementRange = AcknowledgementRange;
		_p->None = None;
		_p->netrm__BufferRemaining = netrm__BufferRemaining;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrm__SequenceAcknowledgement(struct soap*, const struct _wsrm__SequenceAcknowledgement *, const char*, const char*);

inline int soap_write__wsrm__SequenceAcknowledgement(struct soap *soap, struct _wsrm__SequenceAcknowledgement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsrm__SequenceAcknowledgement(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement(soap, p, "wsrm:SequenceAcknowledgement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsrm__SequenceAcknowledgement(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement(soap, p, "wsrm:SequenceAcknowledgement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsrm__SequenceAcknowledgement(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement(soap, p, "wsrm:SequenceAcknowledgement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrm__SequenceAcknowledgement(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsrm__SequenceAcknowledgement(soap, p), 0) || ::soap_put__wsrm__SequenceAcknowledgement(soap, p, "wsrm:SequenceAcknowledgement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement * SOAP_FMAC4 soap_get__wsrm__SequenceAcknowledgement(struct soap*, struct _wsrm__SequenceAcknowledgement *, const char*, const char*);

inline int soap_read__wsrm__SequenceAcknowledgement(struct soap *soap, struct _wsrm__SequenceAcknowledgement *p)
{
	if (p)
	{	::soap_default__wsrm__SequenceAcknowledgement(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsrm__SequenceAcknowledgement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsrm__SequenceAcknowledgement(struct soap *soap, const char *URL, struct _wsrm__SequenceAcknowledgement *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsrm__SequenceAcknowledgement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsrm__SequenceAcknowledgement(struct soap *soap, struct _wsrm__SequenceAcknowledgement *p)
{
	if (::soap_read__wsrm__SequenceAcknowledgement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__AcceptType_DEFINED
#define SOAP_TYPE_wsrm__AcceptType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__AcceptType(struct soap*, struct wsrm__AcceptType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__AcceptType(struct soap*, const struct wsrm__AcceptType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__AcceptType(struct soap*, const char*, int, const struct wsrm__AcceptType *, const char*);
SOAP_FMAC3 struct wsrm__AcceptType * SOAP_FMAC4 soap_in_wsrm__AcceptType(struct soap*, const char*, struct wsrm__AcceptType *, const char*);
SOAP_FMAC1 struct wsrm__AcceptType * SOAP_FMAC2 soap_instantiate_wsrm__AcceptType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__AcceptType * soap_new_wsrm__AcceptType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__AcceptType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__AcceptType * soap_new_req_wsrm__AcceptType(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& AcksTo)
{
	struct wsrm__AcceptType *_p = ::soap_new_wsrm__AcceptType(soap);
	if (_p)
	{	::soap_default_wsrm__AcceptType(soap, _p);
		_p->AcksTo = AcksTo;
	}
	return _p;
}

inline struct wsrm__AcceptType * soap_new_set_wsrm__AcceptType(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& AcksTo)
{
	struct wsrm__AcceptType *_p = ::soap_new_wsrm__AcceptType(soap);
	if (_p)
	{	::soap_default_wsrm__AcceptType(soap, _p);
		_p->AcksTo = AcksTo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__AcceptType(struct soap*, const struct wsrm__AcceptType *, const char*, const char*);

inline int soap_write_wsrm__AcceptType(struct soap *soap, struct wsrm__AcceptType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__AcceptType(soap, p), 0) || ::soap_put_wsrm__AcceptType(soap, p, "wsrm:AcceptType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__AcceptType(struct soap *soap, const char *URL, struct wsrm__AcceptType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__AcceptType(soap, p), 0) || ::soap_put_wsrm__AcceptType(soap, p, "wsrm:AcceptType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__AcceptType(struct soap *soap, const char *URL, struct wsrm__AcceptType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__AcceptType(soap, p), 0) || ::soap_put_wsrm__AcceptType(soap, p, "wsrm:AcceptType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__AcceptType(struct soap *soap, const char *URL, struct wsrm__AcceptType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__AcceptType(soap, p), 0) || ::soap_put_wsrm__AcceptType(soap, p, "wsrm:AcceptType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__AcceptType * SOAP_FMAC4 soap_get_wsrm__AcceptType(struct soap*, struct wsrm__AcceptType *, const char*, const char*);

inline int soap_read_wsrm__AcceptType(struct soap *soap, struct wsrm__AcceptType *p)
{
	if (p)
	{	::soap_default_wsrm__AcceptType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__AcceptType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__AcceptType(struct soap *soap, const char *URL, struct wsrm__AcceptType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__AcceptType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__AcceptType(struct soap *soap, struct wsrm__AcceptType *p)
{
	if (::soap_read_wsrm__AcceptType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__OfferType_DEFINED
#define SOAP_TYPE_wsrm__OfferType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__OfferType(struct soap*, struct wsrm__OfferType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__OfferType(struct soap*, const struct wsrm__OfferType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__OfferType(struct soap*, const char*, int, const struct wsrm__OfferType *, const char*);
SOAP_FMAC3 struct wsrm__OfferType * SOAP_FMAC4 soap_in_wsrm__OfferType(struct soap*, const char*, struct wsrm__OfferType *, const char*);
SOAP_FMAC1 struct wsrm__OfferType * SOAP_FMAC2 soap_instantiate_wsrm__OfferType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__OfferType * soap_new_wsrm__OfferType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__OfferType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__OfferType * soap_new_req_wsrm__OfferType(
	struct soap *soap,
	char *Identifier,
	const struct wsa5__EndpointReferenceType& Endpoint)
{
	struct wsrm__OfferType *_p = ::soap_new_wsrm__OfferType(soap);
	if (_p)
	{	::soap_default_wsrm__OfferType(soap, _p);
		_p->Identifier = Identifier;
		_p->Endpoint = Endpoint;
	}
	return _p;
}

inline struct wsrm__OfferType * soap_new_set_wsrm__OfferType(
	struct soap *soap,
	char *Identifier,
	const struct wsa5__EndpointReferenceType& Endpoint,
	LONG64 *Expires,
	enum wsrm__IncompleteSequenceBehaviorType *IncompleteSequenceBehavior)
{
	struct wsrm__OfferType *_p = ::soap_new_wsrm__OfferType(soap);
	if (_p)
	{	::soap_default_wsrm__OfferType(soap, _p);
		_p->Identifier = Identifier;
		_p->Endpoint = Endpoint;
		_p->Expires = Expires;
		_p->IncompleteSequenceBehavior = IncompleteSequenceBehavior;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__OfferType(struct soap*, const struct wsrm__OfferType *, const char*, const char*);

inline int soap_write_wsrm__OfferType(struct soap *soap, struct wsrm__OfferType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__OfferType(soap, p), 0) || ::soap_put_wsrm__OfferType(soap, p, "wsrm:OfferType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__OfferType(struct soap *soap, const char *URL, struct wsrm__OfferType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__OfferType(soap, p), 0) || ::soap_put_wsrm__OfferType(soap, p, "wsrm:OfferType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__OfferType(struct soap *soap, const char *URL, struct wsrm__OfferType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__OfferType(soap, p), 0) || ::soap_put_wsrm__OfferType(soap, p, "wsrm:OfferType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__OfferType(struct soap *soap, const char *URL, struct wsrm__OfferType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__OfferType(soap, p), 0) || ::soap_put_wsrm__OfferType(soap, p, "wsrm:OfferType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__OfferType * SOAP_FMAC4 soap_get_wsrm__OfferType(struct soap*, struct wsrm__OfferType *, const char*, const char*);

inline int soap_read_wsrm__OfferType(struct soap *soap, struct wsrm__OfferType *p)
{
	if (p)
	{	::soap_default_wsrm__OfferType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__OfferType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__OfferType(struct soap *soap, const char *URL, struct wsrm__OfferType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__OfferType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__OfferType(struct soap *soap, struct wsrm__OfferType *p)
{
	if (::soap_read_wsrm__OfferType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__TerminateSequenceResponseType_DEFINED
#define SOAP_TYPE_wsrm__TerminateSequenceResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__TerminateSequenceResponseType(struct soap*, struct wsrm__TerminateSequenceResponseType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__TerminateSequenceResponseType(struct soap*, const struct wsrm__TerminateSequenceResponseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__TerminateSequenceResponseType(struct soap*, const char*, int, const struct wsrm__TerminateSequenceResponseType *, const char*);
SOAP_FMAC3 struct wsrm__TerminateSequenceResponseType * SOAP_FMAC4 soap_in_wsrm__TerminateSequenceResponseType(struct soap*, const char*, struct wsrm__TerminateSequenceResponseType *, const char*);
SOAP_FMAC1 struct wsrm__TerminateSequenceResponseType * SOAP_FMAC2 soap_instantiate_wsrm__TerminateSequenceResponseType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__TerminateSequenceResponseType * soap_new_wsrm__TerminateSequenceResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__TerminateSequenceResponseType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__TerminateSequenceResponseType * soap_new_req_wsrm__TerminateSequenceResponseType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__TerminateSequenceResponseType *_p = ::soap_new_wsrm__TerminateSequenceResponseType(soap);
	if (_p)
	{	::soap_default_wsrm__TerminateSequenceResponseType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}

inline struct wsrm__TerminateSequenceResponseType * soap_new_set_wsrm__TerminateSequenceResponseType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__TerminateSequenceResponseType *_p = ::soap_new_wsrm__TerminateSequenceResponseType(soap);
	if (_p)
	{	::soap_default_wsrm__TerminateSequenceResponseType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__TerminateSequenceResponseType(struct soap*, const struct wsrm__TerminateSequenceResponseType *, const char*, const char*);

inline int soap_write_wsrm__TerminateSequenceResponseType(struct soap *soap, struct wsrm__TerminateSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__TerminateSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__TerminateSequenceResponseType(soap, p, "wsrm:TerminateSequenceResponseType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__TerminateSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__TerminateSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__TerminateSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__TerminateSequenceResponseType(soap, p, "wsrm:TerminateSequenceResponseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__TerminateSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__TerminateSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__TerminateSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__TerminateSequenceResponseType(soap, p, "wsrm:TerminateSequenceResponseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__TerminateSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__TerminateSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__TerminateSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__TerminateSequenceResponseType(soap, p, "wsrm:TerminateSequenceResponseType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__TerminateSequenceResponseType * SOAP_FMAC4 soap_get_wsrm__TerminateSequenceResponseType(struct soap*, struct wsrm__TerminateSequenceResponseType *, const char*, const char*);

inline int soap_read_wsrm__TerminateSequenceResponseType(struct soap *soap, struct wsrm__TerminateSequenceResponseType *p)
{
	if (p)
	{	::soap_default_wsrm__TerminateSequenceResponseType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__TerminateSequenceResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__TerminateSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__TerminateSequenceResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__TerminateSequenceResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__TerminateSequenceResponseType(struct soap *soap, struct wsrm__TerminateSequenceResponseType *p)
{
	if (::soap_read_wsrm__TerminateSequenceResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__TerminateSequenceType_DEFINED
#define SOAP_TYPE_wsrm__TerminateSequenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__TerminateSequenceType(struct soap*, struct wsrm__TerminateSequenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__TerminateSequenceType(struct soap*, const struct wsrm__TerminateSequenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__TerminateSequenceType(struct soap*, const char*, int, const struct wsrm__TerminateSequenceType *, const char*);
SOAP_FMAC3 struct wsrm__TerminateSequenceType * SOAP_FMAC4 soap_in_wsrm__TerminateSequenceType(struct soap*, const char*, struct wsrm__TerminateSequenceType *, const char*);
SOAP_FMAC1 struct wsrm__TerminateSequenceType * SOAP_FMAC2 soap_instantiate_wsrm__TerminateSequenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__TerminateSequenceType * soap_new_wsrm__TerminateSequenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__TerminateSequenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__TerminateSequenceType * soap_new_req_wsrm__TerminateSequenceType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__TerminateSequenceType *_p = ::soap_new_wsrm__TerminateSequenceType(soap);
	if (_p)
	{	::soap_default_wsrm__TerminateSequenceType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}

inline struct wsrm__TerminateSequenceType * soap_new_set_wsrm__TerminateSequenceType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__TerminateSequenceType *_p = ::soap_new_wsrm__TerminateSequenceType(soap);
	if (_p)
	{	::soap_default_wsrm__TerminateSequenceType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__TerminateSequenceType(struct soap*, const struct wsrm__TerminateSequenceType *, const char*, const char*);

inline int soap_write_wsrm__TerminateSequenceType(struct soap *soap, struct wsrm__TerminateSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__TerminateSequenceType(soap, p), 0) || ::soap_put_wsrm__TerminateSequenceType(soap, p, "wsrm:TerminateSequenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__TerminateSequenceType(struct soap *soap, const char *URL, struct wsrm__TerminateSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__TerminateSequenceType(soap, p), 0) || ::soap_put_wsrm__TerminateSequenceType(soap, p, "wsrm:TerminateSequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__TerminateSequenceType(struct soap *soap, const char *URL, struct wsrm__TerminateSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__TerminateSequenceType(soap, p), 0) || ::soap_put_wsrm__TerminateSequenceType(soap, p, "wsrm:TerminateSequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__TerminateSequenceType(struct soap *soap, const char *URL, struct wsrm__TerminateSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__TerminateSequenceType(soap, p), 0) || ::soap_put_wsrm__TerminateSequenceType(soap, p, "wsrm:TerminateSequenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__TerminateSequenceType * SOAP_FMAC4 soap_get_wsrm__TerminateSequenceType(struct soap*, struct wsrm__TerminateSequenceType *, const char*, const char*);

inline int soap_read_wsrm__TerminateSequenceType(struct soap *soap, struct wsrm__TerminateSequenceType *p)
{
	if (p)
	{	::soap_default_wsrm__TerminateSequenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__TerminateSequenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__TerminateSequenceType(struct soap *soap, const char *URL, struct wsrm__TerminateSequenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__TerminateSequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__TerminateSequenceType(struct soap *soap, struct wsrm__TerminateSequenceType *p)
{
	if (::soap_read_wsrm__TerminateSequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__CloseSequenceResponseType_DEFINED
#define SOAP_TYPE_wsrm__CloseSequenceResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__CloseSequenceResponseType(struct soap*, struct wsrm__CloseSequenceResponseType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__CloseSequenceResponseType(struct soap*, const struct wsrm__CloseSequenceResponseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__CloseSequenceResponseType(struct soap*, const char*, int, const struct wsrm__CloseSequenceResponseType *, const char*);
SOAP_FMAC3 struct wsrm__CloseSequenceResponseType * SOAP_FMAC4 soap_in_wsrm__CloseSequenceResponseType(struct soap*, const char*, struct wsrm__CloseSequenceResponseType *, const char*);
SOAP_FMAC1 struct wsrm__CloseSequenceResponseType * SOAP_FMAC2 soap_instantiate_wsrm__CloseSequenceResponseType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__CloseSequenceResponseType * soap_new_wsrm__CloseSequenceResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__CloseSequenceResponseType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__CloseSequenceResponseType * soap_new_req_wsrm__CloseSequenceResponseType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__CloseSequenceResponseType *_p = ::soap_new_wsrm__CloseSequenceResponseType(soap);
	if (_p)
	{	::soap_default_wsrm__CloseSequenceResponseType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}

inline struct wsrm__CloseSequenceResponseType * soap_new_set_wsrm__CloseSequenceResponseType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__CloseSequenceResponseType *_p = ::soap_new_wsrm__CloseSequenceResponseType(soap);
	if (_p)
	{	::soap_default_wsrm__CloseSequenceResponseType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__CloseSequenceResponseType(struct soap*, const struct wsrm__CloseSequenceResponseType *, const char*, const char*);

inline int soap_write_wsrm__CloseSequenceResponseType(struct soap *soap, struct wsrm__CloseSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__CloseSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__CloseSequenceResponseType(soap, p, "wsrm:CloseSequenceResponseType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__CloseSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__CloseSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CloseSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__CloseSequenceResponseType(soap, p, "wsrm:CloseSequenceResponseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__CloseSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__CloseSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CloseSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__CloseSequenceResponseType(soap, p, "wsrm:CloseSequenceResponseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__CloseSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__CloseSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CloseSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__CloseSequenceResponseType(soap, p, "wsrm:CloseSequenceResponseType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__CloseSequenceResponseType * SOAP_FMAC4 soap_get_wsrm__CloseSequenceResponseType(struct soap*, struct wsrm__CloseSequenceResponseType *, const char*, const char*);

inline int soap_read_wsrm__CloseSequenceResponseType(struct soap *soap, struct wsrm__CloseSequenceResponseType *p)
{
	if (p)
	{	::soap_default_wsrm__CloseSequenceResponseType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__CloseSequenceResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__CloseSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__CloseSequenceResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__CloseSequenceResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__CloseSequenceResponseType(struct soap *soap, struct wsrm__CloseSequenceResponseType *p)
{
	if (::soap_read_wsrm__CloseSequenceResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__CloseSequenceType_DEFINED
#define SOAP_TYPE_wsrm__CloseSequenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__CloseSequenceType(struct soap*, struct wsrm__CloseSequenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__CloseSequenceType(struct soap*, const struct wsrm__CloseSequenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__CloseSequenceType(struct soap*, const char*, int, const struct wsrm__CloseSequenceType *, const char*);
SOAP_FMAC3 struct wsrm__CloseSequenceType * SOAP_FMAC4 soap_in_wsrm__CloseSequenceType(struct soap*, const char*, struct wsrm__CloseSequenceType *, const char*);
SOAP_FMAC1 struct wsrm__CloseSequenceType * SOAP_FMAC2 soap_instantiate_wsrm__CloseSequenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__CloseSequenceType * soap_new_wsrm__CloseSequenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__CloseSequenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__CloseSequenceType * soap_new_req_wsrm__CloseSequenceType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__CloseSequenceType *_p = ::soap_new_wsrm__CloseSequenceType(soap);
	if (_p)
	{	::soap_default_wsrm__CloseSequenceType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}

inline struct wsrm__CloseSequenceType * soap_new_set_wsrm__CloseSequenceType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__CloseSequenceType *_p = ::soap_new_wsrm__CloseSequenceType(soap);
	if (_p)
	{	::soap_default_wsrm__CloseSequenceType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__CloseSequenceType(struct soap*, const struct wsrm__CloseSequenceType *, const char*, const char*);

inline int soap_write_wsrm__CloseSequenceType(struct soap *soap, struct wsrm__CloseSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__CloseSequenceType(soap, p), 0) || ::soap_put_wsrm__CloseSequenceType(soap, p, "wsrm:CloseSequenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__CloseSequenceType(struct soap *soap, const char *URL, struct wsrm__CloseSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CloseSequenceType(soap, p), 0) || ::soap_put_wsrm__CloseSequenceType(soap, p, "wsrm:CloseSequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__CloseSequenceType(struct soap *soap, const char *URL, struct wsrm__CloseSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CloseSequenceType(soap, p), 0) || ::soap_put_wsrm__CloseSequenceType(soap, p, "wsrm:CloseSequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__CloseSequenceType(struct soap *soap, const char *URL, struct wsrm__CloseSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CloseSequenceType(soap, p), 0) || ::soap_put_wsrm__CloseSequenceType(soap, p, "wsrm:CloseSequenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__CloseSequenceType * SOAP_FMAC4 soap_get_wsrm__CloseSequenceType(struct soap*, struct wsrm__CloseSequenceType *, const char*, const char*);

inline int soap_read_wsrm__CloseSequenceType(struct soap *soap, struct wsrm__CloseSequenceType *p)
{
	if (p)
	{	::soap_default_wsrm__CloseSequenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__CloseSequenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__CloseSequenceType(struct soap *soap, const char *URL, struct wsrm__CloseSequenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__CloseSequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__CloseSequenceType(struct soap *soap, struct wsrm__CloseSequenceType *p)
{
	if (::soap_read_wsrm__CloseSequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__CreateSequenceResponseType_DEFINED
#define SOAP_TYPE_wsrm__CreateSequenceResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__CreateSequenceResponseType(struct soap*, struct wsrm__CreateSequenceResponseType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__CreateSequenceResponseType(struct soap*, const struct wsrm__CreateSequenceResponseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__CreateSequenceResponseType(struct soap*, const char*, int, const struct wsrm__CreateSequenceResponseType *, const char*);
SOAP_FMAC3 struct wsrm__CreateSequenceResponseType * SOAP_FMAC4 soap_in_wsrm__CreateSequenceResponseType(struct soap*, const char*, struct wsrm__CreateSequenceResponseType *, const char*);
SOAP_FMAC1 struct wsrm__CreateSequenceResponseType * SOAP_FMAC2 soap_instantiate_wsrm__CreateSequenceResponseType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__CreateSequenceResponseType * soap_new_wsrm__CreateSequenceResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__CreateSequenceResponseType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__CreateSequenceResponseType * soap_new_req_wsrm__CreateSequenceResponseType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__CreateSequenceResponseType *_p = ::soap_new_wsrm__CreateSequenceResponseType(soap);
	if (_p)
	{	::soap_default_wsrm__CreateSequenceResponseType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}

inline struct wsrm__CreateSequenceResponseType * soap_new_set_wsrm__CreateSequenceResponseType(
	struct soap *soap,
	char *Identifier,
	LONG64 *Expires,
	enum wsrm__IncompleteSequenceBehaviorType *IncompleteSequenceBehavior,
	struct wsrm__AcceptType *Accept)
{
	struct wsrm__CreateSequenceResponseType *_p = ::soap_new_wsrm__CreateSequenceResponseType(soap);
	if (_p)
	{	::soap_default_wsrm__CreateSequenceResponseType(soap, _p);
		_p->Identifier = Identifier;
		_p->Expires = Expires;
		_p->IncompleteSequenceBehavior = IncompleteSequenceBehavior;
		_p->Accept = Accept;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__CreateSequenceResponseType(struct soap*, const struct wsrm__CreateSequenceResponseType *, const char*, const char*);

inline int soap_write_wsrm__CreateSequenceResponseType(struct soap *soap, struct wsrm__CreateSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__CreateSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__CreateSequenceResponseType(soap, p, "wsrm:CreateSequenceResponseType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__CreateSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__CreateSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CreateSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__CreateSequenceResponseType(soap, p, "wsrm:CreateSequenceResponseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__CreateSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__CreateSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CreateSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__CreateSequenceResponseType(soap, p, "wsrm:CreateSequenceResponseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__CreateSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__CreateSequenceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CreateSequenceResponseType(soap, p), 0) || ::soap_put_wsrm__CreateSequenceResponseType(soap, p, "wsrm:CreateSequenceResponseType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__CreateSequenceResponseType * SOAP_FMAC4 soap_get_wsrm__CreateSequenceResponseType(struct soap*, struct wsrm__CreateSequenceResponseType *, const char*, const char*);

inline int soap_read_wsrm__CreateSequenceResponseType(struct soap *soap, struct wsrm__CreateSequenceResponseType *p)
{
	if (p)
	{	::soap_default_wsrm__CreateSequenceResponseType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__CreateSequenceResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__CreateSequenceResponseType(struct soap *soap, const char *URL, struct wsrm__CreateSequenceResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__CreateSequenceResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__CreateSequenceResponseType(struct soap *soap, struct wsrm__CreateSequenceResponseType *p)
{
	if (::soap_read_wsrm__CreateSequenceResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__CreateSequenceType_DEFINED
#define SOAP_TYPE_wsrm__CreateSequenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__CreateSequenceType(struct soap*, struct wsrm__CreateSequenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__CreateSequenceType(struct soap*, const struct wsrm__CreateSequenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__CreateSequenceType(struct soap*, const char*, int, const struct wsrm__CreateSequenceType *, const char*);
SOAP_FMAC3 struct wsrm__CreateSequenceType * SOAP_FMAC4 soap_in_wsrm__CreateSequenceType(struct soap*, const char*, struct wsrm__CreateSequenceType *, const char*);
SOAP_FMAC1 struct wsrm__CreateSequenceType * SOAP_FMAC2 soap_instantiate_wsrm__CreateSequenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__CreateSequenceType * soap_new_wsrm__CreateSequenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__CreateSequenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__CreateSequenceType * soap_new_req_wsrm__CreateSequenceType(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& AcksTo)
{
	struct wsrm__CreateSequenceType *_p = ::soap_new_wsrm__CreateSequenceType(soap);
	if (_p)
	{	::soap_default_wsrm__CreateSequenceType(soap, _p);
		_p->AcksTo = AcksTo;
	}
	return _p;
}

inline struct wsrm__CreateSequenceType * soap_new_set_wsrm__CreateSequenceType(
	struct soap *soap,
	const struct wsa5__EndpointReferenceType& AcksTo,
	LONG64 *Expires,
	struct wsrm__OfferType *Offer)
{
	struct wsrm__CreateSequenceType *_p = ::soap_new_wsrm__CreateSequenceType(soap);
	if (_p)
	{	::soap_default_wsrm__CreateSequenceType(soap, _p);
		_p->AcksTo = AcksTo;
		_p->Expires = Expires;
		_p->Offer = Offer;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__CreateSequenceType(struct soap*, const struct wsrm__CreateSequenceType *, const char*, const char*);

inline int soap_write_wsrm__CreateSequenceType(struct soap *soap, struct wsrm__CreateSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__CreateSequenceType(soap, p), 0) || ::soap_put_wsrm__CreateSequenceType(soap, p, "wsrm:CreateSequenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__CreateSequenceType(struct soap *soap, const char *URL, struct wsrm__CreateSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CreateSequenceType(soap, p), 0) || ::soap_put_wsrm__CreateSequenceType(soap, p, "wsrm:CreateSequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__CreateSequenceType(struct soap *soap, const char *URL, struct wsrm__CreateSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CreateSequenceType(soap, p), 0) || ::soap_put_wsrm__CreateSequenceType(soap, p, "wsrm:CreateSequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__CreateSequenceType(struct soap *soap, const char *URL, struct wsrm__CreateSequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__CreateSequenceType(soap, p), 0) || ::soap_put_wsrm__CreateSequenceType(soap, p, "wsrm:CreateSequenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__CreateSequenceType * SOAP_FMAC4 soap_get_wsrm__CreateSequenceType(struct soap*, struct wsrm__CreateSequenceType *, const char*, const char*);

inline int soap_read_wsrm__CreateSequenceType(struct soap *soap, struct wsrm__CreateSequenceType *p)
{
	if (p)
	{	::soap_default_wsrm__CreateSequenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__CreateSequenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__CreateSequenceType(struct soap *soap, const char *URL, struct wsrm__CreateSequenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__CreateSequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__CreateSequenceType(struct soap *soap, struct wsrm__CreateSequenceType *p)
{
	if (::soap_read_wsrm__CreateSequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__SequenceFaultType_DEFINED
#define SOAP_TYPE_wsrm__SequenceFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__SequenceFaultType(struct soap*, struct wsrm__SequenceFaultType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__SequenceFaultType(struct soap*, const struct wsrm__SequenceFaultType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__SequenceFaultType(struct soap*, const char*, int, const struct wsrm__SequenceFaultType *, const char*);
SOAP_FMAC3 struct wsrm__SequenceFaultType * SOAP_FMAC4 soap_in_wsrm__SequenceFaultType(struct soap*, const char*, struct wsrm__SequenceFaultType *, const char*);
SOAP_FMAC1 struct wsrm__SequenceFaultType * SOAP_FMAC2 soap_instantiate_wsrm__SequenceFaultType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__SequenceFaultType * soap_new_wsrm__SequenceFaultType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__SequenceFaultType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__SequenceFaultType * soap_new_req_wsrm__SequenceFaultType(
	struct soap *soap,
	enum wsrm__FaultCodes FaultCode)
{
	struct wsrm__SequenceFaultType *_p = ::soap_new_wsrm__SequenceFaultType(soap);
	if (_p)
	{	::soap_default_wsrm__SequenceFaultType(soap, _p);
		_p->FaultCode = FaultCode;
	}
	return _p;
}

inline struct wsrm__SequenceFaultType * soap_new_set_wsrm__SequenceFaultType(
	struct soap *soap,
	enum wsrm__FaultCodes FaultCode,
	struct SOAP_ENV__Detail *Detail)
{
	struct wsrm__SequenceFaultType *_p = ::soap_new_wsrm__SequenceFaultType(soap);
	if (_p)
	{	::soap_default_wsrm__SequenceFaultType(soap, _p);
		_p->FaultCode = FaultCode;
		_p->Detail = Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__SequenceFaultType(struct soap*, const struct wsrm__SequenceFaultType *, const char*, const char*);

inline int soap_write_wsrm__SequenceFaultType(struct soap *soap, struct wsrm__SequenceFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__SequenceFaultType(soap, p), 0) || ::soap_put_wsrm__SequenceFaultType(soap, p, "wsrm:SequenceFaultType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__SequenceFaultType(struct soap *soap, const char *URL, struct wsrm__SequenceFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__SequenceFaultType(soap, p), 0) || ::soap_put_wsrm__SequenceFaultType(soap, p, "wsrm:SequenceFaultType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__SequenceFaultType(struct soap *soap, const char *URL, struct wsrm__SequenceFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__SequenceFaultType(soap, p), 0) || ::soap_put_wsrm__SequenceFaultType(soap, p, "wsrm:SequenceFaultType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__SequenceFaultType(struct soap *soap, const char *URL, struct wsrm__SequenceFaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__SequenceFaultType(soap, p), 0) || ::soap_put_wsrm__SequenceFaultType(soap, p, "wsrm:SequenceFaultType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__SequenceFaultType * SOAP_FMAC4 soap_get_wsrm__SequenceFaultType(struct soap*, struct wsrm__SequenceFaultType *, const char*, const char*);

inline int soap_read_wsrm__SequenceFaultType(struct soap *soap, struct wsrm__SequenceFaultType *p)
{
	if (p)
	{	::soap_default_wsrm__SequenceFaultType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__SequenceFaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__SequenceFaultType(struct soap *soap, const char *URL, struct wsrm__SequenceFaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__SequenceFaultType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__SequenceFaultType(struct soap *soap, struct wsrm__SequenceFaultType *p)
{
	if (::soap_read_wsrm__SequenceFaultType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__AckRequestedType_DEFINED
#define SOAP_TYPE_wsrm__AckRequestedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__AckRequestedType(struct soap*, struct wsrm__AckRequestedType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__AckRequestedType(struct soap*, const struct wsrm__AckRequestedType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__AckRequestedType(struct soap*, const char*, int, const struct wsrm__AckRequestedType *, const char*);
SOAP_FMAC3 struct wsrm__AckRequestedType * SOAP_FMAC4 soap_in_wsrm__AckRequestedType(struct soap*, const char*, struct wsrm__AckRequestedType *, const char*);
SOAP_FMAC1 struct wsrm__AckRequestedType * SOAP_FMAC2 soap_instantiate_wsrm__AckRequestedType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__AckRequestedType * soap_new_wsrm__AckRequestedType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__AckRequestedType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__AckRequestedType * soap_new_req_wsrm__AckRequestedType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__AckRequestedType *_p = ::soap_new_wsrm__AckRequestedType(soap);
	if (_p)
	{	::soap_default_wsrm__AckRequestedType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}

inline struct wsrm__AckRequestedType * soap_new_set_wsrm__AckRequestedType(
	struct soap *soap,
	char *Identifier)
{
	struct wsrm__AckRequestedType *_p = ::soap_new_wsrm__AckRequestedType(soap);
	if (_p)
	{	::soap_default_wsrm__AckRequestedType(soap, _p);
		_p->Identifier = Identifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__AckRequestedType(struct soap*, const struct wsrm__AckRequestedType *, const char*, const char*);

inline int soap_write_wsrm__AckRequestedType(struct soap *soap, struct wsrm__AckRequestedType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__AckRequestedType(soap, p), 0) || ::soap_put_wsrm__AckRequestedType(soap, p, "wsrm:AckRequestedType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__AckRequestedType(struct soap *soap, const char *URL, struct wsrm__AckRequestedType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__AckRequestedType(soap, p), 0) || ::soap_put_wsrm__AckRequestedType(soap, p, "wsrm:AckRequestedType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__AckRequestedType(struct soap *soap, const char *URL, struct wsrm__AckRequestedType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__AckRequestedType(soap, p), 0) || ::soap_put_wsrm__AckRequestedType(soap, p, "wsrm:AckRequestedType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__AckRequestedType(struct soap *soap, const char *URL, struct wsrm__AckRequestedType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__AckRequestedType(soap, p), 0) || ::soap_put_wsrm__AckRequestedType(soap, p, "wsrm:AckRequestedType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__AckRequestedType * SOAP_FMAC4 soap_get_wsrm__AckRequestedType(struct soap*, struct wsrm__AckRequestedType *, const char*, const char*);

inline int soap_read_wsrm__AckRequestedType(struct soap *soap, struct wsrm__AckRequestedType *p)
{
	if (p)
	{	::soap_default_wsrm__AckRequestedType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__AckRequestedType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__AckRequestedType(struct soap *soap, const char *URL, struct wsrm__AckRequestedType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__AckRequestedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__AckRequestedType(struct soap *soap, struct wsrm__AckRequestedType *p)
{
	if (::soap_read_wsrm__AckRequestedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsrm__SequenceType_DEFINED
#define SOAP_TYPE_wsrm__SequenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsrm__SequenceType(struct soap*, struct wsrm__SequenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsrm__SequenceType(struct soap*, const struct wsrm__SequenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrm__SequenceType(struct soap*, const char*, int, const struct wsrm__SequenceType *, const char*);
SOAP_FMAC3 struct wsrm__SequenceType * SOAP_FMAC4 soap_in_wsrm__SequenceType(struct soap*, const char*, struct wsrm__SequenceType *, const char*);
SOAP_FMAC1 struct wsrm__SequenceType * SOAP_FMAC2 soap_instantiate_wsrm__SequenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsrm__SequenceType * soap_new_wsrm__SequenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsrm__SequenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsrm__SequenceType * soap_new_req_wsrm__SequenceType(
	struct soap *soap,
	char *Identifier,
	ULONG64 MessageNumber)
{
	struct wsrm__SequenceType *_p = ::soap_new_wsrm__SequenceType(soap);
	if (_p)
	{	::soap_default_wsrm__SequenceType(soap, _p);
		_p->Identifier = Identifier;
		_p->MessageNumber = MessageNumber;
	}
	return _p;
}

inline struct wsrm__SequenceType * soap_new_set_wsrm__SequenceType(
	struct soap *soap,
	char *Identifier,
	ULONG64 MessageNumber,
	struct _wsrm__UsesSequenceSSL *LastMessage)
{
	struct wsrm__SequenceType *_p = ::soap_new_wsrm__SequenceType(soap);
	if (_p)
	{	::soap_default_wsrm__SequenceType(soap, _p);
		_p->Identifier = Identifier;
		_p->MessageNumber = MessageNumber;
		_p->LastMessage = LastMessage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsrm__SequenceType(struct soap*, const struct wsrm__SequenceType *, const char*, const char*);

inline int soap_write_wsrm__SequenceType(struct soap *soap, struct wsrm__SequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsrm__SequenceType(soap, p), 0) || ::soap_put_wsrm__SequenceType(soap, p, "wsrm:SequenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsrm__SequenceType(struct soap *soap, const char *URL, struct wsrm__SequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__SequenceType(soap, p), 0) || ::soap_put_wsrm__SequenceType(soap, p, "wsrm:SequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsrm__SequenceType(struct soap *soap, const char *URL, struct wsrm__SequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__SequenceType(soap, p), 0) || ::soap_put_wsrm__SequenceType(soap, p, "wsrm:SequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsrm__SequenceType(struct soap *soap, const char *URL, struct wsrm__SequenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsrm__SequenceType(soap, p), 0) || ::soap_put_wsrm__SequenceType(soap, p, "wsrm:SequenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsrm__SequenceType * SOAP_FMAC4 soap_get_wsrm__SequenceType(struct soap*, struct wsrm__SequenceType *, const char*, const char*);

inline int soap_read_wsrm__SequenceType(struct soap *soap, struct wsrm__SequenceType *p)
{
	if (p)
	{	::soap_default_wsrm__SequenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsrm__SequenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsrm__SequenceType(struct soap *soap, const char *URL, struct wsrm__SequenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsrm__SequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsrm__SequenceType(struct soap *soap, struct wsrm__SequenceType *p)
{
	if (::soap_read_wsrm__SequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wst__RequestSecurityTokenCollection_DEFINED
#define SOAP_TYPE___wst__RequestSecurityTokenCollection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wst__RequestSecurityTokenCollection(struct soap*, struct __wst__RequestSecurityTokenCollection *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wst__RequestSecurityTokenCollection(struct soap*, const struct __wst__RequestSecurityTokenCollection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wst__RequestSecurityTokenCollection(struct soap*, const char*, int, const struct __wst__RequestSecurityTokenCollection *, const char*);
SOAP_FMAC3 struct __wst__RequestSecurityTokenCollection * SOAP_FMAC4 soap_in___wst__RequestSecurityTokenCollection(struct soap*, const char*, struct __wst__RequestSecurityTokenCollection *, const char*);
SOAP_FMAC1 struct __wst__RequestSecurityTokenCollection * SOAP_FMAC2 soap_instantiate___wst__RequestSecurityTokenCollection(struct soap*, int, const char*, const char*, size_t*);

inline struct __wst__RequestSecurityTokenCollection * soap_new___wst__RequestSecurityTokenCollection(struct soap *soap, int n = -1)
{
	return soap_instantiate___wst__RequestSecurityTokenCollection(soap, n, NULL, NULL, NULL);
}

inline struct __wst__RequestSecurityTokenCollection * soap_new_req___wst__RequestSecurityTokenCollection(
	struct soap *soap)
{
	struct __wst__RequestSecurityTokenCollection *_p = ::soap_new___wst__RequestSecurityTokenCollection(soap);
	if (_p)
	{	::soap_default___wst__RequestSecurityTokenCollection(soap, _p);
	}
	return _p;
}

inline struct __wst__RequestSecurityTokenCollection * soap_new_set___wst__RequestSecurityTokenCollection(
	struct soap *soap,
	struct wst__RequestSecurityTokenCollectionType *wst__RequestSecurityTokenCollection)
{
	struct __wst__RequestSecurityTokenCollection *_p = ::soap_new___wst__RequestSecurityTokenCollection(soap);
	if (_p)
	{	::soap_default___wst__RequestSecurityTokenCollection(soap, _p);
		_p->wst__RequestSecurityTokenCollection = wst__RequestSecurityTokenCollection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wst__RequestSecurityTokenCollection(struct soap*, const struct __wst__RequestSecurityTokenCollection *, const char*, const char*);

inline int soap_write___wst__RequestSecurityTokenCollection(struct soap *soap, struct __wst__RequestSecurityTokenCollection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wst__RequestSecurityTokenCollection(soap, p), 0) || ::soap_put___wst__RequestSecurityTokenCollection(soap, p, "-wst:RequestSecurityTokenCollection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wst__RequestSecurityTokenCollection(struct soap *soap, const char *URL, struct __wst__RequestSecurityTokenCollection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wst__RequestSecurityTokenCollection(soap, p), 0) || ::soap_put___wst__RequestSecurityTokenCollection(soap, p, "-wst:RequestSecurityTokenCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wst__RequestSecurityTokenCollection(struct soap *soap, const char *URL, struct __wst__RequestSecurityTokenCollection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wst__RequestSecurityTokenCollection(soap, p), 0) || ::soap_put___wst__RequestSecurityTokenCollection(soap, p, "-wst:RequestSecurityTokenCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wst__RequestSecurityTokenCollection(struct soap *soap, const char *URL, struct __wst__RequestSecurityTokenCollection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wst__RequestSecurityTokenCollection(soap, p), 0) || ::soap_put___wst__RequestSecurityTokenCollection(soap, p, "-wst:RequestSecurityTokenCollection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wst__RequestSecurityTokenCollection * SOAP_FMAC4 soap_get___wst__RequestSecurityTokenCollection(struct soap*, struct __wst__RequestSecurityTokenCollection *, const char*, const char*);

inline int soap_read___wst__RequestSecurityTokenCollection(struct soap *soap, struct __wst__RequestSecurityTokenCollection *p)
{
	if (p)
	{	::soap_default___wst__RequestSecurityTokenCollection(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wst__RequestSecurityTokenCollection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wst__RequestSecurityTokenCollection(struct soap *soap, const char *URL, struct __wst__RequestSecurityTokenCollection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wst__RequestSecurityTokenCollection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wst__RequestSecurityTokenCollection(struct soap *soap, struct __wst__RequestSecurityTokenCollection *p)
{
	if (::soap_read___wst__RequestSecurityTokenCollection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wst__RequestSecurityTokenResponse_DEFINED
#define SOAP_TYPE___wst__RequestSecurityTokenResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wst__RequestSecurityTokenResponse(struct soap*, struct __wst__RequestSecurityTokenResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wst__RequestSecurityTokenResponse(struct soap*, const struct __wst__RequestSecurityTokenResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wst__RequestSecurityTokenResponse(struct soap*, const char*, int, const struct __wst__RequestSecurityTokenResponse *, const char*);
SOAP_FMAC3 struct __wst__RequestSecurityTokenResponse * SOAP_FMAC4 soap_in___wst__RequestSecurityTokenResponse(struct soap*, const char*, struct __wst__RequestSecurityTokenResponse *, const char*);
SOAP_FMAC1 struct __wst__RequestSecurityTokenResponse * SOAP_FMAC2 soap_instantiate___wst__RequestSecurityTokenResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __wst__RequestSecurityTokenResponse * soap_new___wst__RequestSecurityTokenResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___wst__RequestSecurityTokenResponse(soap, n, NULL, NULL, NULL);
}

inline struct __wst__RequestSecurityTokenResponse * soap_new_req___wst__RequestSecurityTokenResponse(
	struct soap *soap)
{
	struct __wst__RequestSecurityTokenResponse *_p = ::soap_new___wst__RequestSecurityTokenResponse(soap);
	if (_p)
	{	::soap_default___wst__RequestSecurityTokenResponse(soap, _p);
	}
	return _p;
}

inline struct __wst__RequestSecurityTokenResponse * soap_new_set___wst__RequestSecurityTokenResponse(
	struct soap *soap,
	struct wst__RequestSecurityTokenResponseType *wst__RequestSecurityTokenResponse)
{
	struct __wst__RequestSecurityTokenResponse *_p = ::soap_new___wst__RequestSecurityTokenResponse(soap);
	if (_p)
	{	::soap_default___wst__RequestSecurityTokenResponse(soap, _p);
		_p->wst__RequestSecurityTokenResponse = wst__RequestSecurityTokenResponse;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wst__RequestSecurityTokenResponse(struct soap*, const struct __wst__RequestSecurityTokenResponse *, const char*, const char*);

inline int soap_write___wst__RequestSecurityTokenResponse(struct soap *soap, struct __wst__RequestSecurityTokenResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wst__RequestSecurityTokenResponse(soap, p), 0) || ::soap_put___wst__RequestSecurityTokenResponse(soap, p, "-wst:RequestSecurityTokenResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wst__RequestSecurityTokenResponse(struct soap *soap, const char *URL, struct __wst__RequestSecurityTokenResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wst__RequestSecurityTokenResponse(soap, p), 0) || ::soap_put___wst__RequestSecurityTokenResponse(soap, p, "-wst:RequestSecurityTokenResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wst__RequestSecurityTokenResponse(struct soap *soap, const char *URL, struct __wst__RequestSecurityTokenResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wst__RequestSecurityTokenResponse(soap, p), 0) || ::soap_put___wst__RequestSecurityTokenResponse(soap, p, "-wst:RequestSecurityTokenResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wst__RequestSecurityTokenResponse(struct soap *soap, const char *URL, struct __wst__RequestSecurityTokenResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wst__RequestSecurityTokenResponse(soap, p), 0) || ::soap_put___wst__RequestSecurityTokenResponse(soap, p, "-wst:RequestSecurityTokenResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wst__RequestSecurityTokenResponse * SOAP_FMAC4 soap_get___wst__RequestSecurityTokenResponse(struct soap*, struct __wst__RequestSecurityTokenResponse *, const char*, const char*);

inline int soap_read___wst__RequestSecurityTokenResponse(struct soap *soap, struct __wst__RequestSecurityTokenResponse *p)
{
	if (p)
	{	::soap_default___wst__RequestSecurityTokenResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wst__RequestSecurityTokenResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wst__RequestSecurityTokenResponse(struct soap *soap, const char *URL, struct __wst__RequestSecurityTokenResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wst__RequestSecurityTokenResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wst__RequestSecurityTokenResponse(struct soap *soap, struct __wst__RequestSecurityTokenResponse *p)
{
	if (::soap_read___wst__RequestSecurityTokenResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wst__RequestSecurityToken_DEFINED
#define SOAP_TYPE___wst__RequestSecurityToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wst__RequestSecurityToken(struct soap*, struct __wst__RequestSecurityToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wst__RequestSecurityToken(struct soap*, const struct __wst__RequestSecurityToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wst__RequestSecurityToken(struct soap*, const char*, int, const struct __wst__RequestSecurityToken *, const char*);
SOAP_FMAC3 struct __wst__RequestSecurityToken * SOAP_FMAC4 soap_in___wst__RequestSecurityToken(struct soap*, const char*, struct __wst__RequestSecurityToken *, const char*);
SOAP_FMAC1 struct __wst__RequestSecurityToken * SOAP_FMAC2 soap_instantiate___wst__RequestSecurityToken(struct soap*, int, const char*, const char*, size_t*);

inline struct __wst__RequestSecurityToken * soap_new___wst__RequestSecurityToken(struct soap *soap, int n = -1)
{
	return soap_instantiate___wst__RequestSecurityToken(soap, n, NULL, NULL, NULL);
}

inline struct __wst__RequestSecurityToken * soap_new_req___wst__RequestSecurityToken(
	struct soap *soap)
{
	struct __wst__RequestSecurityToken *_p = ::soap_new___wst__RequestSecurityToken(soap);
	if (_p)
	{	::soap_default___wst__RequestSecurityToken(soap, _p);
	}
	return _p;
}

inline struct __wst__RequestSecurityToken * soap_new_set___wst__RequestSecurityToken(
	struct soap *soap,
	struct wst__RequestSecurityTokenType *wst__RequestSecurityToken)
{
	struct __wst__RequestSecurityToken *_p = ::soap_new___wst__RequestSecurityToken(soap);
	if (_p)
	{	::soap_default___wst__RequestSecurityToken(soap, _p);
		_p->wst__RequestSecurityToken = wst__RequestSecurityToken;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wst__RequestSecurityToken(struct soap*, const struct __wst__RequestSecurityToken *, const char*, const char*);

inline int soap_write___wst__RequestSecurityToken(struct soap *soap, struct __wst__RequestSecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wst__RequestSecurityToken(soap, p), 0) || ::soap_put___wst__RequestSecurityToken(soap, p, "-wst:RequestSecurityToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wst__RequestSecurityToken(struct soap *soap, const char *URL, struct __wst__RequestSecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wst__RequestSecurityToken(soap, p), 0) || ::soap_put___wst__RequestSecurityToken(soap, p, "-wst:RequestSecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wst__RequestSecurityToken(struct soap *soap, const char *URL, struct __wst__RequestSecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wst__RequestSecurityToken(soap, p), 0) || ::soap_put___wst__RequestSecurityToken(soap, p, "-wst:RequestSecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wst__RequestSecurityToken(struct soap *soap, const char *URL, struct __wst__RequestSecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wst__RequestSecurityToken(soap, p), 0) || ::soap_put___wst__RequestSecurityToken(soap, p, "-wst:RequestSecurityToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wst__RequestSecurityToken * SOAP_FMAC4 soap_get___wst__RequestSecurityToken(struct soap*, struct __wst__RequestSecurityToken *, const char*, const char*);

inline int soap_read___wst__RequestSecurityToken(struct soap *soap, struct __wst__RequestSecurityToken *p)
{
	if (p)
	{	::soap_default___wst__RequestSecurityToken(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wst__RequestSecurityToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wst__RequestSecurityToken(struct soap *soap, const char *URL, struct __wst__RequestSecurityToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wst__RequestSecurityToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wst__RequestSecurityToken(struct soap *soap, struct __wst__RequestSecurityToken *p)
{
	if (::soap_read___wst__RequestSecurityToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wst__Participants is a typedef synonym of wst__ParticipantsType */

#ifndef SOAP_TYPE__wst__Participants_DEFINED
#define SOAP_TYPE__wst__Participants_DEFINED

#define soap_default__wst__Participants soap_default_wst__ParticipantsType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__ParticipantsType(struct soap*, const struct wst__ParticipantsType *);

#define soap_serialize__wst__Participants soap_serialize_wst__ParticipantsType


#define soap__wst__Participants2s soap_wst__ParticipantsType2s


#define soap_out__wst__Participants soap_out_wst__ParticipantsType


#define soap_s2_wst__Participants soap_s2wst__ParticipantsType


#define soap_in__wst__Participants soap_in_wst__ParticipantsType


#define soap_instantiate__wst__Participants soap_instantiate_wst__ParticipantsType


#define soap_new__wst__Participants soap_new_wst__ParticipantsType


#define soap_new_req__wst__Participants soap_new_req_wst__ParticipantsType


#define soap_new_set__wst__Participants soap_new_set_wst__ParticipantsType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Participants(struct soap*, const struct wst__ParticipantsType *, const char*, const char*);

inline int soap_write__wst__Participants(struct soap *soap, struct wst__ParticipantsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__Participants(soap, p), 0) || ::soap_put__wst__Participants(soap, p, "wst:Participants", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__Participants(struct soap *soap, const char *URL, struct wst__ParticipantsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Participants(soap, p), 0) || ::soap_put__wst__Participants(soap, p, "wst:Participants", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Participants(struct soap *soap, const char *URL, struct wst__ParticipantsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Participants(soap, p), 0) || ::soap_put__wst__Participants(soap, p, "wst:Participants", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Participants(struct soap *soap, const char *URL, struct wst__ParticipantsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Participants(soap, p), 0) || ::soap_put__wst__Participants(soap, p, "wst:Participants", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Participants soap_get_wst__ParticipantsType


#define soap_read__wst__Participants soap_read_wst__ParticipantsType


#define soap_GET__wst__Participants soap_GET_wst__ParticipantsType


#define soap_POST_recv__wst__Participants soap_POST_recv_wst__ParticipantsType

#endif
/* _wst__DelegateTo is a typedef synonym of wst__DelegateToType */

#ifndef SOAP_TYPE__wst__DelegateTo_DEFINED
#define SOAP_TYPE__wst__DelegateTo_DEFINED

#define soap_default__wst__DelegateTo soap_default_wst__DelegateToType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__DelegateToType(struct soap*, const struct wst__DelegateToType *);

#define soap_serialize__wst__DelegateTo soap_serialize_wst__DelegateToType


#define soap__wst__DelegateTo2s soap_wst__DelegateToType2s


#define soap_out__wst__DelegateTo soap_out_wst__DelegateToType


#define soap_s2_wst__DelegateTo soap_s2wst__DelegateToType


#define soap_in__wst__DelegateTo soap_in_wst__DelegateToType


#define soap_instantiate__wst__DelegateTo soap_instantiate_wst__DelegateToType


#define soap_new__wst__DelegateTo soap_new_wst__DelegateToType


#define soap_new_req__wst__DelegateTo soap_new_req_wst__DelegateToType


#define soap_new_set__wst__DelegateTo soap_new_set_wst__DelegateToType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__DelegateTo(struct soap*, const struct wst__DelegateToType *, const char*, const char*);

inline int soap_write__wst__DelegateTo(struct soap *soap, struct wst__DelegateToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__DelegateTo(soap, p), 0) || ::soap_put__wst__DelegateTo(soap, p, "wst:DelegateTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__DelegateTo(struct soap *soap, const char *URL, struct wst__DelegateToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__DelegateTo(soap, p), 0) || ::soap_put__wst__DelegateTo(soap, p, "wst:DelegateTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__DelegateTo(struct soap *soap, const char *URL, struct wst__DelegateToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__DelegateTo(soap, p), 0) || ::soap_put__wst__DelegateTo(soap, p, "wst:DelegateTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__DelegateTo(struct soap *soap, const char *URL, struct wst__DelegateToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__DelegateTo(soap, p), 0) || ::soap_put__wst__DelegateTo(soap, p, "wst:DelegateTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__DelegateTo soap_get_wst__DelegateToType


#define soap_read__wst__DelegateTo soap_read_wst__DelegateToType


#define soap_GET__wst__DelegateTo soap_GET_wst__DelegateToType


#define soap_POST_recv__wst__DelegateTo soap_POST_recv_wst__DelegateToType

#endif
/* _wst__UseKey is a typedef synonym of wst__UseKeyType */

#ifndef SOAP_TYPE__wst__UseKey_DEFINED
#define SOAP_TYPE__wst__UseKey_DEFINED

#define soap_default__wst__UseKey soap_default_wst__UseKeyType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__UseKeyType(struct soap*, const struct wst__UseKeyType *);

#define soap_serialize__wst__UseKey soap_serialize_wst__UseKeyType


#define soap__wst__UseKey2s soap_wst__UseKeyType2s


#define soap_out__wst__UseKey soap_out_wst__UseKeyType


#define soap_s2_wst__UseKey soap_s2wst__UseKeyType


#define soap_in__wst__UseKey soap_in_wst__UseKeyType


#define soap_instantiate__wst__UseKey soap_instantiate_wst__UseKeyType


#define soap_new__wst__UseKey soap_new_wst__UseKeyType


#define soap_new_req__wst__UseKey soap_new_req_wst__UseKeyType


#define soap_new_set__wst__UseKey soap_new_set_wst__UseKeyType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__UseKey(struct soap*, const struct wst__UseKeyType *, const char*, const char*);

inline int soap_write__wst__UseKey(struct soap *soap, struct wst__UseKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__UseKey(soap, p), 0) || ::soap_put__wst__UseKey(soap, p, "wst:UseKey", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__UseKey(struct soap *soap, const char *URL, struct wst__UseKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__UseKey(soap, p), 0) || ::soap_put__wst__UseKey(soap, p, "wst:UseKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__UseKey(struct soap *soap, const char *URL, struct wst__UseKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__UseKey(soap, p), 0) || ::soap_put__wst__UseKey(soap, p, "wst:UseKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__UseKey(struct soap *soap, const char *URL, struct wst__UseKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__UseKey(soap, p), 0) || ::soap_put__wst__UseKey(soap, p, "wst:UseKey", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__UseKey soap_get_wst__UseKeyType


#define soap_read__wst__UseKey soap_read_wst__UseKeyType


#define soap_GET__wst__UseKey soap_GET_wst__UseKeyType


#define soap_POST_recv__wst__UseKey soap_POST_recv_wst__UseKeyType

#endif
/* _wst__ProofEncryption is a typedef synonym of wst__ProofEncryptionType */

#ifndef SOAP_TYPE__wst__ProofEncryption_DEFINED
#define SOAP_TYPE__wst__ProofEncryption_DEFINED

#define soap_default__wst__ProofEncryption soap_default_wst__ProofEncryptionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__ProofEncryptionType(struct soap*, const struct wst__ProofEncryptionType *);

#define soap_serialize__wst__ProofEncryption soap_serialize_wst__ProofEncryptionType


#define soap__wst__ProofEncryption2s soap_wst__ProofEncryptionType2s


#define soap_out__wst__ProofEncryption soap_out_wst__ProofEncryptionType


#define soap_s2_wst__ProofEncryption soap_s2wst__ProofEncryptionType


#define soap_in__wst__ProofEncryption soap_in_wst__ProofEncryptionType


#define soap_instantiate__wst__ProofEncryption soap_instantiate_wst__ProofEncryptionType


#define soap_new__wst__ProofEncryption soap_new_wst__ProofEncryptionType


#define soap_new_req__wst__ProofEncryption soap_new_req_wst__ProofEncryptionType


#define soap_new_set__wst__ProofEncryption soap_new_set_wst__ProofEncryptionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__ProofEncryption(struct soap*, const struct wst__ProofEncryptionType *, const char*, const char*);

inline int soap_write__wst__ProofEncryption(struct soap *soap, struct wst__ProofEncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__ProofEncryption(soap, p), 0) || ::soap_put__wst__ProofEncryption(soap, p, "wst:ProofEncryption", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__ProofEncryption(struct soap *soap, const char *URL, struct wst__ProofEncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__ProofEncryption(soap, p), 0) || ::soap_put__wst__ProofEncryption(soap, p, "wst:ProofEncryption", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__ProofEncryption(struct soap *soap, const char *URL, struct wst__ProofEncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__ProofEncryption(soap, p), 0) || ::soap_put__wst__ProofEncryption(soap, p, "wst:ProofEncryption", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__ProofEncryption(struct soap *soap, const char *URL, struct wst__ProofEncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__ProofEncryption(soap, p), 0) || ::soap_put__wst__ProofEncryption(soap, p, "wst:ProofEncryption", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__ProofEncryption soap_get_wst__ProofEncryptionType


#define soap_read__wst__ProofEncryption soap_read_wst__ProofEncryptionType


#define soap_GET__wst__ProofEncryption soap_GET_wst__ProofEncryptionType


#define soap_POST_recv__wst__ProofEncryption soap_POST_recv_wst__ProofEncryptionType

#endif
/* _wst__Encryption is a typedef synonym of wst__EncryptionType */

#ifndef SOAP_TYPE__wst__Encryption_DEFINED
#define SOAP_TYPE__wst__Encryption_DEFINED

#define soap_default__wst__Encryption soap_default_wst__EncryptionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__EncryptionType(struct soap*, const struct wst__EncryptionType *);

#define soap_serialize__wst__Encryption soap_serialize_wst__EncryptionType


#define soap__wst__Encryption2s soap_wst__EncryptionType2s


#define soap_out__wst__Encryption soap_out_wst__EncryptionType


#define soap_s2_wst__Encryption soap_s2wst__EncryptionType


#define soap_in__wst__Encryption soap_in_wst__EncryptionType


#define soap_instantiate__wst__Encryption soap_instantiate_wst__EncryptionType


#define soap_new__wst__Encryption soap_new_wst__EncryptionType


#define soap_new_req__wst__Encryption soap_new_req_wst__EncryptionType


#define soap_new_set__wst__Encryption soap_new_set_wst__EncryptionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Encryption(struct soap*, const struct wst__EncryptionType *, const char*, const char*);

inline int soap_write__wst__Encryption(struct soap *soap, struct wst__EncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__Encryption(soap, p), 0) || ::soap_put__wst__Encryption(soap, p, "wst:Encryption", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__Encryption(struct soap *soap, const char *URL, struct wst__EncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Encryption(soap, p), 0) || ::soap_put__wst__Encryption(soap, p, "wst:Encryption", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Encryption(struct soap *soap, const char *URL, struct wst__EncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Encryption(soap, p), 0) || ::soap_put__wst__Encryption(soap, p, "wst:Encryption", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Encryption(struct soap *soap, const char *URL, struct wst__EncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Encryption(soap, p), 0) || ::soap_put__wst__Encryption(soap, p, "wst:Encryption", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Encryption soap_get_wst__EncryptionType


#define soap_read__wst__Encryption soap_read_wst__EncryptionType


#define soap_GET__wst__Encryption soap_GET_wst__EncryptionType


#define soap_POST_recv__wst__Encryption soap_POST_recv_wst__EncryptionType

#endif
/* _wst__Issuer is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wst__Issuer_DEFINED
#define SOAP_TYPE__wst__Issuer_DEFINED

#define soap_default__wst__Issuer soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wst__Issuer soap_serialize_wsa5__EndpointReferenceType


#define soap__wst__Issuer2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wst__Issuer soap_out_wsa5__EndpointReferenceType


#define soap_s2_wst__Issuer soap_s2wsa5__EndpointReferenceType


#define soap_in__wst__Issuer soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wst__Issuer soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wst__Issuer soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wst__Issuer soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wst__Issuer soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Issuer(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wst__Issuer(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__Issuer(soap, p), 0) || ::soap_put__wst__Issuer(soap, p, "wst:Issuer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__Issuer(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Issuer(soap, p), 0) || ::soap_put__wst__Issuer(soap, p, "wst:Issuer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Issuer(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Issuer(soap, p), 0) || ::soap_put__wst__Issuer(soap, p, "wst:Issuer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Issuer(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Issuer(soap, p), 0) || ::soap_put__wst__Issuer(soap, p, "wst:Issuer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Issuer soap_get_wsa5__EndpointReferenceType


#define soap_read__wst__Issuer soap_read_wsa5__EndpointReferenceType


#define soap_GET__wst__Issuer soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wst__Issuer soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wst__OnBehalfOf is a typedef synonym of wst__OnBehalfOfType */

#ifndef SOAP_TYPE__wst__OnBehalfOf_DEFINED
#define SOAP_TYPE__wst__OnBehalfOf_DEFINED

#define soap_default__wst__OnBehalfOf soap_default_wst__OnBehalfOfType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__OnBehalfOfType(struct soap*, const struct wst__OnBehalfOfType *);

#define soap_serialize__wst__OnBehalfOf soap_serialize_wst__OnBehalfOfType


#define soap__wst__OnBehalfOf2s soap_wst__OnBehalfOfType2s


#define soap_out__wst__OnBehalfOf soap_out_wst__OnBehalfOfType


#define soap_s2_wst__OnBehalfOf soap_s2wst__OnBehalfOfType


#define soap_in__wst__OnBehalfOf soap_in_wst__OnBehalfOfType


#define soap_instantiate__wst__OnBehalfOf soap_instantiate_wst__OnBehalfOfType


#define soap_new__wst__OnBehalfOf soap_new_wst__OnBehalfOfType


#define soap_new_req__wst__OnBehalfOf soap_new_req_wst__OnBehalfOfType


#define soap_new_set__wst__OnBehalfOf soap_new_set_wst__OnBehalfOfType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__OnBehalfOf(struct soap*, const struct wst__OnBehalfOfType *, const char*, const char*);

inline int soap_write__wst__OnBehalfOf(struct soap *soap, struct wst__OnBehalfOfType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__OnBehalfOf(soap, p), 0) || ::soap_put__wst__OnBehalfOf(soap, p, "wst:OnBehalfOf", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__OnBehalfOf(struct soap *soap, const char *URL, struct wst__OnBehalfOfType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__OnBehalfOf(soap, p), 0) || ::soap_put__wst__OnBehalfOf(soap, p, "wst:OnBehalfOf", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__OnBehalfOf(struct soap *soap, const char *URL, struct wst__OnBehalfOfType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__OnBehalfOf(soap, p), 0) || ::soap_put__wst__OnBehalfOf(soap, p, "wst:OnBehalfOf", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__OnBehalfOf(struct soap *soap, const char *URL, struct wst__OnBehalfOfType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__OnBehalfOf(soap, p), 0) || ::soap_put__wst__OnBehalfOf(soap, p, "wst:OnBehalfOf", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__OnBehalfOf soap_get_wst__OnBehalfOfType


#define soap_read__wst__OnBehalfOf soap_read_wst__OnBehalfOfType


#define soap_GET__wst__OnBehalfOf soap_GET_wst__OnBehalfOfType


#define soap_POST_recv__wst__OnBehalfOf soap_POST_recv_wst__OnBehalfOfType

#endif
/* _wst__Authenticator is a typedef synonym of wst__AuthenticatorType */

#ifndef SOAP_TYPE__wst__Authenticator_DEFINED
#define SOAP_TYPE__wst__Authenticator_DEFINED

#define soap_default__wst__Authenticator soap_default_wst__AuthenticatorType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__AuthenticatorType(struct soap*, const struct wst__AuthenticatorType *);

#define soap_serialize__wst__Authenticator soap_serialize_wst__AuthenticatorType


#define soap__wst__Authenticator2s soap_wst__AuthenticatorType2s


#define soap_out__wst__Authenticator soap_out_wst__AuthenticatorType


#define soap_s2_wst__Authenticator soap_s2wst__AuthenticatorType


#define soap_in__wst__Authenticator soap_in_wst__AuthenticatorType


#define soap_instantiate__wst__Authenticator soap_instantiate_wst__AuthenticatorType


#define soap_new__wst__Authenticator soap_new_wst__AuthenticatorType


#define soap_new_req__wst__Authenticator soap_new_req_wst__AuthenticatorType


#define soap_new_set__wst__Authenticator soap_new_set_wst__AuthenticatorType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Authenticator(struct soap*, const struct wst__AuthenticatorType *, const char*, const char*);

inline int soap_write__wst__Authenticator(struct soap *soap, struct wst__AuthenticatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__Authenticator(soap, p), 0) || ::soap_put__wst__Authenticator(soap, p, "wst:Authenticator", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__Authenticator(struct soap *soap, const char *URL, struct wst__AuthenticatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Authenticator(soap, p), 0) || ::soap_put__wst__Authenticator(soap, p, "wst:Authenticator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Authenticator(struct soap *soap, const char *URL, struct wst__AuthenticatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Authenticator(soap, p), 0) || ::soap_put__wst__Authenticator(soap, p, "wst:Authenticator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Authenticator(struct soap *soap, const char *URL, struct wst__AuthenticatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Authenticator(soap, p), 0) || ::soap_put__wst__Authenticator(soap, p, "wst:Authenticator", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Authenticator soap_get_wst__AuthenticatorType


#define soap_read__wst__Authenticator soap_read_wst__AuthenticatorType


#define soap_GET__wst__Authenticator soap_GET_wst__AuthenticatorType


#define soap_POST_recv__wst__Authenticator soap_POST_recv_wst__AuthenticatorType

#endif
/* _wst__KeyExchangeToken is a typedef synonym of wst__KeyExchangeTokenType */

#ifndef SOAP_TYPE__wst__KeyExchangeToken_DEFINED
#define SOAP_TYPE__wst__KeyExchangeToken_DEFINED

#define soap_default__wst__KeyExchangeToken soap_default_wst__KeyExchangeTokenType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__KeyExchangeTokenType(struct soap*, const struct wst__KeyExchangeTokenType *);

#define soap_serialize__wst__KeyExchangeToken soap_serialize_wst__KeyExchangeTokenType


#define soap__wst__KeyExchangeToken2s soap_wst__KeyExchangeTokenType2s


#define soap_out__wst__KeyExchangeToken soap_out_wst__KeyExchangeTokenType


#define soap_s2_wst__KeyExchangeToken soap_s2wst__KeyExchangeTokenType


#define soap_in__wst__KeyExchangeToken soap_in_wst__KeyExchangeTokenType


#define soap_instantiate__wst__KeyExchangeToken soap_instantiate_wst__KeyExchangeTokenType


#define soap_new__wst__KeyExchangeToken soap_new_wst__KeyExchangeTokenType


#define soap_new_req__wst__KeyExchangeToken soap_new_req_wst__KeyExchangeTokenType


#define soap_new_set__wst__KeyExchangeToken soap_new_set_wst__KeyExchangeTokenType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__KeyExchangeToken(struct soap*, const struct wst__KeyExchangeTokenType *, const char*, const char*);

inline int soap_write__wst__KeyExchangeToken(struct soap *soap, struct wst__KeyExchangeTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__KeyExchangeToken(soap, p), 0) || ::soap_put__wst__KeyExchangeToken(soap, p, "wst:KeyExchangeToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__KeyExchangeToken(struct soap *soap, const char *URL, struct wst__KeyExchangeTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__KeyExchangeToken(soap, p), 0) || ::soap_put__wst__KeyExchangeToken(soap, p, "wst:KeyExchangeToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__KeyExchangeToken(struct soap *soap, const char *URL, struct wst__KeyExchangeTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__KeyExchangeToken(soap, p), 0) || ::soap_put__wst__KeyExchangeToken(soap, p, "wst:KeyExchangeToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__KeyExchangeToken(struct soap *soap, const char *URL, struct wst__KeyExchangeTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__KeyExchangeToken(soap, p), 0) || ::soap_put__wst__KeyExchangeToken(soap, p, "wst:KeyExchangeToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__KeyExchangeToken soap_get_wst__KeyExchangeTokenType


#define soap_read__wst__KeyExchangeToken soap_read_wst__KeyExchangeTokenType


#define soap_GET__wst__KeyExchangeToken soap_GET_wst__KeyExchangeTokenType


#define soap_POST_recv__wst__KeyExchangeToken soap_POST_recv_wst__KeyExchangeTokenType

#endif
/* _wst__RequestKET is a typedef synonym of wst__RequestKETType */

#ifndef SOAP_TYPE__wst__RequestKET_DEFINED
#define SOAP_TYPE__wst__RequestKET_DEFINED

#define soap_default__wst__RequestKET soap_default_wst__RequestKETType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestKETType(struct soap*, const struct wst__RequestKETType *);

#define soap_serialize__wst__RequestKET soap_serialize_wst__RequestKETType


#define soap__wst__RequestKET2s soap_wst__RequestKETType2s


#define soap_out__wst__RequestKET soap_out_wst__RequestKETType


#define soap_s2_wst__RequestKET soap_s2wst__RequestKETType


#define soap_in__wst__RequestKET soap_in_wst__RequestKETType


#define soap_instantiate__wst__RequestKET soap_instantiate_wst__RequestKETType


#define soap_new__wst__RequestKET soap_new_wst__RequestKETType


#define soap_new_req__wst__RequestKET soap_new_req_wst__RequestKETType


#define soap_new_set__wst__RequestKET soap_new_set_wst__RequestKETType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestKET(struct soap*, const struct wst__RequestKETType *, const char*, const char*);

inline int soap_write__wst__RequestKET(struct soap *soap, struct wst__RequestKETType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestKET(soap, p), 0) || ::soap_put__wst__RequestKET(soap, p, "wst:RequestKET", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestKET(struct soap *soap, const char *URL, struct wst__RequestKETType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestKET(soap, p), 0) || ::soap_put__wst__RequestKET(soap, p, "wst:RequestKET", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestKET(struct soap *soap, const char *URL, struct wst__RequestKETType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestKET(soap, p), 0) || ::soap_put__wst__RequestKET(soap, p, "wst:RequestKET", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestKET(struct soap *soap, const char *URL, struct wst__RequestKETType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestKET(soap, p), 0) || ::soap_put__wst__RequestKET(soap, p, "wst:RequestKET", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestKET soap_get_wst__RequestKETType


#define soap_read__wst__RequestKET soap_read_wst__RequestKETType


#define soap_GET__wst__RequestKET soap_GET_wst__RequestKETType


#define soap_POST_recv__wst__RequestKET soap_POST_recv_wst__RequestKETType

#endif
/* _wst__BinaryExchange is a typedef synonym of wst__BinaryExchangeType */

#ifndef SOAP_TYPE__wst__BinaryExchange_DEFINED
#define SOAP_TYPE__wst__BinaryExchange_DEFINED

#define soap_default__wst__BinaryExchange soap_default_wst__BinaryExchangeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__BinaryExchangeType(struct soap*, const struct wst__BinaryExchangeType *);

#define soap_serialize__wst__BinaryExchange soap_serialize_wst__BinaryExchangeType


#define soap__wst__BinaryExchange2s soap_wst__BinaryExchangeType2s


#define soap_out__wst__BinaryExchange soap_out_wst__BinaryExchangeType


#define soap_s2_wst__BinaryExchange soap_s2wst__BinaryExchangeType


#define soap_in__wst__BinaryExchange soap_in_wst__BinaryExchangeType


#define soap_instantiate__wst__BinaryExchange soap_instantiate_wst__BinaryExchangeType


#define soap_new__wst__BinaryExchange soap_new_wst__BinaryExchangeType


#define soap_new_req__wst__BinaryExchange soap_new_req_wst__BinaryExchangeType


#define soap_new_set__wst__BinaryExchange soap_new_set_wst__BinaryExchangeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__BinaryExchange(struct soap*, const struct wst__BinaryExchangeType *, const char*, const char*);

inline int soap_write__wst__BinaryExchange(struct soap *soap, struct wst__BinaryExchangeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__BinaryExchange(soap, p), 0) || ::soap_put__wst__BinaryExchange(soap, p, "wst:BinaryExchange", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__BinaryExchange(struct soap *soap, const char *URL, struct wst__BinaryExchangeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__BinaryExchange(soap, p), 0) || ::soap_put__wst__BinaryExchange(soap, p, "wst:BinaryExchange", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__BinaryExchange(struct soap *soap, const char *URL, struct wst__BinaryExchangeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__BinaryExchange(soap, p), 0) || ::soap_put__wst__BinaryExchange(soap, p, "wst:BinaryExchange", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__BinaryExchange(struct soap *soap, const char *URL, struct wst__BinaryExchangeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__BinaryExchange(soap, p), 0) || ::soap_put__wst__BinaryExchange(soap, p, "wst:BinaryExchange", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__BinaryExchange soap_get_wst__BinaryExchangeType


#define soap_read__wst__BinaryExchange soap_read_wst__BinaryExchangeType


#define soap_GET__wst__BinaryExchange soap_GET_wst__BinaryExchangeType


#define soap_POST_recv__wst__BinaryExchange soap_POST_recv_wst__BinaryExchangeType

#endif
/* _wst__SignChallengeResponse is a typedef synonym of wst__SignChallengeType */

#ifndef SOAP_TYPE__wst__SignChallengeResponse_DEFINED
#define SOAP_TYPE__wst__SignChallengeResponse_DEFINED

#define soap_default__wst__SignChallengeResponse soap_default_wst__SignChallengeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__SignChallengeType(struct soap*, const struct wst__SignChallengeType *);

#define soap_serialize__wst__SignChallengeResponse soap_serialize_wst__SignChallengeType


#define soap__wst__SignChallengeResponse2s soap_wst__SignChallengeType2s


#define soap_out__wst__SignChallengeResponse soap_out_wst__SignChallengeType


#define soap_s2_wst__SignChallengeResponse soap_s2wst__SignChallengeType


#define soap_in__wst__SignChallengeResponse soap_in_wst__SignChallengeType


#define soap_instantiate__wst__SignChallengeResponse soap_instantiate_wst__SignChallengeType


#define soap_new__wst__SignChallengeResponse soap_new_wst__SignChallengeType


#define soap_new_req__wst__SignChallengeResponse soap_new_req_wst__SignChallengeType


#define soap_new_set__wst__SignChallengeResponse soap_new_set_wst__SignChallengeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__SignChallengeResponse(struct soap*, const struct wst__SignChallengeType *, const char*, const char*);

inline int soap_write__wst__SignChallengeResponse(struct soap *soap, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__SignChallengeResponse(soap, p), 0) || ::soap_put__wst__SignChallengeResponse(soap, p, "wst:SignChallengeResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__SignChallengeResponse(struct soap *soap, const char *URL, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__SignChallengeResponse(soap, p), 0) || ::soap_put__wst__SignChallengeResponse(soap, p, "wst:SignChallengeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__SignChallengeResponse(struct soap *soap, const char *URL, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__SignChallengeResponse(soap, p), 0) || ::soap_put__wst__SignChallengeResponse(soap, p, "wst:SignChallengeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__SignChallengeResponse(struct soap *soap, const char *URL, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__SignChallengeResponse(soap, p), 0) || ::soap_put__wst__SignChallengeResponse(soap, p, "wst:SignChallengeResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__SignChallengeResponse soap_get_wst__SignChallengeType


#define soap_read__wst__SignChallengeResponse soap_read_wst__SignChallengeType


#define soap_GET__wst__SignChallengeResponse soap_GET_wst__SignChallengeType


#define soap_POST_recv__wst__SignChallengeResponse soap_POST_recv_wst__SignChallengeType

#endif
/* _wst__SignChallenge is a typedef synonym of wst__SignChallengeType */

#ifndef SOAP_TYPE__wst__SignChallenge_DEFINED
#define SOAP_TYPE__wst__SignChallenge_DEFINED

#define soap_default__wst__SignChallenge soap_default_wst__SignChallengeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__SignChallengeType(struct soap*, const struct wst__SignChallengeType *);

#define soap_serialize__wst__SignChallenge soap_serialize_wst__SignChallengeType


#define soap__wst__SignChallenge2s soap_wst__SignChallengeType2s


#define soap_out__wst__SignChallenge soap_out_wst__SignChallengeType


#define soap_s2_wst__SignChallenge soap_s2wst__SignChallengeType


#define soap_in__wst__SignChallenge soap_in_wst__SignChallengeType


#define soap_instantiate__wst__SignChallenge soap_instantiate_wst__SignChallengeType


#define soap_new__wst__SignChallenge soap_new_wst__SignChallengeType


#define soap_new_req__wst__SignChallenge soap_new_req_wst__SignChallengeType


#define soap_new_set__wst__SignChallenge soap_new_set_wst__SignChallengeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__SignChallenge(struct soap*, const struct wst__SignChallengeType *, const char*, const char*);

inline int soap_write__wst__SignChallenge(struct soap *soap, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__SignChallenge(soap, p), 0) || ::soap_put__wst__SignChallenge(soap, p, "wst:SignChallenge", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__SignChallenge(struct soap *soap, const char *URL, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__SignChallenge(soap, p), 0) || ::soap_put__wst__SignChallenge(soap, p, "wst:SignChallenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__SignChallenge(struct soap *soap, const char *URL, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__SignChallenge(soap, p), 0) || ::soap_put__wst__SignChallenge(soap, p, "wst:SignChallenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__SignChallenge(struct soap *soap, const char *URL, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__SignChallenge(soap, p), 0) || ::soap_put__wst__SignChallenge(soap, p, "wst:SignChallenge", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__SignChallenge soap_get_wst__SignChallengeType


#define soap_read__wst__SignChallenge soap_read_wst__SignChallengeType


#define soap_GET__wst__SignChallenge soap_GET_wst__SignChallengeType


#define soap_POST_recv__wst__SignChallenge soap_POST_recv_wst__SignChallengeType

#endif
/* _wst__Status is a typedef synonym of wst__StatusType */

#ifndef SOAP_TYPE__wst__Status_DEFINED
#define SOAP_TYPE__wst__Status_DEFINED

#define soap_default__wst__Status soap_default_wst__StatusType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__StatusType(struct soap*, const struct wst__StatusType *);

#define soap_serialize__wst__Status soap_serialize_wst__StatusType


#define soap__wst__Status2s soap_wst__StatusType2s


#define soap_out__wst__Status soap_out_wst__StatusType


#define soap_s2_wst__Status soap_s2wst__StatusType


#define soap_in__wst__Status soap_in_wst__StatusType


#define soap_instantiate__wst__Status soap_instantiate_wst__StatusType


#define soap_new__wst__Status soap_new_wst__StatusType


#define soap_new_req__wst__Status soap_new_req_wst__StatusType


#define soap_new_set__wst__Status soap_new_set_wst__StatusType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Status(struct soap*, const struct wst__StatusType *, const char*, const char*);

inline int soap_write__wst__Status(struct soap *soap, struct wst__StatusType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__Status(soap, p), 0) || ::soap_put__wst__Status(soap, p, "wst:Status", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__Status(struct soap *soap, const char *URL, struct wst__StatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Status(soap, p), 0) || ::soap_put__wst__Status(soap, p, "wst:Status", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Status(struct soap *soap, const char *URL, struct wst__StatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Status(soap, p), 0) || ::soap_put__wst__Status(soap, p, "wst:Status", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Status(struct soap *soap, const char *URL, struct wst__StatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Status(soap, p), 0) || ::soap_put__wst__Status(soap, p, "wst:Status", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Status soap_get_wst__StatusType


#define soap_read__wst__Status soap_read_wst__StatusType


#define soap_GET__wst__Status soap_GET_wst__StatusType


#define soap_POST_recv__wst__Status soap_POST_recv_wst__StatusType

#endif
/* _wst__ValidateTarget is a typedef synonym of wst__ValidateTargetType */

#ifndef SOAP_TYPE__wst__ValidateTarget_DEFINED
#define SOAP_TYPE__wst__ValidateTarget_DEFINED

#define soap_default__wst__ValidateTarget soap_default_wst__ValidateTargetType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__ValidateTargetType(struct soap*, const struct wst__ValidateTargetType *);

#define soap_serialize__wst__ValidateTarget soap_serialize_wst__ValidateTargetType


#define soap__wst__ValidateTarget2s soap_wst__ValidateTargetType2s


#define soap_out__wst__ValidateTarget soap_out_wst__ValidateTargetType


#define soap_s2_wst__ValidateTarget soap_s2wst__ValidateTargetType


#define soap_in__wst__ValidateTarget soap_in_wst__ValidateTargetType


#define soap_instantiate__wst__ValidateTarget soap_instantiate_wst__ValidateTargetType


#define soap_new__wst__ValidateTarget soap_new_wst__ValidateTargetType


#define soap_new_req__wst__ValidateTarget soap_new_req_wst__ValidateTargetType


#define soap_new_set__wst__ValidateTarget soap_new_set_wst__ValidateTargetType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__ValidateTarget(struct soap*, const struct wst__ValidateTargetType *, const char*, const char*);

inline int soap_write__wst__ValidateTarget(struct soap *soap, struct wst__ValidateTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__ValidateTarget(soap, p), 0) || ::soap_put__wst__ValidateTarget(soap, p, "wst:ValidateTarget", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__ValidateTarget(struct soap *soap, const char *URL, struct wst__ValidateTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__ValidateTarget(soap, p), 0) || ::soap_put__wst__ValidateTarget(soap, p, "wst:ValidateTarget", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__ValidateTarget(struct soap *soap, const char *URL, struct wst__ValidateTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__ValidateTarget(soap, p), 0) || ::soap_put__wst__ValidateTarget(soap, p, "wst:ValidateTarget", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__ValidateTarget(struct soap *soap, const char *URL, struct wst__ValidateTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__ValidateTarget(soap, p), 0) || ::soap_put__wst__ValidateTarget(soap, p, "wst:ValidateTarget", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__ValidateTarget soap_get_wst__ValidateTargetType


#define soap_read__wst__ValidateTarget soap_read_wst__ValidateTargetType


#define soap_GET__wst__ValidateTarget soap_GET_wst__ValidateTargetType


#define soap_POST_recv__wst__ValidateTarget soap_POST_recv_wst__ValidateTargetType

#endif
/* _wst__RequestedTokenCancelled is a typedef synonym of wst__RequestedTokenCancelledType */

#ifndef SOAP_TYPE__wst__RequestedTokenCancelled_DEFINED
#define SOAP_TYPE__wst__RequestedTokenCancelled_DEFINED

#define soap_default__wst__RequestedTokenCancelled soap_default_wst__RequestedTokenCancelledType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestedTokenCancelledType(struct soap*, const struct wst__RequestedTokenCancelledType *);

#define soap_serialize__wst__RequestedTokenCancelled soap_serialize_wst__RequestedTokenCancelledType


#define soap__wst__RequestedTokenCancelled2s soap_wst__RequestedTokenCancelledType2s


#define soap_out__wst__RequestedTokenCancelled soap_out_wst__RequestedTokenCancelledType


#define soap_s2_wst__RequestedTokenCancelled soap_s2wst__RequestedTokenCancelledType


#define soap_in__wst__RequestedTokenCancelled soap_in_wst__RequestedTokenCancelledType


#define soap_instantiate__wst__RequestedTokenCancelled soap_instantiate_wst__RequestedTokenCancelledType


#define soap_new__wst__RequestedTokenCancelled soap_new_wst__RequestedTokenCancelledType


#define soap_new_req__wst__RequestedTokenCancelled soap_new_req_wst__RequestedTokenCancelledType


#define soap_new_set__wst__RequestedTokenCancelled soap_new_set_wst__RequestedTokenCancelledType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestedTokenCancelled(struct soap*, const struct wst__RequestedTokenCancelledType *, const char*, const char*);

inline int soap_write__wst__RequestedTokenCancelled(struct soap *soap, struct wst__RequestedTokenCancelledType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestedTokenCancelled(soap, p), 0) || ::soap_put__wst__RequestedTokenCancelled(soap, p, "wst:RequestedTokenCancelled", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestedTokenCancelled(struct soap *soap, const char *URL, struct wst__RequestedTokenCancelledType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedTokenCancelled(soap, p), 0) || ::soap_put__wst__RequestedTokenCancelled(soap, p, "wst:RequestedTokenCancelled", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestedTokenCancelled(struct soap *soap, const char *URL, struct wst__RequestedTokenCancelledType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedTokenCancelled(soap, p), 0) || ::soap_put__wst__RequestedTokenCancelled(soap, p, "wst:RequestedTokenCancelled", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestedTokenCancelled(struct soap *soap, const char *URL, struct wst__RequestedTokenCancelledType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedTokenCancelled(soap, p), 0) || ::soap_put__wst__RequestedTokenCancelled(soap, p, "wst:RequestedTokenCancelled", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestedTokenCancelled soap_get_wst__RequestedTokenCancelledType


#define soap_read__wst__RequestedTokenCancelled soap_read_wst__RequestedTokenCancelledType


#define soap_GET__wst__RequestedTokenCancelled soap_GET_wst__RequestedTokenCancelledType


#define soap_POST_recv__wst__RequestedTokenCancelled soap_POST_recv_wst__RequestedTokenCancelledType

#endif
/* _wst__CancelTarget is a typedef synonym of wst__CancelTargetType */

#ifndef SOAP_TYPE__wst__CancelTarget_DEFINED
#define SOAP_TYPE__wst__CancelTarget_DEFINED

#define soap_default__wst__CancelTarget soap_default_wst__CancelTargetType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__CancelTargetType(struct soap*, const struct wst__CancelTargetType *);

#define soap_serialize__wst__CancelTarget soap_serialize_wst__CancelTargetType


#define soap__wst__CancelTarget2s soap_wst__CancelTargetType2s


#define soap_out__wst__CancelTarget soap_out_wst__CancelTargetType


#define soap_s2_wst__CancelTarget soap_s2wst__CancelTargetType


#define soap_in__wst__CancelTarget soap_in_wst__CancelTargetType


#define soap_instantiate__wst__CancelTarget soap_instantiate_wst__CancelTargetType


#define soap_new__wst__CancelTarget soap_new_wst__CancelTargetType


#define soap_new_req__wst__CancelTarget soap_new_req_wst__CancelTargetType


#define soap_new_set__wst__CancelTarget soap_new_set_wst__CancelTargetType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__CancelTarget(struct soap*, const struct wst__CancelTargetType *, const char*, const char*);

inline int soap_write__wst__CancelTarget(struct soap *soap, struct wst__CancelTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__CancelTarget(soap, p), 0) || ::soap_put__wst__CancelTarget(soap, p, "wst:CancelTarget", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__CancelTarget(struct soap *soap, const char *URL, struct wst__CancelTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__CancelTarget(soap, p), 0) || ::soap_put__wst__CancelTarget(soap, p, "wst:CancelTarget", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__CancelTarget(struct soap *soap, const char *URL, struct wst__CancelTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__CancelTarget(soap, p), 0) || ::soap_put__wst__CancelTarget(soap, p, "wst:CancelTarget", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__CancelTarget(struct soap *soap, const char *URL, struct wst__CancelTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__CancelTarget(soap, p), 0) || ::soap_put__wst__CancelTarget(soap, p, "wst:CancelTarget", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__CancelTarget soap_get_wst__CancelTargetType


#define soap_read__wst__CancelTarget soap_read_wst__CancelTargetType


#define soap_GET__wst__CancelTarget soap_GET_wst__CancelTargetType


#define soap_POST_recv__wst__CancelTarget soap_POST_recv_wst__CancelTargetType

#endif
/* _wst__Renewing is a typedef synonym of wst__RenewingType */

#ifndef SOAP_TYPE__wst__Renewing_DEFINED
#define SOAP_TYPE__wst__Renewing_DEFINED

#define soap_default__wst__Renewing soap_default_wst__RenewingType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RenewingType(struct soap*, const struct wst__RenewingType *);

#define soap_serialize__wst__Renewing soap_serialize_wst__RenewingType


#define soap__wst__Renewing2s soap_wst__RenewingType2s


#define soap_out__wst__Renewing soap_out_wst__RenewingType


#define soap_s2_wst__Renewing soap_s2wst__RenewingType


#define soap_in__wst__Renewing soap_in_wst__RenewingType


#define soap_instantiate__wst__Renewing soap_instantiate_wst__RenewingType


#define soap_new__wst__Renewing soap_new_wst__RenewingType


#define soap_new_req__wst__Renewing soap_new_req_wst__RenewingType


#define soap_new_set__wst__Renewing soap_new_set_wst__RenewingType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Renewing(struct soap*, const struct wst__RenewingType *, const char*, const char*);

inline int soap_write__wst__Renewing(struct soap *soap, struct wst__RenewingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__Renewing(soap, p), 0) || ::soap_put__wst__Renewing(soap, p, "wst:Renewing", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__Renewing(struct soap *soap, const char *URL, struct wst__RenewingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Renewing(soap, p), 0) || ::soap_put__wst__Renewing(soap, p, "wst:Renewing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Renewing(struct soap *soap, const char *URL, struct wst__RenewingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Renewing(soap, p), 0) || ::soap_put__wst__Renewing(soap, p, "wst:Renewing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Renewing(struct soap *soap, const char *URL, struct wst__RenewingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Renewing(soap, p), 0) || ::soap_put__wst__Renewing(soap, p, "wst:Renewing", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Renewing soap_get_wst__RenewingType


#define soap_read__wst__Renewing soap_read_wst__RenewingType


#define soap_GET__wst__Renewing soap_GET_wst__RenewingType


#define soap_POST_recv__wst__Renewing soap_POST_recv_wst__RenewingType

#endif
/* _wst__AllowPostdating is a typedef synonym of wst__AllowPostdatingType */

#ifndef SOAP_TYPE__wst__AllowPostdating_DEFINED
#define SOAP_TYPE__wst__AllowPostdating_DEFINED

#define soap_default__wst__AllowPostdating soap_default_wst__AllowPostdatingType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__AllowPostdatingType(struct soap*, const struct wst__AllowPostdatingType *);

#define soap_serialize__wst__AllowPostdating soap_serialize_wst__AllowPostdatingType


#define soap__wst__AllowPostdating2s soap_wst__AllowPostdatingType2s


#define soap_out__wst__AllowPostdating soap_out_wst__AllowPostdatingType


#define soap_s2_wst__AllowPostdating soap_s2wst__AllowPostdatingType


#define soap_in__wst__AllowPostdating soap_in_wst__AllowPostdatingType


#define soap_instantiate__wst__AllowPostdating soap_instantiate_wst__AllowPostdatingType


#define soap_new__wst__AllowPostdating soap_new_wst__AllowPostdatingType


#define soap_new_req__wst__AllowPostdating soap_new_req_wst__AllowPostdatingType


#define soap_new_set__wst__AllowPostdating soap_new_set_wst__AllowPostdatingType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__AllowPostdating(struct soap*, const struct wst__AllowPostdatingType *, const char*, const char*);

inline int soap_write__wst__AllowPostdating(struct soap *soap, struct wst__AllowPostdatingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__AllowPostdating(soap, p), 0) || ::soap_put__wst__AllowPostdating(soap, p, "wst:AllowPostdating", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__AllowPostdating(struct soap *soap, const char *URL, struct wst__AllowPostdatingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__AllowPostdating(soap, p), 0) || ::soap_put__wst__AllowPostdating(soap, p, "wst:AllowPostdating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__AllowPostdating(struct soap *soap, const char *URL, struct wst__AllowPostdatingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__AllowPostdating(soap, p), 0) || ::soap_put__wst__AllowPostdating(soap, p, "wst:AllowPostdating", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__AllowPostdating(struct soap *soap, const char *URL, struct wst__AllowPostdatingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__AllowPostdating(soap, p), 0) || ::soap_put__wst__AllowPostdating(soap, p, "wst:AllowPostdating", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__AllowPostdating soap_get_wst__AllowPostdatingType


#define soap_read__wst__AllowPostdating soap_read_wst__AllowPostdatingType


#define soap_GET__wst__AllowPostdating soap_GET_wst__AllowPostdatingType


#define soap_POST_recv__wst__AllowPostdating soap_POST_recv_wst__AllowPostdatingType

#endif
/* _wst__RenewTarget is a typedef synonym of wst__RenewTargetType */

#ifndef SOAP_TYPE__wst__RenewTarget_DEFINED
#define SOAP_TYPE__wst__RenewTarget_DEFINED

#define soap_default__wst__RenewTarget soap_default_wst__RenewTargetType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RenewTargetType(struct soap*, const struct wst__RenewTargetType *);

#define soap_serialize__wst__RenewTarget soap_serialize_wst__RenewTargetType


#define soap__wst__RenewTarget2s soap_wst__RenewTargetType2s


#define soap_out__wst__RenewTarget soap_out_wst__RenewTargetType


#define soap_s2_wst__RenewTarget soap_s2wst__RenewTargetType


#define soap_in__wst__RenewTarget soap_in_wst__RenewTargetType


#define soap_instantiate__wst__RenewTarget soap_instantiate_wst__RenewTargetType


#define soap_new__wst__RenewTarget soap_new_wst__RenewTargetType


#define soap_new_req__wst__RenewTarget soap_new_req_wst__RenewTargetType


#define soap_new_set__wst__RenewTarget soap_new_set_wst__RenewTargetType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RenewTarget(struct soap*, const struct wst__RenewTargetType *, const char*, const char*);

inline int soap_write__wst__RenewTarget(struct soap *soap, struct wst__RenewTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RenewTarget(soap, p), 0) || ::soap_put__wst__RenewTarget(soap, p, "wst:RenewTarget", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RenewTarget(struct soap *soap, const char *URL, struct wst__RenewTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RenewTarget(soap, p), 0) || ::soap_put__wst__RenewTarget(soap, p, "wst:RenewTarget", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RenewTarget(struct soap *soap, const char *URL, struct wst__RenewTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RenewTarget(soap, p), 0) || ::soap_put__wst__RenewTarget(soap, p, "wst:RenewTarget", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RenewTarget(struct soap *soap, const char *URL, struct wst__RenewTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RenewTarget(soap, p), 0) || ::soap_put__wst__RenewTarget(soap, p, "wst:RenewTarget", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RenewTarget soap_get_wst__RenewTargetType


#define soap_read__wst__RenewTarget soap_read_wst__RenewTargetType


#define soap_GET__wst__RenewTarget soap_GET_wst__RenewTargetType


#define soap_POST_recv__wst__RenewTarget soap_POST_recv_wst__RenewTargetType

#endif
/* _wst__IssuedTokens is a typedef synonym of wst__RequestSecurityTokenResponseCollectionType */

#ifndef SOAP_TYPE__wst__IssuedTokens_DEFINED
#define SOAP_TYPE__wst__IssuedTokens_DEFINED

#define soap_default__wst__IssuedTokens soap_default_wst__RequestSecurityTokenResponseCollectionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestSecurityTokenResponseCollectionType(struct soap*, const struct wst__RequestSecurityTokenResponseCollectionType *);

#define soap_serialize__wst__IssuedTokens soap_serialize_wst__RequestSecurityTokenResponseCollectionType


#define soap__wst__IssuedTokens2s soap_wst__RequestSecurityTokenResponseCollectionType2s


#define soap_out__wst__IssuedTokens soap_out_wst__RequestSecurityTokenResponseCollectionType


#define soap_s2_wst__IssuedTokens soap_s2wst__RequestSecurityTokenResponseCollectionType


#define soap_in__wst__IssuedTokens soap_in_wst__RequestSecurityTokenResponseCollectionType


#define soap_instantiate__wst__IssuedTokens soap_instantiate_wst__RequestSecurityTokenResponseCollectionType


#define soap_new__wst__IssuedTokens soap_new_wst__RequestSecurityTokenResponseCollectionType


#define soap_new_req__wst__IssuedTokens soap_new_req_wst__RequestSecurityTokenResponseCollectionType


#define soap_new_set__wst__IssuedTokens soap_new_set_wst__RequestSecurityTokenResponseCollectionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__IssuedTokens(struct soap*, const struct wst__RequestSecurityTokenResponseCollectionType *, const char*, const char*);

inline int soap_write__wst__IssuedTokens(struct soap *soap, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__IssuedTokens(soap, p), 0) || ::soap_put__wst__IssuedTokens(soap, p, "wst:IssuedTokens", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__IssuedTokens(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__IssuedTokens(soap, p), 0) || ::soap_put__wst__IssuedTokens(soap, p, "wst:IssuedTokens", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__IssuedTokens(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__IssuedTokens(soap, p), 0) || ::soap_put__wst__IssuedTokens(soap, p, "wst:IssuedTokens", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__IssuedTokens(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__IssuedTokens(soap, p), 0) || ::soap_put__wst__IssuedTokens(soap, p, "wst:IssuedTokens", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__IssuedTokens soap_get_wst__RequestSecurityTokenResponseCollectionType


#define soap_read__wst__IssuedTokens soap_read_wst__RequestSecurityTokenResponseCollectionType


#define soap_GET__wst__IssuedTokens soap_GET_wst__RequestSecurityTokenResponseCollectionType


#define soap_POST_recv__wst__IssuedTokens soap_POST_recv_wst__RequestSecurityTokenResponseCollectionType

#endif
/* _wst__RequestedProofToken is a typedef synonym of wst__RequestedProofTokenType */

#ifndef SOAP_TYPE__wst__RequestedProofToken_DEFINED
#define SOAP_TYPE__wst__RequestedProofToken_DEFINED

#define soap_default__wst__RequestedProofToken soap_default_wst__RequestedProofTokenType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestedProofTokenType(struct soap*, const struct wst__RequestedProofTokenType *);

#define soap_serialize__wst__RequestedProofToken soap_serialize_wst__RequestedProofTokenType


#define soap__wst__RequestedProofToken2s soap_wst__RequestedProofTokenType2s


#define soap_out__wst__RequestedProofToken soap_out_wst__RequestedProofTokenType


#define soap_s2_wst__RequestedProofToken soap_s2wst__RequestedProofTokenType


#define soap_in__wst__RequestedProofToken soap_in_wst__RequestedProofTokenType


#define soap_instantiate__wst__RequestedProofToken soap_instantiate_wst__RequestedProofTokenType


#define soap_new__wst__RequestedProofToken soap_new_wst__RequestedProofTokenType


#define soap_new_req__wst__RequestedProofToken soap_new_req_wst__RequestedProofTokenType


#define soap_new_set__wst__RequestedProofToken soap_new_set_wst__RequestedProofTokenType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestedProofToken(struct soap*, const struct wst__RequestedProofTokenType *, const char*, const char*);

inline int soap_write__wst__RequestedProofToken(struct soap *soap, struct wst__RequestedProofTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestedProofToken(soap, p), 0) || ::soap_put__wst__RequestedProofToken(soap, p, "wst:RequestedProofToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestedProofToken(struct soap *soap, const char *URL, struct wst__RequestedProofTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedProofToken(soap, p), 0) || ::soap_put__wst__RequestedProofToken(soap, p, "wst:RequestedProofToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestedProofToken(struct soap *soap, const char *URL, struct wst__RequestedProofTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedProofToken(soap, p), 0) || ::soap_put__wst__RequestedProofToken(soap, p, "wst:RequestedProofToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestedProofToken(struct soap *soap, const char *URL, struct wst__RequestedProofTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedProofToken(soap, p), 0) || ::soap_put__wst__RequestedProofToken(soap, p, "wst:RequestedProofToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestedProofToken soap_get_wst__RequestedProofTokenType


#define soap_read__wst__RequestedProofToken soap_read_wst__RequestedProofTokenType


#define soap_GET__wst__RequestedProofToken soap_GET_wst__RequestedProofTokenType


#define soap_POST_recv__wst__RequestedProofToken soap_POST_recv_wst__RequestedProofTokenType

#endif
/* _wst__RequestedUnattachedReference is a typedef synonym of wst__RequestedReferenceType */

#ifndef SOAP_TYPE__wst__RequestedUnattachedReference_DEFINED
#define SOAP_TYPE__wst__RequestedUnattachedReference_DEFINED

#define soap_default__wst__RequestedUnattachedReference soap_default_wst__RequestedReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestedReferenceType(struct soap*, const struct wst__RequestedReferenceType *);

#define soap_serialize__wst__RequestedUnattachedReference soap_serialize_wst__RequestedReferenceType


#define soap__wst__RequestedUnattachedReference2s soap_wst__RequestedReferenceType2s


#define soap_out__wst__RequestedUnattachedReference soap_out_wst__RequestedReferenceType


#define soap_s2_wst__RequestedUnattachedReference soap_s2wst__RequestedReferenceType


#define soap_in__wst__RequestedUnattachedReference soap_in_wst__RequestedReferenceType


#define soap_instantiate__wst__RequestedUnattachedReference soap_instantiate_wst__RequestedReferenceType


#define soap_new__wst__RequestedUnattachedReference soap_new_wst__RequestedReferenceType


#define soap_new_req__wst__RequestedUnattachedReference soap_new_req_wst__RequestedReferenceType


#define soap_new_set__wst__RequestedUnattachedReference soap_new_set_wst__RequestedReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestedUnattachedReference(struct soap*, const struct wst__RequestedReferenceType *, const char*, const char*);

inline int soap_write__wst__RequestedUnattachedReference(struct soap *soap, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestedUnattachedReference(soap, p), 0) || ::soap_put__wst__RequestedUnattachedReference(soap, p, "wst:RequestedUnattachedReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestedUnattachedReference(struct soap *soap, const char *URL, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedUnattachedReference(soap, p), 0) || ::soap_put__wst__RequestedUnattachedReference(soap, p, "wst:RequestedUnattachedReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestedUnattachedReference(struct soap *soap, const char *URL, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedUnattachedReference(soap, p), 0) || ::soap_put__wst__RequestedUnattachedReference(soap, p, "wst:RequestedUnattachedReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestedUnattachedReference(struct soap *soap, const char *URL, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedUnattachedReference(soap, p), 0) || ::soap_put__wst__RequestedUnattachedReference(soap, p, "wst:RequestedUnattachedReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestedUnattachedReference soap_get_wst__RequestedReferenceType


#define soap_read__wst__RequestedUnattachedReference soap_read_wst__RequestedReferenceType


#define soap_GET__wst__RequestedUnattachedReference soap_GET_wst__RequestedReferenceType


#define soap_POST_recv__wst__RequestedUnattachedReference soap_POST_recv_wst__RequestedReferenceType

#endif
/* _wst__RequestedAttachedReference is a typedef synonym of wst__RequestedReferenceType */

#ifndef SOAP_TYPE__wst__RequestedAttachedReference_DEFINED
#define SOAP_TYPE__wst__RequestedAttachedReference_DEFINED

#define soap_default__wst__RequestedAttachedReference soap_default_wst__RequestedReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestedReferenceType(struct soap*, const struct wst__RequestedReferenceType *);

#define soap_serialize__wst__RequestedAttachedReference soap_serialize_wst__RequestedReferenceType


#define soap__wst__RequestedAttachedReference2s soap_wst__RequestedReferenceType2s


#define soap_out__wst__RequestedAttachedReference soap_out_wst__RequestedReferenceType


#define soap_s2_wst__RequestedAttachedReference soap_s2wst__RequestedReferenceType


#define soap_in__wst__RequestedAttachedReference soap_in_wst__RequestedReferenceType


#define soap_instantiate__wst__RequestedAttachedReference soap_instantiate_wst__RequestedReferenceType


#define soap_new__wst__RequestedAttachedReference soap_new_wst__RequestedReferenceType


#define soap_new_req__wst__RequestedAttachedReference soap_new_req_wst__RequestedReferenceType


#define soap_new_set__wst__RequestedAttachedReference soap_new_set_wst__RequestedReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestedAttachedReference(struct soap*, const struct wst__RequestedReferenceType *, const char*, const char*);

inline int soap_write__wst__RequestedAttachedReference(struct soap *soap, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestedAttachedReference(soap, p), 0) || ::soap_put__wst__RequestedAttachedReference(soap, p, "wst:RequestedAttachedReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestedAttachedReference(struct soap *soap, const char *URL, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedAttachedReference(soap, p), 0) || ::soap_put__wst__RequestedAttachedReference(soap, p, "wst:RequestedAttachedReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestedAttachedReference(struct soap *soap, const char *URL, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedAttachedReference(soap, p), 0) || ::soap_put__wst__RequestedAttachedReference(soap, p, "wst:RequestedAttachedReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestedAttachedReference(struct soap *soap, const char *URL, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedAttachedReference(soap, p), 0) || ::soap_put__wst__RequestedAttachedReference(soap, p, "wst:RequestedAttachedReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestedAttachedReference soap_get_wst__RequestedReferenceType


#define soap_read__wst__RequestedAttachedReference soap_read_wst__RequestedReferenceType


#define soap_GET__wst__RequestedAttachedReference soap_GET_wst__RequestedReferenceType


#define soap_POST_recv__wst__RequestedAttachedReference soap_POST_recv_wst__RequestedReferenceType

#endif
/* _wst__RequestSecurityTokenResponseCollection is a typedef synonym of wst__RequestSecurityTokenResponseCollectionType */

#ifndef SOAP_TYPE__wst__RequestSecurityTokenResponseCollection_DEFINED
#define SOAP_TYPE__wst__RequestSecurityTokenResponseCollection_DEFINED

#define soap_default__wst__RequestSecurityTokenResponseCollection soap_default_wst__RequestSecurityTokenResponseCollectionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestSecurityTokenResponseCollectionType(struct soap*, const struct wst__RequestSecurityTokenResponseCollectionType *);

#define soap_serialize__wst__RequestSecurityTokenResponseCollection soap_serialize_wst__RequestSecurityTokenResponseCollectionType


#define soap__wst__RequestSecurityTokenResponseCollection2s soap_wst__RequestSecurityTokenResponseCollectionType2s


#define soap_out__wst__RequestSecurityTokenResponseCollection soap_out_wst__RequestSecurityTokenResponseCollectionType


#define soap_s2_wst__RequestSecurityTokenResponseCollection soap_s2wst__RequestSecurityTokenResponseCollectionType


#define soap_in__wst__RequestSecurityTokenResponseCollection soap_in_wst__RequestSecurityTokenResponseCollectionType


#define soap_instantiate__wst__RequestSecurityTokenResponseCollection soap_instantiate_wst__RequestSecurityTokenResponseCollectionType


#define soap_new__wst__RequestSecurityTokenResponseCollection soap_new_wst__RequestSecurityTokenResponseCollectionType


#define soap_new_req__wst__RequestSecurityTokenResponseCollection soap_new_req_wst__RequestSecurityTokenResponseCollectionType


#define soap_new_set__wst__RequestSecurityTokenResponseCollection soap_new_set_wst__RequestSecurityTokenResponseCollectionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestSecurityTokenResponseCollection(struct soap*, const struct wst__RequestSecurityTokenResponseCollectionType *, const char*, const char*);

inline int soap_write__wst__RequestSecurityTokenResponseCollection(struct soap *soap, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestSecurityTokenResponseCollection(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenResponseCollection(soap, p, "wst:RequestSecurityTokenResponseCollection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestSecurityTokenResponseCollection(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityTokenResponseCollection(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenResponseCollection(soap, p, "wst:RequestSecurityTokenResponseCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestSecurityTokenResponseCollection(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityTokenResponseCollection(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenResponseCollection(soap, p, "wst:RequestSecurityTokenResponseCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestSecurityTokenResponseCollection(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityTokenResponseCollection(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenResponseCollection(soap, p, "wst:RequestSecurityTokenResponseCollection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestSecurityTokenResponseCollection soap_get_wst__RequestSecurityTokenResponseCollectionType


#define soap_read__wst__RequestSecurityTokenResponseCollection soap_read_wst__RequestSecurityTokenResponseCollectionType


#define soap_GET__wst__RequestSecurityTokenResponseCollection soap_GET_wst__RequestSecurityTokenResponseCollectionType


#define soap_POST_recv__wst__RequestSecurityTokenResponseCollection soap_POST_recv_wst__RequestSecurityTokenResponseCollectionType

#endif
/* _wst__RequestSecurityTokenCollection is a typedef synonym of wst__RequestSecurityTokenCollectionType */

#ifndef SOAP_TYPE__wst__RequestSecurityTokenCollection_DEFINED
#define SOAP_TYPE__wst__RequestSecurityTokenCollection_DEFINED

#define soap_default__wst__RequestSecurityTokenCollection soap_default_wst__RequestSecurityTokenCollectionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestSecurityTokenCollectionType(struct soap*, const struct wst__RequestSecurityTokenCollectionType *);

#define soap_serialize__wst__RequestSecurityTokenCollection soap_serialize_wst__RequestSecurityTokenCollectionType


#define soap__wst__RequestSecurityTokenCollection2s soap_wst__RequestSecurityTokenCollectionType2s


#define soap_out__wst__RequestSecurityTokenCollection soap_out_wst__RequestSecurityTokenCollectionType


#define soap_s2_wst__RequestSecurityTokenCollection soap_s2wst__RequestSecurityTokenCollectionType


#define soap_in__wst__RequestSecurityTokenCollection soap_in_wst__RequestSecurityTokenCollectionType


#define soap_instantiate__wst__RequestSecurityTokenCollection soap_instantiate_wst__RequestSecurityTokenCollectionType


#define soap_new__wst__RequestSecurityTokenCollection soap_new_wst__RequestSecurityTokenCollectionType


#define soap_new_req__wst__RequestSecurityTokenCollection soap_new_req_wst__RequestSecurityTokenCollectionType


#define soap_new_set__wst__RequestSecurityTokenCollection soap_new_set_wst__RequestSecurityTokenCollectionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestSecurityTokenCollection(struct soap*, const struct wst__RequestSecurityTokenCollectionType *, const char*, const char*);

inline int soap_write__wst__RequestSecurityTokenCollection(struct soap *soap, struct wst__RequestSecurityTokenCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestSecurityTokenCollection(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenCollection(soap, p, "wst:RequestSecurityTokenCollection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestSecurityTokenCollection(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityTokenCollection(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenCollection(soap, p, "wst:RequestSecurityTokenCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestSecurityTokenCollection(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityTokenCollection(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenCollection(soap, p, "wst:RequestSecurityTokenCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestSecurityTokenCollection(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityTokenCollection(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenCollection(soap, p, "wst:RequestSecurityTokenCollection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestSecurityTokenCollection soap_get_wst__RequestSecurityTokenCollectionType


#define soap_read__wst__RequestSecurityTokenCollection soap_read_wst__RequestSecurityTokenCollectionType


#define soap_GET__wst__RequestSecurityTokenCollection soap_GET_wst__RequestSecurityTokenCollectionType


#define soap_POST_recv__wst__RequestSecurityTokenCollection soap_POST_recv_wst__RequestSecurityTokenCollectionType

#endif
/* _wst__Lifetime is a typedef synonym of wst__LifetimeType */

#ifndef SOAP_TYPE__wst__Lifetime_DEFINED
#define SOAP_TYPE__wst__Lifetime_DEFINED

#define soap_default__wst__Lifetime soap_default_wst__LifetimeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__LifetimeType(struct soap*, const struct wst__LifetimeType *);

#define soap_serialize__wst__Lifetime soap_serialize_wst__LifetimeType


#define soap__wst__Lifetime2s soap_wst__LifetimeType2s


#define soap_out__wst__Lifetime soap_out_wst__LifetimeType


#define soap_s2_wst__Lifetime soap_s2wst__LifetimeType


#define soap_in__wst__Lifetime soap_in_wst__LifetimeType


#define soap_instantiate__wst__Lifetime soap_instantiate_wst__LifetimeType


#define soap_new__wst__Lifetime soap_new_wst__LifetimeType


#define soap_new_req__wst__Lifetime soap_new_req_wst__LifetimeType


#define soap_new_set__wst__Lifetime soap_new_set_wst__LifetimeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Lifetime(struct soap*, const struct wst__LifetimeType *, const char*, const char*);

inline int soap_write__wst__Lifetime(struct soap *soap, struct wst__LifetimeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__Lifetime(soap, p), 0) || ::soap_put__wst__Lifetime(soap, p, "wst:Lifetime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__Lifetime(struct soap *soap, const char *URL, struct wst__LifetimeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Lifetime(soap, p), 0) || ::soap_put__wst__Lifetime(soap, p, "wst:Lifetime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Lifetime(struct soap *soap, const char *URL, struct wst__LifetimeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Lifetime(soap, p), 0) || ::soap_put__wst__Lifetime(soap, p, "wst:Lifetime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Lifetime(struct soap *soap, const char *URL, struct wst__LifetimeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Lifetime(soap, p), 0) || ::soap_put__wst__Lifetime(soap, p, "wst:Lifetime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Lifetime soap_get_wst__LifetimeType


#define soap_read__wst__Lifetime soap_read_wst__LifetimeType


#define soap_GET__wst__Lifetime soap_GET_wst__LifetimeType


#define soap_POST_recv__wst__Lifetime soap_POST_recv_wst__LifetimeType

#endif
/* _wst__Entropy is a typedef synonym of wst__EntropyType */

#ifndef SOAP_TYPE__wst__Entropy_DEFINED
#define SOAP_TYPE__wst__Entropy_DEFINED

#define soap_default__wst__Entropy soap_default_wst__EntropyType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__EntropyType(struct soap*, const struct wst__EntropyType *);

#define soap_serialize__wst__Entropy soap_serialize_wst__EntropyType


#define soap__wst__Entropy2s soap_wst__EntropyType2s


#define soap_out__wst__Entropy soap_out_wst__EntropyType


#define soap_s2_wst__Entropy soap_s2wst__EntropyType


#define soap_in__wst__Entropy soap_in_wst__EntropyType


#define soap_instantiate__wst__Entropy soap_instantiate_wst__EntropyType


#define soap_new__wst__Entropy soap_new_wst__EntropyType


#define soap_new_req__wst__Entropy soap_new_req_wst__EntropyType


#define soap_new_set__wst__Entropy soap_new_set_wst__EntropyType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Entropy(struct soap*, const struct wst__EntropyType *, const char*, const char*);

inline int soap_write__wst__Entropy(struct soap *soap, struct wst__EntropyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__Entropy(soap, p), 0) || ::soap_put__wst__Entropy(soap, p, "wst:Entropy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__Entropy(struct soap *soap, const char *URL, struct wst__EntropyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Entropy(soap, p), 0) || ::soap_put__wst__Entropy(soap, p, "wst:Entropy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Entropy(struct soap *soap, const char *URL, struct wst__EntropyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Entropy(soap, p), 0) || ::soap_put__wst__Entropy(soap, p, "wst:Entropy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Entropy(struct soap *soap, const char *URL, struct wst__EntropyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Entropy(soap, p), 0) || ::soap_put__wst__Entropy(soap, p, "wst:Entropy", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Entropy soap_get_wst__EntropyType


#define soap_read__wst__Entropy soap_read_wst__EntropyType


#define soap_GET__wst__Entropy soap_GET_wst__EntropyType


#define soap_POST_recv__wst__Entropy soap_POST_recv_wst__EntropyType

#endif
/* _wst__Claims is a typedef synonym of wst__ClaimsType */

#ifndef SOAP_TYPE__wst__Claims_DEFINED
#define SOAP_TYPE__wst__Claims_DEFINED

#define soap_default__wst__Claims soap_default_wst__ClaimsType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__ClaimsType(struct soap*, const struct wst__ClaimsType *);

#define soap_serialize__wst__Claims soap_serialize_wst__ClaimsType


#define soap__wst__Claims2s soap_wst__ClaimsType2s


#define soap_out__wst__Claims soap_out_wst__ClaimsType


#define soap_s2_wst__Claims soap_s2wst__ClaimsType


#define soap_in__wst__Claims soap_in_wst__ClaimsType


#define soap_instantiate__wst__Claims soap_instantiate_wst__ClaimsType


#define soap_new__wst__Claims soap_new_wst__ClaimsType


#define soap_new_req__wst__Claims soap_new_req_wst__ClaimsType


#define soap_new_set__wst__Claims soap_new_set_wst__ClaimsType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Claims(struct soap*, const struct wst__ClaimsType *, const char*, const char*);

inline int soap_write__wst__Claims(struct soap *soap, struct wst__ClaimsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__Claims(soap, p), 0) || ::soap_put__wst__Claims(soap, p, "wst:Claims", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__Claims(struct soap *soap, const char *URL, struct wst__ClaimsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Claims(soap, p), 0) || ::soap_put__wst__Claims(soap, p, "wst:Claims", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Claims(struct soap *soap, const char *URL, struct wst__ClaimsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Claims(soap, p), 0) || ::soap_put__wst__Claims(soap, p, "wst:Claims", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Claims(struct soap *soap, const char *URL, struct wst__ClaimsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__Claims(soap, p), 0) || ::soap_put__wst__Claims(soap, p, "wst:Claims", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Claims soap_get_wst__ClaimsType


#define soap_read__wst__Claims soap_read_wst__ClaimsType


#define soap_GET__wst__Claims soap_GET_wst__ClaimsType


#define soap_POST_recv__wst__Claims soap_POST_recv_wst__ClaimsType

#endif
/* _wst__BinarySecret is a typedef synonym of wst__BinarySecretType */

#ifndef SOAP_TYPE__wst__BinarySecret_DEFINED
#define SOAP_TYPE__wst__BinarySecret_DEFINED

#define soap_default__wst__BinarySecret soap_default_wst__BinarySecretType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__BinarySecretType(struct soap*, const struct wst__BinarySecretType *);

#define soap_serialize__wst__BinarySecret soap_serialize_wst__BinarySecretType


#define soap__wst__BinarySecret2s soap_wst__BinarySecretType2s


#define soap_out__wst__BinarySecret soap_out_wst__BinarySecretType


#define soap_s2_wst__BinarySecret soap_s2wst__BinarySecretType


#define soap_in__wst__BinarySecret soap_in_wst__BinarySecretType


#define soap_instantiate__wst__BinarySecret soap_instantiate_wst__BinarySecretType


#define soap_new__wst__BinarySecret soap_new_wst__BinarySecretType


#define soap_new_req__wst__BinarySecret soap_new_req_wst__BinarySecretType


#define soap_new_set__wst__BinarySecret soap_new_set_wst__BinarySecretType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__BinarySecret(struct soap*, const struct wst__BinarySecretType *, const char*, const char*);

inline int soap_write__wst__BinarySecret(struct soap *soap, struct wst__BinarySecretType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__BinarySecret(soap, p), 0) || ::soap_put__wst__BinarySecret(soap, p, "wst:BinarySecret", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__BinarySecret(struct soap *soap, const char *URL, struct wst__BinarySecretType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__BinarySecret(soap, p), 0) || ::soap_put__wst__BinarySecret(soap, p, "wst:BinarySecret", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__BinarySecret(struct soap *soap, const char *URL, struct wst__BinarySecretType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__BinarySecret(soap, p), 0) || ::soap_put__wst__BinarySecret(soap, p, "wst:BinarySecret", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__BinarySecret(struct soap *soap, const char *URL, struct wst__BinarySecretType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__BinarySecret(soap, p), 0) || ::soap_put__wst__BinarySecret(soap, p, "wst:BinarySecret", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__BinarySecret soap_get_wst__BinarySecretType


#define soap_read__wst__BinarySecret soap_read_wst__BinarySecretType


#define soap_GET__wst__BinarySecret soap_GET_wst__BinarySecretType


#define soap_POST_recv__wst__BinarySecret soap_POST_recv_wst__BinarySecretType

#endif
/* _wst__RequestedSecurityToken is a typedef synonym of wst__RequestedSecurityTokenType */

#ifndef SOAP_TYPE__wst__RequestedSecurityToken_DEFINED
#define SOAP_TYPE__wst__RequestedSecurityToken_DEFINED

#define soap_default__wst__RequestedSecurityToken soap_default_wst__RequestedSecurityTokenType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestedSecurityTokenType(struct soap*, const struct wst__RequestedSecurityTokenType *);

#define soap_serialize__wst__RequestedSecurityToken soap_serialize_wst__RequestedSecurityTokenType


#define soap__wst__RequestedSecurityToken2s soap_wst__RequestedSecurityTokenType2s


#define soap_out__wst__RequestedSecurityToken soap_out_wst__RequestedSecurityTokenType


#define soap_s2_wst__RequestedSecurityToken soap_s2wst__RequestedSecurityTokenType


#define soap_in__wst__RequestedSecurityToken soap_in_wst__RequestedSecurityTokenType


#define soap_instantiate__wst__RequestedSecurityToken soap_instantiate_wst__RequestedSecurityTokenType


#define soap_new__wst__RequestedSecurityToken soap_new_wst__RequestedSecurityTokenType


#define soap_new_req__wst__RequestedSecurityToken soap_new_req_wst__RequestedSecurityTokenType


#define soap_new_set__wst__RequestedSecurityToken soap_new_set_wst__RequestedSecurityTokenType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestedSecurityToken(struct soap*, const struct wst__RequestedSecurityTokenType *, const char*, const char*);

inline int soap_write__wst__RequestedSecurityToken(struct soap *soap, struct wst__RequestedSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestedSecurityToken(soap, p), 0) || ::soap_put__wst__RequestedSecurityToken(soap, p, "wst:RequestedSecurityToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestedSecurityToken(struct soap *soap, const char *URL, struct wst__RequestedSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedSecurityToken(soap, p), 0) || ::soap_put__wst__RequestedSecurityToken(soap, p, "wst:RequestedSecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestedSecurityToken(struct soap *soap, const char *URL, struct wst__RequestedSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedSecurityToken(soap, p), 0) || ::soap_put__wst__RequestedSecurityToken(soap, p, "wst:RequestedSecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestedSecurityToken(struct soap *soap, const char *URL, struct wst__RequestedSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestedSecurityToken(soap, p), 0) || ::soap_put__wst__RequestedSecurityToken(soap, p, "wst:RequestedSecurityToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestedSecurityToken soap_get_wst__RequestedSecurityTokenType


#define soap_read__wst__RequestedSecurityToken soap_read_wst__RequestedSecurityTokenType


#define soap_GET__wst__RequestedSecurityToken soap_GET_wst__RequestedSecurityTokenType


#define soap_POST_recv__wst__RequestedSecurityToken soap_POST_recv_wst__RequestedSecurityTokenType

#endif
/* _wst__RequestSecurityTokenResponse is a typedef synonym of wst__RequestSecurityTokenResponseType */

#ifndef SOAP_TYPE__wst__RequestSecurityTokenResponse_DEFINED
#define SOAP_TYPE__wst__RequestSecurityTokenResponse_DEFINED

#define soap_default__wst__RequestSecurityTokenResponse soap_default_wst__RequestSecurityTokenResponseType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestSecurityTokenResponseType(struct soap*, const struct wst__RequestSecurityTokenResponseType *);

#define soap_serialize__wst__RequestSecurityTokenResponse soap_serialize_wst__RequestSecurityTokenResponseType


#define soap__wst__RequestSecurityTokenResponse2s soap_wst__RequestSecurityTokenResponseType2s


#define soap_out__wst__RequestSecurityTokenResponse soap_out_wst__RequestSecurityTokenResponseType


#define soap_s2_wst__RequestSecurityTokenResponse soap_s2wst__RequestSecurityTokenResponseType


#define soap_in__wst__RequestSecurityTokenResponse soap_in_wst__RequestSecurityTokenResponseType


#define soap_instantiate__wst__RequestSecurityTokenResponse soap_instantiate_wst__RequestSecurityTokenResponseType


#define soap_new__wst__RequestSecurityTokenResponse soap_new_wst__RequestSecurityTokenResponseType


#define soap_new_req__wst__RequestSecurityTokenResponse soap_new_req_wst__RequestSecurityTokenResponseType


#define soap_new_set__wst__RequestSecurityTokenResponse soap_new_set_wst__RequestSecurityTokenResponseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestSecurityTokenResponse(struct soap*, const struct wst__RequestSecurityTokenResponseType *, const char*, const char*);

inline int soap_write__wst__RequestSecurityTokenResponse(struct soap *soap, struct wst__RequestSecurityTokenResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestSecurityTokenResponse(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenResponse(soap, p, "wst:RequestSecurityTokenResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestSecurityTokenResponse(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityTokenResponse(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenResponse(soap, p, "wst:RequestSecurityTokenResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestSecurityTokenResponse(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityTokenResponse(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenResponse(soap, p, "wst:RequestSecurityTokenResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestSecurityTokenResponse(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityTokenResponse(soap, p), 0) || ::soap_put__wst__RequestSecurityTokenResponse(soap, p, "wst:RequestSecurityTokenResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestSecurityTokenResponse soap_get_wst__RequestSecurityTokenResponseType


#define soap_read__wst__RequestSecurityTokenResponse soap_read_wst__RequestSecurityTokenResponseType


#define soap_GET__wst__RequestSecurityTokenResponse soap_GET_wst__RequestSecurityTokenResponseType


#define soap_POST_recv__wst__RequestSecurityTokenResponse soap_POST_recv_wst__RequestSecurityTokenResponseType

#endif
/* _wst__RequestSecurityToken is a typedef synonym of wst__RequestSecurityTokenType */

#ifndef SOAP_TYPE__wst__RequestSecurityToken_DEFINED
#define SOAP_TYPE__wst__RequestSecurityToken_DEFINED

#define soap_default__wst__RequestSecurityToken soap_default_wst__RequestSecurityTokenType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestSecurityTokenType(struct soap*, const struct wst__RequestSecurityTokenType *);

#define soap_serialize__wst__RequestSecurityToken soap_serialize_wst__RequestSecurityTokenType


#define soap__wst__RequestSecurityToken2s soap_wst__RequestSecurityTokenType2s


#define soap_out__wst__RequestSecurityToken soap_out_wst__RequestSecurityTokenType


#define soap_s2_wst__RequestSecurityToken soap_s2wst__RequestSecurityTokenType


#define soap_in__wst__RequestSecurityToken soap_in_wst__RequestSecurityTokenType


#define soap_instantiate__wst__RequestSecurityToken soap_instantiate_wst__RequestSecurityTokenType


#define soap_new__wst__RequestSecurityToken soap_new_wst__RequestSecurityTokenType


#define soap_new_req__wst__RequestSecurityToken soap_new_req_wst__RequestSecurityTokenType


#define soap_new_set__wst__RequestSecurityToken soap_new_set_wst__RequestSecurityTokenType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestSecurityToken(struct soap*, const struct wst__RequestSecurityTokenType *, const char*, const char*);

inline int soap_write__wst__RequestSecurityToken(struct soap *soap, struct wst__RequestSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wst__RequestSecurityToken(soap, p), 0) || ::soap_put__wst__RequestSecurityToken(soap, p, "wst:RequestSecurityToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestSecurityToken(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityToken(soap, p), 0) || ::soap_put__wst__RequestSecurityToken(soap, p, "wst:RequestSecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestSecurityToken(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityToken(soap, p), 0) || ::soap_put__wst__RequestSecurityToken(soap, p, "wst:RequestSecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestSecurityToken(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wst__RequestSecurityToken(soap, p), 0) || ::soap_put__wst__RequestSecurityToken(soap, p, "wst:RequestSecurityToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestSecurityToken soap_get_wst__RequestSecurityTokenType


#define soap_read__wst__RequestSecurityToken soap_read_wst__RequestSecurityTokenType


#define soap_GET__wst__RequestSecurityToken soap_GET_wst__RequestSecurityTokenType


#define soap_POST_recv__wst__RequestSecurityToken soap_POST_recv_wst__RequestSecurityTokenType

#endif

#ifndef SOAP_TYPE_wst__ParticipantType_DEFINED
#define SOAP_TYPE_wst__ParticipantType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__ParticipantType(struct soap*, struct wst__ParticipantType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__ParticipantType(struct soap*, const struct wst__ParticipantType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__ParticipantType(struct soap*, const char*, int, const struct wst__ParticipantType *, const char*);
SOAP_FMAC3 struct wst__ParticipantType * SOAP_FMAC4 soap_in_wst__ParticipantType(struct soap*, const char*, struct wst__ParticipantType *, const char*);
SOAP_FMAC1 struct wst__ParticipantType * SOAP_FMAC2 soap_instantiate_wst__ParticipantType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__ParticipantType * soap_new_wst__ParticipantType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__ParticipantType(soap, n, NULL, NULL, NULL);
}

inline struct wst__ParticipantType * soap_new_req_wst__ParticipantType(
	struct soap *soap)
{
	struct wst__ParticipantType *_p = ::soap_new_wst__ParticipantType(soap);
	if (_p)
	{	::soap_default_wst__ParticipantType(soap, _p);
	}
	return _p;
}

inline struct wst__ParticipantType * soap_new_set_wst__ParticipantType(
	struct soap *soap)
{
	struct wst__ParticipantType *_p = ::soap_new_wst__ParticipantType(soap);
	if (_p)
	{	::soap_default_wst__ParticipantType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__ParticipantType(struct soap*, const struct wst__ParticipantType *, const char*, const char*);

inline int soap_write_wst__ParticipantType(struct soap *soap, struct wst__ParticipantType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__ParticipantType(soap, p), 0) || ::soap_put_wst__ParticipantType(soap, p, "wst:ParticipantType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__ParticipantType(struct soap *soap, const char *URL, struct wst__ParticipantType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ParticipantType(soap, p), 0) || ::soap_put_wst__ParticipantType(soap, p, "wst:ParticipantType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__ParticipantType(struct soap *soap, const char *URL, struct wst__ParticipantType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ParticipantType(soap, p), 0) || ::soap_put_wst__ParticipantType(soap, p, "wst:ParticipantType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__ParticipantType(struct soap *soap, const char *URL, struct wst__ParticipantType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ParticipantType(soap, p), 0) || ::soap_put_wst__ParticipantType(soap, p, "wst:ParticipantType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__ParticipantType * SOAP_FMAC4 soap_get_wst__ParticipantType(struct soap*, struct wst__ParticipantType *, const char*, const char*);

inline int soap_read_wst__ParticipantType(struct soap *soap, struct wst__ParticipantType *p)
{
	if (p)
	{	::soap_default_wst__ParticipantType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__ParticipantType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__ParticipantType(struct soap *soap, const char *URL, struct wst__ParticipantType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__ParticipantType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__ParticipantType(struct soap *soap, struct wst__ParticipantType *p)
{
	if (::soap_read_wst__ParticipantType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__ParticipantsType_DEFINED
#define SOAP_TYPE_wst__ParticipantsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__ParticipantsType(struct soap*, struct wst__ParticipantsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__ParticipantsType(struct soap*, const struct wst__ParticipantsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__ParticipantsType(struct soap*, const char*, int, const struct wst__ParticipantsType *, const char*);
SOAP_FMAC3 struct wst__ParticipantsType * SOAP_FMAC4 soap_in_wst__ParticipantsType(struct soap*, const char*, struct wst__ParticipantsType *, const char*);
SOAP_FMAC1 struct wst__ParticipantsType * SOAP_FMAC2 soap_instantiate_wst__ParticipantsType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__ParticipantsType * soap_new_wst__ParticipantsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__ParticipantsType(soap, n, NULL, NULL, NULL);
}

inline struct wst__ParticipantsType * soap_new_req_wst__ParticipantsType(
	struct soap *soap,
	int __sizeParticipant,
	struct wst__ParticipantType *Participant)
{
	struct wst__ParticipantsType *_p = ::soap_new_wst__ParticipantsType(soap);
	if (_p)
	{	::soap_default_wst__ParticipantsType(soap, _p);
		_p->__sizeParticipant = __sizeParticipant;
		_p->Participant = Participant;
	}
	return _p;
}

inline struct wst__ParticipantsType * soap_new_set_wst__ParticipantsType(
	struct soap *soap,
	struct wst__ParticipantType *Primary,
	int __sizeParticipant,
	struct wst__ParticipantType *Participant)
{
	struct wst__ParticipantsType *_p = ::soap_new_wst__ParticipantsType(soap);
	if (_p)
	{	::soap_default_wst__ParticipantsType(soap, _p);
		_p->Primary = Primary;
		_p->__sizeParticipant = __sizeParticipant;
		_p->Participant = Participant;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__ParticipantsType(struct soap*, const struct wst__ParticipantsType *, const char*, const char*);

inline int soap_write_wst__ParticipantsType(struct soap *soap, struct wst__ParticipantsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__ParticipantsType(soap, p), 0) || ::soap_put_wst__ParticipantsType(soap, p, "wst:ParticipantsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__ParticipantsType(struct soap *soap, const char *URL, struct wst__ParticipantsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ParticipantsType(soap, p), 0) || ::soap_put_wst__ParticipantsType(soap, p, "wst:ParticipantsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__ParticipantsType(struct soap *soap, const char *URL, struct wst__ParticipantsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ParticipantsType(soap, p), 0) || ::soap_put_wst__ParticipantsType(soap, p, "wst:ParticipantsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__ParticipantsType(struct soap *soap, const char *URL, struct wst__ParticipantsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ParticipantsType(soap, p), 0) || ::soap_put_wst__ParticipantsType(soap, p, "wst:ParticipantsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__ParticipantsType * SOAP_FMAC4 soap_get_wst__ParticipantsType(struct soap*, struct wst__ParticipantsType *, const char*, const char*);

inline int soap_read_wst__ParticipantsType(struct soap *soap, struct wst__ParticipantsType *p)
{
	if (p)
	{	::soap_default_wst__ParticipantsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__ParticipantsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__ParticipantsType(struct soap *soap, const char *URL, struct wst__ParticipantsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__ParticipantsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__ParticipantsType(struct soap *soap, struct wst__ParticipantsType *p)
{
	if (::soap_read_wst__ParticipantsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__DelegateToType_DEFINED
#define SOAP_TYPE_wst__DelegateToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__DelegateToType(struct soap*, struct wst__DelegateToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__DelegateToType(struct soap*, const struct wst__DelegateToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__DelegateToType(struct soap*, const char*, int, const struct wst__DelegateToType *, const char*);
SOAP_FMAC3 struct wst__DelegateToType * SOAP_FMAC4 soap_in_wst__DelegateToType(struct soap*, const char*, struct wst__DelegateToType *, const char*);
SOAP_FMAC1 struct wst__DelegateToType * SOAP_FMAC2 soap_instantiate_wst__DelegateToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__DelegateToType * soap_new_wst__DelegateToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__DelegateToType(soap, n, NULL, NULL, NULL);
}

inline struct wst__DelegateToType * soap_new_req_wst__DelegateToType(
	struct soap *soap)
{
	struct wst__DelegateToType *_p = ::soap_new_wst__DelegateToType(soap);
	if (_p)
	{	::soap_default_wst__DelegateToType(soap, _p);
	}
	return _p;
}

inline struct wst__DelegateToType * soap_new_set_wst__DelegateToType(
	struct soap *soap)
{
	struct wst__DelegateToType *_p = ::soap_new_wst__DelegateToType(soap);
	if (_p)
	{	::soap_default_wst__DelegateToType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__DelegateToType(struct soap*, const struct wst__DelegateToType *, const char*, const char*);

inline int soap_write_wst__DelegateToType(struct soap *soap, struct wst__DelegateToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__DelegateToType(soap, p), 0) || ::soap_put_wst__DelegateToType(soap, p, "wst:DelegateToType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__DelegateToType(struct soap *soap, const char *URL, struct wst__DelegateToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__DelegateToType(soap, p), 0) || ::soap_put_wst__DelegateToType(soap, p, "wst:DelegateToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__DelegateToType(struct soap *soap, const char *URL, struct wst__DelegateToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__DelegateToType(soap, p), 0) || ::soap_put_wst__DelegateToType(soap, p, "wst:DelegateToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__DelegateToType(struct soap *soap, const char *URL, struct wst__DelegateToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__DelegateToType(soap, p), 0) || ::soap_put_wst__DelegateToType(soap, p, "wst:DelegateToType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__DelegateToType * SOAP_FMAC4 soap_get_wst__DelegateToType(struct soap*, struct wst__DelegateToType *, const char*, const char*);

inline int soap_read_wst__DelegateToType(struct soap *soap, struct wst__DelegateToType *p)
{
	if (p)
	{	::soap_default_wst__DelegateToType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__DelegateToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__DelegateToType(struct soap *soap, const char *URL, struct wst__DelegateToType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__DelegateToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__DelegateToType(struct soap *soap, struct wst__DelegateToType *p)
{
	if (::soap_read_wst__DelegateToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__UseKeyType_DEFINED
#define SOAP_TYPE_wst__UseKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__UseKeyType(struct soap*, struct wst__UseKeyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__UseKeyType(struct soap*, const struct wst__UseKeyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__UseKeyType(struct soap*, const char*, int, const struct wst__UseKeyType *, const char*);
SOAP_FMAC3 struct wst__UseKeyType * SOAP_FMAC4 soap_in_wst__UseKeyType(struct soap*, const char*, struct wst__UseKeyType *, const char*);
SOAP_FMAC1 struct wst__UseKeyType * SOAP_FMAC2 soap_instantiate_wst__UseKeyType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__UseKeyType * soap_new_wst__UseKeyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__UseKeyType(soap, n, NULL, NULL, NULL);
}

inline struct wst__UseKeyType * soap_new_req_wst__UseKeyType(
	struct soap *soap)
{
	struct wst__UseKeyType *_p = ::soap_new_wst__UseKeyType(soap);
	if (_p)
	{	::soap_default_wst__UseKeyType(soap, _p);
	}
	return _p;
}

inline struct wst__UseKeyType * soap_new_set_wst__UseKeyType(
	struct soap *soap,
	char *Sig)
{
	struct wst__UseKeyType *_p = ::soap_new_wst__UseKeyType(soap);
	if (_p)
	{	::soap_default_wst__UseKeyType(soap, _p);
		_p->Sig = Sig;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__UseKeyType(struct soap*, const struct wst__UseKeyType *, const char*, const char*);

inline int soap_write_wst__UseKeyType(struct soap *soap, struct wst__UseKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__UseKeyType(soap, p), 0) || ::soap_put_wst__UseKeyType(soap, p, "wst:UseKeyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__UseKeyType(struct soap *soap, const char *URL, struct wst__UseKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__UseKeyType(soap, p), 0) || ::soap_put_wst__UseKeyType(soap, p, "wst:UseKeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__UseKeyType(struct soap *soap, const char *URL, struct wst__UseKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__UseKeyType(soap, p), 0) || ::soap_put_wst__UseKeyType(soap, p, "wst:UseKeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__UseKeyType(struct soap *soap, const char *URL, struct wst__UseKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__UseKeyType(soap, p), 0) || ::soap_put_wst__UseKeyType(soap, p, "wst:UseKeyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__UseKeyType * SOAP_FMAC4 soap_get_wst__UseKeyType(struct soap*, struct wst__UseKeyType *, const char*, const char*);

inline int soap_read_wst__UseKeyType(struct soap *soap, struct wst__UseKeyType *p)
{
	if (p)
	{	::soap_default_wst__UseKeyType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__UseKeyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__UseKeyType(struct soap *soap, const char *URL, struct wst__UseKeyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__UseKeyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__UseKeyType(struct soap *soap, struct wst__UseKeyType *p)
{
	if (::soap_read_wst__UseKeyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__ProofEncryptionType_DEFINED
#define SOAP_TYPE_wst__ProofEncryptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__ProofEncryptionType(struct soap*, struct wst__ProofEncryptionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__ProofEncryptionType(struct soap*, const struct wst__ProofEncryptionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__ProofEncryptionType(struct soap*, const char*, int, const struct wst__ProofEncryptionType *, const char*);
SOAP_FMAC3 struct wst__ProofEncryptionType * SOAP_FMAC4 soap_in_wst__ProofEncryptionType(struct soap*, const char*, struct wst__ProofEncryptionType *, const char*);
SOAP_FMAC1 struct wst__ProofEncryptionType * SOAP_FMAC2 soap_instantiate_wst__ProofEncryptionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__ProofEncryptionType * soap_new_wst__ProofEncryptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__ProofEncryptionType(soap, n, NULL, NULL, NULL);
}

inline struct wst__ProofEncryptionType * soap_new_req_wst__ProofEncryptionType(
	struct soap *soap)
{
	struct wst__ProofEncryptionType *_p = ::soap_new_wst__ProofEncryptionType(soap);
	if (_p)
	{	::soap_default_wst__ProofEncryptionType(soap, _p);
	}
	return _p;
}

inline struct wst__ProofEncryptionType * soap_new_set_wst__ProofEncryptionType(
	struct soap *soap)
{
	struct wst__ProofEncryptionType *_p = ::soap_new_wst__ProofEncryptionType(soap);
	if (_p)
	{	::soap_default_wst__ProofEncryptionType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__ProofEncryptionType(struct soap*, const struct wst__ProofEncryptionType *, const char*, const char*);

inline int soap_write_wst__ProofEncryptionType(struct soap *soap, struct wst__ProofEncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__ProofEncryptionType(soap, p), 0) || ::soap_put_wst__ProofEncryptionType(soap, p, "wst:ProofEncryptionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__ProofEncryptionType(struct soap *soap, const char *URL, struct wst__ProofEncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ProofEncryptionType(soap, p), 0) || ::soap_put_wst__ProofEncryptionType(soap, p, "wst:ProofEncryptionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__ProofEncryptionType(struct soap *soap, const char *URL, struct wst__ProofEncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ProofEncryptionType(soap, p), 0) || ::soap_put_wst__ProofEncryptionType(soap, p, "wst:ProofEncryptionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__ProofEncryptionType(struct soap *soap, const char *URL, struct wst__ProofEncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ProofEncryptionType(soap, p), 0) || ::soap_put_wst__ProofEncryptionType(soap, p, "wst:ProofEncryptionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__ProofEncryptionType * SOAP_FMAC4 soap_get_wst__ProofEncryptionType(struct soap*, struct wst__ProofEncryptionType *, const char*, const char*);

inline int soap_read_wst__ProofEncryptionType(struct soap *soap, struct wst__ProofEncryptionType *p)
{
	if (p)
	{	::soap_default_wst__ProofEncryptionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__ProofEncryptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__ProofEncryptionType(struct soap *soap, const char *URL, struct wst__ProofEncryptionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__ProofEncryptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__ProofEncryptionType(struct soap *soap, struct wst__ProofEncryptionType *p)
{
	if (::soap_read_wst__ProofEncryptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__EncryptionType_DEFINED
#define SOAP_TYPE_wst__EncryptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__EncryptionType(struct soap*, struct wst__EncryptionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__EncryptionType(struct soap*, const struct wst__EncryptionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__EncryptionType(struct soap*, const char*, int, const struct wst__EncryptionType *, const char*);
SOAP_FMAC3 struct wst__EncryptionType * SOAP_FMAC4 soap_in_wst__EncryptionType(struct soap*, const char*, struct wst__EncryptionType *, const char*);
SOAP_FMAC1 struct wst__EncryptionType * SOAP_FMAC2 soap_instantiate_wst__EncryptionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__EncryptionType * soap_new_wst__EncryptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__EncryptionType(soap, n, NULL, NULL, NULL);
}

inline struct wst__EncryptionType * soap_new_req_wst__EncryptionType(
	struct soap *soap)
{
	struct wst__EncryptionType *_p = ::soap_new_wst__EncryptionType(soap);
	if (_p)
	{	::soap_default_wst__EncryptionType(soap, _p);
	}
	return _p;
}

inline struct wst__EncryptionType * soap_new_set_wst__EncryptionType(
	struct soap *soap)
{
	struct wst__EncryptionType *_p = ::soap_new_wst__EncryptionType(soap);
	if (_p)
	{	::soap_default_wst__EncryptionType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__EncryptionType(struct soap*, const struct wst__EncryptionType *, const char*, const char*);

inline int soap_write_wst__EncryptionType(struct soap *soap, struct wst__EncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__EncryptionType(soap, p), 0) || ::soap_put_wst__EncryptionType(soap, p, "wst:EncryptionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__EncryptionType(struct soap *soap, const char *URL, struct wst__EncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__EncryptionType(soap, p), 0) || ::soap_put_wst__EncryptionType(soap, p, "wst:EncryptionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__EncryptionType(struct soap *soap, const char *URL, struct wst__EncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__EncryptionType(soap, p), 0) || ::soap_put_wst__EncryptionType(soap, p, "wst:EncryptionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__EncryptionType(struct soap *soap, const char *URL, struct wst__EncryptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__EncryptionType(soap, p), 0) || ::soap_put_wst__EncryptionType(soap, p, "wst:EncryptionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__EncryptionType * SOAP_FMAC4 soap_get_wst__EncryptionType(struct soap*, struct wst__EncryptionType *, const char*, const char*);

inline int soap_read_wst__EncryptionType(struct soap *soap, struct wst__EncryptionType *p)
{
	if (p)
	{	::soap_default_wst__EncryptionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__EncryptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__EncryptionType(struct soap *soap, const char *URL, struct wst__EncryptionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__EncryptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__EncryptionType(struct soap *soap, struct wst__EncryptionType *p)
{
	if (::soap_read_wst__EncryptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__OnBehalfOfType_DEFINED
#define SOAP_TYPE_wst__OnBehalfOfType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__OnBehalfOfType(struct soap*, struct wst__OnBehalfOfType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__OnBehalfOfType(struct soap*, const struct wst__OnBehalfOfType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__OnBehalfOfType(struct soap*, const char*, int, const struct wst__OnBehalfOfType *, const char*);
SOAP_FMAC3 struct wst__OnBehalfOfType * SOAP_FMAC4 soap_in_wst__OnBehalfOfType(struct soap*, const char*, struct wst__OnBehalfOfType *, const char*);
SOAP_FMAC1 struct wst__OnBehalfOfType * SOAP_FMAC2 soap_instantiate_wst__OnBehalfOfType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__OnBehalfOfType * soap_new_wst__OnBehalfOfType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__OnBehalfOfType(soap, n, NULL, NULL, NULL);
}

inline struct wst__OnBehalfOfType * soap_new_req_wst__OnBehalfOfType(
	struct soap *soap)
{
	struct wst__OnBehalfOfType *_p = ::soap_new_wst__OnBehalfOfType(soap);
	if (_p)
	{	::soap_default_wst__OnBehalfOfType(soap, _p);
	}
	return _p;
}

inline struct wst__OnBehalfOfType * soap_new_set_wst__OnBehalfOfType(
	struct soap *soap)
{
	struct wst__OnBehalfOfType *_p = ::soap_new_wst__OnBehalfOfType(soap);
	if (_p)
	{	::soap_default_wst__OnBehalfOfType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__OnBehalfOfType(struct soap*, const struct wst__OnBehalfOfType *, const char*, const char*);

inline int soap_write_wst__OnBehalfOfType(struct soap *soap, struct wst__OnBehalfOfType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__OnBehalfOfType(soap, p), 0) || ::soap_put_wst__OnBehalfOfType(soap, p, "wst:OnBehalfOfType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__OnBehalfOfType(struct soap *soap, const char *URL, struct wst__OnBehalfOfType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__OnBehalfOfType(soap, p), 0) || ::soap_put_wst__OnBehalfOfType(soap, p, "wst:OnBehalfOfType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__OnBehalfOfType(struct soap *soap, const char *URL, struct wst__OnBehalfOfType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__OnBehalfOfType(soap, p), 0) || ::soap_put_wst__OnBehalfOfType(soap, p, "wst:OnBehalfOfType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__OnBehalfOfType(struct soap *soap, const char *URL, struct wst__OnBehalfOfType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__OnBehalfOfType(soap, p), 0) || ::soap_put_wst__OnBehalfOfType(soap, p, "wst:OnBehalfOfType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__OnBehalfOfType * SOAP_FMAC4 soap_get_wst__OnBehalfOfType(struct soap*, struct wst__OnBehalfOfType *, const char*, const char*);

inline int soap_read_wst__OnBehalfOfType(struct soap *soap, struct wst__OnBehalfOfType *p)
{
	if (p)
	{	::soap_default_wst__OnBehalfOfType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__OnBehalfOfType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__OnBehalfOfType(struct soap *soap, const char *URL, struct wst__OnBehalfOfType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__OnBehalfOfType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__OnBehalfOfType(struct soap *soap, struct wst__OnBehalfOfType *p)
{
	if (::soap_read_wst__OnBehalfOfType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__AuthenticatorType_DEFINED
#define SOAP_TYPE_wst__AuthenticatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__AuthenticatorType(struct soap*, struct wst__AuthenticatorType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__AuthenticatorType(struct soap*, const struct wst__AuthenticatorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__AuthenticatorType(struct soap*, const char*, int, const struct wst__AuthenticatorType *, const char*);
SOAP_FMAC3 struct wst__AuthenticatorType * SOAP_FMAC4 soap_in_wst__AuthenticatorType(struct soap*, const char*, struct wst__AuthenticatorType *, const char*);
SOAP_FMAC1 struct wst__AuthenticatorType * SOAP_FMAC2 soap_instantiate_wst__AuthenticatorType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__AuthenticatorType * soap_new_wst__AuthenticatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__AuthenticatorType(soap, n, NULL, NULL, NULL);
}

inline struct wst__AuthenticatorType * soap_new_req_wst__AuthenticatorType(
	struct soap *soap)
{
	struct wst__AuthenticatorType *_p = ::soap_new_wst__AuthenticatorType(soap);
	if (_p)
	{	::soap_default_wst__AuthenticatorType(soap, _p);
	}
	return _p;
}

inline struct wst__AuthenticatorType * soap_new_set_wst__AuthenticatorType(
	struct soap *soap,
	char *CombinedHash)
{
	struct wst__AuthenticatorType *_p = ::soap_new_wst__AuthenticatorType(soap);
	if (_p)
	{	::soap_default_wst__AuthenticatorType(soap, _p);
		_p->CombinedHash = CombinedHash;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__AuthenticatorType(struct soap*, const struct wst__AuthenticatorType *, const char*, const char*);

inline int soap_write_wst__AuthenticatorType(struct soap *soap, struct wst__AuthenticatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__AuthenticatorType(soap, p), 0) || ::soap_put_wst__AuthenticatorType(soap, p, "wst:AuthenticatorType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__AuthenticatorType(struct soap *soap, const char *URL, struct wst__AuthenticatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__AuthenticatorType(soap, p), 0) || ::soap_put_wst__AuthenticatorType(soap, p, "wst:AuthenticatorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__AuthenticatorType(struct soap *soap, const char *URL, struct wst__AuthenticatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__AuthenticatorType(soap, p), 0) || ::soap_put_wst__AuthenticatorType(soap, p, "wst:AuthenticatorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__AuthenticatorType(struct soap *soap, const char *URL, struct wst__AuthenticatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__AuthenticatorType(soap, p), 0) || ::soap_put_wst__AuthenticatorType(soap, p, "wst:AuthenticatorType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__AuthenticatorType * SOAP_FMAC4 soap_get_wst__AuthenticatorType(struct soap*, struct wst__AuthenticatorType *, const char*, const char*);

inline int soap_read_wst__AuthenticatorType(struct soap *soap, struct wst__AuthenticatorType *p)
{
	if (p)
	{	::soap_default_wst__AuthenticatorType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__AuthenticatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__AuthenticatorType(struct soap *soap, const char *URL, struct wst__AuthenticatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__AuthenticatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__AuthenticatorType(struct soap *soap, struct wst__AuthenticatorType *p)
{
	if (::soap_read_wst__AuthenticatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__KeyExchangeTokenType_DEFINED
#define SOAP_TYPE_wst__KeyExchangeTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__KeyExchangeTokenType(struct soap*, struct wst__KeyExchangeTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__KeyExchangeTokenType(struct soap*, const struct wst__KeyExchangeTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__KeyExchangeTokenType(struct soap*, const char*, int, const struct wst__KeyExchangeTokenType *, const char*);
SOAP_FMAC3 struct wst__KeyExchangeTokenType * SOAP_FMAC4 soap_in_wst__KeyExchangeTokenType(struct soap*, const char*, struct wst__KeyExchangeTokenType *, const char*);
SOAP_FMAC1 struct wst__KeyExchangeTokenType * SOAP_FMAC2 soap_instantiate_wst__KeyExchangeTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__KeyExchangeTokenType * soap_new_wst__KeyExchangeTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__KeyExchangeTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wst__KeyExchangeTokenType * soap_new_req_wst__KeyExchangeTokenType(
	struct soap *soap)
{
	struct wst__KeyExchangeTokenType *_p = ::soap_new_wst__KeyExchangeTokenType(soap);
	if (_p)
	{	::soap_default_wst__KeyExchangeTokenType(soap, _p);
	}
	return _p;
}

inline struct wst__KeyExchangeTokenType * soap_new_set_wst__KeyExchangeTokenType(
	struct soap *soap)
{
	struct wst__KeyExchangeTokenType *_p = ::soap_new_wst__KeyExchangeTokenType(soap);
	if (_p)
	{	::soap_default_wst__KeyExchangeTokenType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__KeyExchangeTokenType(struct soap*, const struct wst__KeyExchangeTokenType *, const char*, const char*);

inline int soap_write_wst__KeyExchangeTokenType(struct soap *soap, struct wst__KeyExchangeTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__KeyExchangeTokenType(soap, p), 0) || ::soap_put_wst__KeyExchangeTokenType(soap, p, "wst:KeyExchangeTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__KeyExchangeTokenType(struct soap *soap, const char *URL, struct wst__KeyExchangeTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__KeyExchangeTokenType(soap, p), 0) || ::soap_put_wst__KeyExchangeTokenType(soap, p, "wst:KeyExchangeTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__KeyExchangeTokenType(struct soap *soap, const char *URL, struct wst__KeyExchangeTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__KeyExchangeTokenType(soap, p), 0) || ::soap_put_wst__KeyExchangeTokenType(soap, p, "wst:KeyExchangeTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__KeyExchangeTokenType(struct soap *soap, const char *URL, struct wst__KeyExchangeTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__KeyExchangeTokenType(soap, p), 0) || ::soap_put_wst__KeyExchangeTokenType(soap, p, "wst:KeyExchangeTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__KeyExchangeTokenType * SOAP_FMAC4 soap_get_wst__KeyExchangeTokenType(struct soap*, struct wst__KeyExchangeTokenType *, const char*, const char*);

inline int soap_read_wst__KeyExchangeTokenType(struct soap *soap, struct wst__KeyExchangeTokenType *p)
{
	if (p)
	{	::soap_default_wst__KeyExchangeTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__KeyExchangeTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__KeyExchangeTokenType(struct soap *soap, const char *URL, struct wst__KeyExchangeTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__KeyExchangeTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__KeyExchangeTokenType(struct soap *soap, struct wst__KeyExchangeTokenType *p)
{
	if (::soap_read_wst__KeyExchangeTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RequestKETType_DEFINED
#define SOAP_TYPE_wst__RequestKETType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RequestKETType(struct soap*, struct wst__RequestKETType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestKETType(struct soap*, const struct wst__RequestKETType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RequestKETType(struct soap*, const char*, int, const struct wst__RequestKETType *, const char*);
SOAP_FMAC3 struct wst__RequestKETType * SOAP_FMAC4 soap_in_wst__RequestKETType(struct soap*, const char*, struct wst__RequestKETType *, const char*);
SOAP_FMAC1 struct wst__RequestKETType * SOAP_FMAC2 soap_instantiate_wst__RequestKETType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RequestKETType * soap_new_wst__RequestKETType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RequestKETType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RequestKETType * soap_new_req_wst__RequestKETType(
	struct soap *soap)
{
	struct wst__RequestKETType *_p = ::soap_new_wst__RequestKETType(soap);
	if (_p)
	{	::soap_default_wst__RequestKETType(soap, _p);
	}
	return _p;
}

inline struct wst__RequestKETType * soap_new_set_wst__RequestKETType(
	struct soap *soap)
{
	struct wst__RequestKETType *_p = ::soap_new_wst__RequestKETType(soap);
	if (_p)
	{	::soap_default_wst__RequestKETType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RequestKETType(struct soap*, const struct wst__RequestKETType *, const char*, const char*);

inline int soap_write_wst__RequestKETType(struct soap *soap, struct wst__RequestKETType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RequestKETType(soap, p), 0) || ::soap_put_wst__RequestKETType(soap, p, "wst:RequestKETType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RequestKETType(struct soap *soap, const char *URL, struct wst__RequestKETType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestKETType(soap, p), 0) || ::soap_put_wst__RequestKETType(soap, p, "wst:RequestKETType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RequestKETType(struct soap *soap, const char *URL, struct wst__RequestKETType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestKETType(soap, p), 0) || ::soap_put_wst__RequestKETType(soap, p, "wst:RequestKETType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RequestKETType(struct soap *soap, const char *URL, struct wst__RequestKETType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestKETType(soap, p), 0) || ::soap_put_wst__RequestKETType(soap, p, "wst:RequestKETType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RequestKETType * SOAP_FMAC4 soap_get_wst__RequestKETType(struct soap*, struct wst__RequestKETType *, const char*, const char*);

inline int soap_read_wst__RequestKETType(struct soap *soap, struct wst__RequestKETType *p)
{
	if (p)
	{	::soap_default_wst__RequestKETType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RequestKETType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RequestKETType(struct soap *soap, const char *URL, struct wst__RequestKETType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RequestKETType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RequestKETType(struct soap *soap, struct wst__RequestKETType *p)
{
	if (::soap_read_wst__RequestKETType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__BinaryExchangeType_DEFINED
#define SOAP_TYPE_wst__BinaryExchangeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__BinaryExchangeType(struct soap*, struct wst__BinaryExchangeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__BinaryExchangeType(struct soap*, const struct wst__BinaryExchangeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__BinaryExchangeType(struct soap*, const char*, int, const struct wst__BinaryExchangeType *, const char*);
SOAP_FMAC3 struct wst__BinaryExchangeType * SOAP_FMAC4 soap_in_wst__BinaryExchangeType(struct soap*, const char*, struct wst__BinaryExchangeType *, const char*);
SOAP_FMAC1 struct wst__BinaryExchangeType * SOAP_FMAC2 soap_instantiate_wst__BinaryExchangeType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__BinaryExchangeType * soap_new_wst__BinaryExchangeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__BinaryExchangeType(soap, n, NULL, NULL, NULL);
}

inline struct wst__BinaryExchangeType * soap_new_req_wst__BinaryExchangeType(
	struct soap *soap,
	char *ValueType,
	char *EncodingType)
{
	struct wst__BinaryExchangeType *_p = ::soap_new_wst__BinaryExchangeType(soap);
	if (_p)
	{	::soap_default_wst__BinaryExchangeType(soap, _p);
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}

inline struct wst__BinaryExchangeType * soap_new_set_wst__BinaryExchangeType(
	struct soap *soap,
	char *__item,
	char *ValueType,
	char *EncodingType)
{
	struct wst__BinaryExchangeType *_p = ::soap_new_wst__BinaryExchangeType(soap);
	if (_p)
	{	::soap_default_wst__BinaryExchangeType(soap, _p);
		_p->__item = __item;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__BinaryExchangeType(struct soap*, const struct wst__BinaryExchangeType *, const char*, const char*);

inline int soap_write_wst__BinaryExchangeType(struct soap *soap, struct wst__BinaryExchangeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__BinaryExchangeType(soap, p), 0) || ::soap_put_wst__BinaryExchangeType(soap, p, "wst:BinaryExchangeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__BinaryExchangeType(struct soap *soap, const char *URL, struct wst__BinaryExchangeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__BinaryExchangeType(soap, p), 0) || ::soap_put_wst__BinaryExchangeType(soap, p, "wst:BinaryExchangeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__BinaryExchangeType(struct soap *soap, const char *URL, struct wst__BinaryExchangeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__BinaryExchangeType(soap, p), 0) || ::soap_put_wst__BinaryExchangeType(soap, p, "wst:BinaryExchangeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__BinaryExchangeType(struct soap *soap, const char *URL, struct wst__BinaryExchangeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__BinaryExchangeType(soap, p), 0) || ::soap_put_wst__BinaryExchangeType(soap, p, "wst:BinaryExchangeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__BinaryExchangeType * SOAP_FMAC4 soap_get_wst__BinaryExchangeType(struct soap*, struct wst__BinaryExchangeType *, const char*, const char*);

inline int soap_read_wst__BinaryExchangeType(struct soap *soap, struct wst__BinaryExchangeType *p)
{
	if (p)
	{	::soap_default_wst__BinaryExchangeType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__BinaryExchangeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__BinaryExchangeType(struct soap *soap, const char *URL, struct wst__BinaryExchangeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__BinaryExchangeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__BinaryExchangeType(struct soap *soap, struct wst__BinaryExchangeType *p)
{
	if (::soap_read_wst__BinaryExchangeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__SignChallengeType_DEFINED
#define SOAP_TYPE_wst__SignChallengeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__SignChallengeType(struct soap*, struct wst__SignChallengeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__SignChallengeType(struct soap*, const struct wst__SignChallengeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__SignChallengeType(struct soap*, const char*, int, const struct wst__SignChallengeType *, const char*);
SOAP_FMAC3 struct wst__SignChallengeType * SOAP_FMAC4 soap_in_wst__SignChallengeType(struct soap*, const char*, struct wst__SignChallengeType *, const char*);
SOAP_FMAC1 struct wst__SignChallengeType * SOAP_FMAC2 soap_instantiate_wst__SignChallengeType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__SignChallengeType * soap_new_wst__SignChallengeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__SignChallengeType(soap, n, NULL, NULL, NULL);
}

inline struct wst__SignChallengeType * soap_new_req_wst__SignChallengeType(
	struct soap *soap,
	char *Challenge)
{
	struct wst__SignChallengeType *_p = ::soap_new_wst__SignChallengeType(soap);
	if (_p)
	{	::soap_default_wst__SignChallengeType(soap, _p);
		_p->Challenge = Challenge;
	}
	return _p;
}

inline struct wst__SignChallengeType * soap_new_set_wst__SignChallengeType(
	struct soap *soap,
	char *Challenge)
{
	struct wst__SignChallengeType *_p = ::soap_new_wst__SignChallengeType(soap);
	if (_p)
	{	::soap_default_wst__SignChallengeType(soap, _p);
		_p->Challenge = Challenge;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__SignChallengeType(struct soap*, const struct wst__SignChallengeType *, const char*, const char*);

inline int soap_write_wst__SignChallengeType(struct soap *soap, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__SignChallengeType(soap, p), 0) || ::soap_put_wst__SignChallengeType(soap, p, "wst:SignChallengeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__SignChallengeType(struct soap *soap, const char *URL, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__SignChallengeType(soap, p), 0) || ::soap_put_wst__SignChallengeType(soap, p, "wst:SignChallengeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__SignChallengeType(struct soap *soap, const char *URL, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__SignChallengeType(soap, p), 0) || ::soap_put_wst__SignChallengeType(soap, p, "wst:SignChallengeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__SignChallengeType(struct soap *soap, const char *URL, struct wst__SignChallengeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__SignChallengeType(soap, p), 0) || ::soap_put_wst__SignChallengeType(soap, p, "wst:SignChallengeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__SignChallengeType * SOAP_FMAC4 soap_get_wst__SignChallengeType(struct soap*, struct wst__SignChallengeType *, const char*, const char*);

inline int soap_read_wst__SignChallengeType(struct soap *soap, struct wst__SignChallengeType *p)
{
	if (p)
	{	::soap_default_wst__SignChallengeType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__SignChallengeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__SignChallengeType(struct soap *soap, const char *URL, struct wst__SignChallengeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__SignChallengeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__SignChallengeType(struct soap *soap, struct wst__SignChallengeType *p)
{
	if (::soap_read_wst__SignChallengeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__StatusType_DEFINED
#define SOAP_TYPE_wst__StatusType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__StatusType(struct soap*, struct wst__StatusType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__StatusType(struct soap*, const struct wst__StatusType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__StatusType(struct soap*, const char*, int, const struct wst__StatusType *, const char*);
SOAP_FMAC3 struct wst__StatusType * SOAP_FMAC4 soap_in_wst__StatusType(struct soap*, const char*, struct wst__StatusType *, const char*);
SOAP_FMAC1 struct wst__StatusType * SOAP_FMAC2 soap_instantiate_wst__StatusType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__StatusType * soap_new_wst__StatusType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__StatusType(soap, n, NULL, NULL, NULL);
}

inline struct wst__StatusType * soap_new_req_wst__StatusType(
	struct soap *soap,
	char *Code)
{
	struct wst__StatusType *_p = ::soap_new_wst__StatusType(soap);
	if (_p)
	{	::soap_default_wst__StatusType(soap, _p);
		_p->Code = Code;
	}
	return _p;
}

inline struct wst__StatusType * soap_new_set_wst__StatusType(
	struct soap *soap,
	char *Code,
	char *Reason)
{
	struct wst__StatusType *_p = ::soap_new_wst__StatusType(soap);
	if (_p)
	{	::soap_default_wst__StatusType(soap, _p);
		_p->Code = Code;
		_p->Reason = Reason;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__StatusType(struct soap*, const struct wst__StatusType *, const char*, const char*);

inline int soap_write_wst__StatusType(struct soap *soap, struct wst__StatusType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__StatusType(soap, p), 0) || ::soap_put_wst__StatusType(soap, p, "wst:StatusType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__StatusType(struct soap *soap, const char *URL, struct wst__StatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__StatusType(soap, p), 0) || ::soap_put_wst__StatusType(soap, p, "wst:StatusType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__StatusType(struct soap *soap, const char *URL, struct wst__StatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__StatusType(soap, p), 0) || ::soap_put_wst__StatusType(soap, p, "wst:StatusType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__StatusType(struct soap *soap, const char *URL, struct wst__StatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__StatusType(soap, p), 0) || ::soap_put_wst__StatusType(soap, p, "wst:StatusType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__StatusType * SOAP_FMAC4 soap_get_wst__StatusType(struct soap*, struct wst__StatusType *, const char*, const char*);

inline int soap_read_wst__StatusType(struct soap *soap, struct wst__StatusType *p)
{
	if (p)
	{	::soap_default_wst__StatusType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__StatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__StatusType(struct soap *soap, const char *URL, struct wst__StatusType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__StatusType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__StatusType(struct soap *soap, struct wst__StatusType *p)
{
	if (::soap_read_wst__StatusType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__ValidateTargetType_DEFINED
#define SOAP_TYPE_wst__ValidateTargetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__ValidateTargetType(struct soap*, struct wst__ValidateTargetType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__ValidateTargetType(struct soap*, const struct wst__ValidateTargetType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__ValidateTargetType(struct soap*, const char*, int, const struct wst__ValidateTargetType *, const char*);
SOAP_FMAC3 struct wst__ValidateTargetType * SOAP_FMAC4 soap_in_wst__ValidateTargetType(struct soap*, const char*, struct wst__ValidateTargetType *, const char*);
SOAP_FMAC1 struct wst__ValidateTargetType * SOAP_FMAC2 soap_instantiate_wst__ValidateTargetType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__ValidateTargetType * soap_new_wst__ValidateTargetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__ValidateTargetType(soap, n, NULL, NULL, NULL);
}

inline struct wst__ValidateTargetType * soap_new_req_wst__ValidateTargetType(
	struct soap *soap)
{
	struct wst__ValidateTargetType *_p = ::soap_new_wst__ValidateTargetType(soap);
	if (_p)
	{	::soap_default_wst__ValidateTargetType(soap, _p);
	}
	return _p;
}

inline struct wst__ValidateTargetType * soap_new_set_wst__ValidateTargetType(
	struct soap *soap)
{
	struct wst__ValidateTargetType *_p = ::soap_new_wst__ValidateTargetType(soap);
	if (_p)
	{	::soap_default_wst__ValidateTargetType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__ValidateTargetType(struct soap*, const struct wst__ValidateTargetType *, const char*, const char*);

inline int soap_write_wst__ValidateTargetType(struct soap *soap, struct wst__ValidateTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__ValidateTargetType(soap, p), 0) || ::soap_put_wst__ValidateTargetType(soap, p, "wst:ValidateTargetType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__ValidateTargetType(struct soap *soap, const char *URL, struct wst__ValidateTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ValidateTargetType(soap, p), 0) || ::soap_put_wst__ValidateTargetType(soap, p, "wst:ValidateTargetType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__ValidateTargetType(struct soap *soap, const char *URL, struct wst__ValidateTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ValidateTargetType(soap, p), 0) || ::soap_put_wst__ValidateTargetType(soap, p, "wst:ValidateTargetType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__ValidateTargetType(struct soap *soap, const char *URL, struct wst__ValidateTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ValidateTargetType(soap, p), 0) || ::soap_put_wst__ValidateTargetType(soap, p, "wst:ValidateTargetType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__ValidateTargetType * SOAP_FMAC4 soap_get_wst__ValidateTargetType(struct soap*, struct wst__ValidateTargetType *, const char*, const char*);

inline int soap_read_wst__ValidateTargetType(struct soap *soap, struct wst__ValidateTargetType *p)
{
	if (p)
	{	::soap_default_wst__ValidateTargetType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__ValidateTargetType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__ValidateTargetType(struct soap *soap, const char *URL, struct wst__ValidateTargetType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__ValidateTargetType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__ValidateTargetType(struct soap *soap, struct wst__ValidateTargetType *p)
{
	if (::soap_read_wst__ValidateTargetType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RequestedTokenCancelledType_DEFINED
#define SOAP_TYPE_wst__RequestedTokenCancelledType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RequestedTokenCancelledType(struct soap*, struct wst__RequestedTokenCancelledType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestedTokenCancelledType(struct soap*, const struct wst__RequestedTokenCancelledType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RequestedTokenCancelledType(struct soap*, const char*, int, const struct wst__RequestedTokenCancelledType *, const char*);
SOAP_FMAC3 struct wst__RequestedTokenCancelledType * SOAP_FMAC4 soap_in_wst__RequestedTokenCancelledType(struct soap*, const char*, struct wst__RequestedTokenCancelledType *, const char*);
SOAP_FMAC1 struct wst__RequestedTokenCancelledType * SOAP_FMAC2 soap_instantiate_wst__RequestedTokenCancelledType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RequestedTokenCancelledType * soap_new_wst__RequestedTokenCancelledType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RequestedTokenCancelledType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RequestedTokenCancelledType * soap_new_req_wst__RequestedTokenCancelledType(
	struct soap *soap)
{
	struct wst__RequestedTokenCancelledType *_p = ::soap_new_wst__RequestedTokenCancelledType(soap);
	if (_p)
	{	::soap_default_wst__RequestedTokenCancelledType(soap, _p);
	}
	return _p;
}

inline struct wst__RequestedTokenCancelledType * soap_new_set_wst__RequestedTokenCancelledType(
	struct soap *soap)
{
	struct wst__RequestedTokenCancelledType *_p = ::soap_new_wst__RequestedTokenCancelledType(soap);
	if (_p)
	{	::soap_default_wst__RequestedTokenCancelledType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RequestedTokenCancelledType(struct soap*, const struct wst__RequestedTokenCancelledType *, const char*, const char*);

inline int soap_write_wst__RequestedTokenCancelledType(struct soap *soap, struct wst__RequestedTokenCancelledType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RequestedTokenCancelledType(soap, p), 0) || ::soap_put_wst__RequestedTokenCancelledType(soap, p, "wst:RequestedTokenCancelledType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RequestedTokenCancelledType(struct soap *soap, const char *URL, struct wst__RequestedTokenCancelledType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedTokenCancelledType(soap, p), 0) || ::soap_put_wst__RequestedTokenCancelledType(soap, p, "wst:RequestedTokenCancelledType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RequestedTokenCancelledType(struct soap *soap, const char *URL, struct wst__RequestedTokenCancelledType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedTokenCancelledType(soap, p), 0) || ::soap_put_wst__RequestedTokenCancelledType(soap, p, "wst:RequestedTokenCancelledType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RequestedTokenCancelledType(struct soap *soap, const char *URL, struct wst__RequestedTokenCancelledType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedTokenCancelledType(soap, p), 0) || ::soap_put_wst__RequestedTokenCancelledType(soap, p, "wst:RequestedTokenCancelledType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RequestedTokenCancelledType * SOAP_FMAC4 soap_get_wst__RequestedTokenCancelledType(struct soap*, struct wst__RequestedTokenCancelledType *, const char*, const char*);

inline int soap_read_wst__RequestedTokenCancelledType(struct soap *soap, struct wst__RequestedTokenCancelledType *p)
{
	if (p)
	{	::soap_default_wst__RequestedTokenCancelledType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RequestedTokenCancelledType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RequestedTokenCancelledType(struct soap *soap, const char *URL, struct wst__RequestedTokenCancelledType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RequestedTokenCancelledType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RequestedTokenCancelledType(struct soap *soap, struct wst__RequestedTokenCancelledType *p)
{
	if (::soap_read_wst__RequestedTokenCancelledType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__CancelTargetType_DEFINED
#define SOAP_TYPE_wst__CancelTargetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__CancelTargetType(struct soap*, struct wst__CancelTargetType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__CancelTargetType(struct soap*, const struct wst__CancelTargetType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__CancelTargetType(struct soap*, const char*, int, const struct wst__CancelTargetType *, const char*);
SOAP_FMAC3 struct wst__CancelTargetType * SOAP_FMAC4 soap_in_wst__CancelTargetType(struct soap*, const char*, struct wst__CancelTargetType *, const char*);
SOAP_FMAC1 struct wst__CancelTargetType * SOAP_FMAC2 soap_instantiate_wst__CancelTargetType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__CancelTargetType * soap_new_wst__CancelTargetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__CancelTargetType(soap, n, NULL, NULL, NULL);
}

inline struct wst__CancelTargetType * soap_new_req_wst__CancelTargetType(
	struct soap *soap)
{
	struct wst__CancelTargetType *_p = ::soap_new_wst__CancelTargetType(soap);
	if (_p)
	{	::soap_default_wst__CancelTargetType(soap, _p);
	}
	return _p;
}

inline struct wst__CancelTargetType * soap_new_set_wst__CancelTargetType(
	struct soap *soap)
{
	struct wst__CancelTargetType *_p = ::soap_new_wst__CancelTargetType(soap);
	if (_p)
	{	::soap_default_wst__CancelTargetType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__CancelTargetType(struct soap*, const struct wst__CancelTargetType *, const char*, const char*);

inline int soap_write_wst__CancelTargetType(struct soap *soap, struct wst__CancelTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__CancelTargetType(soap, p), 0) || ::soap_put_wst__CancelTargetType(soap, p, "wst:CancelTargetType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__CancelTargetType(struct soap *soap, const char *URL, struct wst__CancelTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__CancelTargetType(soap, p), 0) || ::soap_put_wst__CancelTargetType(soap, p, "wst:CancelTargetType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__CancelTargetType(struct soap *soap, const char *URL, struct wst__CancelTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__CancelTargetType(soap, p), 0) || ::soap_put_wst__CancelTargetType(soap, p, "wst:CancelTargetType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__CancelTargetType(struct soap *soap, const char *URL, struct wst__CancelTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__CancelTargetType(soap, p), 0) || ::soap_put_wst__CancelTargetType(soap, p, "wst:CancelTargetType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__CancelTargetType * SOAP_FMAC4 soap_get_wst__CancelTargetType(struct soap*, struct wst__CancelTargetType *, const char*, const char*);

inline int soap_read_wst__CancelTargetType(struct soap *soap, struct wst__CancelTargetType *p)
{
	if (p)
	{	::soap_default_wst__CancelTargetType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__CancelTargetType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__CancelTargetType(struct soap *soap, const char *URL, struct wst__CancelTargetType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__CancelTargetType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__CancelTargetType(struct soap *soap, struct wst__CancelTargetType *p)
{
	if (::soap_read_wst__CancelTargetType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RenewingType_DEFINED
#define SOAP_TYPE_wst__RenewingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RenewingType(struct soap*, struct wst__RenewingType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RenewingType(struct soap*, const struct wst__RenewingType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RenewingType(struct soap*, const char*, int, const struct wst__RenewingType *, const char*);
SOAP_FMAC3 struct wst__RenewingType * SOAP_FMAC4 soap_in_wst__RenewingType(struct soap*, const char*, struct wst__RenewingType *, const char*);
SOAP_FMAC1 struct wst__RenewingType * SOAP_FMAC2 soap_instantiate_wst__RenewingType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RenewingType * soap_new_wst__RenewingType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RenewingType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RenewingType * soap_new_req_wst__RenewingType(
	struct soap *soap)
{
	struct wst__RenewingType *_p = ::soap_new_wst__RenewingType(soap);
	if (_p)
	{	::soap_default_wst__RenewingType(soap, _p);
	}
	return _p;
}

inline struct wst__RenewingType * soap_new_set_wst__RenewingType(
	struct soap *soap,
	char *Allow,
	char *OK)
{
	struct wst__RenewingType *_p = ::soap_new_wst__RenewingType(soap);
	if (_p)
	{	::soap_default_wst__RenewingType(soap, _p);
		_p->Allow = Allow;
		_p->OK = OK;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RenewingType(struct soap*, const struct wst__RenewingType *, const char*, const char*);

inline int soap_write_wst__RenewingType(struct soap *soap, struct wst__RenewingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RenewingType(soap, p), 0) || ::soap_put_wst__RenewingType(soap, p, "wst:RenewingType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RenewingType(struct soap *soap, const char *URL, struct wst__RenewingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RenewingType(soap, p), 0) || ::soap_put_wst__RenewingType(soap, p, "wst:RenewingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RenewingType(struct soap *soap, const char *URL, struct wst__RenewingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RenewingType(soap, p), 0) || ::soap_put_wst__RenewingType(soap, p, "wst:RenewingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RenewingType(struct soap *soap, const char *URL, struct wst__RenewingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RenewingType(soap, p), 0) || ::soap_put_wst__RenewingType(soap, p, "wst:RenewingType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RenewingType * SOAP_FMAC4 soap_get_wst__RenewingType(struct soap*, struct wst__RenewingType *, const char*, const char*);

inline int soap_read_wst__RenewingType(struct soap *soap, struct wst__RenewingType *p)
{
	if (p)
	{	::soap_default_wst__RenewingType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RenewingType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RenewingType(struct soap *soap, const char *URL, struct wst__RenewingType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RenewingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RenewingType(struct soap *soap, struct wst__RenewingType *p)
{
	if (::soap_read_wst__RenewingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__AllowPostdatingType_DEFINED
#define SOAP_TYPE_wst__AllowPostdatingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__AllowPostdatingType(struct soap*, struct wst__AllowPostdatingType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__AllowPostdatingType(struct soap*, const struct wst__AllowPostdatingType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__AllowPostdatingType(struct soap*, const char*, int, const struct wst__AllowPostdatingType *, const char*);
SOAP_FMAC3 struct wst__AllowPostdatingType * SOAP_FMAC4 soap_in_wst__AllowPostdatingType(struct soap*, const char*, struct wst__AllowPostdatingType *, const char*);
SOAP_FMAC1 struct wst__AllowPostdatingType * SOAP_FMAC2 soap_instantiate_wst__AllowPostdatingType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__AllowPostdatingType * soap_new_wst__AllowPostdatingType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__AllowPostdatingType(soap, n, NULL, NULL, NULL);
}

inline struct wst__AllowPostdatingType * soap_new_req_wst__AllowPostdatingType(
	struct soap *soap)
{
	struct wst__AllowPostdatingType *_p = ::soap_new_wst__AllowPostdatingType(soap);
	if (_p)
	{	::soap_default_wst__AllowPostdatingType(soap, _p);
	}
	return _p;
}

inline struct wst__AllowPostdatingType * soap_new_set_wst__AllowPostdatingType(
	struct soap *soap)
{
	struct wst__AllowPostdatingType *_p = ::soap_new_wst__AllowPostdatingType(soap);
	if (_p)
	{	::soap_default_wst__AllowPostdatingType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__AllowPostdatingType(struct soap*, const struct wst__AllowPostdatingType *, const char*, const char*);

inline int soap_write_wst__AllowPostdatingType(struct soap *soap, struct wst__AllowPostdatingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__AllowPostdatingType(soap, p), 0) || ::soap_put_wst__AllowPostdatingType(soap, p, "wst:AllowPostdatingType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__AllowPostdatingType(struct soap *soap, const char *URL, struct wst__AllowPostdatingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__AllowPostdatingType(soap, p), 0) || ::soap_put_wst__AllowPostdatingType(soap, p, "wst:AllowPostdatingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__AllowPostdatingType(struct soap *soap, const char *URL, struct wst__AllowPostdatingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__AllowPostdatingType(soap, p), 0) || ::soap_put_wst__AllowPostdatingType(soap, p, "wst:AllowPostdatingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__AllowPostdatingType(struct soap *soap, const char *URL, struct wst__AllowPostdatingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__AllowPostdatingType(soap, p), 0) || ::soap_put_wst__AllowPostdatingType(soap, p, "wst:AllowPostdatingType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__AllowPostdatingType * SOAP_FMAC4 soap_get_wst__AllowPostdatingType(struct soap*, struct wst__AllowPostdatingType *, const char*, const char*);

inline int soap_read_wst__AllowPostdatingType(struct soap *soap, struct wst__AllowPostdatingType *p)
{
	if (p)
	{	::soap_default_wst__AllowPostdatingType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__AllowPostdatingType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__AllowPostdatingType(struct soap *soap, const char *URL, struct wst__AllowPostdatingType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__AllowPostdatingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__AllowPostdatingType(struct soap *soap, struct wst__AllowPostdatingType *p)
{
	if (::soap_read_wst__AllowPostdatingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RenewTargetType_DEFINED
#define SOAP_TYPE_wst__RenewTargetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RenewTargetType(struct soap*, struct wst__RenewTargetType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RenewTargetType(struct soap*, const struct wst__RenewTargetType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RenewTargetType(struct soap*, const char*, int, const struct wst__RenewTargetType *, const char*);
SOAP_FMAC3 struct wst__RenewTargetType * SOAP_FMAC4 soap_in_wst__RenewTargetType(struct soap*, const char*, struct wst__RenewTargetType *, const char*);
SOAP_FMAC1 struct wst__RenewTargetType * SOAP_FMAC2 soap_instantiate_wst__RenewTargetType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RenewTargetType * soap_new_wst__RenewTargetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RenewTargetType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RenewTargetType * soap_new_req_wst__RenewTargetType(
	struct soap *soap)
{
	struct wst__RenewTargetType *_p = ::soap_new_wst__RenewTargetType(soap);
	if (_p)
	{	::soap_default_wst__RenewTargetType(soap, _p);
	}
	return _p;
}

inline struct wst__RenewTargetType * soap_new_set_wst__RenewTargetType(
	struct soap *soap)
{
	struct wst__RenewTargetType *_p = ::soap_new_wst__RenewTargetType(soap);
	if (_p)
	{	::soap_default_wst__RenewTargetType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RenewTargetType(struct soap*, const struct wst__RenewTargetType *, const char*, const char*);

inline int soap_write_wst__RenewTargetType(struct soap *soap, struct wst__RenewTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RenewTargetType(soap, p), 0) || ::soap_put_wst__RenewTargetType(soap, p, "wst:RenewTargetType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RenewTargetType(struct soap *soap, const char *URL, struct wst__RenewTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RenewTargetType(soap, p), 0) || ::soap_put_wst__RenewTargetType(soap, p, "wst:RenewTargetType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RenewTargetType(struct soap *soap, const char *URL, struct wst__RenewTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RenewTargetType(soap, p), 0) || ::soap_put_wst__RenewTargetType(soap, p, "wst:RenewTargetType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RenewTargetType(struct soap *soap, const char *URL, struct wst__RenewTargetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RenewTargetType(soap, p), 0) || ::soap_put_wst__RenewTargetType(soap, p, "wst:RenewTargetType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RenewTargetType * SOAP_FMAC4 soap_get_wst__RenewTargetType(struct soap*, struct wst__RenewTargetType *, const char*, const char*);

inline int soap_read_wst__RenewTargetType(struct soap *soap, struct wst__RenewTargetType *p)
{
	if (p)
	{	::soap_default_wst__RenewTargetType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RenewTargetType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RenewTargetType(struct soap *soap, const char *URL, struct wst__RenewTargetType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RenewTargetType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RenewTargetType(struct soap *soap, struct wst__RenewTargetType *p)
{
	if (::soap_read_wst__RenewTargetType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RequestedProofTokenType_DEFINED
#define SOAP_TYPE_wst__RequestedProofTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RequestedProofTokenType(struct soap*, struct wst__RequestedProofTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestedProofTokenType(struct soap*, const struct wst__RequestedProofTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RequestedProofTokenType(struct soap*, const char*, int, const struct wst__RequestedProofTokenType *, const char*);
SOAP_FMAC3 struct wst__RequestedProofTokenType * SOAP_FMAC4 soap_in_wst__RequestedProofTokenType(struct soap*, const char*, struct wst__RequestedProofTokenType *, const char*);
SOAP_FMAC1 struct wst__RequestedProofTokenType * SOAP_FMAC2 soap_instantiate_wst__RequestedProofTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RequestedProofTokenType * soap_new_wst__RequestedProofTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RequestedProofTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RequestedProofTokenType * soap_new_req_wst__RequestedProofTokenType(
	struct soap *soap)
{
	struct wst__RequestedProofTokenType *_p = ::soap_new_wst__RequestedProofTokenType(soap);
	if (_p)
	{	::soap_default_wst__RequestedProofTokenType(soap, _p);
	}
	return _p;
}

inline struct wst__RequestedProofTokenType * soap_new_set_wst__RequestedProofTokenType(
	struct soap *soap,
	struct xenc__EncryptedKeyType *xenc__EncryptedKey)
{
	struct wst__RequestedProofTokenType *_p = ::soap_new_wst__RequestedProofTokenType(soap);
	if (_p)
	{	::soap_default_wst__RequestedProofTokenType(soap, _p);
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RequestedProofTokenType(struct soap*, const struct wst__RequestedProofTokenType *, const char*, const char*);

inline int soap_write_wst__RequestedProofTokenType(struct soap *soap, struct wst__RequestedProofTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RequestedProofTokenType(soap, p), 0) || ::soap_put_wst__RequestedProofTokenType(soap, p, "wst:RequestedProofTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RequestedProofTokenType(struct soap *soap, const char *URL, struct wst__RequestedProofTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedProofTokenType(soap, p), 0) || ::soap_put_wst__RequestedProofTokenType(soap, p, "wst:RequestedProofTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RequestedProofTokenType(struct soap *soap, const char *URL, struct wst__RequestedProofTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedProofTokenType(soap, p), 0) || ::soap_put_wst__RequestedProofTokenType(soap, p, "wst:RequestedProofTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RequestedProofTokenType(struct soap *soap, const char *URL, struct wst__RequestedProofTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedProofTokenType(soap, p), 0) || ::soap_put_wst__RequestedProofTokenType(soap, p, "wst:RequestedProofTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RequestedProofTokenType * SOAP_FMAC4 soap_get_wst__RequestedProofTokenType(struct soap*, struct wst__RequestedProofTokenType *, const char*, const char*);

inline int soap_read_wst__RequestedProofTokenType(struct soap *soap, struct wst__RequestedProofTokenType *p)
{
	if (p)
	{	::soap_default_wst__RequestedProofTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RequestedProofTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RequestedProofTokenType(struct soap *soap, const char *URL, struct wst__RequestedProofTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RequestedProofTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RequestedProofTokenType(struct soap *soap, struct wst__RequestedProofTokenType *p)
{
	if (::soap_read_wst__RequestedProofTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RequestedReferenceType_DEFINED
#define SOAP_TYPE_wst__RequestedReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RequestedReferenceType(struct soap*, struct wst__RequestedReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestedReferenceType(struct soap*, const struct wst__RequestedReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RequestedReferenceType(struct soap*, const char*, int, const struct wst__RequestedReferenceType *, const char*);
SOAP_FMAC3 struct wst__RequestedReferenceType * SOAP_FMAC4 soap_in_wst__RequestedReferenceType(struct soap*, const char*, struct wst__RequestedReferenceType *, const char*);
SOAP_FMAC1 struct wst__RequestedReferenceType * SOAP_FMAC2 soap_instantiate_wst__RequestedReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RequestedReferenceType * soap_new_wst__RequestedReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RequestedReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RequestedReferenceType * soap_new_req_wst__RequestedReferenceType(
	struct soap *soap,
	const struct _wsse__SecurityTokenReference& wsse__SecurityTokenReference)
{
	struct wst__RequestedReferenceType *_p = ::soap_new_wst__RequestedReferenceType(soap);
	if (_p)
	{	::soap_default_wst__RequestedReferenceType(soap, _p);
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
	}
	return _p;
}

inline struct wst__RequestedReferenceType * soap_new_set_wst__RequestedReferenceType(
	struct soap *soap,
	const struct _wsse__SecurityTokenReference& wsse__SecurityTokenReference)
{
	struct wst__RequestedReferenceType *_p = ::soap_new_wst__RequestedReferenceType(soap);
	if (_p)
	{	::soap_default_wst__RequestedReferenceType(soap, _p);
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RequestedReferenceType(struct soap*, const struct wst__RequestedReferenceType *, const char*, const char*);

inline int soap_write_wst__RequestedReferenceType(struct soap *soap, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RequestedReferenceType(soap, p), 0) || ::soap_put_wst__RequestedReferenceType(soap, p, "wst:RequestedReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RequestedReferenceType(struct soap *soap, const char *URL, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedReferenceType(soap, p), 0) || ::soap_put_wst__RequestedReferenceType(soap, p, "wst:RequestedReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RequestedReferenceType(struct soap *soap, const char *URL, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedReferenceType(soap, p), 0) || ::soap_put_wst__RequestedReferenceType(soap, p, "wst:RequestedReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RequestedReferenceType(struct soap *soap, const char *URL, struct wst__RequestedReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedReferenceType(soap, p), 0) || ::soap_put_wst__RequestedReferenceType(soap, p, "wst:RequestedReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RequestedReferenceType * SOAP_FMAC4 soap_get_wst__RequestedReferenceType(struct soap*, struct wst__RequestedReferenceType *, const char*, const char*);

inline int soap_read_wst__RequestedReferenceType(struct soap *soap, struct wst__RequestedReferenceType *p)
{
	if (p)
	{	::soap_default_wst__RequestedReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RequestedReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RequestedReferenceType(struct soap *soap, const char *URL, struct wst__RequestedReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RequestedReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RequestedReferenceType(struct soap *soap, struct wst__RequestedReferenceType *p)
{
	if (::soap_read_wst__RequestedReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RequestSecurityTokenResponseCollectionType_DEFINED
#define SOAP_TYPE_wst__RequestSecurityTokenResponseCollectionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RequestSecurityTokenResponseCollectionType(struct soap*, struct wst__RequestSecurityTokenResponseCollectionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestSecurityTokenResponseCollectionType(struct soap*, const struct wst__RequestSecurityTokenResponseCollectionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RequestSecurityTokenResponseCollectionType(struct soap*, const char*, int, const struct wst__RequestSecurityTokenResponseCollectionType *, const char*);
SOAP_FMAC3 struct wst__RequestSecurityTokenResponseCollectionType * SOAP_FMAC4 soap_in_wst__RequestSecurityTokenResponseCollectionType(struct soap*, const char*, struct wst__RequestSecurityTokenResponseCollectionType *, const char*);
SOAP_FMAC1 struct wst__RequestSecurityTokenResponseCollectionType * SOAP_FMAC2 soap_instantiate_wst__RequestSecurityTokenResponseCollectionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RequestSecurityTokenResponseCollectionType * soap_new_wst__RequestSecurityTokenResponseCollectionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RequestSecurityTokenResponseCollectionType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RequestSecurityTokenResponseCollectionType * soap_new_req_wst__RequestSecurityTokenResponseCollectionType(
	struct soap *soap,
	int __sizeRequestSecurityTokenResponse,
	struct wst__RequestSecurityTokenResponseType *RequestSecurityTokenResponse)
{
	struct wst__RequestSecurityTokenResponseCollectionType *_p = ::soap_new_wst__RequestSecurityTokenResponseCollectionType(soap);
	if (_p)
	{	::soap_default_wst__RequestSecurityTokenResponseCollectionType(soap, _p);
		_p->__sizeRequestSecurityTokenResponse = __sizeRequestSecurityTokenResponse;
		_p->RequestSecurityTokenResponse = RequestSecurityTokenResponse;
	}
	return _p;
}

inline struct wst__RequestSecurityTokenResponseCollectionType * soap_new_set_wst__RequestSecurityTokenResponseCollectionType(
	struct soap *soap,
	int __sizeRequestSecurityTokenResponse,
	struct wst__RequestSecurityTokenResponseType *RequestSecurityTokenResponse)
{
	struct wst__RequestSecurityTokenResponseCollectionType *_p = ::soap_new_wst__RequestSecurityTokenResponseCollectionType(soap);
	if (_p)
	{	::soap_default_wst__RequestSecurityTokenResponseCollectionType(soap, _p);
		_p->__sizeRequestSecurityTokenResponse = __sizeRequestSecurityTokenResponse;
		_p->RequestSecurityTokenResponse = RequestSecurityTokenResponse;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RequestSecurityTokenResponseCollectionType(struct soap*, const struct wst__RequestSecurityTokenResponseCollectionType *, const char*, const char*);

inline int soap_write_wst__RequestSecurityTokenResponseCollectionType(struct soap *soap, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RequestSecurityTokenResponseCollectionType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenResponseCollectionType(soap, p, "wst:RequestSecurityTokenResponseCollectionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RequestSecurityTokenResponseCollectionType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenResponseCollectionType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenResponseCollectionType(soap, p, "wst:RequestSecurityTokenResponseCollectionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RequestSecurityTokenResponseCollectionType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenResponseCollectionType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenResponseCollectionType(soap, p, "wst:RequestSecurityTokenResponseCollectionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RequestSecurityTokenResponseCollectionType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenResponseCollectionType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenResponseCollectionType(soap, p, "wst:RequestSecurityTokenResponseCollectionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RequestSecurityTokenResponseCollectionType * SOAP_FMAC4 soap_get_wst__RequestSecurityTokenResponseCollectionType(struct soap*, struct wst__RequestSecurityTokenResponseCollectionType *, const char*, const char*);

inline int soap_read_wst__RequestSecurityTokenResponseCollectionType(struct soap *soap, struct wst__RequestSecurityTokenResponseCollectionType *p)
{
	if (p)
	{	::soap_default_wst__RequestSecurityTokenResponseCollectionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RequestSecurityTokenResponseCollectionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RequestSecurityTokenResponseCollectionType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseCollectionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RequestSecurityTokenResponseCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RequestSecurityTokenResponseCollectionType(struct soap *soap, struct wst__RequestSecurityTokenResponseCollectionType *p)
{
	if (::soap_read_wst__RequestSecurityTokenResponseCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RequestSecurityTokenCollectionType_DEFINED
#define SOAP_TYPE_wst__RequestSecurityTokenCollectionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RequestSecurityTokenCollectionType(struct soap*, struct wst__RequestSecurityTokenCollectionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestSecurityTokenCollectionType(struct soap*, const struct wst__RequestSecurityTokenCollectionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RequestSecurityTokenCollectionType(struct soap*, const char*, int, const struct wst__RequestSecurityTokenCollectionType *, const char*);
SOAP_FMAC3 struct wst__RequestSecurityTokenCollectionType * SOAP_FMAC4 soap_in_wst__RequestSecurityTokenCollectionType(struct soap*, const char*, struct wst__RequestSecurityTokenCollectionType *, const char*);
SOAP_FMAC1 struct wst__RequestSecurityTokenCollectionType * SOAP_FMAC2 soap_instantiate_wst__RequestSecurityTokenCollectionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RequestSecurityTokenCollectionType * soap_new_wst__RequestSecurityTokenCollectionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RequestSecurityTokenCollectionType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RequestSecurityTokenCollectionType * soap_new_req_wst__RequestSecurityTokenCollectionType(
	struct soap *soap,
	int __sizeRequestSecurityToken,
	struct wst__RequestSecurityTokenType *RequestSecurityToken)
{
	struct wst__RequestSecurityTokenCollectionType *_p = ::soap_new_wst__RequestSecurityTokenCollectionType(soap);
	if (_p)
	{	::soap_default_wst__RequestSecurityTokenCollectionType(soap, _p);
		_p->__sizeRequestSecurityToken = __sizeRequestSecurityToken;
		_p->RequestSecurityToken = RequestSecurityToken;
	}
	return _p;
}

inline struct wst__RequestSecurityTokenCollectionType * soap_new_set_wst__RequestSecurityTokenCollectionType(
	struct soap *soap,
	int __sizeRequestSecurityToken,
	struct wst__RequestSecurityTokenType *RequestSecurityToken)
{
	struct wst__RequestSecurityTokenCollectionType *_p = ::soap_new_wst__RequestSecurityTokenCollectionType(soap);
	if (_p)
	{	::soap_default_wst__RequestSecurityTokenCollectionType(soap, _p);
		_p->__sizeRequestSecurityToken = __sizeRequestSecurityToken;
		_p->RequestSecurityToken = RequestSecurityToken;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RequestSecurityTokenCollectionType(struct soap*, const struct wst__RequestSecurityTokenCollectionType *, const char*, const char*);

inline int soap_write_wst__RequestSecurityTokenCollectionType(struct soap *soap, struct wst__RequestSecurityTokenCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RequestSecurityTokenCollectionType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenCollectionType(soap, p, "wst:RequestSecurityTokenCollectionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RequestSecurityTokenCollectionType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenCollectionType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenCollectionType(soap, p, "wst:RequestSecurityTokenCollectionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RequestSecurityTokenCollectionType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenCollectionType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenCollectionType(soap, p, "wst:RequestSecurityTokenCollectionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RequestSecurityTokenCollectionType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenCollectionType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenCollectionType(soap, p, "wst:RequestSecurityTokenCollectionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RequestSecurityTokenCollectionType * SOAP_FMAC4 soap_get_wst__RequestSecurityTokenCollectionType(struct soap*, struct wst__RequestSecurityTokenCollectionType *, const char*, const char*);

inline int soap_read_wst__RequestSecurityTokenCollectionType(struct soap *soap, struct wst__RequestSecurityTokenCollectionType *p)
{
	if (p)
	{	::soap_default_wst__RequestSecurityTokenCollectionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RequestSecurityTokenCollectionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RequestSecurityTokenCollectionType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenCollectionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RequestSecurityTokenCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RequestSecurityTokenCollectionType(struct soap *soap, struct wst__RequestSecurityTokenCollectionType *p)
{
	if (::soap_read_wst__RequestSecurityTokenCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__LifetimeType_DEFINED
#define SOAP_TYPE_wst__LifetimeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__LifetimeType(struct soap*, struct wst__LifetimeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__LifetimeType(struct soap*, const struct wst__LifetimeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__LifetimeType(struct soap*, const char*, int, const struct wst__LifetimeType *, const char*);
SOAP_FMAC3 struct wst__LifetimeType * SOAP_FMAC4 soap_in_wst__LifetimeType(struct soap*, const char*, struct wst__LifetimeType *, const char*);
SOAP_FMAC1 struct wst__LifetimeType * SOAP_FMAC2 soap_instantiate_wst__LifetimeType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__LifetimeType * soap_new_wst__LifetimeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__LifetimeType(soap, n, NULL, NULL, NULL);
}

inline struct wst__LifetimeType * soap_new_req_wst__LifetimeType(
	struct soap *soap)
{
	struct wst__LifetimeType *_p = ::soap_new_wst__LifetimeType(soap);
	if (_p)
	{	::soap_default_wst__LifetimeType(soap, _p);
	}
	return _p;
}

inline struct wst__LifetimeType * soap_new_set_wst__LifetimeType(
	struct soap *soap,
	char *wsu__Created,
	char *wsu__Expires)
{
	struct wst__LifetimeType *_p = ::soap_new_wst__LifetimeType(soap);
	if (_p)
	{	::soap_default_wst__LifetimeType(soap, _p);
		_p->wsu__Created = wsu__Created;
		_p->wsu__Expires = wsu__Expires;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__LifetimeType(struct soap*, const struct wst__LifetimeType *, const char*, const char*);

inline int soap_write_wst__LifetimeType(struct soap *soap, struct wst__LifetimeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__LifetimeType(soap, p), 0) || ::soap_put_wst__LifetimeType(soap, p, "wst:LifetimeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__LifetimeType(struct soap *soap, const char *URL, struct wst__LifetimeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__LifetimeType(soap, p), 0) || ::soap_put_wst__LifetimeType(soap, p, "wst:LifetimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__LifetimeType(struct soap *soap, const char *URL, struct wst__LifetimeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__LifetimeType(soap, p), 0) || ::soap_put_wst__LifetimeType(soap, p, "wst:LifetimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__LifetimeType(struct soap *soap, const char *URL, struct wst__LifetimeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__LifetimeType(soap, p), 0) || ::soap_put_wst__LifetimeType(soap, p, "wst:LifetimeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__LifetimeType * SOAP_FMAC4 soap_get_wst__LifetimeType(struct soap*, struct wst__LifetimeType *, const char*, const char*);

inline int soap_read_wst__LifetimeType(struct soap *soap, struct wst__LifetimeType *p)
{
	if (p)
	{	::soap_default_wst__LifetimeType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__LifetimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__LifetimeType(struct soap *soap, const char *URL, struct wst__LifetimeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__LifetimeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__LifetimeType(struct soap *soap, struct wst__LifetimeType *p)
{
	if (::soap_read_wst__LifetimeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__EntropyType_DEFINED
#define SOAP_TYPE_wst__EntropyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__EntropyType(struct soap*, struct wst__EntropyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__EntropyType(struct soap*, const struct wst__EntropyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__EntropyType(struct soap*, const char*, int, const struct wst__EntropyType *, const char*);
SOAP_FMAC3 struct wst__EntropyType * SOAP_FMAC4 soap_in_wst__EntropyType(struct soap*, const char*, struct wst__EntropyType *, const char*);
SOAP_FMAC1 struct wst__EntropyType * SOAP_FMAC2 soap_instantiate_wst__EntropyType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__EntropyType * soap_new_wst__EntropyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__EntropyType(soap, n, NULL, NULL, NULL);
}

inline struct wst__EntropyType * soap_new_req_wst__EntropyType(
	struct soap *soap)
{
	struct wst__EntropyType *_p = ::soap_new_wst__EntropyType(soap);
	if (_p)
	{	::soap_default_wst__EntropyType(soap, _p);
	}
	return _p;
}

inline struct wst__EntropyType * soap_new_set_wst__EntropyType(
	struct soap *soap,
	struct wst__BinarySecretType *BinarySecret)
{
	struct wst__EntropyType *_p = ::soap_new_wst__EntropyType(soap);
	if (_p)
	{	::soap_default_wst__EntropyType(soap, _p);
		_p->BinarySecret = BinarySecret;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__EntropyType(struct soap*, const struct wst__EntropyType *, const char*, const char*);

inline int soap_write_wst__EntropyType(struct soap *soap, struct wst__EntropyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__EntropyType(soap, p), 0) || ::soap_put_wst__EntropyType(soap, p, "wst:EntropyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__EntropyType(struct soap *soap, const char *URL, struct wst__EntropyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__EntropyType(soap, p), 0) || ::soap_put_wst__EntropyType(soap, p, "wst:EntropyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__EntropyType(struct soap *soap, const char *URL, struct wst__EntropyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__EntropyType(soap, p), 0) || ::soap_put_wst__EntropyType(soap, p, "wst:EntropyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__EntropyType(struct soap *soap, const char *URL, struct wst__EntropyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__EntropyType(soap, p), 0) || ::soap_put_wst__EntropyType(soap, p, "wst:EntropyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__EntropyType * SOAP_FMAC4 soap_get_wst__EntropyType(struct soap*, struct wst__EntropyType *, const char*, const char*);

inline int soap_read_wst__EntropyType(struct soap *soap, struct wst__EntropyType *p)
{
	if (p)
	{	::soap_default_wst__EntropyType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__EntropyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__EntropyType(struct soap *soap, const char *URL, struct wst__EntropyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__EntropyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__EntropyType(struct soap *soap, struct wst__EntropyType *p)
{
	if (::soap_read_wst__EntropyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__ClaimsType_DEFINED
#define SOAP_TYPE_wst__ClaimsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__ClaimsType(struct soap*, struct wst__ClaimsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__ClaimsType(struct soap*, const struct wst__ClaimsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__ClaimsType(struct soap*, const char*, int, const struct wst__ClaimsType *, const char*);
SOAP_FMAC3 struct wst__ClaimsType * SOAP_FMAC4 soap_in_wst__ClaimsType(struct soap*, const char*, struct wst__ClaimsType *, const char*);
SOAP_FMAC1 struct wst__ClaimsType * SOAP_FMAC2 soap_instantiate_wst__ClaimsType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__ClaimsType * soap_new_wst__ClaimsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__ClaimsType(soap, n, NULL, NULL, NULL);
}

inline struct wst__ClaimsType * soap_new_req_wst__ClaimsType(
	struct soap *soap)
{
	struct wst__ClaimsType *_p = ::soap_new_wst__ClaimsType(soap);
	if (_p)
	{	::soap_default_wst__ClaimsType(soap, _p);
	}
	return _p;
}

inline struct wst__ClaimsType * soap_new_set_wst__ClaimsType(
	struct soap *soap,
	char *Dialect)
{
	struct wst__ClaimsType *_p = ::soap_new_wst__ClaimsType(soap);
	if (_p)
	{	::soap_default_wst__ClaimsType(soap, _p);
		_p->Dialect = Dialect;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__ClaimsType(struct soap*, const struct wst__ClaimsType *, const char*, const char*);

inline int soap_write_wst__ClaimsType(struct soap *soap, struct wst__ClaimsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__ClaimsType(soap, p), 0) || ::soap_put_wst__ClaimsType(soap, p, "wst:ClaimsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__ClaimsType(struct soap *soap, const char *URL, struct wst__ClaimsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ClaimsType(soap, p), 0) || ::soap_put_wst__ClaimsType(soap, p, "wst:ClaimsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__ClaimsType(struct soap *soap, const char *URL, struct wst__ClaimsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ClaimsType(soap, p), 0) || ::soap_put_wst__ClaimsType(soap, p, "wst:ClaimsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__ClaimsType(struct soap *soap, const char *URL, struct wst__ClaimsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__ClaimsType(soap, p), 0) || ::soap_put_wst__ClaimsType(soap, p, "wst:ClaimsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__ClaimsType * SOAP_FMAC4 soap_get_wst__ClaimsType(struct soap*, struct wst__ClaimsType *, const char*, const char*);

inline int soap_read_wst__ClaimsType(struct soap *soap, struct wst__ClaimsType *p)
{
	if (p)
	{	::soap_default_wst__ClaimsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__ClaimsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__ClaimsType(struct soap *soap, const char *URL, struct wst__ClaimsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__ClaimsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__ClaimsType(struct soap *soap, struct wst__ClaimsType *p)
{
	if (::soap_read_wst__ClaimsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__BinarySecretType_DEFINED
#define SOAP_TYPE_wst__BinarySecretType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__BinarySecretType(struct soap*, struct wst__BinarySecretType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__BinarySecretType(struct soap*, const struct wst__BinarySecretType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__BinarySecretType(struct soap*, const char*, int, const struct wst__BinarySecretType *, const char*);
SOAP_FMAC3 struct wst__BinarySecretType * SOAP_FMAC4 soap_in_wst__BinarySecretType(struct soap*, const char*, struct wst__BinarySecretType *, const char*);
SOAP_FMAC1 struct wst__BinarySecretType * SOAP_FMAC2 soap_instantiate_wst__BinarySecretType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__BinarySecretType * soap_new_wst__BinarySecretType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__BinarySecretType(soap, n, NULL, NULL, NULL);
}

inline struct wst__BinarySecretType * soap_new_req_wst__BinarySecretType(
	struct soap *soap)
{
	struct wst__BinarySecretType *_p = ::soap_new_wst__BinarySecretType(soap);
	if (_p)
	{	::soap_default_wst__BinarySecretType(soap, _p);
	}
	return _p;
}

inline struct wst__BinarySecretType * soap_new_set_wst__BinarySecretType(
	struct soap *soap,
	char *__item,
	char *Type)
{
	struct wst__BinarySecretType *_p = ::soap_new_wst__BinarySecretType(soap);
	if (_p)
	{	::soap_default_wst__BinarySecretType(soap, _p);
		_p->__item = __item;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__BinarySecretType(struct soap*, const struct wst__BinarySecretType *, const char*, const char*);

inline int soap_write_wst__BinarySecretType(struct soap *soap, struct wst__BinarySecretType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__BinarySecretType(soap, p), 0) || ::soap_put_wst__BinarySecretType(soap, p, "wst:BinarySecretType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__BinarySecretType(struct soap *soap, const char *URL, struct wst__BinarySecretType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__BinarySecretType(soap, p), 0) || ::soap_put_wst__BinarySecretType(soap, p, "wst:BinarySecretType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__BinarySecretType(struct soap *soap, const char *URL, struct wst__BinarySecretType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__BinarySecretType(soap, p), 0) || ::soap_put_wst__BinarySecretType(soap, p, "wst:BinarySecretType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__BinarySecretType(struct soap *soap, const char *URL, struct wst__BinarySecretType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__BinarySecretType(soap, p), 0) || ::soap_put_wst__BinarySecretType(soap, p, "wst:BinarySecretType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__BinarySecretType * SOAP_FMAC4 soap_get_wst__BinarySecretType(struct soap*, struct wst__BinarySecretType *, const char*, const char*);

inline int soap_read_wst__BinarySecretType(struct soap *soap, struct wst__BinarySecretType *p)
{
	if (p)
	{	::soap_default_wst__BinarySecretType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__BinarySecretType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__BinarySecretType(struct soap *soap, const char *URL, struct wst__BinarySecretType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__BinarySecretType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__BinarySecretType(struct soap *soap, struct wst__BinarySecretType *p)
{
	if (::soap_read_wst__BinarySecretType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RequestedSecurityTokenType_DEFINED
#define SOAP_TYPE_wst__RequestedSecurityTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RequestedSecurityTokenType(struct soap*, struct wst__RequestedSecurityTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestedSecurityTokenType(struct soap*, const struct wst__RequestedSecurityTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RequestedSecurityTokenType(struct soap*, const char*, int, const struct wst__RequestedSecurityTokenType *, const char*);
SOAP_FMAC3 struct wst__RequestedSecurityTokenType * SOAP_FMAC4 soap_in_wst__RequestedSecurityTokenType(struct soap*, const char*, struct wst__RequestedSecurityTokenType *, const char*);
SOAP_FMAC1 struct wst__RequestedSecurityTokenType * SOAP_FMAC2 soap_instantiate_wst__RequestedSecurityTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RequestedSecurityTokenType * soap_new_wst__RequestedSecurityTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RequestedSecurityTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RequestedSecurityTokenType * soap_new_req_wst__RequestedSecurityTokenType(
	struct soap *soap)
{
	struct wst__RequestedSecurityTokenType *_p = ::soap_new_wst__RequestedSecurityTokenType(soap);
	if (_p)
	{	::soap_default_wst__RequestedSecurityTokenType(soap, _p);
	}
	return _p;
}

inline struct wst__RequestedSecurityTokenType * soap_new_set_wst__RequestedSecurityTokenType(
	struct soap *soap,
	struct saml1__AssertionType *saml1__Assertion,
	struct saml2__AssertionType *saml2__Assertion,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	struct wsc__SecurityContextTokenType *wsc__SecurityContextToken)
{
	struct wst__RequestedSecurityTokenType *_p = ::soap_new_wst__RequestedSecurityTokenType(soap);
	if (_p)
	{	::soap_default_wst__RequestedSecurityTokenType(soap, _p);
		_p->saml1__Assertion = saml1__Assertion;
		_p->saml2__Assertion = saml2__Assertion;
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->wsc__SecurityContextToken = wsc__SecurityContextToken;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RequestedSecurityTokenType(struct soap*, const struct wst__RequestedSecurityTokenType *, const char*, const char*);

inline int soap_write_wst__RequestedSecurityTokenType(struct soap *soap, struct wst__RequestedSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RequestedSecurityTokenType(soap, p), 0) || ::soap_put_wst__RequestedSecurityTokenType(soap, p, "wst:RequestedSecurityTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RequestedSecurityTokenType(struct soap *soap, const char *URL, struct wst__RequestedSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedSecurityTokenType(soap, p), 0) || ::soap_put_wst__RequestedSecurityTokenType(soap, p, "wst:RequestedSecurityTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RequestedSecurityTokenType(struct soap *soap, const char *URL, struct wst__RequestedSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedSecurityTokenType(soap, p), 0) || ::soap_put_wst__RequestedSecurityTokenType(soap, p, "wst:RequestedSecurityTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RequestedSecurityTokenType(struct soap *soap, const char *URL, struct wst__RequestedSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestedSecurityTokenType(soap, p), 0) || ::soap_put_wst__RequestedSecurityTokenType(soap, p, "wst:RequestedSecurityTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RequestedSecurityTokenType * SOAP_FMAC4 soap_get_wst__RequestedSecurityTokenType(struct soap*, struct wst__RequestedSecurityTokenType *, const char*, const char*);

inline int soap_read_wst__RequestedSecurityTokenType(struct soap *soap, struct wst__RequestedSecurityTokenType *p)
{
	if (p)
	{	::soap_default_wst__RequestedSecurityTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RequestedSecurityTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RequestedSecurityTokenType(struct soap *soap, const char *URL, struct wst__RequestedSecurityTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RequestedSecurityTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RequestedSecurityTokenType(struct soap *soap, struct wst__RequestedSecurityTokenType *p)
{
	if (::soap_read_wst__RequestedSecurityTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RequestSecurityTokenResponseType_DEFINED
#define SOAP_TYPE_wst__RequestSecurityTokenResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RequestSecurityTokenResponseType(struct soap*, struct wst__RequestSecurityTokenResponseType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestSecurityTokenResponseType(struct soap*, const struct wst__RequestSecurityTokenResponseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RequestSecurityTokenResponseType(struct soap*, const char*, int, const struct wst__RequestSecurityTokenResponseType *, const char*);
SOAP_FMAC3 struct wst__RequestSecurityTokenResponseType * SOAP_FMAC4 soap_in_wst__RequestSecurityTokenResponseType(struct soap*, const char*, struct wst__RequestSecurityTokenResponseType *, const char*);
SOAP_FMAC1 struct wst__RequestSecurityTokenResponseType * SOAP_FMAC2 soap_instantiate_wst__RequestSecurityTokenResponseType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RequestSecurityTokenResponseType * soap_new_wst__RequestSecurityTokenResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RequestSecurityTokenResponseType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RequestSecurityTokenResponseType * soap_new_req_wst__RequestSecurityTokenResponseType(
	struct soap *soap)
{
	struct wst__RequestSecurityTokenResponseType *_p = ::soap_new_wst__RequestSecurityTokenResponseType(soap);
	if (_p)
	{	::soap_default_wst__RequestSecurityTokenResponseType(soap, _p);
	}
	return _p;
}

inline struct wst__RequestSecurityTokenResponseType * soap_new_set_wst__RequestSecurityTokenResponseType(
	struct soap *soap,
	char *Context,
	struct wst__RequestedSecurityTokenType *RequestedSecurityToken,
	struct wst__RequestedReferenceType *RequestedAttachedReference,
	struct wst__RequestedReferenceType *RequestedUnattachedReference,
	struct wst__RequestedProofTokenType *RequestedProofToken,
	char *KeyType,
	char *RequestType,
	char *TokenType,
	struct wst__EntropyType *Entropy,
	struct wst__LifetimeType *Lifetime,
	unsigned int *KeySize,
	struct wst__BinaryExchangeType *BinaryExchange,
	struct wst__AuthenticatorType *Authenticator)
{
	struct wst__RequestSecurityTokenResponseType *_p = ::soap_new_wst__RequestSecurityTokenResponseType(soap);
	if (_p)
	{	::soap_default_wst__RequestSecurityTokenResponseType(soap, _p);
		_p->Context = Context;
		_p->RequestedSecurityToken = RequestedSecurityToken;
		_p->RequestedAttachedReference = RequestedAttachedReference;
		_p->RequestedUnattachedReference = RequestedUnattachedReference;
		_p->RequestedProofToken = RequestedProofToken;
		_p->KeyType = KeyType;
		_p->RequestType = RequestType;
		_p->TokenType = TokenType;
		_p->Entropy = Entropy;
		_p->Lifetime = Lifetime;
		_p->KeySize = KeySize;
		_p->BinaryExchange = BinaryExchange;
		_p->Authenticator = Authenticator;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RequestSecurityTokenResponseType(struct soap*, const struct wst__RequestSecurityTokenResponseType *, const char*, const char*);

inline int soap_write_wst__RequestSecurityTokenResponseType(struct soap *soap, struct wst__RequestSecurityTokenResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RequestSecurityTokenResponseType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenResponseType(soap, p, "wst:RequestSecurityTokenResponseType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RequestSecurityTokenResponseType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenResponseType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenResponseType(soap, p, "wst:RequestSecurityTokenResponseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RequestSecurityTokenResponseType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenResponseType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenResponseType(soap, p, "wst:RequestSecurityTokenResponseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RequestSecurityTokenResponseType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenResponseType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenResponseType(soap, p, "wst:RequestSecurityTokenResponseType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RequestSecurityTokenResponseType * SOAP_FMAC4 soap_get_wst__RequestSecurityTokenResponseType(struct soap*, struct wst__RequestSecurityTokenResponseType *, const char*, const char*);

inline int soap_read_wst__RequestSecurityTokenResponseType(struct soap *soap, struct wst__RequestSecurityTokenResponseType *p)
{
	if (p)
	{	::soap_default_wst__RequestSecurityTokenResponseType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RequestSecurityTokenResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RequestSecurityTokenResponseType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RequestSecurityTokenResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RequestSecurityTokenResponseType(struct soap *soap, struct wst__RequestSecurityTokenResponseType *p)
{
	if (::soap_read_wst__RequestSecurityTokenResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wst__RequestSecurityTokenType_DEFINED
#define SOAP_TYPE_wst__RequestSecurityTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wst__RequestSecurityTokenType(struct soap*, struct wst__RequestSecurityTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wst__RequestSecurityTokenType(struct soap*, const struct wst__RequestSecurityTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__RequestSecurityTokenType(struct soap*, const char*, int, const struct wst__RequestSecurityTokenType *, const char*);
SOAP_FMAC3 struct wst__RequestSecurityTokenType * SOAP_FMAC4 soap_in_wst__RequestSecurityTokenType(struct soap*, const char*, struct wst__RequestSecurityTokenType *, const char*);
SOAP_FMAC1 struct wst__RequestSecurityTokenType * SOAP_FMAC2 soap_instantiate_wst__RequestSecurityTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wst__RequestSecurityTokenType * soap_new_wst__RequestSecurityTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wst__RequestSecurityTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wst__RequestSecurityTokenType * soap_new_req_wst__RequestSecurityTokenType(
	struct soap *soap)
{
	struct wst__RequestSecurityTokenType *_p = ::soap_new_wst__RequestSecurityTokenType(soap);
	if (_p)
	{	::soap_default_wst__RequestSecurityTokenType(soap, _p);
	}
	return _p;
}

inline struct wst__RequestSecurityTokenType * soap_new_set_wst__RequestSecurityTokenType(
	struct soap *soap,
	char *Context,
	struct _wsp__AppliesTo_ *wsp__AppliesTo,
	char *KeyType,
	char *RequestType,
	char *TokenType,
	struct wst__EntropyType *Entropy,
	char *ComputedKeyAlgorithm,
	unsigned int *KeySize,
	struct wst__BinaryExchangeType *BinaryExchange,
	struct wst__AuthenticatorType *Authenticator)
{
	struct wst__RequestSecurityTokenType *_p = ::soap_new_wst__RequestSecurityTokenType(soap);
	if (_p)
	{	::soap_default_wst__RequestSecurityTokenType(soap, _p);
		_p->Context = Context;
		_p->wsp__AppliesTo = wsp__AppliesTo;
		_p->KeyType = KeyType;
		_p->RequestType = RequestType;
		_p->TokenType = TokenType;
		_p->Entropy = Entropy;
		_p->ComputedKeyAlgorithm = ComputedKeyAlgorithm;
		_p->KeySize = KeySize;
		_p->BinaryExchange = BinaryExchange;
		_p->Authenticator = Authenticator;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wst__RequestSecurityTokenType(struct soap*, const struct wst__RequestSecurityTokenType *, const char*, const char*);

inline int soap_write_wst__RequestSecurityTokenType(struct soap *soap, struct wst__RequestSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wst__RequestSecurityTokenType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenType(soap, p, "wst:RequestSecurityTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wst__RequestSecurityTokenType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenType(soap, p, "wst:RequestSecurityTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wst__RequestSecurityTokenType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenType(soap, p, "wst:RequestSecurityTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wst__RequestSecurityTokenType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wst__RequestSecurityTokenType(soap, p), 0) || ::soap_put_wst__RequestSecurityTokenType(soap, p, "wst:RequestSecurityTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wst__RequestSecurityTokenType * SOAP_FMAC4 soap_get_wst__RequestSecurityTokenType(struct soap*, struct wst__RequestSecurityTokenType *, const char*, const char*);

inline int soap_read_wst__RequestSecurityTokenType(struct soap *soap, struct wst__RequestSecurityTokenType *p)
{
	if (p)
	{	::soap_default_wst__RequestSecurityTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wst__RequestSecurityTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wst__RequestSecurityTokenType(struct soap *soap, const char *URL, struct wst__RequestSecurityTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wst__RequestSecurityTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wst__RequestSecurityTokenType(struct soap *soap, struct wst__RequestSecurityTokenType *p)
{
	if (::soap_read_wst__RequestSecurityTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsp__AppliesTo__DEFINED
#define SOAP_TYPE__wsp__AppliesTo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsp__AppliesTo_(struct soap*, struct _wsp__AppliesTo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsp__AppliesTo_(struct soap*, const struct _wsp__AppliesTo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsp__AppliesTo_(struct soap*, const char*, int, const struct _wsp__AppliesTo_ *, const char*);
SOAP_FMAC3 struct _wsp__AppliesTo_ * SOAP_FMAC4 soap_in__wsp__AppliesTo_(struct soap*, const char*, struct _wsp__AppliesTo_ *, const char*);
SOAP_FMAC1 struct _wsp__AppliesTo_ * SOAP_FMAC2 soap_instantiate__wsp__AppliesTo_(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsp__AppliesTo_ * soap_new__wsp__AppliesTo_(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsp__AppliesTo_(soap, n, NULL, NULL, NULL);
}

inline struct _wsp__AppliesTo_ * soap_new_req__wsp__AppliesTo_(
	struct soap *soap)
{
	struct _wsp__AppliesTo_ *_p = ::soap_new__wsp__AppliesTo_(soap);
	if (_p)
	{	::soap_default__wsp__AppliesTo_(soap, _p);
	}
	return _p;
}

inline struct _wsp__AppliesTo_ * soap_new_set__wsp__AppliesTo_(
	struct soap *soap,
	struct wsa5__EndpointReferenceType *wsa5__EndpointReference)
{
	struct _wsp__AppliesTo_ *_p = ::soap_new__wsp__AppliesTo_(soap);
	if (_p)
	{	::soap_default__wsp__AppliesTo_(soap, _p);
		_p->wsa5__EndpointReference = wsa5__EndpointReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsp__AppliesTo_(struct soap*, const struct _wsp__AppliesTo_ *, const char*, const char*);

inline int soap_write__wsp__AppliesTo_(struct soap *soap, struct _wsp__AppliesTo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsp__AppliesTo_(soap, p), 0) || ::soap_put__wsp__AppliesTo_(soap, p, "wsp:AppliesTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsp__AppliesTo_(struct soap *soap, const char *URL, struct _wsp__AppliesTo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsp__AppliesTo_(soap, p), 0) || ::soap_put__wsp__AppliesTo_(soap, p, "wsp:AppliesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsp__AppliesTo_(struct soap *soap, const char *URL, struct _wsp__AppliesTo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsp__AppliesTo_(soap, p), 0) || ::soap_put__wsp__AppliesTo_(soap, p, "wsp:AppliesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsp__AppliesTo_(struct soap *soap, const char *URL, struct _wsp__AppliesTo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsp__AppliesTo_(soap, p), 0) || ::soap_put__wsp__AppliesTo_(soap, p, "wsp:AppliesTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsp__AppliesTo_ * SOAP_FMAC4 soap_get__wsp__AppliesTo_(struct soap*, struct _wsp__AppliesTo_ *, const char*, const char*);

inline int soap_read__wsp__AppliesTo_(struct soap *soap, struct _wsp__AppliesTo_ *p)
{
	if (p)
	{	::soap_default__wsp__AppliesTo_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsp__AppliesTo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsp__AppliesTo_(struct soap *soap, const char *URL, struct _wsp__AppliesTo_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsp__AppliesTo_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsp__AppliesTo_(struct soap *soap, struct _wsp__AppliesTo_ *p)
{
	if (::soap_read__wsp__AppliesTo_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_chan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL);
}

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(
	struct soap *soap,
	int __item)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
	}
	return _p;
}

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(
	struct soap *soap,
	int __item,
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
		_p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_write_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_read_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (p)
	{	::soap_default_chan__ChannelInstanceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_chan__ChannelInstanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__ProblemAction is a typedef synonym of wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction_DEFINED
#define SOAP_TYPE__wsa5__ProblemAction_DEFINED

#define soap_default__wsa5__ProblemAction soap_default_wsa5__ProblemActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);

#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap__wsa5__ProblemAction2s soap_wsa5__ProblemActionType2s


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_s2_wsa5__ProblemAction soap_s2wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_new__wsa5__ProblemAction soap_new_wsa5__ProblemActionType


#define soap_new_req__wsa5__ProblemAction soap_new_req_wsa5__ProblemActionType


#define soap_new_set__wsa5__ProblemAction soap_new_set_wsa5__ProblemActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemAction(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write__wsa5__ProblemAction(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_read__wsa5__ProblemAction soap_read_wsa5__ProblemActionType


#define soap_GET__wsa5__ProblemAction soap_GET_wsa5__ProblemActionType


#define soap_POST_recv__wsa5__ProblemAction soap_POST_recv_wsa5__ProblemActionType

#endif
/* _wsa5__FaultTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo_DEFINED
#define SOAP_TYPE__wsa5__FaultTo_DEFINED

#define soap_default__wsa5__FaultTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__FaultTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__FaultTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__FaultTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__FaultTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__FaultTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__FaultTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__FaultTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__FaultTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__FaultTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__From is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From_DEFINED
#define SOAP_TYPE__wsa5__From_DEFINED

#define soap_default__wsa5__From soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__From2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__From soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__From soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__From soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__From soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__From(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__From soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__From soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__From soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__ReplyTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo_DEFINED
#define SOAP_TYPE__wsa5__ReplyTo_DEFINED

#define soap_default__wsa5__ReplyTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__ReplyTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__ReplyTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__ReplyTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__ReplyTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__ReplyTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReplyTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__ReplyTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__ReplyTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__ReplyTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__RelatesTo is a typedef synonym of wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo_DEFINED
#define SOAP_TYPE__wsa5__RelatesTo_DEFINED

#define soap_default__wsa5__RelatesTo soap_default_wsa5__RelatesToType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);

#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap__wsa5__RelatesTo2s soap_wsa5__RelatesToType2s


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_s2_wsa5__RelatesTo soap_s2wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_new__wsa5__RelatesTo soap_new_wsa5__RelatesToType


#define soap_new_req__wsa5__RelatesTo soap_new_req_wsa5__RelatesToType


#define soap_new_set__wsa5__RelatesTo soap_new_set_wsa5__RelatesToType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RelatesTo(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write__wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_read__wsa5__RelatesTo soap_read_wsa5__RelatesToType


#define soap_GET__wsa5__RelatesTo soap_GET_wsa5__RelatesToType


#define soap_POST_recv__wsa5__RelatesTo soap_POST_recv_wsa5__RelatesToType

#endif
/* _wsa5__Metadata is a typedef synonym of wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata_DEFINED
#define SOAP_TYPE__wsa5__Metadata_DEFINED

#define soap_default__wsa5__Metadata soap_default_wsa5__MetadataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);

#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap__wsa5__Metadata2s soap_wsa5__MetadataType2s


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_s2_wsa5__Metadata soap_s2wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_new__wsa5__Metadata soap_new_wsa5__MetadataType


#define soap_new_req__wsa5__Metadata soap_new_req_wsa5__MetadataType


#define soap_new_set__wsa5__Metadata soap_new_set_wsa5__MetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Metadata(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write__wsa5__Metadata(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_read__wsa5__Metadata soap_read_wsa5__MetadataType


#define soap_GET__wsa5__Metadata soap_GET_wsa5__MetadataType


#define soap_POST_recv__wsa5__Metadata soap_POST_recv_wsa5__MetadataType

#endif
/* _wsa5__ReferenceParameters is a typedef synonym of wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters_DEFINED
#define SOAP_TYPE__wsa5__ReferenceParameters_DEFINED

#define soap_default__wsa5__ReferenceParameters soap_default_wsa5__ReferenceParametersType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);

#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap__wsa5__ReferenceParameters2s soap_wsa5__ReferenceParametersType2s


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_s2_wsa5__ReferenceParameters soap_s2wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_new__wsa5__ReferenceParameters soap_new_wsa5__ReferenceParametersType


#define soap_new_req__wsa5__ReferenceParameters soap_new_req_wsa5__ReferenceParametersType


#define soap_new_set__wsa5__ReferenceParameters soap_new_set_wsa5__ReferenceParametersType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReferenceParameters(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write__wsa5__ReferenceParameters(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_read__wsa5__ReferenceParameters soap_read_wsa5__ReferenceParametersType


#define soap_GET__wsa5__ReferenceParameters soap_GET_wsa5__ReferenceParametersType


#define soap_POST_recv__wsa5__ReferenceParameters soap_POST_recv_wsa5__ReferenceParametersType

#endif
/* _wsa5__EndpointReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference_DEFINED
#define SOAP_TYPE__wsa5__EndpointReference_DEFINED

#define soap_default__wsa5__EndpointReference soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__EndpointReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__EndpointReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__EndpointReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__EndpointReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__EndpointReference soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__EndpointReference(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__EndpointReference(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__EndpointReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__EndpointReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__EndpointReference soap_POST_recv_wsa5__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType_DEFINED
#define SOAP_TYPE_wsa5__ProblemActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(
	struct soap *soap)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
	}
	return _p;
}

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(
	struct soap *soap,
	char *Action,
	char *SoapAction,
	char *__anyAttribute)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
		_p->Action = Action;
		_p->SoapAction = SoapAction;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_read_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (p)
	{	::soap_default_wsa5__ProblemActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType_DEFINED
#define SOAP_TYPE_wsa5__RelatesToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);
SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(
	struct soap *soap)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
	}
	return _p;
}

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_read_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (p)
	{	::soap_default_wsa5__RelatesToType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType_DEFINED
#define SOAP_TYPE_wsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);
SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

inline int soap_read_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (p)
	{	::soap_default_wsa5__MetadataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(
	struct soap *soap,
	int *chan__ChannelInstance,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa5__ReferenceParametersType *ReferenceParameters,
	struct wsa5__MetadataType *Metadata,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceParameters = ReferenceParameters;
		_p->Metadata = Metadata;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap,
	int __sizeIssuedTokens,
	struct wst__RequestSecurityTokenResponseCollectionType *wst__IssuedTokens,
	int __sizeAckRequested,
	struct wsrm__AckRequestedType *wsrm__AckRequested,
	int __sizeSequenceAcknowledgement,
	struct _wsrm__SequenceAcknowledgement *wsrm__SequenceAcknowledgement)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->__sizeIssuedTokens = __sizeIssuedTokens;
		_p->wst__IssuedTokens = wst__IssuedTokens;
		_p->__sizeAckRequested = __sizeAckRequested;
		_p->wsrm__AckRequested = wsrm__AckRequested;
		_p->__sizeSequenceAcknowledgement = __sizeSequenceAcknowledgement;
		_p->wsrm__SequenceAcknowledgement = wsrm__SequenceAcknowledgement;
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	struct _wsse__Security *wsse__Security,
	char *wsa5__MessageID,
	struct wsa5__RelatesToType *wsa5__RelatesTo,
	struct wsa5__EndpointReferenceType *wsa5__From,
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo,
	struct wsa5__EndpointReferenceType *wsa5__FaultTo,
	char *wsa5__To,
	char *wsa5__Action,
	struct chan__ChannelInstanceType *chan__ChannelInstance,
	int __sizeIssuedTokens,
	struct wst__RequestSecurityTokenResponseCollectionType *wst__IssuedTokens,
	char *wst__RequestType,
	struct wsrm__SequenceType *wsrm__Sequence,
	int __sizeAckRequested,
	struct wsrm__AckRequestedType *wsrm__AckRequested,
	int __sizeSequenceAcknowledgement,
	struct _wsrm__SequenceAcknowledgement *wsrm__SequenceAcknowledgement,
	struct wsrm__SequenceFaultType *wsrm__SequenceFault)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsse__Security = wsse__Security;
		_p->wsa5__MessageID = wsa5__MessageID;
		_p->wsa5__RelatesTo = wsa5__RelatesTo;
		_p->wsa5__From = wsa5__From;
		_p->wsa5__ReplyTo = wsa5__ReplyTo;
		_p->wsa5__FaultTo = wsa5__FaultTo;
		_p->wsa5__To = wsa5__To;
		_p->wsa5__Action = wsa5__Action;
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__sizeIssuedTokens = __sizeIssuedTokens;
		_p->wst__IssuedTokens = wst__IssuedTokens;
		_p->wst__RequestType = wst__RequestType;
		_p->wsrm__Sequence = wsrm__Sequence;
		_p->__sizeAckRequested = __sizeAckRequested;
		_p->wsrm__AckRequested = wsrm__AckRequested;
		_p->__sizeSequenceAcknowledgement = __sizeSequenceAcknowledgement;
		_p->wsrm__SequenceAcknowledgement = wsrm__SequenceAcknowledgement;
		_p->wsrm__SequenceFault = wsrm__SequenceFault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE__wsse__Security_DEFINED
#define SOAP_TYPE__wsse__Security_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Security(struct soap*, struct _wsse__Security *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Security(struct soap*, const struct _wsse__Security *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Security(struct soap*, const char*, int, const struct _wsse__Security *, const char*);
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_in__wsse__Security(struct soap*, const char*, struct _wsse__Security *, const char*);
SOAP_FMAC1 struct _wsse__Security * SOAP_FMAC2 soap_instantiate__wsse__Security(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Security * soap_new__wsse__Security(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Security(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Security * soap_new_req__wsse__Security(
	struct soap *soap)
{
	struct _wsse__Security *_p = ::soap_new__wsse__Security(soap);
	if (_p)
	{	::soap_default__wsse__Security(soap, _p);
	}
	return _p;
}

inline struct _wsse__Security * soap_new_set__wsse__Security(
	struct soap *soap,
	struct _wsu__Timestamp *wsu__Timestamp,
	struct _wsse__UsernameToken *UsernameToken,
	struct _wsse__BinarySecurityToken *BinarySecurityToken,
	struct xenc__EncryptedKeyType *xenc__EncryptedKey,
	struct _xenc__ReferenceList *xenc__ReferenceList,
	struct wsc__SecurityContextTokenType *wsc__SecurityContextToken,
	struct ds__SignatureType *ds__Signature,
	struct saml1__AssertionType *saml1__Assertion,
	struct saml2__AssertionType *saml2__Assertion,
	char *SOAP_ENV__actor,
	char *SOAP_ENV__role)
{
	struct _wsse__Security *_p = ::soap_new__wsse__Security(soap);
	if (_p)
	{	::soap_default__wsse__Security(soap, _p);
		_p->wsu__Timestamp = wsu__Timestamp;
		_p->UsernameToken = UsernameToken;
		_p->BinarySecurityToken = BinarySecurityToken;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
		_p->xenc__ReferenceList = xenc__ReferenceList;
		_p->wsc__SecurityContextToken = wsc__SecurityContextToken;
		_p->ds__Signature = ds__Signature;
		_p->saml1__Assertion = saml1__Assertion;
		_p->saml2__Assertion = saml2__Assertion;
		_p->SOAP_ENV__actor = SOAP_ENV__actor;
		_p->SOAP_ENV__role = SOAP_ENV__role;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Security(struct soap*, const struct _wsse__Security *, const char*, const char*);

inline int soap_write__wsse__Security(struct soap *soap, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_get__wsse__Security(struct soap*, struct _wsse__Security *, const char*, const char*);

inline int soap_read__wsse__Security(struct soap *soap, struct _wsse__Security *p)
{
	if (p)
	{	::soap_default__wsse__Security(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Security(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Security(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Security(struct soap *soap, struct _wsse__Security *p)
{
	if (::soap_read__wsse__Security(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _saml2__EncryptedAttribute is a typedef synonym of saml2__EncryptedElementType */

#ifndef SOAP_TYPE__saml2__EncryptedAttribute_DEFINED
#define SOAP_TYPE__saml2__EncryptedAttribute_DEFINED

#define soap_default__saml2__EncryptedAttribute soap_default_saml2__EncryptedElementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);

#define soap_serialize__saml2__EncryptedAttribute soap_serialize_saml2__EncryptedElementType


#define soap__saml2__EncryptedAttribute2s soap_saml2__EncryptedElementType2s


#define soap_out__saml2__EncryptedAttribute soap_out_saml2__EncryptedElementType


#define soap_s2_saml2__EncryptedAttribute soap_s2saml2__EncryptedElementType


#define soap_in__saml2__EncryptedAttribute soap_in_saml2__EncryptedElementType


#define soap_instantiate__saml2__EncryptedAttribute soap_instantiate_saml2__EncryptedElementType


#define soap_new__saml2__EncryptedAttribute soap_new_saml2__EncryptedElementType


#define soap_new_req__saml2__EncryptedAttribute soap_new_req_saml2__EncryptedElementType


#define soap_new_set__saml2__EncryptedAttribute soap_new_set_saml2__EncryptedElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedAttribute(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write__saml2__EncryptedAttribute(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__EncryptedAttribute(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__EncryptedAttribute(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__EncryptedAttribute(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__EncryptedAttribute soap_get_saml2__EncryptedElementType


#define soap_read__saml2__EncryptedAttribute soap_read_saml2__EncryptedElementType


#define soap_GET__saml2__EncryptedAttribute soap_GET_saml2__EncryptedElementType


#define soap_POST_recv__saml2__EncryptedAttribute soap_POST_recv_saml2__EncryptedElementType

#endif
/* _saml2__Attribute is a typedef synonym of saml2__AttributeType */

#ifndef SOAP_TYPE__saml2__Attribute_DEFINED
#define SOAP_TYPE__saml2__Attribute_DEFINED

#define soap_default__saml2__Attribute soap_default_saml2__AttributeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *);

#define soap_serialize__saml2__Attribute soap_serialize_saml2__AttributeType


#define soap__saml2__Attribute2s soap_saml2__AttributeType2s


#define soap_out__saml2__Attribute soap_out_saml2__AttributeType


#define soap_s2_saml2__Attribute soap_s2saml2__AttributeType


#define soap_in__saml2__Attribute soap_in_saml2__AttributeType


#define soap_instantiate__saml2__Attribute soap_instantiate_saml2__AttributeType


#define soap_new__saml2__Attribute soap_new_saml2__AttributeType


#define soap_new_req__saml2__Attribute soap_new_req_saml2__AttributeType


#define soap_new_set__saml2__Attribute soap_new_set_saml2__AttributeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Attribute(struct soap*, const struct saml2__AttributeType *, const char*, const char*);

inline int soap_write__saml2__Attribute(struct soap *soap, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Attribute(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Attribute(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Attribute(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Attribute soap_get_saml2__AttributeType


#define soap_read__saml2__Attribute soap_read_saml2__AttributeType


#define soap_GET__saml2__Attribute soap_GET_saml2__AttributeType


#define soap_POST_recv__saml2__Attribute soap_POST_recv_saml2__AttributeType

#endif
/* _saml2__AttributeStatement is a typedef synonym of saml2__AttributeStatementType */

#ifndef SOAP_TYPE__saml2__AttributeStatement_DEFINED
#define SOAP_TYPE__saml2__AttributeStatement_DEFINED

#define soap_default__saml2__AttributeStatement soap_default_saml2__AttributeStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *);

#define soap_serialize__saml2__AttributeStatement soap_serialize_saml2__AttributeStatementType


#define soap__saml2__AttributeStatement2s soap_saml2__AttributeStatementType2s


#define soap_out__saml2__AttributeStatement soap_out_saml2__AttributeStatementType


#define soap_s2_saml2__AttributeStatement soap_s2saml2__AttributeStatementType


#define soap_in__saml2__AttributeStatement soap_in_saml2__AttributeStatementType


#define soap_instantiate__saml2__AttributeStatement soap_instantiate_saml2__AttributeStatementType


#define soap_new__saml2__AttributeStatement soap_new_saml2__AttributeStatementType


#define soap_new_req__saml2__AttributeStatement soap_new_req_saml2__AttributeStatementType


#define soap_new_set__saml2__AttributeStatement soap_new_set_saml2__AttributeStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AttributeStatement(struct soap*, const struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_write__saml2__AttributeStatement(struct soap *soap, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AttributeStatement(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AttributeStatement(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AttributeStatement(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AttributeStatement soap_get_saml2__AttributeStatementType


#define soap_read__saml2__AttributeStatement soap_read_saml2__AttributeStatementType


#define soap_GET__saml2__AttributeStatement soap_GET_saml2__AttributeStatementType


#define soap_POST_recv__saml2__AttributeStatement soap_POST_recv_saml2__AttributeStatementType

#endif
/* _saml2__Evidence is a typedef synonym of saml2__EvidenceType */

#ifndef SOAP_TYPE__saml2__Evidence_DEFINED
#define SOAP_TYPE__saml2__Evidence_DEFINED

#define soap_default__saml2__Evidence soap_default_saml2__EvidenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *);

#define soap_serialize__saml2__Evidence soap_serialize_saml2__EvidenceType


#define soap__saml2__Evidence2s soap_saml2__EvidenceType2s


#define soap_out__saml2__Evidence soap_out_saml2__EvidenceType


#define soap_s2_saml2__Evidence soap_s2saml2__EvidenceType


#define soap_in__saml2__Evidence soap_in_saml2__EvidenceType


#define soap_instantiate__saml2__Evidence soap_instantiate_saml2__EvidenceType


#define soap_new__saml2__Evidence soap_new_saml2__EvidenceType


#define soap_new_req__saml2__Evidence soap_new_req_saml2__EvidenceType


#define soap_new_set__saml2__Evidence soap_new_set_saml2__EvidenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Evidence(struct soap*, const struct saml2__EvidenceType *, const char*, const char*);

inline int soap_write__saml2__Evidence(struct soap *soap, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Evidence(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Evidence(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Evidence(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Evidence soap_get_saml2__EvidenceType


#define soap_read__saml2__Evidence soap_read_saml2__EvidenceType


#define soap_GET__saml2__Evidence soap_GET_saml2__EvidenceType


#define soap_POST_recv__saml2__Evidence soap_POST_recv_saml2__EvidenceType

#endif
/* _saml2__Action is a typedef synonym of saml2__ActionType */

#ifndef SOAP_TYPE__saml2__Action_DEFINED
#define SOAP_TYPE__saml2__Action_DEFINED

#define soap_default__saml2__Action soap_default_saml2__ActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ActionType(struct soap*, const struct saml2__ActionType *);

#define soap_serialize__saml2__Action soap_serialize_saml2__ActionType


#define soap__saml2__Action2s soap_saml2__ActionType2s


#define soap_out__saml2__Action soap_out_saml2__ActionType


#define soap_s2_saml2__Action soap_s2saml2__ActionType


#define soap_in__saml2__Action soap_in_saml2__ActionType


#define soap_instantiate__saml2__Action soap_instantiate_saml2__ActionType


#define soap_new__saml2__Action soap_new_saml2__ActionType


#define soap_new_req__saml2__Action soap_new_req_saml2__ActionType


#define soap_new_set__saml2__Action soap_new_set_saml2__ActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Action(struct soap*, const struct saml2__ActionType *, const char*, const char*);

inline int soap_write__saml2__Action(struct soap *soap, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Action(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Action(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Action(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Action soap_get_saml2__ActionType


#define soap_read__saml2__Action soap_read_saml2__ActionType


#define soap_GET__saml2__Action soap_GET_saml2__ActionType


#define soap_POST_recv__saml2__Action soap_POST_recv_saml2__ActionType

#endif
/* _saml2__AuthzDecisionStatement is a typedef synonym of saml2__AuthzDecisionStatementType */

#ifndef SOAP_TYPE__saml2__AuthzDecisionStatement_DEFINED
#define SOAP_TYPE__saml2__AuthzDecisionStatement_DEFINED

#define soap_default__saml2__AuthzDecisionStatement soap_default_saml2__AuthzDecisionStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *);

#define soap_serialize__saml2__AuthzDecisionStatement soap_serialize_saml2__AuthzDecisionStatementType


#define soap__saml2__AuthzDecisionStatement2s soap_saml2__AuthzDecisionStatementType2s


#define soap_out__saml2__AuthzDecisionStatement soap_out_saml2__AuthzDecisionStatementType


#define soap_s2_saml2__AuthzDecisionStatement soap_s2saml2__AuthzDecisionStatementType


#define soap_in__saml2__AuthzDecisionStatement soap_in_saml2__AuthzDecisionStatementType


#define soap_instantiate__saml2__AuthzDecisionStatement soap_instantiate_saml2__AuthzDecisionStatementType


#define soap_new__saml2__AuthzDecisionStatement soap_new_saml2__AuthzDecisionStatementType


#define soap_new_req__saml2__AuthzDecisionStatement soap_new_req_saml2__AuthzDecisionStatementType


#define soap_new_set__saml2__AuthzDecisionStatement soap_new_set_saml2__AuthzDecisionStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthzDecisionStatement(struct soap*, const struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_write__saml2__AuthzDecisionStatement(struct soap *soap, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthzDecisionStatement(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthzDecisionStatement(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthzDecisionStatement(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthzDecisionStatement soap_get_saml2__AuthzDecisionStatementType


#define soap_read__saml2__AuthzDecisionStatement soap_read_saml2__AuthzDecisionStatementType


#define soap_GET__saml2__AuthzDecisionStatement soap_GET_saml2__AuthzDecisionStatementType


#define soap_POST_recv__saml2__AuthzDecisionStatement soap_POST_recv_saml2__AuthzDecisionStatementType

#endif
/* _saml2__AuthnContext is a typedef synonym of saml2__AuthnContextType */

#ifndef SOAP_TYPE__saml2__AuthnContext_DEFINED
#define SOAP_TYPE__saml2__AuthnContext_DEFINED

#define soap_default__saml2__AuthnContext soap_default_saml2__AuthnContextType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *);

#define soap_serialize__saml2__AuthnContext soap_serialize_saml2__AuthnContextType


#define soap__saml2__AuthnContext2s soap_saml2__AuthnContextType2s


#define soap_out__saml2__AuthnContext soap_out_saml2__AuthnContextType


#define soap_s2_saml2__AuthnContext soap_s2saml2__AuthnContextType


#define soap_in__saml2__AuthnContext soap_in_saml2__AuthnContextType


#define soap_instantiate__saml2__AuthnContext soap_instantiate_saml2__AuthnContextType


#define soap_new__saml2__AuthnContext soap_new_saml2__AuthnContextType


#define soap_new_req__saml2__AuthnContext soap_new_req_saml2__AuthnContextType


#define soap_new_set__saml2__AuthnContext soap_new_set_saml2__AuthnContextType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContext(struct soap*, const struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_write__saml2__AuthnContext(struct soap *soap, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnContext(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnContext(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnContext(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnContext soap_get_saml2__AuthnContextType


#define soap_read__saml2__AuthnContext soap_read_saml2__AuthnContextType


#define soap_GET__saml2__AuthnContext soap_GET_saml2__AuthnContextType


#define soap_POST_recv__saml2__AuthnContext soap_POST_recv_saml2__AuthnContextType

#endif
/* _saml2__SubjectLocality is a typedef synonym of saml2__SubjectLocalityType */

#ifndef SOAP_TYPE__saml2__SubjectLocality_DEFINED
#define SOAP_TYPE__saml2__SubjectLocality_DEFINED

#define soap_default__saml2__SubjectLocality soap_default_saml2__SubjectLocalityType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *);

#define soap_serialize__saml2__SubjectLocality soap_serialize_saml2__SubjectLocalityType


#define soap__saml2__SubjectLocality2s soap_saml2__SubjectLocalityType2s


#define soap_out__saml2__SubjectLocality soap_out_saml2__SubjectLocalityType


#define soap_s2_saml2__SubjectLocality soap_s2saml2__SubjectLocalityType


#define soap_in__saml2__SubjectLocality soap_in_saml2__SubjectLocalityType


#define soap_instantiate__saml2__SubjectLocality soap_instantiate_saml2__SubjectLocalityType


#define soap_new__saml2__SubjectLocality soap_new_saml2__SubjectLocalityType


#define soap_new_req__saml2__SubjectLocality soap_new_req_saml2__SubjectLocalityType


#define soap_new_set__saml2__SubjectLocality soap_new_set_saml2__SubjectLocalityType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectLocality(struct soap*, const struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_write__saml2__SubjectLocality(struct soap *soap, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__SubjectLocality(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__SubjectLocality(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__SubjectLocality(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__SubjectLocality soap_get_saml2__SubjectLocalityType


#define soap_read__saml2__SubjectLocality soap_read_saml2__SubjectLocalityType


#define soap_GET__saml2__SubjectLocality soap_GET_saml2__SubjectLocalityType


#define soap_POST_recv__saml2__SubjectLocality soap_POST_recv_saml2__SubjectLocalityType

#endif
/* _saml2__AuthnStatement is a typedef synonym of saml2__AuthnStatementType */

#ifndef SOAP_TYPE__saml2__AuthnStatement_DEFINED
#define SOAP_TYPE__saml2__AuthnStatement_DEFINED

#define soap_default__saml2__AuthnStatement soap_default_saml2__AuthnStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *);

#define soap_serialize__saml2__AuthnStatement soap_serialize_saml2__AuthnStatementType


#define soap__saml2__AuthnStatement2s soap_saml2__AuthnStatementType2s


#define soap_out__saml2__AuthnStatement soap_out_saml2__AuthnStatementType


#define soap_s2_saml2__AuthnStatement soap_s2saml2__AuthnStatementType


#define soap_in__saml2__AuthnStatement soap_in_saml2__AuthnStatementType


#define soap_instantiate__saml2__AuthnStatement soap_instantiate_saml2__AuthnStatementType


#define soap_new__saml2__AuthnStatement soap_new_saml2__AuthnStatementType


#define soap_new_req__saml2__AuthnStatement soap_new_req_saml2__AuthnStatementType


#define soap_new_set__saml2__AuthnStatement soap_new_set_saml2__AuthnStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnStatement(struct soap*, const struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_write__saml2__AuthnStatement(struct soap *soap, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnStatement(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnStatement(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnStatement(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnStatement soap_get_saml2__AuthnStatementType


#define soap_read__saml2__AuthnStatement soap_read_saml2__AuthnStatementType


#define soap_GET__saml2__AuthnStatement soap_GET_saml2__AuthnStatementType


#define soap_POST_recv__saml2__AuthnStatement soap_POST_recv_saml2__AuthnStatementType

#endif
/* _saml2__Statement is a typedef synonym of saml2__StatementAbstractType */

#ifndef SOAP_TYPE__saml2__Statement_DEFINED
#define SOAP_TYPE__saml2__Statement_DEFINED

#define soap_default__saml2__Statement soap_default_saml2__StatementAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *);

#define soap_serialize__saml2__Statement soap_serialize_saml2__StatementAbstractType


#define soap__saml2__Statement2s soap_saml2__StatementAbstractType2s


#define soap_out__saml2__Statement soap_out_saml2__StatementAbstractType


#define soap_s2_saml2__Statement soap_s2saml2__StatementAbstractType


#define soap_in__saml2__Statement soap_in_saml2__StatementAbstractType


#define soap_instantiate__saml2__Statement soap_instantiate_saml2__StatementAbstractType


#define soap_new__saml2__Statement soap_new_saml2__StatementAbstractType


#define soap_new_req__saml2__Statement soap_new_req_saml2__StatementAbstractType


#define soap_new_set__saml2__Statement soap_new_set_saml2__StatementAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Statement(struct soap*, const struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_write__saml2__Statement(struct soap *soap, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Statement(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Statement(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Statement(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Statement soap_get_saml2__StatementAbstractType


#define soap_read__saml2__Statement soap_read_saml2__StatementAbstractType


#define soap_GET__saml2__Statement soap_GET_saml2__StatementAbstractType


#define soap_POST_recv__saml2__Statement soap_POST_recv_saml2__StatementAbstractType

#endif
/* _saml2__EncryptedAssertion is a typedef synonym of saml2__EncryptedElementType */

#ifndef SOAP_TYPE__saml2__EncryptedAssertion_DEFINED
#define SOAP_TYPE__saml2__EncryptedAssertion_DEFINED

#define soap_default__saml2__EncryptedAssertion soap_default_saml2__EncryptedElementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);

#define soap_serialize__saml2__EncryptedAssertion soap_serialize_saml2__EncryptedElementType


#define soap__saml2__EncryptedAssertion2s soap_saml2__EncryptedElementType2s


#define soap_out__saml2__EncryptedAssertion soap_out_saml2__EncryptedElementType


#define soap_s2_saml2__EncryptedAssertion soap_s2saml2__EncryptedElementType


#define soap_in__saml2__EncryptedAssertion soap_in_saml2__EncryptedElementType


#define soap_instantiate__saml2__EncryptedAssertion soap_instantiate_saml2__EncryptedElementType


#define soap_new__saml2__EncryptedAssertion soap_new_saml2__EncryptedElementType


#define soap_new_req__saml2__EncryptedAssertion soap_new_req_saml2__EncryptedElementType


#define soap_new_set__saml2__EncryptedAssertion soap_new_set_saml2__EncryptedElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedAssertion(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write__saml2__EncryptedAssertion(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__EncryptedAssertion(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__EncryptedAssertion(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__EncryptedAssertion(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__EncryptedAssertion soap_get_saml2__EncryptedElementType


#define soap_read__saml2__EncryptedAssertion soap_read_saml2__EncryptedElementType


#define soap_GET__saml2__EncryptedAssertion soap_GET_saml2__EncryptedElementType


#define soap_POST_recv__saml2__EncryptedAssertion soap_POST_recv_saml2__EncryptedElementType

#endif
/* _saml2__Advice is a typedef synonym of saml2__AdviceType */

#ifndef SOAP_TYPE__saml2__Advice_DEFINED
#define SOAP_TYPE__saml2__Advice_DEFINED

#define soap_default__saml2__Advice soap_default_saml2__AdviceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *);

#define soap_serialize__saml2__Advice soap_serialize_saml2__AdviceType


#define soap__saml2__Advice2s soap_saml2__AdviceType2s


#define soap_out__saml2__Advice soap_out_saml2__AdviceType


#define soap_s2_saml2__Advice soap_s2saml2__AdviceType


#define soap_in__saml2__Advice soap_in_saml2__AdviceType


#define soap_instantiate__saml2__Advice soap_instantiate_saml2__AdviceType


#define soap_new__saml2__Advice soap_new_saml2__AdviceType


#define soap_new_req__saml2__Advice soap_new_req_saml2__AdviceType


#define soap_new_set__saml2__Advice soap_new_set_saml2__AdviceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Advice(struct soap*, const struct saml2__AdviceType *, const char*, const char*);

inline int soap_write__saml2__Advice(struct soap *soap, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Advice(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Advice(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Advice(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Advice soap_get_saml2__AdviceType


#define soap_read__saml2__Advice soap_read_saml2__AdviceType


#define soap_GET__saml2__Advice soap_GET_saml2__AdviceType


#define soap_POST_recv__saml2__Advice soap_POST_recv_saml2__AdviceType

#endif
/* _saml2__ProxyRestriction is a typedef synonym of saml2__ProxyRestrictionType */

#ifndef SOAP_TYPE__saml2__ProxyRestriction_DEFINED
#define SOAP_TYPE__saml2__ProxyRestriction_DEFINED

#define soap_default__saml2__ProxyRestriction soap_default_saml2__ProxyRestrictionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *);

#define soap_serialize__saml2__ProxyRestriction soap_serialize_saml2__ProxyRestrictionType


#define soap__saml2__ProxyRestriction2s soap_saml2__ProxyRestrictionType2s


#define soap_out__saml2__ProxyRestriction soap_out_saml2__ProxyRestrictionType


#define soap_s2_saml2__ProxyRestriction soap_s2saml2__ProxyRestrictionType


#define soap_in__saml2__ProxyRestriction soap_in_saml2__ProxyRestrictionType


#define soap_instantiate__saml2__ProxyRestriction soap_instantiate_saml2__ProxyRestrictionType


#define soap_new__saml2__ProxyRestriction soap_new_saml2__ProxyRestrictionType


#define soap_new_req__saml2__ProxyRestriction soap_new_req_saml2__ProxyRestrictionType


#define soap_new_set__saml2__ProxyRestriction soap_new_set_saml2__ProxyRestrictionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__ProxyRestriction(struct soap*, const struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_write__saml2__ProxyRestriction(struct soap *soap, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__ProxyRestriction(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__ProxyRestriction(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__ProxyRestriction(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__ProxyRestriction soap_get_saml2__ProxyRestrictionType


#define soap_read__saml2__ProxyRestriction soap_read_saml2__ProxyRestrictionType


#define soap_GET__saml2__ProxyRestriction soap_GET_saml2__ProxyRestrictionType


#define soap_POST_recv__saml2__ProxyRestriction soap_POST_recv_saml2__ProxyRestrictionType

#endif
/* _saml2__OneTimeUse is a typedef synonym of saml2__OneTimeUseType */

#ifndef SOAP_TYPE__saml2__OneTimeUse_DEFINED
#define SOAP_TYPE__saml2__OneTimeUse_DEFINED

#define soap_default__saml2__OneTimeUse soap_default_saml2__OneTimeUseType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *);

#define soap_serialize__saml2__OneTimeUse soap_serialize_saml2__OneTimeUseType


#define soap__saml2__OneTimeUse2s soap_saml2__OneTimeUseType2s


#define soap_out__saml2__OneTimeUse soap_out_saml2__OneTimeUseType


#define soap_s2_saml2__OneTimeUse soap_s2saml2__OneTimeUseType


#define soap_in__saml2__OneTimeUse soap_in_saml2__OneTimeUseType


#define soap_instantiate__saml2__OneTimeUse soap_instantiate_saml2__OneTimeUseType


#define soap_new__saml2__OneTimeUse soap_new_saml2__OneTimeUseType


#define soap_new_req__saml2__OneTimeUse soap_new_req_saml2__OneTimeUseType


#define soap_new_set__saml2__OneTimeUse soap_new_set_saml2__OneTimeUseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__OneTimeUse(struct soap*, const struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_write__saml2__OneTimeUse(struct soap *soap, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__OneTimeUse(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__OneTimeUse(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__OneTimeUse(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__OneTimeUse soap_get_saml2__OneTimeUseType


#define soap_read__saml2__OneTimeUse soap_read_saml2__OneTimeUseType


#define soap_GET__saml2__OneTimeUse soap_GET_saml2__OneTimeUseType


#define soap_POST_recv__saml2__OneTimeUse soap_POST_recv_saml2__OneTimeUseType

#endif
/* _saml2__AudienceRestriction is a typedef synonym of saml2__AudienceRestrictionType */

#ifndef SOAP_TYPE__saml2__AudienceRestriction_DEFINED
#define SOAP_TYPE__saml2__AudienceRestriction_DEFINED

#define soap_default__saml2__AudienceRestriction soap_default_saml2__AudienceRestrictionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *);

#define soap_serialize__saml2__AudienceRestriction soap_serialize_saml2__AudienceRestrictionType


#define soap__saml2__AudienceRestriction2s soap_saml2__AudienceRestrictionType2s


#define soap_out__saml2__AudienceRestriction soap_out_saml2__AudienceRestrictionType


#define soap_s2_saml2__AudienceRestriction soap_s2saml2__AudienceRestrictionType


#define soap_in__saml2__AudienceRestriction soap_in_saml2__AudienceRestrictionType


#define soap_instantiate__saml2__AudienceRestriction soap_instantiate_saml2__AudienceRestrictionType


#define soap_new__saml2__AudienceRestriction soap_new_saml2__AudienceRestrictionType


#define soap_new_req__saml2__AudienceRestriction soap_new_req_saml2__AudienceRestrictionType


#define soap_new_set__saml2__AudienceRestriction soap_new_set_saml2__AudienceRestrictionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AudienceRestriction(struct soap*, const struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_write__saml2__AudienceRestriction(struct soap *soap, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AudienceRestriction(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AudienceRestriction(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AudienceRestriction(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AudienceRestriction soap_get_saml2__AudienceRestrictionType


#define soap_read__saml2__AudienceRestriction soap_read_saml2__AudienceRestrictionType


#define soap_GET__saml2__AudienceRestriction soap_GET_saml2__AudienceRestrictionType


#define soap_POST_recv__saml2__AudienceRestriction soap_POST_recv_saml2__AudienceRestrictionType

#endif
/* _saml2__Condition is a typedef synonym of saml2__ConditionAbstractType */

#ifndef SOAP_TYPE__saml2__Condition_DEFINED
#define SOAP_TYPE__saml2__Condition_DEFINED

#define soap_default__saml2__Condition soap_default_saml2__ConditionAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *);

#define soap_serialize__saml2__Condition soap_serialize_saml2__ConditionAbstractType


#define soap__saml2__Condition2s soap_saml2__ConditionAbstractType2s


#define soap_out__saml2__Condition soap_out_saml2__ConditionAbstractType


#define soap_s2_saml2__Condition soap_s2saml2__ConditionAbstractType


#define soap_in__saml2__Condition soap_in_saml2__ConditionAbstractType


#define soap_instantiate__saml2__Condition soap_instantiate_saml2__ConditionAbstractType


#define soap_new__saml2__Condition soap_new_saml2__ConditionAbstractType


#define soap_new_req__saml2__Condition soap_new_req_saml2__ConditionAbstractType


#define soap_new_set__saml2__Condition soap_new_set_saml2__ConditionAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Condition(struct soap*, const struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_write__saml2__Condition(struct soap *soap, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Condition(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Condition(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Condition(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Condition soap_get_saml2__ConditionAbstractType


#define soap_read__saml2__Condition soap_read_saml2__ConditionAbstractType


#define soap_GET__saml2__Condition soap_GET_saml2__ConditionAbstractType


#define soap_POST_recv__saml2__Condition soap_POST_recv_saml2__ConditionAbstractType

#endif
/* _saml2__Conditions is a typedef synonym of saml2__ConditionsType */

#ifndef SOAP_TYPE__saml2__Conditions_DEFINED
#define SOAP_TYPE__saml2__Conditions_DEFINED

#define soap_default__saml2__Conditions soap_default_saml2__ConditionsType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *);

#define soap_serialize__saml2__Conditions soap_serialize_saml2__ConditionsType


#define soap__saml2__Conditions2s soap_saml2__ConditionsType2s


#define soap_out__saml2__Conditions soap_out_saml2__ConditionsType


#define soap_s2_saml2__Conditions soap_s2saml2__ConditionsType


#define soap_in__saml2__Conditions soap_in_saml2__ConditionsType


#define soap_instantiate__saml2__Conditions soap_instantiate_saml2__ConditionsType


#define soap_new__saml2__Conditions soap_new_saml2__ConditionsType


#define soap_new_req__saml2__Conditions soap_new_req_saml2__ConditionsType


#define soap_new_set__saml2__Conditions soap_new_set_saml2__ConditionsType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Conditions(struct soap*, const struct saml2__ConditionsType *, const char*, const char*);

inline int soap_write__saml2__Conditions(struct soap *soap, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Conditions(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Conditions(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Conditions(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Conditions soap_get_saml2__ConditionsType


#define soap_read__saml2__Conditions soap_read_saml2__ConditionsType


#define soap_GET__saml2__Conditions soap_GET_saml2__ConditionsType


#define soap_POST_recv__saml2__Conditions soap_POST_recv_saml2__ConditionsType

#endif
/* _saml2__SubjectConfirmationData is a typedef synonym of saml2__SubjectConfirmationDataType */

#ifndef SOAP_TYPE__saml2__SubjectConfirmationData_DEFINED
#define SOAP_TYPE__saml2__SubjectConfirmationData_DEFINED

#define soap_default__saml2__SubjectConfirmationData soap_default_saml2__SubjectConfirmationDataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *);

#define soap_serialize__saml2__SubjectConfirmationData soap_serialize_saml2__SubjectConfirmationDataType


#define soap__saml2__SubjectConfirmationData2s soap_saml2__SubjectConfirmationDataType2s


#define soap_out__saml2__SubjectConfirmationData soap_out_saml2__SubjectConfirmationDataType


#define soap_s2_saml2__SubjectConfirmationData soap_s2saml2__SubjectConfirmationDataType


#define soap_in__saml2__SubjectConfirmationData soap_in_saml2__SubjectConfirmationDataType


#define soap_instantiate__saml2__SubjectConfirmationData soap_instantiate_saml2__SubjectConfirmationDataType


#define soap_new__saml2__SubjectConfirmationData soap_new_saml2__SubjectConfirmationDataType


#define soap_new_req__saml2__SubjectConfirmationData soap_new_req_saml2__SubjectConfirmationDataType


#define soap_new_set__saml2__SubjectConfirmationData soap_new_set_saml2__SubjectConfirmationDataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectConfirmationData(struct soap*, const struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_write__saml2__SubjectConfirmationData(struct soap *soap, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__SubjectConfirmationData(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__SubjectConfirmationData(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__SubjectConfirmationData(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__SubjectConfirmationData soap_get_saml2__SubjectConfirmationDataType


#define soap_read__saml2__SubjectConfirmationData soap_read_saml2__SubjectConfirmationDataType


#define soap_GET__saml2__SubjectConfirmationData soap_GET_saml2__SubjectConfirmationDataType


#define soap_POST_recv__saml2__SubjectConfirmationData soap_POST_recv_saml2__SubjectConfirmationDataType

#endif
/* _saml2__SubjectConfirmation is a typedef synonym of saml2__SubjectConfirmationType */

#ifndef SOAP_TYPE__saml2__SubjectConfirmation_DEFINED
#define SOAP_TYPE__saml2__SubjectConfirmation_DEFINED

#define soap_default__saml2__SubjectConfirmation soap_default_saml2__SubjectConfirmationType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *);

#define soap_serialize__saml2__SubjectConfirmation soap_serialize_saml2__SubjectConfirmationType


#define soap__saml2__SubjectConfirmation2s soap_saml2__SubjectConfirmationType2s


#define soap_out__saml2__SubjectConfirmation soap_out_saml2__SubjectConfirmationType


#define soap_s2_saml2__SubjectConfirmation soap_s2saml2__SubjectConfirmationType


#define soap_in__saml2__SubjectConfirmation soap_in_saml2__SubjectConfirmationType


#define soap_instantiate__saml2__SubjectConfirmation soap_instantiate_saml2__SubjectConfirmationType


#define soap_new__saml2__SubjectConfirmation soap_new_saml2__SubjectConfirmationType


#define soap_new_req__saml2__SubjectConfirmation soap_new_req_saml2__SubjectConfirmationType


#define soap_new_set__saml2__SubjectConfirmation soap_new_set_saml2__SubjectConfirmationType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectConfirmation(struct soap*, const struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_write__saml2__SubjectConfirmation(struct soap *soap, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__SubjectConfirmation(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__SubjectConfirmation(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__SubjectConfirmation(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__SubjectConfirmation soap_get_saml2__SubjectConfirmationType


#define soap_read__saml2__SubjectConfirmation soap_read_saml2__SubjectConfirmationType


#define soap_GET__saml2__SubjectConfirmation soap_GET_saml2__SubjectConfirmationType


#define soap_POST_recv__saml2__SubjectConfirmation soap_POST_recv_saml2__SubjectConfirmationType

#endif
/* _saml2__Subject is a typedef synonym of saml2__SubjectType */

#ifndef SOAP_TYPE__saml2__Subject_DEFINED
#define SOAP_TYPE__saml2__Subject_DEFINED

#define soap_default__saml2__Subject soap_default_saml2__SubjectType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *);

#define soap_serialize__saml2__Subject soap_serialize_saml2__SubjectType


#define soap__saml2__Subject2s soap_saml2__SubjectType2s


#define soap_out__saml2__Subject soap_out_saml2__SubjectType


#define soap_s2_saml2__Subject soap_s2saml2__SubjectType


#define soap_in__saml2__Subject soap_in_saml2__SubjectType


#define soap_instantiate__saml2__Subject soap_instantiate_saml2__SubjectType


#define soap_new__saml2__Subject soap_new_saml2__SubjectType


#define soap_new_req__saml2__Subject soap_new_req_saml2__SubjectType


#define soap_new_set__saml2__Subject soap_new_set_saml2__SubjectType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Subject(struct soap*, const struct saml2__SubjectType *, const char*, const char*);

inline int soap_write__saml2__Subject(struct soap *soap, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Subject(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Subject(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Subject(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Subject soap_get_saml2__SubjectType


#define soap_read__saml2__Subject soap_read_saml2__SubjectType


#define soap_GET__saml2__Subject soap_GET_saml2__SubjectType


#define soap_POST_recv__saml2__Subject soap_POST_recv_saml2__SubjectType

#endif
/* _saml2__Assertion is a typedef synonym of saml2__AssertionType */

#ifndef SOAP_TYPE__saml2__Assertion_DEFINED
#define SOAP_TYPE__saml2__Assertion_DEFINED

#define soap_default__saml2__Assertion soap_default_saml2__AssertionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *);

#define soap_serialize__saml2__Assertion soap_serialize_saml2__AssertionType


#define soap__saml2__Assertion2s soap_saml2__AssertionType2s


#define soap_out__saml2__Assertion soap_out_saml2__AssertionType


#define soap_s2_saml2__Assertion soap_s2saml2__AssertionType


#define soap_in__saml2__Assertion soap_in_saml2__AssertionType


#define soap_instantiate__saml2__Assertion soap_instantiate_saml2__AssertionType


#define soap_new__saml2__Assertion soap_new_saml2__AssertionType


#define soap_new_req__saml2__Assertion soap_new_req_saml2__AssertionType


#define soap_new_set__saml2__Assertion soap_new_set_saml2__AssertionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Assertion(struct soap*, const struct saml2__AssertionType *, const char*, const char*);

inline int soap_write__saml2__Assertion(struct soap *soap, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Assertion(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Assertion(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Assertion(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Assertion soap_get_saml2__AssertionType


#define soap_read__saml2__Assertion soap_read_saml2__AssertionType


#define soap_GET__saml2__Assertion soap_GET_saml2__AssertionType


#define soap_POST_recv__saml2__Assertion soap_POST_recv_saml2__AssertionType

#endif
/* _saml2__Issuer is a typedef synonym of saml2__NameIDType */

#ifndef SOAP_TYPE__saml2__Issuer_DEFINED
#define SOAP_TYPE__saml2__Issuer_DEFINED

#define soap_default__saml2__Issuer soap_default_saml2__NameIDType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);

#define soap_serialize__saml2__Issuer soap_serialize_saml2__NameIDType


#define soap__saml2__Issuer2s soap_saml2__NameIDType2s


#define soap_out__saml2__Issuer soap_out_saml2__NameIDType


#define soap_s2_saml2__Issuer soap_s2saml2__NameIDType


#define soap_in__saml2__Issuer soap_in_saml2__NameIDType


#define soap_instantiate__saml2__Issuer soap_instantiate_saml2__NameIDType


#define soap_new__saml2__Issuer soap_new_saml2__NameIDType


#define soap_new_req__saml2__Issuer soap_new_req_saml2__NameIDType


#define soap_new_set__saml2__Issuer soap_new_set_saml2__NameIDType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Issuer(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write__saml2__Issuer(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Issuer(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Issuer(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Issuer(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Issuer soap_get_saml2__NameIDType


#define soap_read__saml2__Issuer soap_read_saml2__NameIDType


#define soap_GET__saml2__Issuer soap_GET_saml2__NameIDType


#define soap_POST_recv__saml2__Issuer soap_POST_recv_saml2__NameIDType

#endif
/* _saml2__EncryptedID is a typedef synonym of saml2__EncryptedElementType */

#ifndef SOAP_TYPE__saml2__EncryptedID_DEFINED
#define SOAP_TYPE__saml2__EncryptedID_DEFINED

#define soap_default__saml2__EncryptedID soap_default_saml2__EncryptedElementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);

#define soap_serialize__saml2__EncryptedID soap_serialize_saml2__EncryptedElementType


#define soap__saml2__EncryptedID2s soap_saml2__EncryptedElementType2s


#define soap_out__saml2__EncryptedID soap_out_saml2__EncryptedElementType


#define soap_s2_saml2__EncryptedID soap_s2saml2__EncryptedElementType


#define soap_in__saml2__EncryptedID soap_in_saml2__EncryptedElementType


#define soap_instantiate__saml2__EncryptedID soap_instantiate_saml2__EncryptedElementType


#define soap_new__saml2__EncryptedID soap_new_saml2__EncryptedElementType


#define soap_new_req__saml2__EncryptedID soap_new_req_saml2__EncryptedElementType


#define soap_new_set__saml2__EncryptedID soap_new_set_saml2__EncryptedElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedID(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write__saml2__EncryptedID(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__EncryptedID(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__EncryptedID(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__EncryptedID(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__EncryptedID soap_get_saml2__EncryptedElementType


#define soap_read__saml2__EncryptedID soap_read_saml2__EncryptedElementType


#define soap_GET__saml2__EncryptedID soap_GET_saml2__EncryptedElementType


#define soap_POST_recv__saml2__EncryptedID soap_POST_recv_saml2__EncryptedElementType

#endif
/* _saml2__NameID is a typedef synonym of saml2__NameIDType */

#ifndef SOAP_TYPE__saml2__NameID_DEFINED
#define SOAP_TYPE__saml2__NameID_DEFINED

#define soap_default__saml2__NameID soap_default_saml2__NameIDType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);

#define soap_serialize__saml2__NameID soap_serialize_saml2__NameIDType


#define soap__saml2__NameID2s soap_saml2__NameIDType2s


#define soap_out__saml2__NameID soap_out_saml2__NameIDType


#define soap_s2_saml2__NameID soap_s2saml2__NameIDType


#define soap_in__saml2__NameID soap_in_saml2__NameIDType


#define soap_instantiate__saml2__NameID soap_instantiate_saml2__NameIDType


#define soap_new__saml2__NameID soap_new_saml2__NameIDType


#define soap_new_req__saml2__NameID soap_new_req_saml2__NameIDType


#define soap_new_set__saml2__NameID soap_new_set_saml2__NameIDType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__NameID(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write__saml2__NameID(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__NameID(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__NameID(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__NameID(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__NameID soap_get_saml2__NameIDType


#define soap_read__saml2__NameID soap_read_saml2__NameIDType


#define soap_GET__saml2__NameID soap_GET_saml2__NameIDType


#define soap_POST_recv__saml2__NameID soap_POST_recv_saml2__NameIDType

#endif
/* _saml2__BaseID is a typedef synonym of saml2__BaseIDAbstractType */

#ifndef SOAP_TYPE__saml2__BaseID_DEFINED
#define SOAP_TYPE__saml2__BaseID_DEFINED

#define soap_default__saml2__BaseID soap_default_saml2__BaseIDAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *);

#define soap_serialize__saml2__BaseID soap_serialize_saml2__BaseIDAbstractType


#define soap__saml2__BaseID2s soap_saml2__BaseIDAbstractType2s


#define soap_out__saml2__BaseID soap_out_saml2__BaseIDAbstractType


#define soap_s2_saml2__BaseID soap_s2saml2__BaseIDAbstractType


#define soap_in__saml2__BaseID soap_in_saml2__BaseIDAbstractType


#define soap_instantiate__saml2__BaseID soap_instantiate_saml2__BaseIDAbstractType


#define soap_new__saml2__BaseID soap_new_saml2__BaseIDAbstractType


#define soap_new_req__saml2__BaseID soap_new_req_saml2__BaseIDAbstractType


#define soap_new_set__saml2__BaseID soap_new_set_saml2__BaseIDAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__BaseID(struct soap*, const struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_write__saml2__BaseID(struct soap *soap, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__BaseID(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__BaseID(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__BaseID(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__BaseID soap_get_saml2__BaseIDAbstractType


#define soap_read__saml2__BaseID soap_read_saml2__BaseIDAbstractType


#define soap_GET__saml2__BaseID soap_GET_saml2__BaseIDAbstractType


#define soap_POST_recv__saml2__BaseID soap_POST_recv_saml2__BaseIDAbstractType

#endif

#ifndef SOAP_TYPE___saml2__union_AttributeStatementType_DEFINED
#define SOAP_TYPE___saml2__union_AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AttributeStatementType(struct soap*, const struct __saml2__union_AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AttributeStatementType(struct soap*, const char*, int, const struct __saml2__union_AttributeStatementType *, const char*);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_in___saml2__union_AttributeStatementType(struct soap*, const char*, struct __saml2__union_AttributeStatementType *, const char*);
SOAP_FMAC1 struct __saml2__union_AttributeStatementType * SOAP_FMAC2 soap_instantiate___saml2__union_AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AttributeStatementType * soap_new___saml2__union_AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AttributeStatementType * soap_new_req___saml2__union_AttributeStatementType(
	struct soap *soap)
{
	struct __saml2__union_AttributeStatementType *_p = ::soap_new___saml2__union_AttributeStatementType(soap);
	if (_p)
	{	::soap_default___saml2__union_AttributeStatementType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AttributeStatementType * soap_new_set___saml2__union_AttributeStatementType(
	struct soap *soap,
	struct saml2__AttributeType *saml2__Attribute,
	struct saml2__EncryptedElementType *saml2__EncryptedAttribute)
{
	struct __saml2__union_AttributeStatementType *_p = ::soap_new___saml2__union_AttributeStatementType(soap);
	if (_p)
	{	::soap_default___saml2__union_AttributeStatementType(soap, _p);
		_p->saml2__Attribute = saml2__Attribute;
		_p->saml2__EncryptedAttribute = saml2__EncryptedAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AttributeStatementType(struct soap*, const struct __saml2__union_AttributeStatementType *, const char*, const char*);

inline int soap_write___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_get___saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *, const char*, const char*);

inline int soap_read___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *p)
{
	if (p)
	{	::soap_default___saml2__union_AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *p)
{
	if (::soap_read___saml2__union_AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_EvidenceType_DEFINED
#define SOAP_TYPE___saml2__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_EvidenceType(struct soap*, const struct __saml2__union_EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_EvidenceType(struct soap*, const char*, int, const struct __saml2__union_EvidenceType *, const char*);
SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_in___saml2__union_EvidenceType(struct soap*, const char*, struct __saml2__union_EvidenceType *, const char*);
SOAP_FMAC1 struct __saml2__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml2__union_EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_EvidenceType * soap_new___saml2__union_EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_EvidenceType * soap_new_req___saml2__union_EvidenceType(
	struct soap *soap)
{
	struct __saml2__union_EvidenceType *_p = ::soap_new___saml2__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml2__union_EvidenceType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_EvidenceType * soap_new_set___saml2__union_EvidenceType(
	struct soap *soap,
	char *saml2__AssertionIDRef,
	char *saml2__AssertionURIRef,
	struct saml2__AssertionType *saml2__Assertion,
	struct saml2__EncryptedElementType *saml2__EncryptedAssertion)
{
	struct __saml2__union_EvidenceType *_p = ::soap_new___saml2__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml2__union_EvidenceType(soap, _p);
		_p->saml2__AssertionIDRef = saml2__AssertionIDRef;
		_p->saml2__AssertionURIRef = saml2__AssertionURIRef;
		_p->saml2__Assertion = saml2__Assertion;
		_p->saml2__EncryptedAssertion = saml2__EncryptedAssertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_EvidenceType(struct soap*, const struct __saml2__union_EvidenceType *, const char*, const char*);

inline int soap_write___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_get___saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *, const char*, const char*);

inline int soap_read___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *p)
{
	if (p)
	{	::soap_default___saml2__union_EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *p)
{
	if (::soap_read___saml2__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_AdviceType_DEFINED
#define SOAP_TYPE___saml2__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AdviceType(struct soap*, const struct __saml2__union_AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AdviceType(struct soap*, const char*, int, const struct __saml2__union_AdviceType *, const char*);
SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_in___saml2__union_AdviceType(struct soap*, const char*, struct __saml2__union_AdviceType *, const char*);
SOAP_FMAC1 struct __saml2__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml2__union_AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AdviceType * soap_new___saml2__union_AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AdviceType * soap_new_req___saml2__union_AdviceType(
	struct soap *soap)
{
	struct __saml2__union_AdviceType *_p = ::soap_new___saml2__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml2__union_AdviceType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AdviceType * soap_new_set___saml2__union_AdviceType(
	struct soap *soap,
	char *saml2__AssertionIDRef,
	char *saml2__AssertionURIRef,
	struct saml2__AssertionType *saml2__Assertion,
	struct saml2__EncryptedElementType *saml2__EncryptedAssertion)
{
	struct __saml2__union_AdviceType *_p = ::soap_new___saml2__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml2__union_AdviceType(soap, _p);
		_p->saml2__AssertionIDRef = saml2__AssertionIDRef;
		_p->saml2__AssertionURIRef = saml2__AssertionURIRef;
		_p->saml2__Assertion = saml2__Assertion;
		_p->saml2__EncryptedAssertion = saml2__EncryptedAssertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AdviceType(struct soap*, const struct __saml2__union_AdviceType *, const char*, const char*);

inline int soap_write___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_get___saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *, const char*, const char*);

inline int soap_read___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *p)
{
	if (p)
	{	::soap_default___saml2__union_AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *p)
{
	if (::soap_read___saml2__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_ConditionsType_DEFINED
#define SOAP_TYPE___saml2__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_ConditionsType(struct soap*, const struct __saml2__union_ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_ConditionsType(struct soap*, const char*, int, const struct __saml2__union_ConditionsType *, const char*);
SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_in___saml2__union_ConditionsType(struct soap*, const char*, struct __saml2__union_ConditionsType *, const char*);
SOAP_FMAC1 struct __saml2__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml2__union_ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_ConditionsType * soap_new___saml2__union_ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_ConditionsType * soap_new_req___saml2__union_ConditionsType(
	struct soap *soap)
{
	struct __saml2__union_ConditionsType *_p = ::soap_new___saml2__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml2__union_ConditionsType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_ConditionsType * soap_new_set___saml2__union_ConditionsType(
	struct soap *soap,
	struct saml2__ConditionAbstractType *saml2__Condition,
	struct saml2__AudienceRestrictionType *saml2__AudienceRestriction,
	struct saml2__OneTimeUseType *saml2__OneTimeUse,
	struct saml2__ProxyRestrictionType *saml2__ProxyRestriction)
{
	struct __saml2__union_ConditionsType *_p = ::soap_new___saml2__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml2__union_ConditionsType(soap, _p);
		_p->saml2__Condition = saml2__Condition;
		_p->saml2__AudienceRestriction = saml2__AudienceRestriction;
		_p->saml2__OneTimeUse = saml2__OneTimeUse;
		_p->saml2__ProxyRestriction = saml2__ProxyRestriction;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_ConditionsType(struct soap*, const struct __saml2__union_ConditionsType *, const char*, const char*);

inline int soap_write___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_get___saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *, const char*, const char*);

inline int soap_read___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *p)
{
	if (p)
	{	::soap_default___saml2__union_ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *p)
{
	if (::soap_read___saml2__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_AssertionType_DEFINED
#define SOAP_TYPE___saml2__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AssertionType(struct soap*, const struct __saml2__union_AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AssertionType(struct soap*, const char*, int, const struct __saml2__union_AssertionType *, const char*);
SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_in___saml2__union_AssertionType(struct soap*, const char*, struct __saml2__union_AssertionType *, const char*);
SOAP_FMAC1 struct __saml2__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml2__union_AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AssertionType * soap_new___saml2__union_AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AssertionType * soap_new_req___saml2__union_AssertionType(
	struct soap *soap)
{
	struct __saml2__union_AssertionType *_p = ::soap_new___saml2__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml2__union_AssertionType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AssertionType * soap_new_set___saml2__union_AssertionType(
	struct soap *soap,
	struct saml2__StatementAbstractType *saml2__Statement,
	struct saml2__AuthnStatementType *saml2__AuthnStatement,
	struct saml2__AuthzDecisionStatementType *saml2__AuthzDecisionStatement,
	struct saml2__AttributeStatementType *saml2__AttributeStatement)
{
	struct __saml2__union_AssertionType *_p = ::soap_new___saml2__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml2__union_AssertionType(soap, _p);
		_p->saml2__Statement = saml2__Statement;
		_p->saml2__AuthnStatement = saml2__AuthnStatement;
		_p->saml2__AuthzDecisionStatement = saml2__AuthzDecisionStatement;
		_p->saml2__AttributeStatement = saml2__AttributeStatement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AssertionType(struct soap*, const struct __saml2__union_AssertionType *, const char*, const char*);

inline int soap_write___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_get___saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *, const char*, const char*);

inline int soap_read___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *p)
{
	if (p)
	{	::soap_default___saml2__union_AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *p)
{
	if (::soap_read___saml2__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AttributeType_DEFINED
#define SOAP_TYPE_saml2__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeType(struct soap*, struct saml2__AttributeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeType(struct soap*, const char*, int, const struct saml2__AttributeType *, const char*);
SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_in_saml2__AttributeType(struct soap*, const char*, struct saml2__AttributeType *, const char*);
SOAP_FMAC1 struct saml2__AttributeType * SOAP_FMAC2 soap_instantiate_saml2__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AttributeType * soap_new_saml2__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AttributeType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AttributeType * soap_new_req_saml2__AttributeType(
	struct soap *soap,
	int __sizeAttributeValue,
	char **saml2__AttributeValue,
	char *Name)
{
	struct saml2__AttributeType *_p = ::soap_new_saml2__AttributeType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeType(soap, _p);
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml2__AttributeValue = saml2__AttributeValue;
		_p->Name = Name;
	}
	return _p;
}

inline struct saml2__AttributeType * soap_new_set_saml2__AttributeType(
	struct soap *soap,
	int __sizeAttributeValue,
	char **saml2__AttributeValue,
	char *Name,
	char *NameFormat,
	char *FriendlyName)
{
	struct saml2__AttributeType *_p = ::soap_new_saml2__AttributeType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeType(soap, _p);
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml2__AttributeValue = saml2__AttributeValue;
		_p->Name = Name;
		_p->NameFormat = NameFormat;
		_p->FriendlyName = FriendlyName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *, const char*, const char*);

inline int soap_write_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_get_saml2__AttributeType(struct soap*, struct saml2__AttributeType *, const char*, const char*);

inline int soap_read_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *p)
{
	if (p)
	{	::soap_default_saml2__AttributeType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *p)
{
	if (::soap_read_saml2__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AttributeStatementType_DEFINED
#define SOAP_TYPE_saml2__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeStatementType(struct soap*, const char*, int, const struct saml2__AttributeStatementType *, const char*);
SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_in_saml2__AttributeStatementType(struct soap*, const char*, struct saml2__AttributeStatementType *, const char*);
SOAP_FMAC1 struct saml2__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml2__AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AttributeStatementType * soap_new_saml2__AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AttributeStatementType * soap_new_req_saml2__AttributeStatementType(
	struct soap *soap,
	int __size_AttributeStatementType,
	struct __saml2__union_AttributeStatementType *__union_AttributeStatementType)
{
	struct saml2__AttributeStatementType *_p = ::soap_new_saml2__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeStatementType(soap, _p);
		_p->__size_AttributeStatementType = __size_AttributeStatementType;
		_p->__union_AttributeStatementType = __union_AttributeStatementType;
	}
	return _p;
}

inline struct saml2__AttributeStatementType * soap_new_set_saml2__AttributeStatementType(
	struct soap *soap,
	int __size_AttributeStatementType,
	struct __saml2__union_AttributeStatementType *__union_AttributeStatementType)
{
	struct saml2__AttributeStatementType *_p = ::soap_new_saml2__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeStatementType(soap, _p);
		_p->__size_AttributeStatementType = __size_AttributeStatementType;
		_p->__union_AttributeStatementType = __union_AttributeStatementType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_write_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_get_saml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_read_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *p)
{
	if (p)
	{	::soap_default_saml2__AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *p)
{
	if (::soap_read_saml2__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__EvidenceType_DEFINED
#define SOAP_TYPE_saml2__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EvidenceType(struct soap*, struct saml2__EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EvidenceType(struct soap*, const char*, int, const struct saml2__EvidenceType *, const char*);
SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_in_saml2__EvidenceType(struct soap*, const char*, struct saml2__EvidenceType *, const char*);
SOAP_FMAC1 struct saml2__EvidenceType * SOAP_FMAC2 soap_instantiate_saml2__EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__EvidenceType * soap_new_saml2__EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__EvidenceType * soap_new_req_saml2__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml2__union_EvidenceType *__union_EvidenceType)
{
	struct saml2__EvidenceType *_p = ::soap_new_saml2__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml2__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}

inline struct saml2__EvidenceType * soap_new_set_saml2__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml2__union_EvidenceType *__union_EvidenceType)
{
	struct saml2__EvidenceType *_p = ::soap_new_saml2__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml2__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *, const char*, const char*);

inline int soap_write_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_get_saml2__EvidenceType(struct soap*, struct saml2__EvidenceType *, const char*, const char*);

inline int soap_read_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *p)
{
	if (p)
	{	::soap_default_saml2__EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *p)
{
	if (::soap_read_saml2__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ActionType_DEFINED
#define SOAP_TYPE_saml2__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ActionType(struct soap*, struct saml2__ActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ActionType(struct soap*, const struct saml2__ActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ActionType(struct soap*, const char*, int, const struct saml2__ActionType *, const char*);
SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_in_saml2__ActionType(struct soap*, const char*, struct saml2__ActionType *, const char*);
SOAP_FMAC1 struct saml2__ActionType * SOAP_FMAC2 soap_instantiate_saml2__ActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ActionType * soap_new_saml2__ActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ActionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ActionType * soap_new_req_saml2__ActionType(
	struct soap *soap,
	char *Namespace)
{
	struct saml2__ActionType *_p = ::soap_new_saml2__ActionType(soap);
	if (_p)
	{	::soap_default_saml2__ActionType(soap, _p);
		_p->Namespace = Namespace;
	}
	return _p;
}

inline struct saml2__ActionType * soap_new_set_saml2__ActionType(
	struct soap *soap,
	char *__item,
	char *Namespace)
{
	struct saml2__ActionType *_p = ::soap_new_saml2__ActionType(soap);
	if (_p)
	{	::soap_default_saml2__ActionType(soap, _p);
		_p->__item = __item;
		_p->Namespace = Namespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ActionType(struct soap*, const struct saml2__ActionType *, const char*, const char*);

inline int soap_write_saml2__ActionType(struct soap *soap, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_get_saml2__ActionType(struct soap*, struct saml2__ActionType *, const char*, const char*);

inline int soap_read_saml2__ActionType(struct soap *soap, struct saml2__ActionType *p)
{
	if (p)
	{	::soap_default_saml2__ActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ActionType(struct soap *soap, struct saml2__ActionType *p)
{
	if (::soap_read_saml2__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AuthzDecisionStatementType_DEFINED
#define SOAP_TYPE_saml2__AuthzDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthzDecisionStatementType(struct soap*, const char*, int, const struct saml2__AuthzDecisionStatementType *, const char*);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_in_saml2__AuthzDecisionStatementType(struct soap*, const char*, struct saml2__AuthzDecisionStatementType *, const char*);
SOAP_FMAC1 struct saml2__AuthzDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthzDecisionStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthzDecisionStatementType * soap_new_saml2__AuthzDecisionStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthzDecisionStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthzDecisionStatementType * soap_new_req_saml2__AuthzDecisionStatementType(
	struct soap *soap,
	int __sizeAction,
	struct saml2__ActionType *saml2__Action,
	char *Resource,
	enum saml2__DecisionType Decision)
{
	struct saml2__AuthzDecisionStatementType *_p = ::soap_new_saml2__AuthzDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthzDecisionStatementType(soap, _p);
		_p->__sizeAction = __sizeAction;
		_p->saml2__Action = saml2__Action;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}

inline struct saml2__AuthzDecisionStatementType * soap_new_set_saml2__AuthzDecisionStatementType(
	struct soap *soap,
	int __sizeAction,
	struct saml2__ActionType *saml2__Action,
	struct saml2__EvidenceType *saml2__Evidence,
	char *Resource,
	enum saml2__DecisionType Decision)
{
	struct saml2__AuthzDecisionStatementType *_p = ::soap_new_saml2__AuthzDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthzDecisionStatementType(soap, _p);
		_p->__sizeAction = __sizeAction;
		_p->saml2__Action = saml2__Action;
		_p->saml2__Evidence = saml2__Evidence;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_write_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_get_saml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_read_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *p)
{
	if (p)
	{	::soap_default_saml2__AuthzDecisionStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AuthzDecisionStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AuthzDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *p)
{
	if (::soap_read_saml2__AuthzDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AuthnContextType_DEFINED
#define SOAP_TYPE_saml2__AuthnContextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnContextType(struct soap*, const char*, int, const struct saml2__AuthnContextType *, const char*);
SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_in_saml2__AuthnContextType(struct soap*, const char*, struct saml2__AuthnContextType *, const char*);
SOAP_FMAC1 struct saml2__AuthnContextType * SOAP_FMAC2 soap_instantiate_saml2__AuthnContextType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthnContextType * soap_new_saml2__AuthnContextType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthnContextType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthnContextType * soap_new_req_saml2__AuthnContextType(
	struct soap *soap,
	int __sizeAuthenticatingAuthority,
	char **saml2__AuthenticatingAuthority)
{
	struct saml2__AuthnContextType *_p = ::soap_new_saml2__AuthnContextType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnContextType(soap, _p);
		_p->__sizeAuthenticatingAuthority = __sizeAuthenticatingAuthority;
		_p->saml2__AuthenticatingAuthority = saml2__AuthenticatingAuthority;
	}
	return _p;
}

inline struct saml2__AuthnContextType * soap_new_set_saml2__AuthnContextType(
	struct soap *soap,
	char *saml2__AuthnContextClassRef,
	char *saml2__AuthnContextDecl,
	char *saml2__AuthnContextDeclRef,
	int __sizeAuthenticatingAuthority,
	char **saml2__AuthenticatingAuthority)
{
	struct saml2__AuthnContextType *_p = ::soap_new_saml2__AuthnContextType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnContextType(soap, _p);
		_p->saml2__AuthnContextClassRef = saml2__AuthnContextClassRef;
		_p->saml2__AuthnContextDecl = saml2__AuthnContextDecl;
		_p->saml2__AuthnContextDeclRef = saml2__AuthnContextDeclRef;
		_p->__sizeAuthenticatingAuthority = __sizeAuthenticatingAuthority;
		_p->saml2__AuthenticatingAuthority = saml2__AuthenticatingAuthority;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_write_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_get_saml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_read_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *p)
{
	if (p)
	{	::soap_default_saml2__AuthnContextType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AuthnContextType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AuthnContextType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *p)
{
	if (::soap_read_saml2__AuthnContextType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectLocalityType_DEFINED
#define SOAP_TYPE_saml2__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectLocalityType(struct soap*, const char*, int, const struct saml2__SubjectLocalityType *, const char*);
SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_in_saml2__SubjectLocalityType(struct soap*, const char*, struct saml2__SubjectLocalityType *, const char*);
SOAP_FMAC1 struct saml2__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml2__SubjectLocalityType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectLocalityType * soap_new_saml2__SubjectLocalityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectLocalityType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectLocalityType * soap_new_req_saml2__SubjectLocalityType(
	struct soap *soap)
{
	struct saml2__SubjectLocalityType *_p = ::soap_new_saml2__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectLocalityType(soap, _p);
	}
	return _p;
}

inline struct saml2__SubjectLocalityType * soap_new_set_saml2__SubjectLocalityType(
	struct soap *soap,
	char *Address,
	char *DNSName)
{
	struct saml2__SubjectLocalityType *_p = ::soap_new_saml2__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectLocalityType(soap, _p);
		_p->Address = Address;
		_p->DNSName = DNSName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_write_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_get_saml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_read_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectLocalityType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectLocalityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *p)
{
	if (::soap_read_saml2__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AuthnStatementType_DEFINED
#define SOAP_TYPE_saml2__AuthnStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnStatementType(struct soap*, const char*, int, const struct saml2__AuthnStatementType *, const char*);
SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_in_saml2__AuthnStatementType(struct soap*, const char*, struct saml2__AuthnStatementType *, const char*);
SOAP_FMAC1 struct saml2__AuthnStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthnStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthnStatementType * soap_new_saml2__AuthnStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthnStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthnStatementType * soap_new_req_saml2__AuthnStatementType(
	struct soap *soap,
	struct saml2__AuthnContextType *saml2__AuthnContext,
	time_t AuthnInstant)
{
	struct saml2__AuthnStatementType *_p = ::soap_new_saml2__AuthnStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnStatementType(soap, _p);
		_p->saml2__AuthnContext = saml2__AuthnContext;
		_p->AuthnInstant = AuthnInstant;
	}
	return _p;
}

inline struct saml2__AuthnStatementType * soap_new_set_saml2__AuthnStatementType(
	struct soap *soap,
	struct saml2__SubjectLocalityType *saml2__SubjectLocality,
	struct saml2__AuthnContextType *saml2__AuthnContext,
	time_t AuthnInstant,
	char *SessionIndex,
	time_t *SessionNotOnOrAfter)
{
	struct saml2__AuthnStatementType *_p = ::soap_new_saml2__AuthnStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnStatementType(soap, _p);
		_p->saml2__SubjectLocality = saml2__SubjectLocality;
		_p->saml2__AuthnContext = saml2__AuthnContext;
		_p->AuthnInstant = AuthnInstant;
		_p->SessionIndex = SessionIndex;
		_p->SessionNotOnOrAfter = SessionNotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_write_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_get_saml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_read_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *p)
{
	if (p)
	{	::soap_default_saml2__AuthnStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AuthnStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AuthnStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *p)
{
	if (::soap_read_saml2__AuthnStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__StatementAbstractType_DEFINED
#define SOAP_TYPE_saml2__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__StatementAbstractType(struct soap*, const char*, int, const struct saml2__StatementAbstractType *, const char*);
SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_in_saml2__StatementAbstractType(struct soap*, const char*, struct saml2__StatementAbstractType *, const char*);
SOAP_FMAC1 struct saml2__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml2__StatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__StatementAbstractType * soap_new_saml2__StatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__StatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__StatementAbstractType * soap_new_req_saml2__StatementAbstractType(
	struct soap *soap)
{
	struct saml2__StatementAbstractType *_p = ::soap_new_saml2__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__StatementAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__StatementAbstractType * soap_new_set_saml2__StatementAbstractType(
	struct soap *soap)
{
	struct saml2__StatementAbstractType *_p = ::soap_new_saml2__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__StatementAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_write_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_get_saml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_read_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *p)
{
	if (p)
	{	::soap_default_saml2__StatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__StatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *p)
{
	if (::soap_read_saml2__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AdviceType_DEFINED
#define SOAP_TYPE_saml2__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AdviceType(struct soap*, struct saml2__AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AdviceType(struct soap*, const char*, int, const struct saml2__AdviceType *, const char*);
SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_in_saml2__AdviceType(struct soap*, const char*, struct saml2__AdviceType *, const char*);
SOAP_FMAC1 struct saml2__AdviceType * SOAP_FMAC2 soap_instantiate_saml2__AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AdviceType * soap_new_saml2__AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AdviceType * soap_new_req_saml2__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml2__union_AdviceType *__union_AdviceType)
{
	struct saml2__AdviceType *_p = ::soap_new_saml2__AdviceType(soap);
	if (_p)
	{	::soap_default_saml2__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}

inline struct saml2__AdviceType * soap_new_set_saml2__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml2__union_AdviceType *__union_AdviceType)
{
	struct saml2__AdviceType *_p = ::soap_new_saml2__AdviceType(soap);
	if (_p)
	{	::soap_default_saml2__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *, const char*, const char*);

inline int soap_write_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_get_saml2__AdviceType(struct soap*, struct saml2__AdviceType *, const char*, const char*);

inline int soap_read_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *p)
{
	if (p)
	{	::soap_default_saml2__AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *p)
{
	if (::soap_read_saml2__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ProxyRestrictionType_DEFINED
#define SOAP_TYPE_saml2__ProxyRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ProxyRestrictionType(struct soap*, const char*, int, const struct saml2__ProxyRestrictionType *, const char*);
SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_in_saml2__ProxyRestrictionType(struct soap*, const char*, struct saml2__ProxyRestrictionType *, const char*);
SOAP_FMAC1 struct saml2__ProxyRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__ProxyRestrictionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ProxyRestrictionType * soap_new_saml2__ProxyRestrictionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ProxyRestrictionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ProxyRestrictionType * soap_new_req_saml2__ProxyRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__ProxyRestrictionType *_p = ::soap_new_saml2__ProxyRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__ProxyRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}

inline struct saml2__ProxyRestrictionType * soap_new_set_saml2__ProxyRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience,
	char *Count)
{
	struct saml2__ProxyRestrictionType *_p = ::soap_new_saml2__ProxyRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__ProxyRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
		_p->Count = Count;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_write_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_get_saml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_read_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *p)
{
	if (p)
	{	::soap_default_saml2__ProxyRestrictionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ProxyRestrictionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ProxyRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *p)
{
	if (::soap_read_saml2__ProxyRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__OneTimeUseType_DEFINED
#define SOAP_TYPE_saml2__OneTimeUseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__OneTimeUseType(struct soap*, const char*, int, const struct saml2__OneTimeUseType *, const char*);
SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_in_saml2__OneTimeUseType(struct soap*, const char*, struct saml2__OneTimeUseType *, const char*);
SOAP_FMAC1 struct saml2__OneTimeUseType * SOAP_FMAC2 soap_instantiate_saml2__OneTimeUseType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__OneTimeUseType * soap_new_saml2__OneTimeUseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__OneTimeUseType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__OneTimeUseType * soap_new_req_saml2__OneTimeUseType(
	struct soap *soap)
{
	struct saml2__OneTimeUseType *_p = ::soap_new_saml2__OneTimeUseType(soap);
	if (_p)
	{	::soap_default_saml2__OneTimeUseType(soap, _p);
	}
	return _p;
}

inline struct saml2__OneTimeUseType * soap_new_set_saml2__OneTimeUseType(
	struct soap *soap)
{
	struct saml2__OneTimeUseType *_p = ::soap_new_saml2__OneTimeUseType(soap);
	if (_p)
	{	::soap_default_saml2__OneTimeUseType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_write_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_get_saml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_read_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *p)
{
	if (p)
	{	::soap_default_saml2__OneTimeUseType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__OneTimeUseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__OneTimeUseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *p)
{
	if (::soap_read_saml2__OneTimeUseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AudienceRestrictionType_DEFINED
#define SOAP_TYPE_saml2__AudienceRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AudienceRestrictionType(struct soap*, const char*, int, const struct saml2__AudienceRestrictionType *, const char*);
SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_in_saml2__AudienceRestrictionType(struct soap*, const char*, struct saml2__AudienceRestrictionType *, const char*);
SOAP_FMAC1 struct saml2__AudienceRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__AudienceRestrictionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AudienceRestrictionType * soap_new_saml2__AudienceRestrictionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AudienceRestrictionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AudienceRestrictionType * soap_new_req_saml2__AudienceRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__AudienceRestrictionType *_p = ::soap_new_saml2__AudienceRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__AudienceRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}

inline struct saml2__AudienceRestrictionType * soap_new_set_saml2__AudienceRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__AudienceRestrictionType *_p = ::soap_new_saml2__AudienceRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__AudienceRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_write_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_get_saml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_read_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *p)
{
	if (p)
	{	::soap_default_saml2__AudienceRestrictionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AudienceRestrictionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AudienceRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *p)
{
	if (::soap_read_saml2__AudienceRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ConditionAbstractType_DEFINED
#define SOAP_TYPE_saml2__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionAbstractType(struct soap*, const char*, int, const struct saml2__ConditionAbstractType *, const char*);
SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_in_saml2__ConditionAbstractType(struct soap*, const char*, struct saml2__ConditionAbstractType *, const char*);
SOAP_FMAC1 struct saml2__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml2__ConditionAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ConditionAbstractType * soap_new_saml2__ConditionAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ConditionAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ConditionAbstractType * soap_new_req_saml2__ConditionAbstractType(
	struct soap *soap)
{
	struct saml2__ConditionAbstractType *_p = ::soap_new_saml2__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__ConditionAbstractType * soap_new_set_saml2__ConditionAbstractType(
	struct soap *soap)
{
	struct saml2__ConditionAbstractType *_p = ::soap_new_saml2__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_write_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_get_saml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_read_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *p)
{
	if (p)
	{	::soap_default_saml2__ConditionAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ConditionAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *p)
{
	if (::soap_read_saml2__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ConditionsType_DEFINED
#define SOAP_TYPE_saml2__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionsType(struct soap*, struct saml2__ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionsType(struct soap*, const char*, int, const struct saml2__ConditionsType *, const char*);
SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_in_saml2__ConditionsType(struct soap*, const char*, struct saml2__ConditionsType *, const char*);
SOAP_FMAC1 struct saml2__ConditionsType * SOAP_FMAC2 soap_instantiate_saml2__ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ConditionsType * soap_new_saml2__ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ConditionsType * soap_new_req_saml2__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml2__union_ConditionsType *__union_ConditionsType)
{
	struct saml2__ConditionsType *_p = ::soap_new_saml2__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
	}
	return _p;
}

inline struct saml2__ConditionsType * soap_new_set_saml2__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml2__union_ConditionsType *__union_ConditionsType,
	time_t *NotBefore,
	time_t *NotOnOrAfter)
{
	struct saml2__ConditionsType *_p = ::soap_new_saml2__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *, const char*, const char*);

inline int soap_write_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_get_saml2__ConditionsType(struct soap*, struct saml2__ConditionsType *, const char*, const char*);

inline int soap_read_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *p)
{
	if (p)
	{	::soap_default_saml2__ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *p)
{
	if (::soap_read_saml2__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__KeyInfoConfirmationDataType_DEFINED
#define SOAP_TYPE_saml2__KeyInfoConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__KeyInfoConfirmationDataType(struct soap*, struct saml2__KeyInfoConfirmationDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__KeyInfoConfirmationDataType(struct soap*, const struct saml2__KeyInfoConfirmationDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__KeyInfoConfirmationDataType(struct soap*, const char*, int, const struct saml2__KeyInfoConfirmationDataType *, const char*);
SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_in_saml2__KeyInfoConfirmationDataType(struct soap*, const char*, struct saml2__KeyInfoConfirmationDataType *, const char*);
SOAP_FMAC1 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__KeyInfoConfirmationDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__KeyInfoConfirmationDataType * soap_new_saml2__KeyInfoConfirmationDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__KeyInfoConfirmationDataType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__KeyInfoConfirmationDataType * soap_new_req_saml2__KeyInfoConfirmationDataType(
	struct soap *soap,
	int __sizeds__KeyInfo,
	struct ds__KeyInfoType **ds__KeyInfo)
{
	struct saml2__KeyInfoConfirmationDataType *_p = ::soap_new_saml2__KeyInfoConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__KeyInfoConfirmationDataType(soap, _p);
		_p->__sizeds__KeyInfo = __sizeds__KeyInfo;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}

inline struct saml2__KeyInfoConfirmationDataType * soap_new_set_saml2__KeyInfoConfirmationDataType(
	struct soap *soap,
	int __sizeds__KeyInfo,
	struct ds__KeyInfoType **ds__KeyInfo)
{
	struct saml2__KeyInfoConfirmationDataType *_p = ::soap_new_saml2__KeyInfoConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__KeyInfoConfirmationDataType(soap, _p);
		_p->__sizeds__KeyInfo = __sizeds__KeyInfo;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__KeyInfoConfirmationDataType(struct soap*, const struct saml2__KeyInfoConfirmationDataType *, const char*, const char*);

inline int soap_write_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_get_saml2__KeyInfoConfirmationDataType(struct soap*, struct saml2__KeyInfoConfirmationDataType *, const char*, const char*);

inline int soap_read_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (p)
	{	::soap_default_saml2__KeyInfoConfirmationDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__KeyInfoConfirmationDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__KeyInfoConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (::soap_read_saml2__KeyInfoConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectConfirmationDataType_DEFINED
#define SOAP_TYPE_saml2__SubjectConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationDataType(struct soap*, const char*, int, const struct saml2__SubjectConfirmationDataType *, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationDataType(struct soap*, const char*, struct saml2__SubjectConfirmationDataType *, const char*);
SOAP_FMAC1 struct saml2__SubjectConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectConfirmationDataType * soap_new_saml2__SubjectConfirmationDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectConfirmationDataType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectConfirmationDataType * soap_new_req_saml2__SubjectConfirmationDataType(
	struct soap *soap)
{
	struct saml2__SubjectConfirmationDataType *_p = ::soap_new_saml2__SubjectConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationDataType(soap, _p);
	}
	return _p;
}

inline struct saml2__SubjectConfirmationDataType * soap_new_set_saml2__SubjectConfirmationDataType(
	struct soap *soap,
	time_t *NotBefore,
	time_t *NotOnOrAfter,
	char *Recipient,
	char *InResponseTo,
	char *Address,
	char *__mixed)
{
	struct saml2__SubjectConfirmationDataType *_p = ::soap_new_saml2__SubjectConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationDataType(soap, _p);
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
		_p->Recipient = Recipient;
		_p->InResponseTo = InResponseTo;
		_p->Address = Address;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_write_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_read_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectConfirmationDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectConfirmationDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *p)
{
	if (::soap_read_saml2__SubjectConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_saml2__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationType(struct soap*, const char*, int, const struct saml2__SubjectConfirmationType *, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationType(struct soap*, const char*, struct saml2__SubjectConfirmationType *, const char*);
SOAP_FMAC1 struct saml2__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectConfirmationType * soap_new_saml2__SubjectConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectConfirmationType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectConfirmationType * soap_new_req_saml2__SubjectConfirmationType(
	struct soap *soap,
	char *Method)
{
	struct saml2__SubjectConfirmationType *_p = ::soap_new_saml2__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationType(soap, _p);
		_p->Method = Method;
	}
	return _p;
}

inline struct saml2__SubjectConfirmationType * soap_new_set_saml2__SubjectConfirmationType(
	struct soap *soap,
	struct saml2__BaseIDAbstractType *saml2__BaseID,
	struct saml2__NameIDType *saml2__NameID,
	struct saml2__EncryptedElementType *saml2__EncryptedID,
	struct saml2__SubjectConfirmationDataType *saml2__SubjectConfirmationData,
	char *Method)
{
	struct saml2__SubjectConfirmationType *_p = ::soap_new_saml2__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationType(soap, _p);
		_p->saml2__BaseID = saml2__BaseID;
		_p->saml2__NameID = saml2__NameID;
		_p->saml2__EncryptedID = saml2__EncryptedID;
		_p->saml2__SubjectConfirmationData = saml2__SubjectConfirmationData;
		_p->Method = Method;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_write_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_read_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectConfirmationType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *p)
{
	if (::soap_read_saml2__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectType_DEFINED
#define SOAP_TYPE_saml2__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectType(struct soap*, struct saml2__SubjectType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectType(struct soap*, const char*, int, const struct saml2__SubjectType *, const char*);
SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_in_saml2__SubjectType(struct soap*, const char*, struct saml2__SubjectType *, const char*);
SOAP_FMAC1 struct saml2__SubjectType * SOAP_FMAC2 soap_instantiate_saml2__SubjectType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectType * soap_new_saml2__SubjectType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectType * soap_new_req_saml2__SubjectType(
	struct soap *soap,
	int __sizeSubjectConfirmation,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation)
{
	struct saml2__SubjectType *_p = ::soap_new_saml2__SubjectType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectType(soap, _p);
		_p->__sizeSubjectConfirmation = __sizeSubjectConfirmation;
		_p->saml2__SubjectConfirmation = saml2__SubjectConfirmation;
	}
	return _p;
}

inline struct saml2__SubjectType * soap_new_set_saml2__SubjectType(
	struct soap *soap,
	struct saml2__BaseIDAbstractType *saml2__BaseID,
	struct saml2__NameIDType *saml2__NameID,
	struct saml2__EncryptedElementType *saml2__EncryptedID,
	int __sizeSubjectConfirmation,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation)
{
	struct saml2__SubjectType *_p = ::soap_new_saml2__SubjectType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectType(soap, _p);
		_p->saml2__BaseID = saml2__BaseID;
		_p->saml2__NameID = saml2__NameID;
		_p->saml2__EncryptedID = saml2__EncryptedID;
		_p->__sizeSubjectConfirmation = __sizeSubjectConfirmation;
		_p->saml2__SubjectConfirmation = saml2__SubjectConfirmation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *, const char*, const char*);

inline int soap_write_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_get_saml2__SubjectType(struct soap*, struct saml2__SubjectType *, const char*, const char*);

inline int soap_read_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *p)
{
	if (::soap_read_saml2__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AssertionType_DEFINED
#define SOAP_TYPE_saml2__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AssertionType(struct soap*, struct saml2__AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AssertionType(struct soap*, const char*, int, const struct saml2__AssertionType *, const char*);
SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_in_saml2__AssertionType(struct soap*, const char*, struct saml2__AssertionType *, const char*);
SOAP_FMAC1 struct saml2__AssertionType * SOAP_FMAC2 soap_instantiate_saml2__AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AssertionType * soap_new_saml2__AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AssertionType * soap_new_req_saml2__AssertionType(
	struct soap *soap,
	struct saml2__NameIDType *saml2__Issuer,
	int __size_AssertionType,
	struct __saml2__union_AssertionType *__union_AssertionType,
	char *Version,
	char *ID,
	time_t IssueInstant)
{
	struct saml2__AssertionType *_p = ::soap_new_saml2__AssertionType(soap);
	if (_p)
	{	::soap_default_saml2__AssertionType(soap, _p);
		_p->saml2__Issuer = saml2__Issuer;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->Version = Version;
		_p->ID = ID;
		_p->IssueInstant = IssueInstant;
	}
	return _p;
}

inline struct saml2__AssertionType * soap_new_set_saml2__AssertionType(
	struct soap *soap,
	struct saml2__NameIDType *saml2__Issuer,
	struct ds__SignatureType *ds__Signature,
	struct saml2__SubjectType *saml2__Subject,
	struct saml2__ConditionsType *saml2__Conditions,
	struct saml2__AdviceType *saml2__Advice,
	int __size_AssertionType,
	struct __saml2__union_AssertionType *__union_AssertionType,
	char *Version,
	char *ID,
	time_t IssueInstant,
	char *wsu__Id)
{
	struct saml2__AssertionType *_p = ::soap_new_saml2__AssertionType(soap);
	if (_p)
	{	::soap_default_saml2__AssertionType(soap, _p);
		_p->saml2__Issuer = saml2__Issuer;
		_p->ds__Signature = ds__Signature;
		_p->saml2__Subject = saml2__Subject;
		_p->saml2__Conditions = saml2__Conditions;
		_p->saml2__Advice = saml2__Advice;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->Version = Version;
		_p->ID = ID;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *, const char*, const char*);

inline int soap_write_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_get_saml2__AssertionType(struct soap*, struct saml2__AssertionType *, const char*, const char*);

inline int soap_read_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *p)
{
	if (p)
	{	::soap_default_saml2__AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *p)
{
	if (::soap_read_saml2__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__EncryptedElementType_DEFINED
#define SOAP_TYPE_saml2__EncryptedElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EncryptedElementType(struct soap*, const char*, int, const struct saml2__EncryptedElementType *, const char*);
SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_in_saml2__EncryptedElementType(struct soap*, const char*, struct saml2__EncryptedElementType *, const char*);
SOAP_FMAC1 struct saml2__EncryptedElementType * SOAP_FMAC2 soap_instantiate_saml2__EncryptedElementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__EncryptedElementType * soap_new_saml2__EncryptedElementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__EncryptedElementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__EncryptedElementType * soap_new_req_saml2__EncryptedElementType(
	struct soap *soap,
	const struct xenc__EncryptedDataType& xenc__EncryptedData,
	int __sizexenc__EncryptedKey,
	struct xenc__EncryptedKeyType **xenc__EncryptedKey)
{
	struct saml2__EncryptedElementType *_p = ::soap_new_saml2__EncryptedElementType(soap);
	if (_p)
	{	::soap_default_saml2__EncryptedElementType(soap, _p);
		_p->xenc__EncryptedData = xenc__EncryptedData;
		_p->__sizexenc__EncryptedKey = __sizexenc__EncryptedKey;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
	}
	return _p;
}

inline struct saml2__EncryptedElementType * soap_new_set_saml2__EncryptedElementType(
	struct soap *soap,
	const struct xenc__EncryptedDataType& xenc__EncryptedData,
	int __sizexenc__EncryptedKey,
	struct xenc__EncryptedKeyType **xenc__EncryptedKey)
{
	struct saml2__EncryptedElementType *_p = ::soap_new_saml2__EncryptedElementType(soap);
	if (_p)
	{	::soap_default_saml2__EncryptedElementType(soap, _p);
		_p->xenc__EncryptedData = xenc__EncryptedData;
		_p->__sizexenc__EncryptedKey = __sizexenc__EncryptedKey;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_get_saml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_read_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *p)
{
	if (p)
	{	::soap_default_saml2__EncryptedElementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__EncryptedElementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__EncryptedElementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *p)
{
	if (::soap_read_saml2__EncryptedElementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__NameIDType_DEFINED
#define SOAP_TYPE_saml2__NameIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__NameIDType(struct soap*, struct saml2__NameIDType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__NameIDType(struct soap*, const char*, int, const struct saml2__NameIDType *, const char*);
SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_in_saml2__NameIDType(struct soap*, const char*, struct saml2__NameIDType *, const char*);
SOAP_FMAC1 struct saml2__NameIDType * SOAP_FMAC2 soap_instantiate_saml2__NameIDType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__NameIDType * soap_new_saml2__NameIDType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__NameIDType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__NameIDType * soap_new_req_saml2__NameIDType(
	struct soap *soap)
{
	struct saml2__NameIDType *_p = ::soap_new_saml2__NameIDType(soap);
	if (_p)
	{	::soap_default_saml2__NameIDType(soap, _p);
	}
	return _p;
}

inline struct saml2__NameIDType * soap_new_set_saml2__NameIDType(
	struct soap *soap,
	char *__item,
	char *Format,
	char *SPProvidedID,
	char *NameQualifier,
	char *SPNameQualifier)
{
	struct saml2__NameIDType *_p = ::soap_new_saml2__NameIDType(soap);
	if (_p)
	{	::soap_default_saml2__NameIDType(soap, _p);
		_p->__item = __item;
		_p->Format = Format;
		_p->SPProvidedID = SPProvidedID;
		_p->NameQualifier = NameQualifier;
		_p->SPNameQualifier = SPNameQualifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_get_saml2__NameIDType(struct soap*, struct saml2__NameIDType *, const char*, const char*);

inline int soap_read_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *p)
{
	if (p)
	{	::soap_default_saml2__NameIDType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__NameIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__NameIDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *p)
{
	if (::soap_read_saml2__NameIDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__BaseIDAbstractType_DEFINED
#define SOAP_TYPE_saml2__BaseIDAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__BaseIDAbstractType(struct soap*, const char*, int, const struct saml2__BaseIDAbstractType *, const char*);
SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_in_saml2__BaseIDAbstractType(struct soap*, const char*, struct saml2__BaseIDAbstractType *, const char*);
SOAP_FMAC1 struct saml2__BaseIDAbstractType * SOAP_FMAC2 soap_instantiate_saml2__BaseIDAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__BaseIDAbstractType * soap_new_saml2__BaseIDAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__BaseIDAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__BaseIDAbstractType * soap_new_req_saml2__BaseIDAbstractType(
	struct soap *soap)
{
	struct saml2__BaseIDAbstractType *_p = ::soap_new_saml2__BaseIDAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__BaseIDAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__BaseIDAbstractType * soap_new_set_saml2__BaseIDAbstractType(
	struct soap *soap,
	char *NameQualifier,
	char *SPNameQualifier)
{
	struct saml2__BaseIDAbstractType *_p = ::soap_new_saml2__BaseIDAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__BaseIDAbstractType(soap, _p);
		_p->NameQualifier = NameQualifier;
		_p->SPNameQualifier = SPNameQualifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_write_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_get_saml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_read_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *p)
{
	if (p)
	{	::soap_default_saml2__BaseIDAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__BaseIDAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__BaseIDAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *p)
{
	if (::soap_read_saml2__BaseIDAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _saml1__Attribute is a typedef synonym of saml1__AttributeType */

#ifndef SOAP_TYPE__saml1__Attribute_DEFINED
#define SOAP_TYPE__saml1__Attribute_DEFINED

#define soap_default__saml1__Attribute soap_default_saml1__AttributeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *);

#define soap_serialize__saml1__Attribute soap_serialize_saml1__AttributeType


#define soap__saml1__Attribute2s soap_saml1__AttributeType2s


#define soap_out__saml1__Attribute soap_out_saml1__AttributeType


#define soap_s2_saml1__Attribute soap_s2saml1__AttributeType


#define soap_in__saml1__Attribute soap_in_saml1__AttributeType


#define soap_instantiate__saml1__Attribute soap_instantiate_saml1__AttributeType


#define soap_new__saml1__Attribute soap_new_saml1__AttributeType


#define soap_new_req__saml1__Attribute soap_new_req_saml1__AttributeType


#define soap_new_set__saml1__Attribute soap_new_set_saml1__AttributeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Attribute(struct soap*, const struct saml1__AttributeType *, const char*, const char*);

inline int soap_write__saml1__Attribute(struct soap *soap, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Attribute(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Attribute(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Attribute(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Attribute soap_get_saml1__AttributeType


#define soap_read__saml1__Attribute soap_read_saml1__AttributeType


#define soap_GET__saml1__Attribute soap_GET_saml1__AttributeType


#define soap_POST_recv__saml1__Attribute soap_POST_recv_saml1__AttributeType

#endif
/* _saml1__AttributeDesignator is a typedef synonym of saml1__AttributeDesignatorType */

#ifndef SOAP_TYPE__saml1__AttributeDesignator_DEFINED
#define SOAP_TYPE__saml1__AttributeDesignator_DEFINED

#define soap_default__saml1__AttributeDesignator soap_default_saml1__AttributeDesignatorType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *);

#define soap_serialize__saml1__AttributeDesignator soap_serialize_saml1__AttributeDesignatorType


#define soap__saml1__AttributeDesignator2s soap_saml1__AttributeDesignatorType2s


#define soap_out__saml1__AttributeDesignator soap_out_saml1__AttributeDesignatorType


#define soap_s2_saml1__AttributeDesignator soap_s2saml1__AttributeDesignatorType


#define soap_in__saml1__AttributeDesignator soap_in_saml1__AttributeDesignatorType


#define soap_instantiate__saml1__AttributeDesignator soap_instantiate_saml1__AttributeDesignatorType


#define soap_new__saml1__AttributeDesignator soap_new_saml1__AttributeDesignatorType


#define soap_new_req__saml1__AttributeDesignator soap_new_req_saml1__AttributeDesignatorType


#define soap_new_set__saml1__AttributeDesignator soap_new_set_saml1__AttributeDesignatorType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AttributeDesignator(struct soap*, const struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_write__saml1__AttributeDesignator(struct soap *soap, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AttributeDesignator(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AttributeDesignator(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AttributeDesignator(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AttributeDesignator soap_get_saml1__AttributeDesignatorType


#define soap_read__saml1__AttributeDesignator soap_read_saml1__AttributeDesignatorType


#define soap_GET__saml1__AttributeDesignator soap_GET_saml1__AttributeDesignatorType


#define soap_POST_recv__saml1__AttributeDesignator soap_POST_recv_saml1__AttributeDesignatorType

#endif
/* _saml1__AttributeStatement is a typedef synonym of saml1__AttributeStatementType */

#ifndef SOAP_TYPE__saml1__AttributeStatement_DEFINED
#define SOAP_TYPE__saml1__AttributeStatement_DEFINED

#define soap_default__saml1__AttributeStatement soap_default_saml1__AttributeStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *);

#define soap_serialize__saml1__AttributeStatement soap_serialize_saml1__AttributeStatementType


#define soap__saml1__AttributeStatement2s soap_saml1__AttributeStatementType2s


#define soap_out__saml1__AttributeStatement soap_out_saml1__AttributeStatementType


#define soap_s2_saml1__AttributeStatement soap_s2saml1__AttributeStatementType


#define soap_in__saml1__AttributeStatement soap_in_saml1__AttributeStatementType


#define soap_instantiate__saml1__AttributeStatement soap_instantiate_saml1__AttributeStatementType


#define soap_new__saml1__AttributeStatement soap_new_saml1__AttributeStatementType


#define soap_new_req__saml1__AttributeStatement soap_new_req_saml1__AttributeStatementType


#define soap_new_set__saml1__AttributeStatement soap_new_set_saml1__AttributeStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AttributeStatement(struct soap*, const struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_write__saml1__AttributeStatement(struct soap *soap, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AttributeStatement(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AttributeStatement(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AttributeStatement(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AttributeStatement soap_get_saml1__AttributeStatementType


#define soap_read__saml1__AttributeStatement soap_read_saml1__AttributeStatementType


#define soap_GET__saml1__AttributeStatement soap_GET_saml1__AttributeStatementType


#define soap_POST_recv__saml1__AttributeStatement soap_POST_recv_saml1__AttributeStatementType

#endif
/* _saml1__Evidence is a typedef synonym of saml1__EvidenceType */

#ifndef SOAP_TYPE__saml1__Evidence_DEFINED
#define SOAP_TYPE__saml1__Evidence_DEFINED

#define soap_default__saml1__Evidence soap_default_saml1__EvidenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *);

#define soap_serialize__saml1__Evidence soap_serialize_saml1__EvidenceType


#define soap__saml1__Evidence2s soap_saml1__EvidenceType2s


#define soap_out__saml1__Evidence soap_out_saml1__EvidenceType


#define soap_s2_saml1__Evidence soap_s2saml1__EvidenceType


#define soap_in__saml1__Evidence soap_in_saml1__EvidenceType


#define soap_instantiate__saml1__Evidence soap_instantiate_saml1__EvidenceType


#define soap_new__saml1__Evidence soap_new_saml1__EvidenceType


#define soap_new_req__saml1__Evidence soap_new_req_saml1__EvidenceType


#define soap_new_set__saml1__Evidence soap_new_set_saml1__EvidenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Evidence(struct soap*, const struct saml1__EvidenceType *, const char*, const char*);

inline int soap_write__saml1__Evidence(struct soap *soap, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Evidence(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Evidence(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Evidence(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Evidence soap_get_saml1__EvidenceType


#define soap_read__saml1__Evidence soap_read_saml1__EvidenceType


#define soap_GET__saml1__Evidence soap_GET_saml1__EvidenceType


#define soap_POST_recv__saml1__Evidence soap_POST_recv_saml1__EvidenceType

#endif
/* _saml1__Action is a typedef synonym of saml1__ActionType */

#ifndef SOAP_TYPE__saml1__Action_DEFINED
#define SOAP_TYPE__saml1__Action_DEFINED

#define soap_default__saml1__Action soap_default_saml1__ActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ActionType(struct soap*, const struct saml1__ActionType *);

#define soap_serialize__saml1__Action soap_serialize_saml1__ActionType


#define soap__saml1__Action2s soap_saml1__ActionType2s


#define soap_out__saml1__Action soap_out_saml1__ActionType


#define soap_s2_saml1__Action soap_s2saml1__ActionType


#define soap_in__saml1__Action soap_in_saml1__ActionType


#define soap_instantiate__saml1__Action soap_instantiate_saml1__ActionType


#define soap_new__saml1__Action soap_new_saml1__ActionType


#define soap_new_req__saml1__Action soap_new_req_saml1__ActionType


#define soap_new_set__saml1__Action soap_new_set_saml1__ActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Action(struct soap*, const struct saml1__ActionType *, const char*, const char*);

inline int soap_write__saml1__Action(struct soap *soap, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Action(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Action(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Action(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Action soap_get_saml1__ActionType


#define soap_read__saml1__Action soap_read_saml1__ActionType


#define soap_GET__saml1__Action soap_GET_saml1__ActionType


#define soap_POST_recv__saml1__Action soap_POST_recv_saml1__ActionType

#endif
/* _saml1__AuthorizationDecisionStatement is a typedef synonym of saml1__AuthorizationDecisionStatementType */

#ifndef SOAP_TYPE__saml1__AuthorizationDecisionStatement_DEFINED
#define SOAP_TYPE__saml1__AuthorizationDecisionStatement_DEFINED

#define soap_default__saml1__AuthorizationDecisionStatement soap_default_saml1__AuthorizationDecisionStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *);

#define soap_serialize__saml1__AuthorizationDecisionStatement soap_serialize_saml1__AuthorizationDecisionStatementType


#define soap__saml1__AuthorizationDecisionStatement2s soap_saml1__AuthorizationDecisionStatementType2s


#define soap_out__saml1__AuthorizationDecisionStatement soap_out_saml1__AuthorizationDecisionStatementType


#define soap_s2_saml1__AuthorizationDecisionStatement soap_s2saml1__AuthorizationDecisionStatementType


#define soap_in__saml1__AuthorizationDecisionStatement soap_in_saml1__AuthorizationDecisionStatementType


#define soap_instantiate__saml1__AuthorizationDecisionStatement soap_instantiate_saml1__AuthorizationDecisionStatementType


#define soap_new__saml1__AuthorizationDecisionStatement soap_new_saml1__AuthorizationDecisionStatementType


#define soap_new_req__saml1__AuthorizationDecisionStatement soap_new_req_saml1__AuthorizationDecisionStatementType


#define soap_new_set__saml1__AuthorizationDecisionStatement soap_new_set_saml1__AuthorizationDecisionStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthorizationDecisionStatement(struct soap*, const struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_write__saml1__AuthorizationDecisionStatement(struct soap *soap, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AuthorizationDecisionStatement(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AuthorizationDecisionStatement(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AuthorizationDecisionStatement(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AuthorizationDecisionStatement soap_get_saml1__AuthorizationDecisionStatementType


#define soap_read__saml1__AuthorizationDecisionStatement soap_read_saml1__AuthorizationDecisionStatementType


#define soap_GET__saml1__AuthorizationDecisionStatement soap_GET_saml1__AuthorizationDecisionStatementType


#define soap_POST_recv__saml1__AuthorizationDecisionStatement soap_POST_recv_saml1__AuthorizationDecisionStatementType

#endif
/* _saml1__AuthorityBinding is a typedef synonym of saml1__AuthorityBindingType */

#ifndef SOAP_TYPE__saml1__AuthorityBinding_DEFINED
#define SOAP_TYPE__saml1__AuthorityBinding_DEFINED

#define soap_default__saml1__AuthorityBinding soap_default_saml1__AuthorityBindingType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *);

#define soap_serialize__saml1__AuthorityBinding soap_serialize_saml1__AuthorityBindingType


#define soap__saml1__AuthorityBinding2s soap_saml1__AuthorityBindingType2s


#define soap_out__saml1__AuthorityBinding soap_out_saml1__AuthorityBindingType


#define soap_s2_saml1__AuthorityBinding soap_s2saml1__AuthorityBindingType


#define soap_in__saml1__AuthorityBinding soap_in_saml1__AuthorityBindingType


#define soap_instantiate__saml1__AuthorityBinding soap_instantiate_saml1__AuthorityBindingType


#define soap_new__saml1__AuthorityBinding soap_new_saml1__AuthorityBindingType


#define soap_new_req__saml1__AuthorityBinding soap_new_req_saml1__AuthorityBindingType


#define soap_new_set__saml1__AuthorityBinding soap_new_set_saml1__AuthorityBindingType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthorityBinding(struct soap*, const struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_write__saml1__AuthorityBinding(struct soap *soap, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AuthorityBinding(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AuthorityBinding(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AuthorityBinding(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AuthorityBinding soap_get_saml1__AuthorityBindingType


#define soap_read__saml1__AuthorityBinding soap_read_saml1__AuthorityBindingType


#define soap_GET__saml1__AuthorityBinding soap_GET_saml1__AuthorityBindingType


#define soap_POST_recv__saml1__AuthorityBinding soap_POST_recv_saml1__AuthorityBindingType

#endif
/* _saml1__SubjectLocality is a typedef synonym of saml1__SubjectLocalityType */

#ifndef SOAP_TYPE__saml1__SubjectLocality_DEFINED
#define SOAP_TYPE__saml1__SubjectLocality_DEFINED

#define soap_default__saml1__SubjectLocality soap_default_saml1__SubjectLocalityType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *);

#define soap_serialize__saml1__SubjectLocality soap_serialize_saml1__SubjectLocalityType


#define soap__saml1__SubjectLocality2s soap_saml1__SubjectLocalityType2s


#define soap_out__saml1__SubjectLocality soap_out_saml1__SubjectLocalityType


#define soap_s2_saml1__SubjectLocality soap_s2saml1__SubjectLocalityType


#define soap_in__saml1__SubjectLocality soap_in_saml1__SubjectLocalityType


#define soap_instantiate__saml1__SubjectLocality soap_instantiate_saml1__SubjectLocalityType


#define soap_new__saml1__SubjectLocality soap_new_saml1__SubjectLocalityType


#define soap_new_req__saml1__SubjectLocality soap_new_req_saml1__SubjectLocalityType


#define soap_new_set__saml1__SubjectLocality soap_new_set_saml1__SubjectLocalityType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectLocality(struct soap*, const struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_write__saml1__SubjectLocality(struct soap *soap, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__SubjectLocality(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__SubjectLocality(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__SubjectLocality(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__SubjectLocality soap_get_saml1__SubjectLocalityType


#define soap_read__saml1__SubjectLocality soap_read_saml1__SubjectLocalityType


#define soap_GET__saml1__SubjectLocality soap_GET_saml1__SubjectLocalityType


#define soap_POST_recv__saml1__SubjectLocality soap_POST_recv_saml1__SubjectLocalityType

#endif
/* _saml1__AuthenticationStatement is a typedef synonym of saml1__AuthenticationStatementType */

#ifndef SOAP_TYPE__saml1__AuthenticationStatement_DEFINED
#define SOAP_TYPE__saml1__AuthenticationStatement_DEFINED

#define soap_default__saml1__AuthenticationStatement soap_default_saml1__AuthenticationStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *);

#define soap_serialize__saml1__AuthenticationStatement soap_serialize_saml1__AuthenticationStatementType


#define soap__saml1__AuthenticationStatement2s soap_saml1__AuthenticationStatementType2s


#define soap_out__saml1__AuthenticationStatement soap_out_saml1__AuthenticationStatementType


#define soap_s2_saml1__AuthenticationStatement soap_s2saml1__AuthenticationStatementType


#define soap_in__saml1__AuthenticationStatement soap_in_saml1__AuthenticationStatementType


#define soap_instantiate__saml1__AuthenticationStatement soap_instantiate_saml1__AuthenticationStatementType


#define soap_new__saml1__AuthenticationStatement soap_new_saml1__AuthenticationStatementType


#define soap_new_req__saml1__AuthenticationStatement soap_new_req_saml1__AuthenticationStatementType


#define soap_new_set__saml1__AuthenticationStatement soap_new_set_saml1__AuthenticationStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthenticationStatement(struct soap*, const struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_write__saml1__AuthenticationStatement(struct soap *soap, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AuthenticationStatement(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AuthenticationStatement(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AuthenticationStatement(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AuthenticationStatement soap_get_saml1__AuthenticationStatementType


#define soap_read__saml1__AuthenticationStatement soap_read_saml1__AuthenticationStatementType


#define soap_GET__saml1__AuthenticationStatement soap_GET_saml1__AuthenticationStatementType


#define soap_POST_recv__saml1__AuthenticationStatement soap_POST_recv_saml1__AuthenticationStatementType

#endif
/* _saml1__SubjectConfirmation is a typedef synonym of saml1__SubjectConfirmationType */

#ifndef SOAP_TYPE__saml1__SubjectConfirmation_DEFINED
#define SOAP_TYPE__saml1__SubjectConfirmation_DEFINED

#define soap_default__saml1__SubjectConfirmation soap_default_saml1__SubjectConfirmationType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *);

#define soap_serialize__saml1__SubjectConfirmation soap_serialize_saml1__SubjectConfirmationType


#define soap__saml1__SubjectConfirmation2s soap_saml1__SubjectConfirmationType2s


#define soap_out__saml1__SubjectConfirmation soap_out_saml1__SubjectConfirmationType


#define soap_s2_saml1__SubjectConfirmation soap_s2saml1__SubjectConfirmationType


#define soap_in__saml1__SubjectConfirmation soap_in_saml1__SubjectConfirmationType


#define soap_instantiate__saml1__SubjectConfirmation soap_instantiate_saml1__SubjectConfirmationType


#define soap_new__saml1__SubjectConfirmation soap_new_saml1__SubjectConfirmationType


#define soap_new_req__saml1__SubjectConfirmation soap_new_req_saml1__SubjectConfirmationType


#define soap_new_set__saml1__SubjectConfirmation soap_new_set_saml1__SubjectConfirmationType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectConfirmation(struct soap*, const struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_write__saml1__SubjectConfirmation(struct soap *soap, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__SubjectConfirmation(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__SubjectConfirmation(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__SubjectConfirmation(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__SubjectConfirmation soap_get_saml1__SubjectConfirmationType


#define soap_read__saml1__SubjectConfirmation soap_read_saml1__SubjectConfirmationType


#define soap_GET__saml1__SubjectConfirmation soap_GET_saml1__SubjectConfirmationType


#define soap_POST_recv__saml1__SubjectConfirmation soap_POST_recv_saml1__SubjectConfirmationType

#endif
/* _saml1__NameIdentifier is a typedef synonym of saml1__NameIdentifierType */

#ifndef SOAP_TYPE__saml1__NameIdentifier_DEFINED
#define SOAP_TYPE__saml1__NameIdentifier_DEFINED

#define soap_default__saml1__NameIdentifier soap_default_saml1__NameIdentifierType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *);

#define soap_serialize__saml1__NameIdentifier soap_serialize_saml1__NameIdentifierType


#define soap__saml1__NameIdentifier2s soap_saml1__NameIdentifierType2s


#define soap_out__saml1__NameIdentifier soap_out_saml1__NameIdentifierType


#define soap_s2_saml1__NameIdentifier soap_s2saml1__NameIdentifierType


#define soap_in__saml1__NameIdentifier soap_in_saml1__NameIdentifierType


#define soap_instantiate__saml1__NameIdentifier soap_instantiate_saml1__NameIdentifierType


#define soap_new__saml1__NameIdentifier soap_new_saml1__NameIdentifierType


#define soap_new_req__saml1__NameIdentifier soap_new_req_saml1__NameIdentifierType


#define soap_new_set__saml1__NameIdentifier soap_new_set_saml1__NameIdentifierType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__NameIdentifier(struct soap*, const struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_write__saml1__NameIdentifier(struct soap *soap, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__NameIdentifier(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__NameIdentifier(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__NameIdentifier(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__NameIdentifier soap_get_saml1__NameIdentifierType


#define soap_read__saml1__NameIdentifier soap_read_saml1__NameIdentifierType


#define soap_GET__saml1__NameIdentifier soap_GET_saml1__NameIdentifierType


#define soap_POST_recv__saml1__NameIdentifier soap_POST_recv_saml1__NameIdentifierType

#endif
/* _saml1__Subject is a typedef synonym of saml1__SubjectType */

#ifndef SOAP_TYPE__saml1__Subject_DEFINED
#define SOAP_TYPE__saml1__Subject_DEFINED

#define soap_default__saml1__Subject soap_default_saml1__SubjectType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *);

#define soap_serialize__saml1__Subject soap_serialize_saml1__SubjectType


#define soap__saml1__Subject2s soap_saml1__SubjectType2s


#define soap_out__saml1__Subject soap_out_saml1__SubjectType


#define soap_s2_saml1__Subject soap_s2saml1__SubjectType


#define soap_in__saml1__Subject soap_in_saml1__SubjectType


#define soap_instantiate__saml1__Subject soap_instantiate_saml1__SubjectType


#define soap_new__saml1__Subject soap_new_saml1__SubjectType


#define soap_new_req__saml1__Subject soap_new_req_saml1__SubjectType


#define soap_new_set__saml1__Subject soap_new_set_saml1__SubjectType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Subject(struct soap*, const struct saml1__SubjectType *, const char*, const char*);

inline int soap_write__saml1__Subject(struct soap *soap, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Subject(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Subject(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Subject(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Subject soap_get_saml1__SubjectType


#define soap_read__saml1__Subject soap_read_saml1__SubjectType


#define soap_GET__saml1__Subject soap_GET_saml1__SubjectType


#define soap_POST_recv__saml1__Subject soap_POST_recv_saml1__SubjectType

#endif
/* _saml1__SubjectStatement is a typedef synonym of saml1__SubjectStatementAbstractType */

#ifndef SOAP_TYPE__saml1__SubjectStatement_DEFINED
#define SOAP_TYPE__saml1__SubjectStatement_DEFINED

#define soap_default__saml1__SubjectStatement soap_default_saml1__SubjectStatementAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *);

#define soap_serialize__saml1__SubjectStatement soap_serialize_saml1__SubjectStatementAbstractType


#define soap__saml1__SubjectStatement2s soap_saml1__SubjectStatementAbstractType2s


#define soap_out__saml1__SubjectStatement soap_out_saml1__SubjectStatementAbstractType


#define soap_s2_saml1__SubjectStatement soap_s2saml1__SubjectStatementAbstractType


#define soap_in__saml1__SubjectStatement soap_in_saml1__SubjectStatementAbstractType


#define soap_instantiate__saml1__SubjectStatement soap_instantiate_saml1__SubjectStatementAbstractType


#define soap_new__saml1__SubjectStatement soap_new_saml1__SubjectStatementAbstractType


#define soap_new_req__saml1__SubjectStatement soap_new_req_saml1__SubjectStatementAbstractType


#define soap_new_set__saml1__SubjectStatement soap_new_set_saml1__SubjectStatementAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectStatement(struct soap*, const struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_write__saml1__SubjectStatement(struct soap *soap, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__SubjectStatement(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__SubjectStatement(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__SubjectStatement(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__SubjectStatement soap_get_saml1__SubjectStatementAbstractType


#define soap_read__saml1__SubjectStatement soap_read_saml1__SubjectStatementAbstractType


#define soap_GET__saml1__SubjectStatement soap_GET_saml1__SubjectStatementAbstractType


#define soap_POST_recv__saml1__SubjectStatement soap_POST_recv_saml1__SubjectStatementAbstractType

#endif
/* _saml1__Statement is a typedef synonym of saml1__StatementAbstractType */

#ifndef SOAP_TYPE__saml1__Statement_DEFINED
#define SOAP_TYPE__saml1__Statement_DEFINED

#define soap_default__saml1__Statement soap_default_saml1__StatementAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *);

#define soap_serialize__saml1__Statement soap_serialize_saml1__StatementAbstractType


#define soap__saml1__Statement2s soap_saml1__StatementAbstractType2s


#define soap_out__saml1__Statement soap_out_saml1__StatementAbstractType


#define soap_s2_saml1__Statement soap_s2saml1__StatementAbstractType


#define soap_in__saml1__Statement soap_in_saml1__StatementAbstractType


#define soap_instantiate__saml1__Statement soap_instantiate_saml1__StatementAbstractType


#define soap_new__saml1__Statement soap_new_saml1__StatementAbstractType


#define soap_new_req__saml1__Statement soap_new_req_saml1__StatementAbstractType


#define soap_new_set__saml1__Statement soap_new_set_saml1__StatementAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Statement(struct soap*, const struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_write__saml1__Statement(struct soap *soap, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Statement(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Statement(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Statement(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Statement soap_get_saml1__StatementAbstractType


#define soap_read__saml1__Statement soap_read_saml1__StatementAbstractType


#define soap_GET__saml1__Statement soap_GET_saml1__StatementAbstractType


#define soap_POST_recv__saml1__Statement soap_POST_recv_saml1__StatementAbstractType

#endif
/* _saml1__Advice is a typedef synonym of saml1__AdviceType */

#ifndef SOAP_TYPE__saml1__Advice_DEFINED
#define SOAP_TYPE__saml1__Advice_DEFINED

#define soap_default__saml1__Advice soap_default_saml1__AdviceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *);

#define soap_serialize__saml1__Advice soap_serialize_saml1__AdviceType


#define soap__saml1__Advice2s soap_saml1__AdviceType2s


#define soap_out__saml1__Advice soap_out_saml1__AdviceType


#define soap_s2_saml1__Advice soap_s2saml1__AdviceType


#define soap_in__saml1__Advice soap_in_saml1__AdviceType


#define soap_instantiate__saml1__Advice soap_instantiate_saml1__AdviceType


#define soap_new__saml1__Advice soap_new_saml1__AdviceType


#define soap_new_req__saml1__Advice soap_new_req_saml1__AdviceType


#define soap_new_set__saml1__Advice soap_new_set_saml1__AdviceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Advice(struct soap*, const struct saml1__AdviceType *, const char*, const char*);

inline int soap_write__saml1__Advice(struct soap *soap, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Advice(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Advice(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Advice(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Advice soap_get_saml1__AdviceType


#define soap_read__saml1__Advice soap_read_saml1__AdviceType


#define soap_GET__saml1__Advice soap_GET_saml1__AdviceType


#define soap_POST_recv__saml1__Advice soap_POST_recv_saml1__AdviceType

#endif
/* _saml1__DoNotCacheCondition is a typedef synonym of saml1__DoNotCacheConditionType */

#ifndef SOAP_TYPE__saml1__DoNotCacheCondition_DEFINED
#define SOAP_TYPE__saml1__DoNotCacheCondition_DEFINED

#define soap_default__saml1__DoNotCacheCondition soap_default_saml1__DoNotCacheConditionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *);

#define soap_serialize__saml1__DoNotCacheCondition soap_serialize_saml1__DoNotCacheConditionType


#define soap__saml1__DoNotCacheCondition2s soap_saml1__DoNotCacheConditionType2s


#define soap_out__saml1__DoNotCacheCondition soap_out_saml1__DoNotCacheConditionType


#define soap_s2_saml1__DoNotCacheCondition soap_s2saml1__DoNotCacheConditionType


#define soap_in__saml1__DoNotCacheCondition soap_in_saml1__DoNotCacheConditionType


#define soap_instantiate__saml1__DoNotCacheCondition soap_instantiate_saml1__DoNotCacheConditionType


#define soap_new__saml1__DoNotCacheCondition soap_new_saml1__DoNotCacheConditionType


#define soap_new_req__saml1__DoNotCacheCondition soap_new_req_saml1__DoNotCacheConditionType


#define soap_new_set__saml1__DoNotCacheCondition soap_new_set_saml1__DoNotCacheConditionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__DoNotCacheCondition(struct soap*, const struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_write__saml1__DoNotCacheCondition(struct soap *soap, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__DoNotCacheCondition(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__DoNotCacheCondition(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__DoNotCacheCondition(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__DoNotCacheCondition soap_get_saml1__DoNotCacheConditionType


#define soap_read__saml1__DoNotCacheCondition soap_read_saml1__DoNotCacheConditionType


#define soap_GET__saml1__DoNotCacheCondition soap_GET_saml1__DoNotCacheConditionType


#define soap_POST_recv__saml1__DoNotCacheCondition soap_POST_recv_saml1__DoNotCacheConditionType

#endif
/* _saml1__AudienceRestrictionCondition is a typedef synonym of saml1__AudienceRestrictionConditionType */

#ifndef SOAP_TYPE__saml1__AudienceRestrictionCondition_DEFINED
#define SOAP_TYPE__saml1__AudienceRestrictionCondition_DEFINED

#define soap_default__saml1__AudienceRestrictionCondition soap_default_saml1__AudienceRestrictionConditionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *);

#define soap_serialize__saml1__AudienceRestrictionCondition soap_serialize_saml1__AudienceRestrictionConditionType


#define soap__saml1__AudienceRestrictionCondition2s soap_saml1__AudienceRestrictionConditionType2s


#define soap_out__saml1__AudienceRestrictionCondition soap_out_saml1__AudienceRestrictionConditionType


#define soap_s2_saml1__AudienceRestrictionCondition soap_s2saml1__AudienceRestrictionConditionType


#define soap_in__saml1__AudienceRestrictionCondition soap_in_saml1__AudienceRestrictionConditionType


#define soap_instantiate__saml1__AudienceRestrictionCondition soap_instantiate_saml1__AudienceRestrictionConditionType


#define soap_new__saml1__AudienceRestrictionCondition soap_new_saml1__AudienceRestrictionConditionType


#define soap_new_req__saml1__AudienceRestrictionCondition soap_new_req_saml1__AudienceRestrictionConditionType


#define soap_new_set__saml1__AudienceRestrictionCondition soap_new_set_saml1__AudienceRestrictionConditionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AudienceRestrictionCondition(struct soap*, const struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_write__saml1__AudienceRestrictionCondition(struct soap *soap, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AudienceRestrictionCondition(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AudienceRestrictionCondition(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AudienceRestrictionCondition(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AudienceRestrictionCondition soap_get_saml1__AudienceRestrictionConditionType


#define soap_read__saml1__AudienceRestrictionCondition soap_read_saml1__AudienceRestrictionConditionType


#define soap_GET__saml1__AudienceRestrictionCondition soap_GET_saml1__AudienceRestrictionConditionType


#define soap_POST_recv__saml1__AudienceRestrictionCondition soap_POST_recv_saml1__AudienceRestrictionConditionType

#endif
/* _saml1__Condition is a typedef synonym of saml1__ConditionAbstractType */

#ifndef SOAP_TYPE__saml1__Condition_DEFINED
#define SOAP_TYPE__saml1__Condition_DEFINED

#define soap_default__saml1__Condition soap_default_saml1__ConditionAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *);

#define soap_serialize__saml1__Condition soap_serialize_saml1__ConditionAbstractType


#define soap__saml1__Condition2s soap_saml1__ConditionAbstractType2s


#define soap_out__saml1__Condition soap_out_saml1__ConditionAbstractType


#define soap_s2_saml1__Condition soap_s2saml1__ConditionAbstractType


#define soap_in__saml1__Condition soap_in_saml1__ConditionAbstractType


#define soap_instantiate__saml1__Condition soap_instantiate_saml1__ConditionAbstractType


#define soap_new__saml1__Condition soap_new_saml1__ConditionAbstractType


#define soap_new_req__saml1__Condition soap_new_req_saml1__ConditionAbstractType


#define soap_new_set__saml1__Condition soap_new_set_saml1__ConditionAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Condition(struct soap*, const struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_write__saml1__Condition(struct soap *soap, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Condition(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Condition(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Condition(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Condition soap_get_saml1__ConditionAbstractType


#define soap_read__saml1__Condition soap_read_saml1__ConditionAbstractType


#define soap_GET__saml1__Condition soap_GET_saml1__ConditionAbstractType


#define soap_POST_recv__saml1__Condition soap_POST_recv_saml1__ConditionAbstractType

#endif
/* _saml1__Conditions is a typedef synonym of saml1__ConditionsType */

#ifndef SOAP_TYPE__saml1__Conditions_DEFINED
#define SOAP_TYPE__saml1__Conditions_DEFINED

#define soap_default__saml1__Conditions soap_default_saml1__ConditionsType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *);

#define soap_serialize__saml1__Conditions soap_serialize_saml1__ConditionsType


#define soap__saml1__Conditions2s soap_saml1__ConditionsType2s


#define soap_out__saml1__Conditions soap_out_saml1__ConditionsType


#define soap_s2_saml1__Conditions soap_s2saml1__ConditionsType


#define soap_in__saml1__Conditions soap_in_saml1__ConditionsType


#define soap_instantiate__saml1__Conditions soap_instantiate_saml1__ConditionsType


#define soap_new__saml1__Conditions soap_new_saml1__ConditionsType


#define soap_new_req__saml1__Conditions soap_new_req_saml1__ConditionsType


#define soap_new_set__saml1__Conditions soap_new_set_saml1__ConditionsType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Conditions(struct soap*, const struct saml1__ConditionsType *, const char*, const char*);

inline int soap_write__saml1__Conditions(struct soap *soap, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Conditions(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Conditions(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Conditions(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Conditions soap_get_saml1__ConditionsType


#define soap_read__saml1__Conditions soap_read_saml1__ConditionsType


#define soap_GET__saml1__Conditions soap_GET_saml1__ConditionsType


#define soap_POST_recv__saml1__Conditions soap_POST_recv_saml1__ConditionsType

#endif
/* _saml1__Assertion is a typedef synonym of saml1__AssertionType */

#ifndef SOAP_TYPE__saml1__Assertion_DEFINED
#define SOAP_TYPE__saml1__Assertion_DEFINED

#define soap_default__saml1__Assertion soap_default_saml1__AssertionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *);

#define soap_serialize__saml1__Assertion soap_serialize_saml1__AssertionType


#define soap__saml1__Assertion2s soap_saml1__AssertionType2s


#define soap_out__saml1__Assertion soap_out_saml1__AssertionType


#define soap_s2_saml1__Assertion soap_s2saml1__AssertionType


#define soap_in__saml1__Assertion soap_in_saml1__AssertionType


#define soap_instantiate__saml1__Assertion soap_instantiate_saml1__AssertionType


#define soap_new__saml1__Assertion soap_new_saml1__AssertionType


#define soap_new_req__saml1__Assertion soap_new_req_saml1__AssertionType


#define soap_new_set__saml1__Assertion soap_new_set_saml1__AssertionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Assertion(struct soap*, const struct saml1__AssertionType *, const char*, const char*);

inline int soap_write__saml1__Assertion(struct soap *soap, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Assertion(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Assertion(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Assertion(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Assertion soap_get_saml1__AssertionType


#define soap_read__saml1__Assertion soap_read_saml1__AssertionType


#define soap_GET__saml1__Assertion soap_GET_saml1__AssertionType


#define soap_POST_recv__saml1__Assertion soap_POST_recv_saml1__AssertionType

#endif

#ifndef SOAP_TYPE___saml1__union_EvidenceType_DEFINED
#define SOAP_TYPE___saml1__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_EvidenceType(struct soap*, const struct __saml1__union_EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_EvidenceType(struct soap*, const char*, int, const struct __saml1__union_EvidenceType *, const char*);
SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_in___saml1__union_EvidenceType(struct soap*, const char*, struct __saml1__union_EvidenceType *, const char*);
SOAP_FMAC1 struct __saml1__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml1__union_EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_EvidenceType * soap_new___saml1__union_EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_EvidenceType * soap_new_req___saml1__union_EvidenceType(
	struct soap *soap)
{
	struct __saml1__union_EvidenceType *_p = ::soap_new___saml1__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml1__union_EvidenceType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_EvidenceType * soap_new_set___saml1__union_EvidenceType(
	struct soap *soap,
	char *saml1__AssertionIDReference,
	struct saml1__AssertionType *saml1__Assertion)
{
	struct __saml1__union_EvidenceType *_p = ::soap_new___saml1__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml1__union_EvidenceType(soap, _p);
		_p->saml1__AssertionIDReference = saml1__AssertionIDReference;
		_p->saml1__Assertion = saml1__Assertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_EvidenceType(struct soap*, const struct __saml1__union_EvidenceType *, const char*, const char*);

inline int soap_write___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_get___saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *, const char*, const char*);

inline int soap_read___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *p)
{
	if (p)
	{	::soap_default___saml1__union_EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *p)
{
	if (::soap_read___saml1__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml1__union_AdviceType_DEFINED
#define SOAP_TYPE___saml1__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AdviceType(struct soap*, const struct __saml1__union_AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AdviceType(struct soap*, const char*, int, const struct __saml1__union_AdviceType *, const char*);
SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_in___saml1__union_AdviceType(struct soap*, const char*, struct __saml1__union_AdviceType *, const char*);
SOAP_FMAC1 struct __saml1__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml1__union_AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_AdviceType * soap_new___saml1__union_AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_AdviceType * soap_new_req___saml1__union_AdviceType(
	struct soap *soap)
{
	struct __saml1__union_AdviceType *_p = ::soap_new___saml1__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml1__union_AdviceType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_AdviceType * soap_new_set___saml1__union_AdviceType(
	struct soap *soap,
	char *saml1__AssertionIDReference,
	struct saml1__AssertionType *saml1__Assertion)
{
	struct __saml1__union_AdviceType *_p = ::soap_new___saml1__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml1__union_AdviceType(soap, _p);
		_p->saml1__AssertionIDReference = saml1__AssertionIDReference;
		_p->saml1__Assertion = saml1__Assertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AdviceType(struct soap*, const struct __saml1__union_AdviceType *, const char*, const char*);

inline int soap_write___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_get___saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *, const char*, const char*);

inline int soap_read___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *p)
{
	if (p)
	{	::soap_default___saml1__union_AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *p)
{
	if (::soap_read___saml1__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml1__union_ConditionsType_DEFINED
#define SOAP_TYPE___saml1__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_ConditionsType(struct soap*, const struct __saml1__union_ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_ConditionsType(struct soap*, const char*, int, const struct __saml1__union_ConditionsType *, const char*);
SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_in___saml1__union_ConditionsType(struct soap*, const char*, struct __saml1__union_ConditionsType *, const char*);
SOAP_FMAC1 struct __saml1__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml1__union_ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_ConditionsType * soap_new___saml1__union_ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_ConditionsType * soap_new_req___saml1__union_ConditionsType(
	struct soap *soap)
{
	struct __saml1__union_ConditionsType *_p = ::soap_new___saml1__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml1__union_ConditionsType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_ConditionsType * soap_new_set___saml1__union_ConditionsType(
	struct soap *soap,
	struct saml1__AudienceRestrictionConditionType *saml1__AudienceRestrictionCondition,
	struct saml1__DoNotCacheConditionType *saml1__DoNotCacheCondition,
	struct saml1__ConditionAbstractType *saml1__Condition)
{
	struct __saml1__union_ConditionsType *_p = ::soap_new___saml1__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml1__union_ConditionsType(soap, _p);
		_p->saml1__AudienceRestrictionCondition = saml1__AudienceRestrictionCondition;
		_p->saml1__DoNotCacheCondition = saml1__DoNotCacheCondition;
		_p->saml1__Condition = saml1__Condition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_ConditionsType(struct soap*, const struct __saml1__union_ConditionsType *, const char*, const char*);

inline int soap_write___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_get___saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *, const char*, const char*);

inline int soap_read___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *p)
{
	if (p)
	{	::soap_default___saml1__union_ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *p)
{
	if (::soap_read___saml1__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml1__union_AssertionType_DEFINED
#define SOAP_TYPE___saml1__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AssertionType(struct soap*, const struct __saml1__union_AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AssertionType(struct soap*, const char*, int, const struct __saml1__union_AssertionType *, const char*);
SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_in___saml1__union_AssertionType(struct soap*, const char*, struct __saml1__union_AssertionType *, const char*);
SOAP_FMAC1 struct __saml1__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml1__union_AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_AssertionType * soap_new___saml1__union_AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_AssertionType * soap_new_req___saml1__union_AssertionType(
	struct soap *soap)
{
	struct __saml1__union_AssertionType *_p = ::soap_new___saml1__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml1__union_AssertionType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_AssertionType * soap_new_set___saml1__union_AssertionType(
	struct soap *soap,
	struct saml1__StatementAbstractType *saml1__Statement,
	struct saml1__SubjectStatementAbstractType *saml1__SubjectStatement,
	struct saml1__AuthenticationStatementType *saml1__AuthenticationStatement,
	struct saml1__AuthorizationDecisionStatementType *saml1__AuthorizationDecisionStatement,
	struct saml1__AttributeStatementType *saml1__AttributeStatement)
{
	struct __saml1__union_AssertionType *_p = ::soap_new___saml1__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml1__union_AssertionType(soap, _p);
		_p->saml1__Statement = saml1__Statement;
		_p->saml1__SubjectStatement = saml1__SubjectStatement;
		_p->saml1__AuthenticationStatement = saml1__AuthenticationStatement;
		_p->saml1__AuthorizationDecisionStatement = saml1__AuthorizationDecisionStatement;
		_p->saml1__AttributeStatement = saml1__AttributeStatement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AssertionType(struct soap*, const struct __saml1__union_AssertionType *, const char*, const char*);

inline int soap_write___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_get___saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *, const char*, const char*);

inline int soap_read___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *p)
{
	if (p)
	{	::soap_default___saml1__union_AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *p)
{
	if (::soap_read___saml1__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeType_DEFINED
#define SOAP_TYPE_saml1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeType(struct soap*, struct saml1__AttributeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeType(struct soap*, const char*, int, const struct saml1__AttributeType *, const char*);
SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_in_saml1__AttributeType(struct soap*, const char*, struct saml1__AttributeType *, const char*);
SOAP_FMAC1 struct saml1__AttributeType * SOAP_FMAC2 soap_instantiate_saml1__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeType * soap_new_saml1__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeType * soap_new_req_saml1__AttributeType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace,
	int __sizeAttributeValue,
	char **saml1__AttributeValue)
{
	struct saml1__AttributeType *_p = ::soap_new_saml1__AttributeType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml1__AttributeValue = saml1__AttributeValue;
	}
	return _p;
}

inline struct saml1__AttributeType * soap_new_set_saml1__AttributeType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace,
	int __sizeAttributeValue,
	char **saml1__AttributeValue)
{
	struct saml1__AttributeType *_p = ::soap_new_saml1__AttributeType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml1__AttributeValue = saml1__AttributeValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *, const char*, const char*);

inline int soap_write_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_get_saml1__AttributeType(struct soap*, struct saml1__AttributeType *, const char*, const char*);

inline int soap_read_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *p)
{
	if (p)
	{	::soap_default_saml1__AttributeType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *p)
{
	if (::soap_read_saml1__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeDesignatorType_DEFINED
#define SOAP_TYPE_saml1__AttributeDesignatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeDesignatorType(struct soap*, struct saml1__AttributeDesignatorType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeDesignatorType(struct soap*, const char*, int, const struct saml1__AttributeDesignatorType *, const char*);
SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_in_saml1__AttributeDesignatorType(struct soap*, const char*, struct saml1__AttributeDesignatorType *, const char*);
SOAP_FMAC1 struct saml1__AttributeDesignatorType * SOAP_FMAC2 soap_instantiate_saml1__AttributeDesignatorType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeDesignatorType * soap_new_saml1__AttributeDesignatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeDesignatorType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeDesignatorType * soap_new_req_saml1__AttributeDesignatorType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace)
{
	struct saml1__AttributeDesignatorType *_p = ::soap_new_saml1__AttributeDesignatorType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeDesignatorType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
	}
	return _p;
}

inline struct saml1__AttributeDesignatorType * soap_new_set_saml1__AttributeDesignatorType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace)
{
	struct saml1__AttributeDesignatorType *_p = ::soap_new_saml1__AttributeDesignatorType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeDesignatorType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_write_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_get_saml1__AttributeDesignatorType(struct soap*, struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_read_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *p)
{
	if (p)
	{	::soap_default_saml1__AttributeDesignatorType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AttributeDesignatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AttributeDesignatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *p)
{
	if (::soap_read_saml1__AttributeDesignatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeStatementType_DEFINED
#define SOAP_TYPE_saml1__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeStatementType(struct soap*, const char*, int, const struct saml1__AttributeStatementType *, const char*);
SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_in_saml1__AttributeStatementType(struct soap*, const char*, struct saml1__AttributeStatementType *, const char*);
SOAP_FMAC1 struct saml1__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml1__AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeStatementType * soap_new_saml1__AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeStatementType * soap_new_req_saml1__AttributeStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAttribute,
	struct saml1__AttributeType *saml1__Attribute)
{
	struct saml1__AttributeStatementType *_p = ::soap_new_saml1__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAttribute = __sizeAttribute;
		_p->saml1__Attribute = saml1__Attribute;
	}
	return _p;
}

inline struct saml1__AttributeStatementType * soap_new_set_saml1__AttributeStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAttribute,
	struct saml1__AttributeType *saml1__Attribute)
{
	struct saml1__AttributeStatementType *_p = ::soap_new_saml1__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAttribute = __sizeAttribute;
		_p->saml1__Attribute = saml1__Attribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_write_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_get_saml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_read_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *p)
{
	if (p)
	{	::soap_default_saml1__AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *p)
{
	if (::soap_read_saml1__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__EvidenceType_DEFINED
#define SOAP_TYPE_saml1__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__EvidenceType(struct soap*, struct saml1__EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__EvidenceType(struct soap*, const char*, int, const struct saml1__EvidenceType *, const char*);
SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_in_saml1__EvidenceType(struct soap*, const char*, struct saml1__EvidenceType *, const char*);
SOAP_FMAC1 struct saml1__EvidenceType * SOAP_FMAC2 soap_instantiate_saml1__EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__EvidenceType * soap_new_saml1__EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__EvidenceType * soap_new_req_saml1__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml1__union_EvidenceType *__union_EvidenceType)
{
	struct saml1__EvidenceType *_p = ::soap_new_saml1__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml1__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}

inline struct saml1__EvidenceType * soap_new_set_saml1__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml1__union_EvidenceType *__union_EvidenceType)
{
	struct saml1__EvidenceType *_p = ::soap_new_saml1__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml1__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *, const char*, const char*);

inline int soap_write_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_get_saml1__EvidenceType(struct soap*, struct saml1__EvidenceType *, const char*, const char*);

inline int soap_read_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *p)
{
	if (p)
	{	::soap_default_saml1__EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *p)
{
	if (::soap_read_saml1__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__ActionType_DEFINED
#define SOAP_TYPE_saml1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ActionType(struct soap*, struct saml1__ActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ActionType(struct soap*, const struct saml1__ActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ActionType(struct soap*, const char*, int, const struct saml1__ActionType *, const char*);
SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_in_saml1__ActionType(struct soap*, const char*, struct saml1__ActionType *, const char*);
SOAP_FMAC1 struct saml1__ActionType * SOAP_FMAC2 soap_instantiate_saml1__ActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ActionType * soap_new_saml1__ActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ActionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ActionType * soap_new_req_saml1__ActionType(
	struct soap *soap)
{
	struct saml1__ActionType *_p = ::soap_new_saml1__ActionType(soap);
	if (_p)
	{	::soap_default_saml1__ActionType(soap, _p);
	}
	return _p;
}

inline struct saml1__ActionType * soap_new_set_saml1__ActionType(
	struct soap *soap,
	char *__item,
	char *Namespace)
{
	struct saml1__ActionType *_p = ::soap_new_saml1__ActionType(soap);
	if (_p)
	{	::soap_default_saml1__ActionType(soap, _p);
		_p->__item = __item;
		_p->Namespace = Namespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ActionType(struct soap*, const struct saml1__ActionType *, const char*, const char*);

inline int soap_write_saml1__ActionType(struct soap *soap, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_get_saml1__ActionType(struct soap*, struct saml1__ActionType *, const char*, const char*);

inline int soap_read_saml1__ActionType(struct soap *soap, struct saml1__ActionType *p)
{
	if (p)
	{	::soap_default_saml1__ActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__ActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__ActionType(struct soap *soap, struct saml1__ActionType *p)
{
	if (::soap_read_saml1__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AuthorizationDecisionStatementType_DEFINED
#define SOAP_TYPE_saml1__AuthorizationDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorizationDecisionStatementType(struct soap*, const char*, int, const struct saml1__AuthorizationDecisionStatementType *, const char*);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_in_saml1__AuthorizationDecisionStatementType(struct soap*, const char*, struct saml1__AuthorizationDecisionStatementType *, const char*);
SOAP_FMAC1 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthorizationDecisionStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthorizationDecisionStatementType * soap_new_saml1__AuthorizationDecisionStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthorizationDecisionStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthorizationDecisionStatementType * soap_new_req_saml1__AuthorizationDecisionStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAction,
	struct saml1__ActionType *saml1__Action,
	char *Resource,
	enum saml1__DecisionType Decision)
{
	struct saml1__AuthorizationDecisionStatementType *_p = ::soap_new_saml1__AuthorizationDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorizationDecisionStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAction = __sizeAction;
		_p->saml1__Action = saml1__Action;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}

inline struct saml1__AuthorizationDecisionStatementType * soap_new_set_saml1__AuthorizationDecisionStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAction,
	struct saml1__ActionType *saml1__Action,
	struct saml1__EvidenceType *saml1__Evidence,
	char *Resource,
	enum saml1__DecisionType Decision)
{
	struct saml1__AuthorizationDecisionStatementType *_p = ::soap_new_saml1__AuthorizationDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorizationDecisionStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAction = __sizeAction;
		_p->saml1__Action = saml1__Action;
		_p->saml1__Evidence = saml1__Evidence;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_write_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_get_saml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_read_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (p)
	{	::soap_default_saml1__AuthorizationDecisionStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AuthorizationDecisionStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AuthorizationDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (::soap_read_saml1__AuthorizationDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AuthorityBindingType_DEFINED
#define SOAP_TYPE_saml1__AuthorityBindingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorityBindingType(struct soap*, const char*, int, const struct saml1__AuthorityBindingType *, const char*);
SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_in_saml1__AuthorityBindingType(struct soap*, const char*, struct saml1__AuthorityBindingType *, const char*);
SOAP_FMAC1 struct saml1__AuthorityBindingType * SOAP_FMAC2 soap_instantiate_saml1__AuthorityBindingType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthorityBindingType * soap_new_saml1__AuthorityBindingType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthorityBindingType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthorityBindingType * soap_new_req_saml1__AuthorityBindingType(
	struct soap *soap,
	char *AuthorityKind,
	char *Location,
	char *Binding)
{
	struct saml1__AuthorityBindingType *_p = ::soap_new_saml1__AuthorityBindingType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorityBindingType(soap, _p);
		_p->AuthorityKind = AuthorityKind;
		_p->Location = Location;
		_p->Binding = Binding;
	}
	return _p;
}

inline struct saml1__AuthorityBindingType * soap_new_set_saml1__AuthorityBindingType(
	struct soap *soap,
	char *AuthorityKind,
	char *Location,
	char *Binding)
{
	struct saml1__AuthorityBindingType *_p = ::soap_new_saml1__AuthorityBindingType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorityBindingType(soap, _p);
		_p->AuthorityKind = AuthorityKind;
		_p->Location = Location;
		_p->Binding = Binding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_write_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_get_saml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_read_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *p)
{
	if (p)
	{	::soap_default_saml1__AuthorityBindingType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AuthorityBindingType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AuthorityBindingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *p)
{
	if (::soap_read_saml1__AuthorityBindingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectLocalityType_DEFINED
#define SOAP_TYPE_saml1__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectLocalityType(struct soap*, const char*, int, const struct saml1__SubjectLocalityType *, const char*);
SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_in_saml1__SubjectLocalityType(struct soap*, const char*, struct saml1__SubjectLocalityType *, const char*);
SOAP_FMAC1 struct saml1__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml1__SubjectLocalityType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectLocalityType * soap_new_saml1__SubjectLocalityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectLocalityType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectLocalityType * soap_new_req_saml1__SubjectLocalityType(
	struct soap *soap)
{
	struct saml1__SubjectLocalityType *_p = ::soap_new_saml1__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectLocalityType(soap, _p);
	}
	return _p;
}

inline struct saml1__SubjectLocalityType * soap_new_set_saml1__SubjectLocalityType(
	struct soap *soap,
	char *IPAddress,
	char *DNSAddress)
{
	struct saml1__SubjectLocalityType *_p = ::soap_new_saml1__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectLocalityType(soap, _p);
		_p->IPAddress = IPAddress;
		_p->DNSAddress = DNSAddress;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_write_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_get_saml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_read_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectLocalityType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectLocalityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *p)
{
	if (::soap_read_saml1__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AuthenticationStatementType_DEFINED
#define SOAP_TYPE_saml1__AuthenticationStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthenticationStatementType(struct soap*, const char*, int, const struct saml1__AuthenticationStatementType *, const char*);
SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_in_saml1__AuthenticationStatementType(struct soap*, const char*, struct saml1__AuthenticationStatementType *, const char*);
SOAP_FMAC1 struct saml1__AuthenticationStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthenticationStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthenticationStatementType * soap_new_saml1__AuthenticationStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthenticationStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthenticationStatementType * soap_new_req_saml1__AuthenticationStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAuthorityBinding,
	struct saml1__AuthorityBindingType *saml1__AuthorityBinding,
	char *AuthenticationMethod,
	time_t AuthenticationInstant)
{
	struct saml1__AuthenticationStatementType *_p = ::soap_new_saml1__AuthenticationStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthenticationStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAuthorityBinding = __sizeAuthorityBinding;
		_p->saml1__AuthorityBinding = saml1__AuthorityBinding;
		_p->AuthenticationMethod = AuthenticationMethod;
		_p->AuthenticationInstant = AuthenticationInstant;
	}
	return _p;
}

inline struct saml1__AuthenticationStatementType * soap_new_set_saml1__AuthenticationStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	struct saml1__SubjectLocalityType *saml1__SubjectLocality,
	int __sizeAuthorityBinding,
	struct saml1__AuthorityBindingType *saml1__AuthorityBinding,
	char *AuthenticationMethod,
	time_t AuthenticationInstant)
{
	struct saml1__AuthenticationStatementType *_p = ::soap_new_saml1__AuthenticationStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthenticationStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->saml1__SubjectLocality = saml1__SubjectLocality;
		_p->__sizeAuthorityBinding = __sizeAuthorityBinding;
		_p->saml1__AuthorityBinding = saml1__AuthorityBinding;
		_p->AuthenticationMethod = AuthenticationMethod;
		_p->AuthenticationInstant = AuthenticationInstant;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_write_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_get_saml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_read_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *p)
{
	if (p)
	{	::soap_default_saml1__AuthenticationStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AuthenticationStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AuthenticationStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *p)
{
	if (::soap_read_saml1__AuthenticationStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_saml1__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectConfirmationType(struct soap*, const char*, int, const struct saml1__SubjectConfirmationType *, const char*);
SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml1__SubjectConfirmationType(struct soap*, const char*, struct saml1__SubjectConfirmationType *, const char*);
SOAP_FMAC1 struct saml1__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml1__SubjectConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectConfirmationType * soap_new_saml1__SubjectConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectConfirmationType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectConfirmationType * soap_new_req_saml1__SubjectConfirmationType(
	struct soap *soap,
	int __sizeConfirmationMethod,
	char **saml1__ConfirmationMethod)
{
	struct saml1__SubjectConfirmationType *_p = ::soap_new_saml1__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectConfirmationType(soap, _p);
		_p->__sizeConfirmationMethod = __sizeConfirmationMethod;
		_p->saml1__ConfirmationMethod = saml1__ConfirmationMethod;
	}
	return _p;
}

inline struct saml1__SubjectConfirmationType * soap_new_set_saml1__SubjectConfirmationType(
	struct soap *soap,
	int __sizeConfirmationMethod,
	char **saml1__ConfirmationMethod,
	char *saml1__SubjectConfirmationData,
	struct ds__KeyInfoType *ds__KeyInfo)
{
	struct saml1__SubjectConfirmationType *_p = ::soap_new_saml1__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectConfirmationType(soap, _p);
		_p->__sizeConfirmationMethod = __sizeConfirmationMethod;
		_p->saml1__ConfirmationMethod = saml1__ConfirmationMethod;
		_p->saml1__SubjectConfirmationData = saml1__SubjectConfirmationData;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_write_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_read_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectConfirmationType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *p)
{
	if (::soap_read_saml1__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__NameIdentifierType_DEFINED
#define SOAP_TYPE_saml1__NameIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__NameIdentifierType(struct soap*, const char*, int, const struct saml1__NameIdentifierType *, const char*);
SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_in_saml1__NameIdentifierType(struct soap*, const char*, struct saml1__NameIdentifierType *, const char*);
SOAP_FMAC1 struct saml1__NameIdentifierType * SOAP_FMAC2 soap_instantiate_saml1__NameIdentifierType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__NameIdentifierType * soap_new_saml1__NameIdentifierType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__NameIdentifierType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__NameIdentifierType * soap_new_req_saml1__NameIdentifierType(
	struct soap *soap)
{
	struct saml1__NameIdentifierType *_p = ::soap_new_saml1__NameIdentifierType(soap);
	if (_p)
	{	::soap_default_saml1__NameIdentifierType(soap, _p);
	}
	return _p;
}

inline struct saml1__NameIdentifierType * soap_new_set_saml1__NameIdentifierType(
	struct soap *soap,
	char *__item,
	char *NameQualifier,
	char *Format)
{
	struct saml1__NameIdentifierType *_p = ::soap_new_saml1__NameIdentifierType(soap);
	if (_p)
	{	::soap_default_saml1__NameIdentifierType(soap, _p);
		_p->__item = __item;
		_p->NameQualifier = NameQualifier;
		_p->Format = Format;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_write_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_get_saml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_read_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *p)
{
	if (p)
	{	::soap_default_saml1__NameIdentifierType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__NameIdentifierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__NameIdentifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *p)
{
	if (::soap_read_saml1__NameIdentifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectType_DEFINED
#define SOAP_TYPE_saml1__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectType(struct soap*, struct saml1__SubjectType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectType(struct soap*, const char*, int, const struct saml1__SubjectType *, const char*);
SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_in_saml1__SubjectType(struct soap*, const char*, struct saml1__SubjectType *, const char*);
SOAP_FMAC1 struct saml1__SubjectType * SOAP_FMAC2 soap_instantiate_saml1__SubjectType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectType * soap_new_saml1__SubjectType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectType * soap_new_req_saml1__SubjectType(
	struct soap *soap)
{
	struct saml1__SubjectType *_p = ::soap_new_saml1__SubjectType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectType(soap, _p);
	}
	return _p;
}

inline struct saml1__SubjectType * soap_new_set_saml1__SubjectType(
	struct soap *soap,
	struct saml1__NameIdentifierType *saml1__NameIdentifier,
	struct saml1__SubjectConfirmationType *saml1__SubjectConfirmation)
{
	struct saml1__SubjectType *_p = ::soap_new_saml1__SubjectType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectType(soap, _p);
		_p->saml1__NameIdentifier = saml1__NameIdentifier;
		_p->saml1__SubjectConfirmation = saml1__SubjectConfirmation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *, const char*, const char*);

inline int soap_write_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_get_saml1__SubjectType(struct soap*, struct saml1__SubjectType *, const char*, const char*);

inline int soap_read_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *p)
{
	if (::soap_read_saml1__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectStatementAbstractType_DEFINED
#define SOAP_TYPE_saml1__SubjectStatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectStatementAbstractType(struct soap*, const char*, int, const struct saml1__SubjectStatementAbstractType *, const char*);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_in_saml1__SubjectStatementAbstractType(struct soap*, const char*, struct saml1__SubjectStatementAbstractType *, const char*);
SOAP_FMAC1 struct saml1__SubjectStatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__SubjectStatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectStatementAbstractType * soap_new_saml1__SubjectStatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectStatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectStatementAbstractType * soap_new_req_saml1__SubjectStatementAbstractType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject)
{
	struct saml1__SubjectStatementAbstractType *_p = ::soap_new_saml1__SubjectStatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectStatementAbstractType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
	}
	return _p;
}

inline struct saml1__SubjectStatementAbstractType * soap_new_set_saml1__SubjectStatementAbstractType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject)
{
	struct saml1__SubjectStatementAbstractType *_p = ::soap_new_saml1__SubjectStatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectStatementAbstractType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_write_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_get_saml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_read_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectStatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectStatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectStatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *p)
{
	if (::soap_read_saml1__SubjectStatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__StatementAbstractType_DEFINED
#define SOAP_TYPE_saml1__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__StatementAbstractType(struct soap*, const char*, int, const struct saml1__StatementAbstractType *, const char*);
SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_in_saml1__StatementAbstractType(struct soap*, const char*, struct saml1__StatementAbstractType *, const char*);
SOAP_FMAC1 struct saml1__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__StatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__StatementAbstractType * soap_new_saml1__StatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__StatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__StatementAbstractType * soap_new_req_saml1__StatementAbstractType(
	struct soap *soap)
{
	struct saml1__StatementAbstractType *_p = ::soap_new_saml1__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__StatementAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml1__StatementAbstractType * soap_new_set_saml1__StatementAbstractType(
	struct soap *soap)
{
	struct saml1__StatementAbstractType *_p = ::soap_new_saml1__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__StatementAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_write_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_get_saml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_read_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *p)
{
	if (p)
	{	::soap_default_saml1__StatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__StatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *p)
{
	if (::soap_read_saml1__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AdviceType_DEFINED
#define SOAP_TYPE_saml1__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AdviceType(struct soap*, struct saml1__AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AdviceType(struct soap*, const char*, int, const struct saml1__AdviceType *, const char*);
SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_in_saml1__AdviceType(struct soap*, const char*, struct saml1__AdviceType *, const char*);
SOAP_FMAC1 struct saml1__AdviceType * SOAP_FMAC2 soap_instantiate_saml1__AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AdviceType * soap_new_saml1__AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AdviceType * soap_new_req_saml1__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml1__union_AdviceType *__union_AdviceType)
{
	struct saml1__AdviceType *_p = ::soap_new_saml1__AdviceType(soap);
	if (_p)
	{	::soap_default_saml1__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}

inline struct saml1__AdviceType * soap_new_set_saml1__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml1__union_AdviceType *__union_AdviceType)
{
	struct saml1__AdviceType *_p = ::soap_new_saml1__AdviceType(soap);
	if (_p)
	{	::soap_default_saml1__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *, const char*, const char*);

inline int soap_write_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_get_saml1__AdviceType(struct soap*, struct saml1__AdviceType *, const char*, const char*);

inline int soap_read_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *p)
{
	if (p)
	{	::soap_default_saml1__AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *p)
{
	if (::soap_read_saml1__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__DoNotCacheConditionType_DEFINED
#define SOAP_TYPE_saml1__DoNotCacheConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DoNotCacheConditionType(struct soap*, const char*, int, const struct saml1__DoNotCacheConditionType *, const char*);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_in_saml1__DoNotCacheConditionType(struct soap*, const char*, struct saml1__DoNotCacheConditionType *, const char*);
SOAP_FMAC1 struct saml1__DoNotCacheConditionType * SOAP_FMAC2 soap_instantiate_saml1__DoNotCacheConditionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__DoNotCacheConditionType * soap_new_saml1__DoNotCacheConditionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__DoNotCacheConditionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__DoNotCacheConditionType * soap_new_req_saml1__DoNotCacheConditionType(
	struct soap *soap)
{
	struct saml1__DoNotCacheConditionType *_p = ::soap_new_saml1__DoNotCacheConditionType(soap);
	if (_p)
	{	::soap_default_saml1__DoNotCacheConditionType(soap, _p);
	}
	return _p;
}

inline struct saml1__DoNotCacheConditionType * soap_new_set_saml1__DoNotCacheConditionType(
	struct soap *soap)
{
	struct saml1__DoNotCacheConditionType *_p = ::soap_new_saml1__DoNotCacheConditionType(soap);
	if (_p)
	{	::soap_default_saml1__DoNotCacheConditionType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_write_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_get_saml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_read_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *p)
{
	if (p)
	{	::soap_default_saml1__DoNotCacheConditionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__DoNotCacheConditionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__DoNotCacheConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *p)
{
	if (::soap_read_saml1__DoNotCacheConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AudienceRestrictionConditionType_DEFINED
#define SOAP_TYPE_saml1__AudienceRestrictionConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AudienceRestrictionConditionType(struct soap*, const char*, int, const struct saml1__AudienceRestrictionConditionType *, const char*);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_in_saml1__AudienceRestrictionConditionType(struct soap*, const char*, struct saml1__AudienceRestrictionConditionType *, const char*);
SOAP_FMAC1 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC2 soap_instantiate_saml1__AudienceRestrictionConditionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AudienceRestrictionConditionType * soap_new_saml1__AudienceRestrictionConditionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AudienceRestrictionConditionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AudienceRestrictionConditionType * soap_new_req_saml1__AudienceRestrictionConditionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml1__Audience)
{
	struct saml1__AudienceRestrictionConditionType *_p = ::soap_new_saml1__AudienceRestrictionConditionType(soap);
	if (_p)
	{	::soap_default_saml1__AudienceRestrictionConditionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml1__Audience = saml1__Audience;
	}
	return _p;
}

inline struct saml1__AudienceRestrictionConditionType * soap_new_set_saml1__AudienceRestrictionConditionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml1__Audience)
{
	struct saml1__AudienceRestrictionConditionType *_p = ::soap_new_saml1__AudienceRestrictionConditionType(soap);
	if (_p)
	{	::soap_default_saml1__AudienceRestrictionConditionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml1__Audience = saml1__Audience;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_write_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_get_saml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_read_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *p)
{
	if (p)
	{	::soap_default_saml1__AudienceRestrictionConditionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AudienceRestrictionConditionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AudienceRestrictionConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *p)
{
	if (::soap_read_saml1__AudienceRestrictionConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__ConditionAbstractType_DEFINED
#define SOAP_TYPE_saml1__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionAbstractType(struct soap*, const char*, int, const struct saml1__ConditionAbstractType *, const char*);
SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_in_saml1__ConditionAbstractType(struct soap*, const char*, struct saml1__ConditionAbstractType *, const char*);
SOAP_FMAC1 struct saml1__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml1__ConditionAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ConditionAbstractType * soap_new_saml1__ConditionAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ConditionAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ConditionAbstractType * soap_new_req_saml1__ConditionAbstractType(
	struct soap *soap)
{
	struct saml1__ConditionAbstractType *_p = ::soap_new_saml1__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml1__ConditionAbstractType * soap_new_set_saml1__ConditionAbstractType(
	struct soap *soap)
{
	struct saml1__ConditionAbstractType *_p = ::soap_new_saml1__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_write_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_get_saml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_read_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *p)
{
	if (p)
	{	::soap_default_saml1__ConditionAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__ConditionAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *p)
{
	if (::soap_read_saml1__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__ConditionsType_DEFINED
#define SOAP_TYPE_saml1__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionsType(struct soap*, struct saml1__ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionsType(struct soap*, const char*, int, const struct saml1__ConditionsType *, const char*);
SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_in_saml1__ConditionsType(struct soap*, const char*, struct saml1__ConditionsType *, const char*);
SOAP_FMAC1 struct saml1__ConditionsType * SOAP_FMAC2 soap_instantiate_saml1__ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ConditionsType * soap_new_saml1__ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ConditionsType * soap_new_req_saml1__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml1__union_ConditionsType *__union_ConditionsType)
{
	struct saml1__ConditionsType *_p = ::soap_new_saml1__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
	}
	return _p;
}

inline struct saml1__ConditionsType * soap_new_set_saml1__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml1__union_ConditionsType *__union_ConditionsType,
	time_t *NotBefore,
	time_t *NotOnOrAfter)
{
	struct saml1__ConditionsType *_p = ::soap_new_saml1__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *, const char*, const char*);

inline int soap_write_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_get_saml1__ConditionsType(struct soap*, struct saml1__ConditionsType *, const char*, const char*);

inline int soap_read_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *p)
{
	if (p)
	{	::soap_default_saml1__ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *p)
{
	if (::soap_read_saml1__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AssertionType_DEFINED
#define SOAP_TYPE_saml1__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AssertionType(struct soap*, struct saml1__AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AssertionType(struct soap*, const char*, int, const struct saml1__AssertionType *, const char*);
SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_in_saml1__AssertionType(struct soap*, const char*, struct saml1__AssertionType *, const char*);
SOAP_FMAC1 struct saml1__AssertionType * SOAP_FMAC2 soap_instantiate_saml1__AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AssertionType * soap_new_saml1__AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AssertionType * soap_new_req_saml1__AssertionType(
	struct soap *soap,
	int __size_AssertionType,
	struct __saml1__union_AssertionType *__union_AssertionType,
	char *MajorVersion,
	char *MinorVersion,
	char *AssertionID,
	char *Issuer,
	time_t IssueInstant)
{
	struct saml1__AssertionType *_p = ::soap_new_saml1__AssertionType(soap);
	if (_p)
	{	::soap_default_saml1__AssertionType(soap, _p);
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->MajorVersion = MajorVersion;
		_p->MinorVersion = MinorVersion;
		_p->AssertionID = AssertionID;
		_p->Issuer = Issuer;
		_p->IssueInstant = IssueInstant;
	}
	return _p;
}

inline struct saml1__AssertionType * soap_new_set_saml1__AssertionType(
	struct soap *soap,
	struct saml1__ConditionsType *saml1__Conditions,
	struct saml1__AdviceType *saml1__Advice,
	int __size_AssertionType,
	struct __saml1__union_AssertionType *__union_AssertionType,
	struct ds__SignatureType *ds__Signature,
	char *MajorVersion,
	char *MinorVersion,
	char *AssertionID,
	char *Issuer,
	time_t IssueInstant,
	char *wsu__Id)
{
	struct saml1__AssertionType *_p = ::soap_new_saml1__AssertionType(soap);
	if (_p)
	{	::soap_default_saml1__AssertionType(soap, _p);
		_p->saml1__Conditions = saml1__Conditions;
		_p->saml1__Advice = saml1__Advice;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->ds__Signature = ds__Signature;
		_p->MajorVersion = MajorVersion;
		_p->MinorVersion = MinorVersion;
		_p->AssertionID = AssertionID;
		_p->Issuer = Issuer;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *, const char*, const char*);

inline int soap_write_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_get_saml1__AssertionType(struct soap*, struct saml1__AssertionType *, const char*, const char*);

inline int soap_read_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *p)
{
	if (p)
	{	::soap_default_saml1__AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *p)
{
	if (::soap_read_saml1__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsc__DerivedKeyTokenType_sequence_DEFINED
#define SOAP_TYPE___wsc__DerivedKeyTokenType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, int, const struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_in___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC1 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC2 soap_instantiate___wsc__DerivedKeyTokenType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new___wsc__DerivedKeyTokenType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_req___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType)
{
	struct __wsc__DerivedKeyTokenType_sequence *_p = ::soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	::soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
	}
	return _p;
}

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_set___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	int __union_DerivedKeyTokenType,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType,
	ULONG64 *Length)
{
	struct __wsc__DerivedKeyTokenType_sequence *_p = ::soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	::soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->__union_DerivedKeyTokenType = __union_DerivedKeyTokenType;
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
		_p->Length = Length;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

inline int soap_write___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_get___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

inline int soap_read___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (p)
	{	::soap_default___wsc__DerivedKeyTokenType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsc__DerivedKeyTokenType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsc__DerivedKeyTokenType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (::soap_read___wsc__DerivedKeyTokenType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__PropertiesType_DEFINED
#define SOAP_TYPE_wsc__PropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__PropertiesType(struct soap*, const char*, int, const struct wsc__PropertiesType *, const char*);
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_in_wsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType *, const char*);
SOAP_FMAC1 struct wsc__PropertiesType * SOAP_FMAC2 soap_instantiate_wsc__PropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__PropertiesType * soap_new_wsc__PropertiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__PropertiesType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__PropertiesType * soap_new_req_wsc__PropertiesType(
	struct soap *soap)
{
	struct wsc__PropertiesType *_p = ::soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	::soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}

inline struct wsc__PropertiesType * soap_new_set_wsc__PropertiesType(
	struct soap *soap)
{
	struct wsc__PropertiesType *_p = ::soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	::soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *, const char*, const char*);

inline int soap_write_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_get_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *, const char*, const char*);

inline int soap_read_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p)
{
	if (p)
	{	::soap_default_wsc__PropertiesType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsc__PropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__PropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p)
{
	if (::soap_read_wsc__PropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__DerivedKeyTokenType_DEFINED
#define SOAP_TYPE_wsc__DerivedKeyTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__DerivedKeyTokenType(struct soap*, const char*, int, const struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_in_wsc__DerivedKeyTokenType(struct soap*, const char*, struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC1 struct wsc__DerivedKeyTokenType * SOAP_FMAC2 soap_instantiate_wsc__DerivedKeyTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__DerivedKeyTokenType * soap_new_wsc__DerivedKeyTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__DerivedKeyTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__DerivedKeyTokenType * soap_new_req_wsc__DerivedKeyTokenType(
	struct soap *soap)
{
	struct wsc__DerivedKeyTokenType *_p = ::soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	::soap_default_wsc__DerivedKeyTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__DerivedKeyTokenType * soap_new_set_wsc__DerivedKeyTokenType(
	struct soap *soap,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	struct wsc__PropertiesType *Properties,
	struct __wsc__DerivedKeyTokenType_sequence *__DerivedKeyTokenType_sequence,
	char *Label,
	char *Nonce,
	char *wsu__Id,
	char *Algorithm)
{
	struct wsc__DerivedKeyTokenType *_p = ::soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	::soap_default_wsc__DerivedKeyTokenType(soap, _p);
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Properties = Properties;
		_p->__DerivedKeyTokenType_sequence = __DerivedKeyTokenType_sequence;
		_p->Label = Label;
		_p->Nonce = Nonce;
		_p->wsu__Id = wsu__Id;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *, const char*, const char*);

inline int soap_write_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_get_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *, const char*, const char*);

inline int soap_read_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p)
{
	if (p)
	{	::soap_default_wsc__DerivedKeyTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsc__DerivedKeyTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__DerivedKeyTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p)
{
	if (::soap_read_wsc__DerivedKeyTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__SecurityContextTokenType_DEFINED
#define SOAP_TYPE_wsc__SecurityContextTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__SecurityContextTokenType(struct soap*, const char*, int, const struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_in_wsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC1 struct wsc__SecurityContextTokenType * SOAP_FMAC2 soap_instantiate_wsc__SecurityContextTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__SecurityContextTokenType * soap_new_wsc__SecurityContextTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__SecurityContextTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__SecurityContextTokenType * soap_new_req_wsc__SecurityContextTokenType(
	struct soap *soap)
{
	struct wsc__SecurityContextTokenType *_p = ::soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	::soap_default_wsc__SecurityContextTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__SecurityContextTokenType * soap_new_set_wsc__SecurityContextTokenType(
	struct soap *soap,
	char *wsu__Id,
	char *Identifier,
	char *Instance)
{
	struct wsc__SecurityContextTokenType *_p = ::soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	::soap_default_wsc__SecurityContextTokenType(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Identifier = Identifier;
		_p->Instance = Instance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *, const char*, const char*);

inline int soap_write_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_get_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *, const char*, const char*);

inline int soap_read_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p)
{
	if (p)
	{	::soap_default_wsc__SecurityContextTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsc__SecurityContextTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__SecurityContextTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p)
{
	if (::soap_read_wsc__SecurityContextTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___xenc__union_ReferenceList_DEFINED
#define SOAP_TYPE___xenc__union_ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___xenc__union_ReferenceList(struct soap*, const char*, int, const struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_in___xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC1 struct __xenc__union_ReferenceList * SOAP_FMAC2 soap_instantiate___xenc__union_ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct __xenc__union_ReferenceList * soap_new___xenc__union_ReferenceList(struct soap *soap, int n = -1)
{
	return soap_instantiate___xenc__union_ReferenceList(soap, n, NULL, NULL, NULL);
}

inline struct __xenc__union_ReferenceList * soap_new_req___xenc__union_ReferenceList(
	struct soap *soap)
{
	struct __xenc__union_ReferenceList *_p = ::soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	::soap_default___xenc__union_ReferenceList(soap, _p);
	}
	return _p;
}

inline struct __xenc__union_ReferenceList * soap_new_set___xenc__union_ReferenceList(
	struct soap *soap,
	struct xenc__ReferenceType *DataReference,
	struct xenc__ReferenceType *KeyReference)
{
	struct __xenc__union_ReferenceList *_p = ::soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	::soap_default___xenc__union_ReferenceList(soap, _p);
		_p->DataReference = DataReference;
		_p->KeyReference = KeyReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *, const char*, const char*);

inline int soap_write___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_get___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *, const char*, const char*);

inline int soap_read___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p)
{
	if (p)
	{	::soap_default___xenc__union_ReferenceList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___xenc__union_ReferenceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___xenc__union_ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p)
{
	if (::soap_read___xenc__union_ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__xenc__ReferenceList_DEFINED
#define SOAP_TYPE__xenc__ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__ReferenceList(struct soap*, const char*, int, const struct _xenc__ReferenceList *, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_in__xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList *, const char*);
SOAP_FMAC1 struct _xenc__ReferenceList * SOAP_FMAC2 soap_instantiate__xenc__ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct _xenc__ReferenceList * soap_new__xenc__ReferenceList(struct soap *soap, int n = -1)
{
	return soap_instantiate__xenc__ReferenceList(soap, n, NULL, NULL, NULL);
}

inline struct _xenc__ReferenceList * soap_new_req__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{
	struct _xenc__ReferenceList *_p = ::soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	::soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}

inline struct _xenc__ReferenceList * soap_new_set__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{
	struct _xenc__ReferenceList *_p = ::soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	::soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *, const char*, const char*);

inline int soap_write__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_get__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *, const char*, const char*);

inline int soap_read__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p)
{
	if (p)
	{	::soap_default__xenc__ReferenceList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__xenc__ReferenceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__xenc__ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p)
{
	if (::soap_read__xenc__ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertyType_DEFINED
#define SOAP_TYPE_xenc__EncryptionPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertyType(struct soap*, const char*, int, const struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertyType * soap_new_xenc__EncryptionPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionPropertyType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionPropertyType * soap_new_req_xenc__EncryptionPropertyType(
	struct soap *soap)
{
	struct xenc__EncryptionPropertyType *_p = ::soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertyType(soap, _p);
	}
	return _p;
}

inline struct xenc__EncryptionPropertyType * soap_new_set_xenc__EncryptionPropertyType(
	struct soap *soap,
	char *Target,
	char *Id)
{
	struct xenc__EncryptionPropertyType *_p = ::soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertyType(soap, _p);
		_p->Target = Target;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *, const char*, const char*);

inline int soap_write_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *, const char*, const char*);

inline int soap_read_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptionPropertyType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptionPropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptionPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p)
{
	if (::soap_read_xenc__EncryptionPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType_DEFINED
#define SOAP_TYPE_xenc__EncryptionPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertiesType(struct soap*, const char*, int, const struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertiesType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertiesType * soap_new_xenc__EncryptionPropertiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionPropertiesType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionPropertiesType * soap_new_req_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty)
{
	struct xenc__EncryptionPropertiesType *_p = ::soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
	}
	return _p;
}

inline struct xenc__EncryptionPropertiesType * soap_new_set_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty,
	char *Id)
{
	struct xenc__EncryptionPropertiesType *_p = ::soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *, const char*, const char*);

inline int soap_write_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *, const char*, const char*);

inline int soap_read_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptionPropertiesType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptionPropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptionPropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p)
{
	if (::soap_read_xenc__EncryptionPropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__ReferenceType_DEFINED
#define SOAP_TYPE_xenc__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__ReferenceType(struct soap*, const char*, int, const struct xenc__ReferenceType *, const char*);
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_in_xenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType *, const char*);
SOAP_FMAC1 struct xenc__ReferenceType * SOAP_FMAC2 soap_instantiate_xenc__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__ReferenceType * soap_new_xenc__ReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__ReferenceType * soap_new_req_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__ReferenceType *_p = ::soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__ReferenceType * soap_new_set_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__ReferenceType *_p = ::soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *, const char*, const char*);

inline int soap_write_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_get_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *, const char*, const char*);

inline int soap_read_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p)
{
	if (p)
	{	::soap_default_xenc__ReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p)
{
	if (::soap_read_xenc__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__AgreementMethodType_DEFINED
#define SOAP_TYPE_xenc__AgreementMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__AgreementMethodType(struct soap*, const char*, int, const struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_in_xenc__AgreementMethodType(struct soap*, const char*, struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC1 struct xenc__AgreementMethodType * SOAP_FMAC2 soap_instantiate_xenc__AgreementMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__AgreementMethodType * soap_new_xenc__AgreementMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__AgreementMethodType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__AgreementMethodType * soap_new_req_xenc__AgreementMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct xenc__AgreementMethodType *_p = ::soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	::soap_default_xenc__AgreementMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__AgreementMethodType * soap_new_set_xenc__AgreementMethodType(
	struct soap *soap,
	char *KA_Nonce,
	struct ds__KeyInfoType *OriginatorKeyInfo,
	struct ds__KeyInfoType *RecipientKeyInfo,
	char *Algorithm,
	char *__mixed)
{
	struct xenc__AgreementMethodType *_p = ::soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	::soap_default_xenc__AgreementMethodType(soap, _p);
		_p->KA_Nonce = KA_Nonce;
		_p->OriginatorKeyInfo = OriginatorKeyInfo;
		_p->RecipientKeyInfo = RecipientKeyInfo;
		_p->Algorithm = Algorithm;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *, const char*, const char*);

inline int soap_write_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_get_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *, const char*, const char*);

inline int soap_read_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p)
{
	if (p)
	{	::soap_default_xenc__AgreementMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__AgreementMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__AgreementMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p)
{
	if (::soap_read_xenc__AgreementMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_xenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedKeyType(struct soap*, const char*, int, const struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_in_xenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedKeyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedKeyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedKeyType * soap_new_xenc__EncryptedKeyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedKeyType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedKeyType * soap_new_req_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedKeyType *_p = ::soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedKeyType * soap_new_set_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding,
	struct _xenc__ReferenceList *ReferenceList,
	char *CarriedKeyName,
	char *Recipient)
{
	struct xenc__EncryptedKeyType *_p = ::soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
		_p->ReferenceList = ReferenceList;
		_p->CarriedKeyName = CarriedKeyName;
		_p->Recipient = Recipient;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *, const char*, const char*);

inline int soap_write_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_get_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *, const char*, const char*);

inline int soap_read_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptedKeyType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptedKeyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptedKeyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p)
{
	if (::soap_read_xenc__EncryptedKeyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedDataType_DEFINED
#define SOAP_TYPE_xenc__EncryptedDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedDataType(struct soap*, const char*, int, const struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_in_xenc__EncryptedDataType(struct soap*, const char*, struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedDataType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedDataType * soap_new_xenc__EncryptedDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedDataType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedDataType * soap_new_req_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedDataType *_p = ::soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedDataType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedDataType * soap_new_set_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{
	struct xenc__EncryptedDataType *_p = ::soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedDataType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *, const char*, const char*);

inline int soap_write_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_get_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *, const char*, const char*);

inline int soap_read_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptedDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptedDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptedDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p)
{
	if (::soap_read_xenc__EncryptedDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__TransformsType_DEFINED
#define SOAP_TYPE_xenc__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__TransformsType(struct soap*, struct xenc__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__TransformsType(struct soap*, const char*, int, const struct xenc__TransformsType *, const char*);
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_in_xenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType *, const char*);
SOAP_FMAC1 struct xenc__TransformsType * SOAP_FMAC2 soap_instantiate_xenc__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__TransformsType * soap_new_xenc__TransformsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__TransformsType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__TransformsType * soap_new_req_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{
	struct xenc__TransformsType *_p = ::soap_new_xenc__TransformsType(soap);
	if (_p)
	{	::soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}

inline struct xenc__TransformsType * soap_new_set_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{
	struct xenc__TransformsType *_p = ::soap_new_xenc__TransformsType(soap);
	if (_p)
	{	::soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *, const char*, const char*);

inline int soap_write_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_get_xenc__TransformsType(struct soap*, struct xenc__TransformsType *, const char*, const char*);

inline int soap_read_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p)
{
	if (p)
	{	::soap_default_xenc__TransformsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__TransformsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p)
{
	if (::soap_read_xenc__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__CipherReferenceType_DEFINED
#define SOAP_TYPE_xenc__CipherReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherReferenceType(struct soap*, const char*, int, const struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_in_xenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC1 struct xenc__CipherReferenceType * SOAP_FMAC2 soap_instantiate_xenc__CipherReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherReferenceType * soap_new_xenc__CipherReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__CipherReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__CipherReferenceType * soap_new_req_xenc__CipherReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__CipherReferenceType *_p = ::soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__CipherReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__CipherReferenceType * soap_new_set_xenc__CipherReferenceType(
	struct soap *soap,
	struct xenc__TransformsType *Transforms,
	char *URI)
{
	struct xenc__CipherReferenceType *_p = ::soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__CipherReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *, const char*, const char*);

inline int soap_write_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_get_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *, const char*, const char*);

inline int soap_read_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p)
{
	if (p)
	{	::soap_default_xenc__CipherReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__CipherReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__CipherReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p)
{
	if (::soap_read_xenc__CipherReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__CipherDataType_DEFINED
#define SOAP_TYPE_xenc__CipherDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherDataType(struct soap*, const char*, int, const struct xenc__CipherDataType *, const char*);
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_in_xenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType *, const char*);
SOAP_FMAC1 struct xenc__CipherDataType * SOAP_FMAC2 soap_instantiate_xenc__CipherDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherDataType * soap_new_xenc__CipherDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__CipherDataType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__CipherDataType * soap_new_req_xenc__CipherDataType(
	struct soap *soap)
{
	struct xenc__CipherDataType *_p = ::soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	::soap_default_xenc__CipherDataType(soap, _p);
	}
	return _p;
}

inline struct xenc__CipherDataType * soap_new_set_xenc__CipherDataType(
	struct soap *soap,
	char *CipherValue,
	struct xenc__CipherReferenceType *CipherReference)
{
	struct xenc__CipherDataType *_p = ::soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	::soap_default_xenc__CipherDataType(soap, _p);
		_p->CipherValue = CipherValue;
		_p->CipherReference = CipherReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *, const char*, const char*);

inline int soap_write_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_get_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *, const char*, const char*);

inline int soap_read_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p)
{
	if (p)
	{	::soap_default_xenc__CipherDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__CipherDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__CipherDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p)
{
	if (::soap_read_xenc__CipherDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionMethodType_DEFINED
#define SOAP_TYPE_xenc__EncryptionMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionMethodType(struct soap*, const char*, int, const struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_in_xenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionMethodType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionMethodType * soap_new_xenc__EncryptionMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionMethodType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionMethodType * soap_new_req_xenc__EncryptionMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct xenc__EncryptionMethodType *_p = ::soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__EncryptionMethodType * soap_new_set_xenc__EncryptionMethodType(
	struct soap *soap,
	int *KeySize,
	char *OAEPparams,
	char *Algorithm,
	struct ds__DigestMethodType *ds__DigestMethod,
	char *__mixed)
{
	struct xenc__EncryptionMethodType *_p = ::soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->KeySize = KeySize;
		_p->OAEPparams = OAEPparams;
		_p->Algorithm = Algorithm;
		_p->ds__DigestMethod = ds__DigestMethod;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *, const char*, const char*);

inline int soap_write_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_get_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *, const char*, const char*);

inline int soap_read_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptionMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptionMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptionMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p)
{
	if (::soap_read_xenc__EncryptionMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedType_DEFINED
#define SOAP_TYPE_xenc__EncryptedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedType(struct soap*, const char*, int, const struct xenc__EncryptedType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_in_xenc__EncryptedType(struct soap*, const char*, struct xenc__EncryptedType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedType * soap_new_xenc__EncryptedType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedType * soap_new_req_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedType *_p = ::soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedType * soap_new_set_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{
	struct xenc__EncryptedType *_p = ::soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *, const char*, const char*);

inline int soap_write_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_get_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *, const char*, const char*);

inline int soap_read_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptedType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptedType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p)
{
	if (::soap_read_xenc__EncryptedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__RSAKeyValueType_DEFINED
#define SOAP_TYPE_ds__RSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RSAKeyValueType(struct soap*, const char*, int, const struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_in_ds__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__RSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__RSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RSAKeyValueType * soap_new_ds__RSAKeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__RSAKeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__RSAKeyValueType * soap_new_req_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{
	struct ds__RSAKeyValueType *_p = ::soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}

inline struct ds__RSAKeyValueType * soap_new_set_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{
	struct ds__RSAKeyValueType *_p = ::soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *, const char*, const char*);

inline int soap_write_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_get_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *, const char*, const char*);

inline int soap_read_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p)
{
	if (p)
	{	::soap_default_ds__RSAKeyValueType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__RSAKeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__RSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p)
{
	if (::soap_read_ds__RSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__DSAKeyValueType_DEFINED
#define SOAP_TYPE_ds__DSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DSAKeyValueType(struct soap*, const char*, int, const struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_in_ds__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__DSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__DSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DSAKeyValueType * soap_new_ds__DSAKeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__DSAKeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__DSAKeyValueType * soap_new_req_ds__DSAKeyValueType(
	struct soap *soap,
	char *Y,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{
	struct ds__DSAKeyValueType *_p = ::soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__DSAKeyValueType(soap, _p);
		_p->Y = Y;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}

inline struct ds__DSAKeyValueType * soap_new_set_ds__DSAKeyValueType(
	struct soap *soap,
	char *G,
	char *Y,
	char *J,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{
	struct ds__DSAKeyValueType *_p = ::soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__DSAKeyValueType(soap, _p);
		_p->G = G;
		_p->Y = Y;
		_p->J = J;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *, const char*, const char*);

inline int soap_write_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_get_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *, const char*, const char*);

inline int soap_read_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p)
{
	if (p)
	{	::soap_default_ds__DSAKeyValueType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__DSAKeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__DSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p)
{
	if (::soap_read_ds__DSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__X509IssuerSerialType_DEFINED
#define SOAP_TYPE_ds__X509IssuerSerialType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509IssuerSerialType(struct soap*, const char*, int, const struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_in_ds__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC1 struct ds__X509IssuerSerialType * SOAP_FMAC2 soap_instantiate_ds__X509IssuerSerialType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509IssuerSerialType * soap_new_ds__X509IssuerSerialType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__X509IssuerSerialType(soap, n, NULL, NULL, NULL);
}

inline struct ds__X509IssuerSerialType * soap_new_req_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{
	struct ds__X509IssuerSerialType *_p = ::soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	::soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}

inline struct ds__X509IssuerSerialType * soap_new_set_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{
	struct ds__X509IssuerSerialType *_p = ::soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	::soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *, const char*, const char*);

inline int soap_write_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_get_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *, const char*, const char*);

inline int soap_read_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p)
{
	if (p)
	{	::soap_default_ds__X509IssuerSerialType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__X509IssuerSerialType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__X509IssuerSerialType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p)
{
	if (::soap_read_ds__X509IssuerSerialType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _ds__KeyInfo is a typedef synonym of ds__KeyInfoType */

#ifndef SOAP_TYPE__ds__KeyInfo_DEFINED
#define SOAP_TYPE__ds__KeyInfo_DEFINED

#define soap_default__ds__KeyInfo soap_default_ds__KeyInfoType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *);

#define soap_serialize__ds__KeyInfo soap_serialize_ds__KeyInfoType


#define soap__ds__KeyInfo2s soap_ds__KeyInfoType2s


#define soap_out__ds__KeyInfo soap_out_ds__KeyInfoType


#define soap_s2_ds__KeyInfo soap_s2ds__KeyInfoType


#define soap_in__ds__KeyInfo soap_in_ds__KeyInfoType


#define soap_instantiate__ds__KeyInfo soap_instantiate_ds__KeyInfoType


#define soap_new__ds__KeyInfo soap_new_ds__KeyInfoType


#define soap_new_req__ds__KeyInfo soap_new_req_ds__KeyInfoType


#define soap_new_set__ds__KeyInfo soap_new_set_ds__KeyInfoType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__KeyInfo(struct soap*, const struct ds__KeyInfoType *, const char*, const char*);

inline int soap_write__ds__KeyInfo(struct soap *soap, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ds__KeyInfo(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__KeyInfo(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__KeyInfo(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__KeyInfo soap_get_ds__KeyInfoType


#define soap_read__ds__KeyInfo soap_read_ds__KeyInfoType


#define soap_GET__ds__KeyInfo soap_GET_ds__KeyInfoType


#define soap_POST_recv__ds__KeyInfo soap_POST_recv_ds__KeyInfoType

#endif

#ifndef SOAP_TYPE_ds__RetrievalMethodType_DEFINED
#define SOAP_TYPE_ds__RetrievalMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RetrievalMethodType(struct soap*, const char*, int, const struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_in_ds__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC1 struct ds__RetrievalMethodType * SOAP_FMAC2 soap_instantiate_ds__RetrievalMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RetrievalMethodType * soap_new_ds__RetrievalMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__RetrievalMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__RetrievalMethodType * soap_new_req_ds__RetrievalMethodType(
	struct soap *soap)
{
	struct ds__RetrievalMethodType *_p = ::soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	::soap_default_ds__RetrievalMethodType(soap, _p);
	}
	return _p;
}

inline struct ds__RetrievalMethodType * soap_new_set_ds__RetrievalMethodType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	char *URI,
	char *Type)
{
	struct ds__RetrievalMethodType *_p = ::soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	::soap_default_ds__RetrievalMethodType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *, const char*, const char*);

inline int soap_write_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_get_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *, const char*, const char*);

inline int soap_read_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p)
{
	if (p)
	{	::soap_default_ds__RetrievalMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__RetrievalMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__RetrievalMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p)
{
	if (::soap_read_ds__RetrievalMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__KeyValueType_DEFINED
#define SOAP_TYPE_ds__KeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyValueType(struct soap*, struct ds__KeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyValueType(struct soap*, const char*, int, const struct ds__KeyValueType *, const char*);
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_in_ds__KeyValueType(struct soap*, const char*, struct ds__KeyValueType *, const char*);
SOAP_FMAC1 struct ds__KeyValueType * SOAP_FMAC2 soap_instantiate_ds__KeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyValueType * soap_new_ds__KeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__KeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__KeyValueType * soap_new_req_ds__KeyValueType(
	struct soap *soap)
{
	struct ds__KeyValueType *_p = ::soap_new_ds__KeyValueType(soap);
	if (_p)
	{	::soap_default_ds__KeyValueType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyValueType * soap_new_set_ds__KeyValueType(
	struct soap *soap,
	struct ds__DSAKeyValueType *DSAKeyValue,
	struct ds__RSAKeyValueType *RSAKeyValue)
{
	struct ds__KeyValueType *_p = ::soap_new_ds__KeyValueType(soap);
	if (_p)
	{	::soap_default_ds__KeyValueType(soap, _p);
		_p->DSAKeyValue = DSAKeyValue;
		_p->RSAKeyValue = RSAKeyValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *, const char*, const char*);

inline int soap_write_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_get_ds__KeyValueType(struct soap*, struct ds__KeyValueType *, const char*, const char*);

inline int soap_read_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p)
{
	if (p)
	{	::soap_default_ds__KeyValueType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__KeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__KeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p)
{
	if (::soap_read_ds__KeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__DigestMethodType_DEFINED
#define SOAP_TYPE_ds__DigestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DigestMethodType(struct soap*, const char*, int, const struct ds__DigestMethodType *, const char*);
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_in_ds__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType *, const char*);
SOAP_FMAC1 struct ds__DigestMethodType * SOAP_FMAC2 soap_instantiate_ds__DigestMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DigestMethodType * soap_new_ds__DigestMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__DigestMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__DigestMethodType * soap_new_req_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__DigestMethodType *_p = ::soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	::soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__DigestMethodType * soap_new_set_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__DigestMethodType *_p = ::soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	::soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *, const char*, const char*);

inline int soap_write_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_get_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *, const char*, const char*);

inline int soap_read_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p)
{
	if (p)
	{	::soap_default_ds__DigestMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__DigestMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__DigestMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p)
{
	if (::soap_read_ds__DigestMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _ds__Transform is a typedef synonym of ds__TransformType */

#ifndef SOAP_TYPE__ds__Transform_DEFINED
#define SOAP_TYPE__ds__Transform_DEFINED

#define soap_default__ds__Transform soap_default_ds__TransformType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap*, const struct ds__TransformType *);

#define soap_serialize__ds__Transform soap_serialize_ds__TransformType


#define soap__ds__Transform2s soap_ds__TransformType2s


#define soap_out__ds__Transform soap_out_ds__TransformType


#define soap_s2_ds__Transform soap_s2ds__TransformType


#define soap_in__ds__Transform soap_in_ds__TransformType


#define soap_instantiate__ds__Transform soap_instantiate_ds__TransformType


#define soap_new__ds__Transform soap_new_ds__TransformType


#define soap_new_req__ds__Transform soap_new_req_ds__TransformType


#define soap_new_set__ds__Transform soap_new_set_ds__TransformType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Transform(struct soap*, const struct ds__TransformType *, const char*, const char*);

inline int soap_write__ds__Transform(struct soap *soap, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ds__Transform(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__Transform(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__Transform(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__Transform soap_get_ds__TransformType


#define soap_read__ds__Transform soap_read_ds__TransformType


#define soap_GET__ds__Transform soap_GET_ds__TransformType


#define soap_POST_recv__ds__Transform soap_POST_recv_ds__TransformType

#endif

#ifndef SOAP_TYPE_ds__TransformType_DEFINED
#define SOAP_TYPE_ds__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformType(struct soap*, struct ds__TransformType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap*, const struct ds__TransformType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformType(struct soap*, const char*, int, const struct ds__TransformType *, const char*);
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_in_ds__TransformType(struct soap*, const char*, struct ds__TransformType *, const char*);
SOAP_FMAC1 struct ds__TransformType * SOAP_FMAC2 soap_instantiate_ds__TransformType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformType * soap_new_ds__TransformType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__TransformType(soap, n, NULL, NULL, NULL);
}

inline struct ds__TransformType * soap_new_req_ds__TransformType(
	struct soap *soap)
{
	struct ds__TransformType *_p = ::soap_new_ds__TransformType(soap);
	if (_p)
	{	::soap_default_ds__TransformType(soap, _p);
	}
	return _p;
}

inline struct ds__TransformType * soap_new_set_ds__TransformType(
	struct soap *soap,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces,
	char *__any,
	char *Algorithm)
{
	struct ds__TransformType *_p = ::soap_new_ds__TransformType(soap);
	if (_p)
	{	::soap_default_ds__TransformType(soap, _p);
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
		_p->__any = __any;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformType(struct soap*, const struct ds__TransformType *, const char*, const char*);

inline int soap_write_ds__TransformType(struct soap *soap, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_get_ds__TransformType(struct soap*, struct ds__TransformType *, const char*, const char*);

inline int soap_read_ds__TransformType(struct soap *soap, struct ds__TransformType *p)
{
	if (p)
	{	::soap_default_ds__TransformType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__TransformType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__TransformType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__TransformType(struct soap *soap, struct ds__TransformType *p)
{
	if (::soap_read_ds__TransformType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces_DEFINED
#define SOAP_TYPE__c14n__InclusiveNamespaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__c14n__InclusiveNamespaces(struct soap*, const char*, int, const struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_in__c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC1 struct _c14n__InclusiveNamespaces * SOAP_FMAC2 soap_instantiate__c14n__InclusiveNamespaces(struct soap*, int, const char*, const char*, size_t*);

inline struct _c14n__InclusiveNamespaces * soap_new__c14n__InclusiveNamespaces(struct soap *soap, int n = -1)
{
	return soap_instantiate__c14n__InclusiveNamespaces(soap, n, NULL, NULL, NULL);
}

inline struct _c14n__InclusiveNamespaces * soap_new_req__c14n__InclusiveNamespaces(
	struct soap *soap)
{
	struct _c14n__InclusiveNamespaces *_p = ::soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	::soap_default__c14n__InclusiveNamespaces(soap, _p);
	}
	return _p;
}

inline struct _c14n__InclusiveNamespaces * soap_new_set__c14n__InclusiveNamespaces(
	struct soap *soap,
	char *PrefixList)
{
	struct _c14n__InclusiveNamespaces *_p = ::soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	::soap_default__c14n__InclusiveNamespaces(soap, _p);
		_p->PrefixList = PrefixList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *, const char*, const char*);

inline int soap_write__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_get__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *, const char*, const char*);

inline int soap_read__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p)
{
	if (p)
	{	::soap_default__c14n__InclusiveNamespaces(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__c14n__InclusiveNamespaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__c14n__InclusiveNamespaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p)
{
	if (::soap_read__c14n__InclusiveNamespaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__TransformsType_DEFINED
#define SOAP_TYPE_ds__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformsType(struct soap*, struct ds__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformsType(struct soap*, const struct ds__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformsType(struct soap*, const char*, int, const struct ds__TransformsType *, const char*);
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_in_ds__TransformsType(struct soap*, const char*, struct ds__TransformsType *, const char*);
SOAP_FMAC1 struct ds__TransformsType * SOAP_FMAC2 soap_instantiate_ds__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformsType * soap_new_ds__TransformsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__TransformsType(soap, n, NULL, NULL, NULL);
}

inline struct ds__TransformsType * soap_new_req_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{
	struct ds__TransformsType *_p = ::soap_new_ds__TransformsType(soap);
	if (_p)
	{	::soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}

inline struct ds__TransformsType * soap_new_set_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{
	struct ds__TransformsType *_p = ::soap_new_ds__TransformsType(soap);
	if (_p)
	{	::soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformsType(struct soap*, const struct ds__TransformsType *, const char*, const char*);

inline int soap_write_ds__TransformsType(struct soap *soap, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_get_ds__TransformsType(struct soap*, struct ds__TransformsType *, const char*, const char*);

inline int soap_read_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p)
{
	if (p)
	{	::soap_default_ds__TransformsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__TransformsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p)
{
	if (::soap_read_ds__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__ReferenceType_DEFINED
#define SOAP_TYPE_ds__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__ReferenceType(struct soap*, struct ds__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__ReferenceType(struct soap*, const char*, int, const struct ds__ReferenceType *, const char*);
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_in_ds__ReferenceType(struct soap*, const char*, struct ds__ReferenceType *, const char*);
SOAP_FMAC1 struct ds__ReferenceType * SOAP_FMAC2 soap_instantiate_ds__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__ReferenceType * soap_new_ds__ReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct ds__ReferenceType * soap_new_req_ds__ReferenceType(
	struct soap *soap,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue)
{
	struct ds__ReferenceType *_p = ::soap_new_ds__ReferenceType(soap);
	if (_p)
	{	::soap_default_ds__ReferenceType(soap, _p);
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
	}
	return _p;
}

inline struct ds__ReferenceType * soap_new_set_ds__ReferenceType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue,
	char *Id,
	char *URI,
	char *Type)
{
	struct ds__ReferenceType *_p = ::soap_new_ds__ReferenceType(soap);
	if (_p)
	{	::soap_default_ds__ReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
		_p->Id = Id;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *, const char*, const char*);

inline int soap_write_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_get_ds__ReferenceType(struct soap*, struct ds__ReferenceType *, const char*, const char*);

inline int soap_read_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p)
{
	if (p)
	{	::soap_default_ds__ReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p)
{
	if (::soap_read_ds__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__SignatureMethodType_DEFINED
#define SOAP_TYPE_ds__SignatureMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureMethodType(struct soap*, const char*, int, const struct ds__SignatureMethodType *, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_in_ds__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType *, const char*);
SOAP_FMAC1 struct ds__SignatureMethodType * SOAP_FMAC2 soap_instantiate_ds__SignatureMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureMethodType * soap_new_ds__SignatureMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignatureMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignatureMethodType * soap_new_req_ds__SignatureMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__SignatureMethodType *_p = ::soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	::soap_default_ds__SignatureMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__SignatureMethodType * soap_new_set_ds__SignatureMethodType(
	struct soap *soap,
	int *HMACOutputLength,
	char *Algorithm)
{
	struct ds__SignatureMethodType *_p = ::soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	::soap_default_ds__SignatureMethodType(soap, _p);
		_p->HMACOutputLength = HMACOutputLength;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *, const char*, const char*);

inline int soap_write_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_get_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *, const char*, const char*);

inline int soap_read_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p)
{
	if (p)
	{	::soap_default_ds__SignatureMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__SignatureMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__SignatureMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p)
{
	if (::soap_read_ds__SignatureMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_ds__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__CanonicalizationMethodType(struct soap*, const char*, int, const struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_in_ds__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC1 struct ds__CanonicalizationMethodType * SOAP_FMAC2 soap_instantiate_ds__CanonicalizationMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__CanonicalizationMethodType * soap_new_ds__CanonicalizationMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__CanonicalizationMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__CanonicalizationMethodType * soap_new_req_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__CanonicalizationMethodType *_p = ::soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	::soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__CanonicalizationMethodType * soap_new_set_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces)
{
	struct ds__CanonicalizationMethodType *_p = ::soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	::soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *, const char*, const char*);

inline int soap_write_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_get_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *, const char*, const char*);

inline int soap_read_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p)
{
	if (p)
	{	::soap_default_ds__CanonicalizationMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__CanonicalizationMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__CanonicalizationMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p)
{
	if (::soap_read_ds__CanonicalizationMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _ds__Signature is a typedef synonym of ds__SignatureType */

#ifndef SOAP_TYPE__ds__Signature_DEFINED
#define SOAP_TYPE__ds__Signature_DEFINED

#define soap_default__ds__Signature soap_default_ds__SignatureType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap*, const struct ds__SignatureType *);

#define soap_serialize__ds__Signature soap_serialize_ds__SignatureType


#define soap__ds__Signature2s soap_ds__SignatureType2s


#define soap_out__ds__Signature soap_out_ds__SignatureType


#define soap_s2_ds__Signature soap_s2ds__SignatureType


#define soap_in__ds__Signature soap_in_ds__SignatureType


#define soap_instantiate__ds__Signature soap_instantiate_ds__SignatureType


#define soap_new__ds__Signature soap_new_ds__SignatureType


#define soap_new_req__ds__Signature soap_new_req_ds__SignatureType


#define soap_new_set__ds__Signature soap_new_set_ds__SignatureType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Signature(struct soap*, const struct ds__SignatureType *, const char*, const char*);

inline int soap_write__ds__Signature(struct soap *soap, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ds__Signature(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__Signature(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__Signature(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__Signature soap_get_ds__SignatureType


#define soap_read__ds__Signature soap_read_ds__SignatureType


#define soap_GET__ds__Signature soap_GET_ds__SignatureType


#define soap_POST_recv__ds__Signature soap_POST_recv_ds__SignatureType

#endif

#ifndef SOAP_TYPE_ds__KeyInfoType_DEFINED
#define SOAP_TYPE_ds__KeyInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyInfoType(struct soap*, const char*, int, const struct ds__KeyInfoType *, const char*);
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_in_ds__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType *, const char*);
SOAP_FMAC1 struct ds__KeyInfoType * SOAP_FMAC2 soap_instantiate_ds__KeyInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyInfoType * soap_new_ds__KeyInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__KeyInfoType(soap, n, NULL, NULL, NULL);
}

inline struct ds__KeyInfoType * soap_new_req_ds__KeyInfoType(
	struct soap *soap)
{
	struct ds__KeyInfoType *_p = ::soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	::soap_default_ds__KeyInfoType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyInfoType * soap_new_set_ds__KeyInfoType(
	struct soap *soap,
	char *KeyName,
	struct ds__KeyValueType *KeyValue,
	struct ds__RetrievalMethodType *RetrievalMethod,
	struct ds__X509DataType *X509Data,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	char *Id)
{
	struct ds__KeyInfoType *_p = ::soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	::soap_default_ds__KeyInfoType(soap, _p);
		_p->KeyName = KeyName;
		_p->KeyValue = KeyValue;
		_p->RetrievalMethod = RetrievalMethod;
		_p->X509Data = X509Data;
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *, const char*, const char*);

inline int soap_write_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_get_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *, const char*, const char*);

inline int soap_read_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p)
{
	if (p)
	{	::soap_default_ds__KeyInfoType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__KeyInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__KeyInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p)
{
	if (::soap_read_ds__KeyInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__SignedInfoType_DEFINED
#define SOAP_TYPE_ds__SignedInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignedInfoType(struct soap*, const char*, int, const struct ds__SignedInfoType *, const char*);
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_in_ds__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType *, const char*);
SOAP_FMAC1 struct ds__SignedInfoType * SOAP_FMAC2 soap_instantiate_ds__SignedInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignedInfoType * soap_new_ds__SignedInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignedInfoType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignedInfoType * soap_new_req_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference)
{
	struct ds__SignedInfoType *_p = ::soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	::soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
	}
	return _p;
}

inline struct ds__SignedInfoType * soap_new_set_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference,
	char *Id)
{
	struct ds__SignedInfoType *_p = ::soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	::soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *, const char*, const char*);

inline int soap_write_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_get_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *, const char*, const char*);

inline int soap_read_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p)
{
	if (p)
	{	::soap_default_ds__SignedInfoType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__SignedInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__SignedInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p)
{
	if (::soap_read_ds__SignedInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__SignatureType_DEFINED
#define SOAP_TYPE_ds__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureType(struct soap*, struct ds__SignatureType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap*, const struct ds__SignatureType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureType(struct soap*, const char*, int, const struct ds__SignatureType *, const char*);
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_in_ds__SignatureType(struct soap*, const char*, struct ds__SignatureType *, const char*);
SOAP_FMAC1 struct ds__SignatureType * SOAP_FMAC2 soap_instantiate_ds__SignatureType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureType * soap_new_ds__SignatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignatureType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignatureType * soap_new_req_ds__SignatureType(
	struct soap *soap)
{
	struct ds__SignatureType *_p = ::soap_new_ds__SignatureType(soap);
	if (_p)
	{	::soap_default_ds__SignatureType(soap, _p);
	}
	return _p;
}

inline struct ds__SignatureType * soap_new_set_ds__SignatureType(
	struct soap *soap,
	struct ds__SignedInfoType *SignedInfo,
	char *SignatureValue,
	struct ds__KeyInfoType *KeyInfo,
	char *Id)
{
	struct ds__SignatureType *_p = ::soap_new_ds__SignatureType(soap);
	if (_p)
	{	::soap_default_ds__SignatureType(soap, _p);
		_p->SignedInfo = SignedInfo;
		_p->SignatureValue = SignatureValue;
		_p->KeyInfo = KeyInfo;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureType(struct soap*, const struct ds__SignatureType *, const char*, const char*);

inline int soap_write_ds__SignatureType(struct soap *soap, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_get_ds__SignatureType(struct soap*, struct ds__SignatureType *, const char*, const char*);

inline int soap_read_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p)
{
	if (p)
	{	::soap_default_ds__SignatureType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__SignatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__SignatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p)
{
	if (::soap_read_ds__SignatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__X509DataType_DEFINED
#define SOAP_TYPE_ds__X509DataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509DataType(struct soap*, struct ds__X509DataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509DataType(struct soap*, const struct ds__X509DataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509DataType(struct soap*, const char*, int, const struct ds__X509DataType *, const char*);
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_in_ds__X509DataType(struct soap*, const char*, struct ds__X509DataType *, const char*);
SOAP_FMAC1 struct ds__X509DataType * SOAP_FMAC2 soap_instantiate_ds__X509DataType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509DataType * soap_new_ds__X509DataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__X509DataType(soap, n, NULL, NULL, NULL);
}

inline struct ds__X509DataType * soap_new_req_ds__X509DataType(
	struct soap *soap)
{
	struct ds__X509DataType *_p = ::soap_new_ds__X509DataType(soap);
	if (_p)
	{	::soap_default_ds__X509DataType(soap, _p);
	}
	return _p;
}

inline struct ds__X509DataType * soap_new_set_ds__X509DataType(
	struct soap *soap,
	struct ds__X509IssuerSerialType *X509IssuerSerial,
	char *X509SKI,
	char *X509SubjectName,
	char *X509Certificate,
	char *X509CRL)
{
	struct ds__X509DataType *_p = ::soap_new_ds__X509DataType(soap);
	if (_p)
	{	::soap_default_ds__X509DataType(soap, _p);
		_p->X509IssuerSerial = X509IssuerSerial;
		_p->X509SKI = X509SKI;
		_p->X509SubjectName = X509SubjectName;
		_p->X509Certificate = X509Certificate;
		_p->X509CRL = X509CRL;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509DataType(struct soap*, const struct ds__X509DataType *, const char*, const char*);

inline int soap_write_ds__X509DataType(struct soap *soap, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_get_ds__X509DataType(struct soap*, struct ds__X509DataType *, const char*, const char*);

inline int soap_read_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p)
{
	if (p)
	{	::soap_default_ds__X509DataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__X509DataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__X509DataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p)
{
	if (::soap_read_ds__X509DataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__SecurityTokenReference_DEFINED
#define SOAP_TYPE__wsse__SecurityTokenReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__SecurityTokenReference(struct soap*, const char*, int, const struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_in__wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC1 struct _wsse__SecurityTokenReference * SOAP_FMAC2 soap_instantiate__wsse__SecurityTokenReference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__SecurityTokenReference * soap_new__wsse__SecurityTokenReference(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__SecurityTokenReference(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__SecurityTokenReference * soap_new_req__wsse__SecurityTokenReference(
	struct soap *soap)
{
	struct _wsse__SecurityTokenReference *_p = ::soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	::soap_default__wsse__SecurityTokenReference(soap, _p);
	}
	return _p;
}

inline struct _wsse__SecurityTokenReference * soap_new_set__wsse__SecurityTokenReference(
	struct soap *soap,
	struct _wsse__Reference *Reference,
	struct _wsse__KeyIdentifier *KeyIdentifier,
	struct _wsse__Embedded *Embedded,
	struct ds__X509DataType *ds__X509Data,
	char *wsu__Id,
	char *wsc__Instance,
	char *Usage)
{
	struct _wsse__SecurityTokenReference *_p = ::soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	::soap_default__wsse__SecurityTokenReference(soap, _p);
		_p->Reference = Reference;
		_p->KeyIdentifier = KeyIdentifier;
		_p->Embedded = Embedded;
		_p->ds__X509Data = ds__X509Data;
		_p->wsu__Id = wsu__Id;
		_p->wsc__Instance = wsc__Instance;
		_p->Usage = Usage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *, const char*, const char*);

inline int soap_write__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_get__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *, const char*, const char*);

inline int soap_read__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p)
{
	if (p)
	{	::soap_default__wsse__SecurityTokenReference(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__SecurityTokenReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__SecurityTokenReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p)
{
	if (::soap_read__wsse__SecurityTokenReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__KeyIdentifier_DEFINED
#define SOAP_TYPE__wsse__KeyIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__KeyIdentifier(struct soap*, const char*, int, const struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_in__wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC1 struct _wsse__KeyIdentifier * SOAP_FMAC2 soap_instantiate__wsse__KeyIdentifier(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__KeyIdentifier * soap_new__wsse__KeyIdentifier(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__KeyIdentifier(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__KeyIdentifier * soap_new_req__wsse__KeyIdentifier(
	struct soap *soap)
{
	struct _wsse__KeyIdentifier *_p = ::soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	::soap_default__wsse__KeyIdentifier(soap, _p);
	}
	return _p;
}

inline struct _wsse__KeyIdentifier * soap_new_set__wsse__KeyIdentifier(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{
	struct _wsse__KeyIdentifier *_p = ::soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	::soap_default__wsse__KeyIdentifier(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *, const char*, const char*);

inline int soap_write__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_get__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *, const char*, const char*);

inline int soap_read__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p)
{
	if (p)
	{	::soap_default__wsse__KeyIdentifier(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__KeyIdentifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__KeyIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p)
{
	if (::soap_read__wsse__KeyIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Embedded_DEFINED
#define SOAP_TYPE__wsse__Embedded_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Embedded(struct soap*, struct _wsse__Embedded *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Embedded(struct soap*, const struct _wsse__Embedded *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Embedded(struct soap*, const char*, int, const struct _wsse__Embedded *, const char*);
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_in__wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded *, const char*);
SOAP_FMAC1 struct _wsse__Embedded * SOAP_FMAC2 soap_instantiate__wsse__Embedded(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Embedded * soap_new__wsse__Embedded(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Embedded(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Embedded * soap_new_req__wsse__Embedded(
	struct soap *soap)
{
	struct _wsse__Embedded *_p = ::soap_new__wsse__Embedded(soap);
	if (_p)
	{	::soap_default__wsse__Embedded(soap, _p);
	}
	return _p;
}

inline struct _wsse__Embedded * soap_new_set__wsse__Embedded(
	struct soap *soap,
	char *wsu__Id,
	char *ValueType)
{
	struct _wsse__Embedded *_p = ::soap_new__wsse__Embedded(soap);
	if (_p)
	{	::soap_default__wsse__Embedded(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Embedded(struct soap*, const struct _wsse__Embedded *, const char*, const char*);

inline int soap_write__wsse__Embedded(struct soap *soap, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_get__wsse__Embedded(struct soap*, struct _wsse__Embedded *, const char*, const char*);

inline int soap_read__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p)
{
	if (p)
	{	::soap_default__wsse__Embedded(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Embedded(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Embedded(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p)
{
	if (::soap_read__wsse__Embedded(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Reference_DEFINED
#define SOAP_TYPE__wsse__Reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Reference(struct soap*, struct _wsse__Reference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Reference(struct soap*, const struct _wsse__Reference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Reference(struct soap*, const char*, int, const struct _wsse__Reference *, const char*);
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_in__wsse__Reference(struct soap*, const char*, struct _wsse__Reference *, const char*);
SOAP_FMAC1 struct _wsse__Reference * SOAP_FMAC2 soap_instantiate__wsse__Reference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Reference * soap_new__wsse__Reference(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Reference(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Reference * soap_new_req__wsse__Reference(
	struct soap *soap)
{
	struct _wsse__Reference *_p = ::soap_new__wsse__Reference(soap);
	if (_p)
	{	::soap_default__wsse__Reference(soap, _p);
	}
	return _p;
}

inline struct _wsse__Reference * soap_new_set__wsse__Reference(
	struct soap *soap,
	char *URI,
	char *ValueType)
{
	struct _wsse__Reference *_p = ::soap_new__wsse__Reference(soap);
	if (_p)
	{	::soap_default__wsse__Reference(soap, _p);
		_p->URI = URI;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Reference(struct soap*, const struct _wsse__Reference *, const char*, const char*);

inline int soap_write__wsse__Reference(struct soap *soap, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_get__wsse__Reference(struct soap*, struct _wsse__Reference *, const char*, const char*);

inline int soap_read__wsse__Reference(struct soap *soap, struct _wsse__Reference *p)
{
	if (p)
	{	::soap_default__wsse__Reference(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Reference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Reference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Reference(struct soap *soap, struct _wsse__Reference *p)
{
	if (::soap_read__wsse__Reference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__BinarySecurityToken_DEFINED
#define SOAP_TYPE__wsse__BinarySecurityToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__BinarySecurityToken(struct soap*, const char*, int, const struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_in__wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC1 struct _wsse__BinarySecurityToken * SOAP_FMAC2 soap_instantiate__wsse__BinarySecurityToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__BinarySecurityToken * soap_new__wsse__BinarySecurityToken(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__BinarySecurityToken(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__BinarySecurityToken * soap_new_req__wsse__BinarySecurityToken(
	struct soap *soap)
{
	struct _wsse__BinarySecurityToken *_p = ::soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	::soap_default__wsse__BinarySecurityToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__BinarySecurityToken * soap_new_set__wsse__BinarySecurityToken(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{
	struct _wsse__BinarySecurityToken *_p = ::soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	::soap_default__wsse__BinarySecurityToken(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *, const char*, const char*);

inline int soap_write__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_get__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *, const char*, const char*);

inline int soap_read__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p)
{
	if (p)
	{	::soap_default__wsse__BinarySecurityToken(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__BinarySecurityToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__BinarySecurityToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p)
{
	if (::soap_read__wsse__BinarySecurityToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Password_DEFINED
#define SOAP_TYPE__wsse__Password_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Password(struct soap*, struct _wsse__Password *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Password(struct soap*, const struct _wsse__Password *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Password(struct soap*, const char*, int, const struct _wsse__Password *, const char*);
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_in__wsse__Password(struct soap*, const char*, struct _wsse__Password *, const char*);
SOAP_FMAC1 struct _wsse__Password * SOAP_FMAC2 soap_instantiate__wsse__Password(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Password * soap_new__wsse__Password(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Password(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Password * soap_new_req__wsse__Password(
	struct soap *soap)
{
	struct _wsse__Password *_p = ::soap_new__wsse__Password(soap);
	if (_p)
	{	::soap_default__wsse__Password(soap, _p);
	}
	return _p;
}

inline struct _wsse__Password * soap_new_set__wsse__Password(
	struct soap *soap,
	char *__item,
	char *Type)
{
	struct _wsse__Password *_p = ::soap_new__wsse__Password(soap);
	if (_p)
	{	::soap_default__wsse__Password(soap, _p);
		_p->__item = __item;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Password(struct soap*, const struct _wsse__Password *, const char*, const char*);

inline int soap_write__wsse__Password(struct soap *soap, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_get__wsse__Password(struct soap*, struct _wsse__Password *, const char*, const char*);

inline int soap_read__wsse__Password(struct soap *soap, struct _wsse__Password *p)
{
	if (p)
	{	::soap_default__wsse__Password(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Password(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Password(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Password(struct soap *soap, struct _wsse__Password *p)
{
	if (::soap_read__wsse__Password(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__UsernameToken_DEFINED
#define SOAP_TYPE__wsse__UsernameToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__UsernameToken(struct soap*, const char*, int, const struct _wsse__UsernameToken *, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_in__wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken *, const char*);
SOAP_FMAC1 struct _wsse__UsernameToken * SOAP_FMAC2 soap_instantiate__wsse__UsernameToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__UsernameToken * soap_new__wsse__UsernameToken(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__UsernameToken(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__UsernameToken * soap_new_req__wsse__UsernameToken(
	struct soap *soap)
{
	struct _wsse__UsernameToken *_p = ::soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	::soap_default__wsse__UsernameToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__UsernameToken * soap_new_set__wsse__UsernameToken(
	struct soap *soap,
	char *Username,
	struct _wsse__Password *Password,
	struct wsse__EncodedString *Nonce,
	char *wsu__Created,
	char *wsu__Id)
{
	struct _wsse__UsernameToken *_p = ::soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	::soap_default__wsse__UsernameToken(soap, _p);
		_p->Username = Username;
		_p->Password = Password;
		_p->Nonce = Nonce;
		_p->wsu__Created = wsu__Created;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *, const char*, const char*);

inline int soap_write__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_get__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *, const char*, const char*);

inline int soap_read__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p)
{
	if (p)
	{	::soap_default__wsse__UsernameToken(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__UsernameToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__UsernameToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p)
{
	if (::soap_read__wsse__UsernameToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsse__EncodedString_DEFINED
#define SOAP_TYPE_wsse__EncodedString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsse__EncodedString(struct soap*, struct wsse__EncodedString *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsse__EncodedString(struct soap*, const struct wsse__EncodedString *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__EncodedString(struct soap*, const char*, int, const struct wsse__EncodedString *, const char*);
SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_in_wsse__EncodedString(struct soap*, const char*, struct wsse__EncodedString *, const char*);
SOAP_FMAC1 struct wsse__EncodedString * SOAP_FMAC2 soap_instantiate_wsse__EncodedString(struct soap*, int, const char*, const char*, size_t*);

inline struct wsse__EncodedString * soap_new_wsse__EncodedString(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsse__EncodedString(soap, n, NULL, NULL, NULL);
}

inline struct wsse__EncodedString * soap_new_req_wsse__EncodedString(
	struct soap *soap)
{
	struct wsse__EncodedString *_p = ::soap_new_wsse__EncodedString(soap);
	if (_p)
	{	::soap_default_wsse__EncodedString(soap, _p);
	}
	return _p;
}

inline struct wsse__EncodedString * soap_new_set_wsse__EncodedString(
	struct soap *soap,
	char *__item,
	char *EncodingType,
	char *wsu__Id)
{
	struct wsse__EncodedString *_p = ::soap_new_wsse__EncodedString(soap);
	if (_p)
	{	::soap_default_wsse__EncodedString(soap, _p);
		_p->__item = __item;
		_p->EncodingType = EncodingType;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__EncodedString(struct soap*, const struct wsse__EncodedString *, const char*, const char*);

inline int soap_write_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_get_wsse__EncodedString(struct soap*, struct wsse__EncodedString *, const char*, const char*);

inline int soap_read_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *p)
{
	if (p)
	{	::soap_default_wsse__EncodedString(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsse__EncodedString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsse__EncodedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *p)
{
	if (::soap_read_wsse__EncodedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsu__Timestamp_DEFINED
#define SOAP_TYPE__wsu__Timestamp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsu__Timestamp(struct soap*, const char*, int, const struct _wsu__Timestamp *, const char*);
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_in__wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp *, const char*);
SOAP_FMAC1 struct _wsu__Timestamp * SOAP_FMAC2 soap_instantiate__wsu__Timestamp(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsu__Timestamp * soap_new__wsu__Timestamp(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsu__Timestamp(soap, n, NULL, NULL, NULL);
}

inline struct _wsu__Timestamp * soap_new_req__wsu__Timestamp(
	struct soap *soap)
{
	struct _wsu__Timestamp *_p = ::soap_new__wsu__Timestamp(soap);
	if (_p)
	{	::soap_default__wsu__Timestamp(soap, _p);
	}
	return _p;
}

inline struct _wsu__Timestamp * soap_new_set__wsu__Timestamp(
	struct soap *soap,
	char *wsu__Id,
	char *Created,
	char *Expires)
{
	struct _wsu__Timestamp *_p = ::soap_new__wsu__Timestamp(soap);
	if (_p)
	{	::soap_default__wsu__Timestamp(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Created = Created;
		_p->Expires = Expires;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *, const char*, const char*);

inline int soap_write__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_get__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *, const char*, const char*);

inline int soap_read__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p)
{
	if (p)
	{	::soap_default__wsu__Timestamp(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsu__Timestamp(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsu__Timestamp(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p)
{
	if (::soap_read__wsu__Timestamp(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetWarnings_DEFINED
#define SOAP_TYPE___name2__GetWarnings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetWarnings(struct soap*, struct __name2__GetWarnings *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetWarnings(struct soap*, const struct __name2__GetWarnings *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetWarnings(struct soap*, const char*, int, const struct __name2__GetWarnings *, const char*);
SOAP_FMAC3 struct __name2__GetWarnings * SOAP_FMAC4 soap_in___name2__GetWarnings(struct soap*, const char*, struct __name2__GetWarnings *, const char*);
SOAP_FMAC1 struct __name2__GetWarnings * SOAP_FMAC2 soap_instantiate___name2__GetWarnings(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetWarnings * soap_new___name2__GetWarnings(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetWarnings(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetWarnings * soap_new_req___name2__GetWarnings(
	struct soap *soap)
{
	struct __name2__GetWarnings *_p = ::soap_new___name2__GetWarnings(soap);
	if (_p)
	{	::soap_default___name2__GetWarnings(soap, _p);
	}
	return _p;
}

inline struct __name2__GetWarnings * soap_new_set___name2__GetWarnings(
	struct soap *soap,
	_tempuri__GetWarnings *tempuri__GetWarnings)
{
	struct __name2__GetWarnings *_p = ::soap_new___name2__GetWarnings(soap);
	if (_p)
	{	::soap_default___name2__GetWarnings(soap, _p);
		_p->tempuri__GetWarnings = tempuri__GetWarnings;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetWarnings(struct soap*, const struct __name2__GetWarnings *, const char*, const char*);

inline int soap_write___name2__GetWarnings(struct soap *soap, struct __name2__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetWarnings(soap, p), 0) || ::soap_put___name2__GetWarnings(soap, p, "-name2:GetWarnings", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetWarnings(struct soap *soap, const char *URL, struct __name2__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetWarnings(soap, p), 0) || ::soap_put___name2__GetWarnings(soap, p, "-name2:GetWarnings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetWarnings(struct soap *soap, const char *URL, struct __name2__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetWarnings(soap, p), 0) || ::soap_put___name2__GetWarnings(soap, p, "-name2:GetWarnings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetWarnings(struct soap *soap, const char *URL, struct __name2__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetWarnings(soap, p), 0) || ::soap_put___name2__GetWarnings(soap, p, "-name2:GetWarnings", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetWarnings * SOAP_FMAC4 soap_get___name2__GetWarnings(struct soap*, struct __name2__GetWarnings *, const char*, const char*);

inline int soap_read___name2__GetWarnings(struct soap *soap, struct __name2__GetWarnings *p)
{
	if (p)
	{	::soap_default___name2__GetWarnings(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetWarnings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetWarnings(struct soap *soap, const char *URL, struct __name2__GetWarnings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetWarnings(struct soap *soap, struct __name2__GetWarnings *p)
{
	if (::soap_read___name2__GetWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__HasWarnings_DEFINED
#define SOAP_TYPE___name2__HasWarnings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__HasWarnings(struct soap*, struct __name2__HasWarnings *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__HasWarnings(struct soap*, const struct __name2__HasWarnings *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__HasWarnings(struct soap*, const char*, int, const struct __name2__HasWarnings *, const char*);
SOAP_FMAC3 struct __name2__HasWarnings * SOAP_FMAC4 soap_in___name2__HasWarnings(struct soap*, const char*, struct __name2__HasWarnings *, const char*);
SOAP_FMAC1 struct __name2__HasWarnings * SOAP_FMAC2 soap_instantiate___name2__HasWarnings(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__HasWarnings * soap_new___name2__HasWarnings(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__HasWarnings(soap, n, NULL, NULL, NULL);
}

inline struct __name2__HasWarnings * soap_new_req___name2__HasWarnings(
	struct soap *soap)
{
	struct __name2__HasWarnings *_p = ::soap_new___name2__HasWarnings(soap);
	if (_p)
	{	::soap_default___name2__HasWarnings(soap, _p);
	}
	return _p;
}

inline struct __name2__HasWarnings * soap_new_set___name2__HasWarnings(
	struct soap *soap,
	_tempuri__HasWarnings *tempuri__HasWarnings)
{
	struct __name2__HasWarnings *_p = ::soap_new___name2__HasWarnings(soap);
	if (_p)
	{	::soap_default___name2__HasWarnings(soap, _p);
		_p->tempuri__HasWarnings = tempuri__HasWarnings;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__HasWarnings(struct soap*, const struct __name2__HasWarnings *, const char*, const char*);

inline int soap_write___name2__HasWarnings(struct soap *soap, struct __name2__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__HasWarnings(soap, p), 0) || ::soap_put___name2__HasWarnings(soap, p, "-name2:HasWarnings", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__HasWarnings(struct soap *soap, const char *URL, struct __name2__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__HasWarnings(soap, p), 0) || ::soap_put___name2__HasWarnings(soap, p, "-name2:HasWarnings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__HasWarnings(struct soap *soap, const char *URL, struct __name2__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__HasWarnings(soap, p), 0) || ::soap_put___name2__HasWarnings(soap, p, "-name2:HasWarnings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__HasWarnings(struct soap *soap, const char *URL, struct __name2__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__HasWarnings(soap, p), 0) || ::soap_put___name2__HasWarnings(soap, p, "-name2:HasWarnings", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__HasWarnings * SOAP_FMAC4 soap_get___name2__HasWarnings(struct soap*, struct __name2__HasWarnings *, const char*, const char*);

inline int soap_read___name2__HasWarnings(struct soap *soap, struct __name2__HasWarnings *p)
{
	if (p)
	{	::soap_default___name2__HasWarnings(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__HasWarnings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__HasWarnings(struct soap *soap, const char *URL, struct __name2__HasWarnings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__HasWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__HasWarnings(struct soap *soap, struct __name2__HasWarnings *p)
{
	if (::soap_read___name2__HasWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetErrors_DEFINED
#define SOAP_TYPE___name2__GetErrors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetErrors(struct soap*, struct __name2__GetErrors *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetErrors(struct soap*, const struct __name2__GetErrors *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetErrors(struct soap*, const char*, int, const struct __name2__GetErrors *, const char*);
SOAP_FMAC3 struct __name2__GetErrors * SOAP_FMAC4 soap_in___name2__GetErrors(struct soap*, const char*, struct __name2__GetErrors *, const char*);
SOAP_FMAC1 struct __name2__GetErrors * SOAP_FMAC2 soap_instantiate___name2__GetErrors(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetErrors * soap_new___name2__GetErrors(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetErrors(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetErrors * soap_new_req___name2__GetErrors(
	struct soap *soap)
{
	struct __name2__GetErrors *_p = ::soap_new___name2__GetErrors(soap);
	if (_p)
	{	::soap_default___name2__GetErrors(soap, _p);
	}
	return _p;
}

inline struct __name2__GetErrors * soap_new_set___name2__GetErrors(
	struct soap *soap,
	_tempuri__GetErrors *tempuri__GetErrors)
{
	struct __name2__GetErrors *_p = ::soap_new___name2__GetErrors(soap);
	if (_p)
	{	::soap_default___name2__GetErrors(soap, _p);
		_p->tempuri__GetErrors = tempuri__GetErrors;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetErrors(struct soap*, const struct __name2__GetErrors *, const char*, const char*);

inline int soap_write___name2__GetErrors(struct soap *soap, struct __name2__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetErrors(soap, p), 0) || ::soap_put___name2__GetErrors(soap, p, "-name2:GetErrors", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetErrors(struct soap *soap, const char *URL, struct __name2__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetErrors(soap, p), 0) || ::soap_put___name2__GetErrors(soap, p, "-name2:GetErrors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetErrors(struct soap *soap, const char *URL, struct __name2__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetErrors(soap, p), 0) || ::soap_put___name2__GetErrors(soap, p, "-name2:GetErrors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetErrors(struct soap *soap, const char *URL, struct __name2__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetErrors(soap, p), 0) || ::soap_put___name2__GetErrors(soap, p, "-name2:GetErrors", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetErrors * SOAP_FMAC4 soap_get___name2__GetErrors(struct soap*, struct __name2__GetErrors *, const char*, const char*);

inline int soap_read___name2__GetErrors(struct soap *soap, struct __name2__GetErrors *p)
{
	if (p)
	{	::soap_default___name2__GetErrors(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetErrors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetErrors(struct soap *soap, const char *URL, struct __name2__GetErrors *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetErrors(struct soap *soap, struct __name2__GetErrors *p)
{
	if (::soap_read___name2__GetErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__HasErrors_DEFINED
#define SOAP_TYPE___name2__HasErrors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__HasErrors(struct soap*, struct __name2__HasErrors *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__HasErrors(struct soap*, const struct __name2__HasErrors *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__HasErrors(struct soap*, const char*, int, const struct __name2__HasErrors *, const char*);
SOAP_FMAC3 struct __name2__HasErrors * SOAP_FMAC4 soap_in___name2__HasErrors(struct soap*, const char*, struct __name2__HasErrors *, const char*);
SOAP_FMAC1 struct __name2__HasErrors * SOAP_FMAC2 soap_instantiate___name2__HasErrors(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__HasErrors * soap_new___name2__HasErrors(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__HasErrors(soap, n, NULL, NULL, NULL);
}

inline struct __name2__HasErrors * soap_new_req___name2__HasErrors(
	struct soap *soap)
{
	struct __name2__HasErrors *_p = ::soap_new___name2__HasErrors(soap);
	if (_p)
	{	::soap_default___name2__HasErrors(soap, _p);
	}
	return _p;
}

inline struct __name2__HasErrors * soap_new_set___name2__HasErrors(
	struct soap *soap,
	_tempuri__HasErrors *tempuri__HasErrors)
{
	struct __name2__HasErrors *_p = ::soap_new___name2__HasErrors(soap);
	if (_p)
	{	::soap_default___name2__HasErrors(soap, _p);
		_p->tempuri__HasErrors = tempuri__HasErrors;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__HasErrors(struct soap*, const struct __name2__HasErrors *, const char*, const char*);

inline int soap_write___name2__HasErrors(struct soap *soap, struct __name2__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__HasErrors(soap, p), 0) || ::soap_put___name2__HasErrors(soap, p, "-name2:HasErrors", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__HasErrors(struct soap *soap, const char *URL, struct __name2__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__HasErrors(soap, p), 0) || ::soap_put___name2__HasErrors(soap, p, "-name2:HasErrors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__HasErrors(struct soap *soap, const char *URL, struct __name2__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__HasErrors(soap, p), 0) || ::soap_put___name2__HasErrors(soap, p, "-name2:HasErrors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__HasErrors(struct soap *soap, const char *URL, struct __name2__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__HasErrors(soap, p), 0) || ::soap_put___name2__HasErrors(soap, p, "-name2:HasErrors", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__HasErrors * SOAP_FMAC4 soap_get___name2__HasErrors(struct soap*, struct __name2__HasErrors *, const char*, const char*);

inline int soap_read___name2__HasErrors(struct soap *soap, struct __name2__HasErrors *p)
{
	if (p)
	{	::soap_default___name2__HasErrors(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__HasErrors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__HasErrors(struct soap *soap, const char *URL, struct __name2__HasErrors *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__HasErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__HasErrors(struct soap *soap, struct __name2__HasErrors *p)
{
	if (::soap_read___name2__HasErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetMessage_DEFINED
#define SOAP_TYPE___name2__GetMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetMessage(struct soap*, struct __name2__GetMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetMessage(struct soap*, const struct __name2__GetMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetMessage(struct soap*, const char*, int, const struct __name2__GetMessage *, const char*);
SOAP_FMAC3 struct __name2__GetMessage * SOAP_FMAC4 soap_in___name2__GetMessage(struct soap*, const char*, struct __name2__GetMessage *, const char*);
SOAP_FMAC1 struct __name2__GetMessage * SOAP_FMAC2 soap_instantiate___name2__GetMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetMessage * soap_new___name2__GetMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetMessage(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetMessage * soap_new_req___name2__GetMessage(
	struct soap *soap)
{
	struct __name2__GetMessage *_p = ::soap_new___name2__GetMessage(soap);
	if (_p)
	{	::soap_default___name2__GetMessage(soap, _p);
	}
	return _p;
}

inline struct __name2__GetMessage * soap_new_set___name2__GetMessage(
	struct soap *soap,
	_tempuri__GetMessage *tempuri__GetMessage)
{
	struct __name2__GetMessage *_p = ::soap_new___name2__GetMessage(soap);
	if (_p)
	{	::soap_default___name2__GetMessage(soap, _p);
		_p->tempuri__GetMessage = tempuri__GetMessage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetMessage(struct soap*, const struct __name2__GetMessage *, const char*, const char*);

inline int soap_write___name2__GetMessage(struct soap *soap, struct __name2__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetMessage(soap, p), 0) || ::soap_put___name2__GetMessage(soap, p, "-name2:GetMessage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetMessage(struct soap *soap, const char *URL, struct __name2__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetMessage(soap, p), 0) || ::soap_put___name2__GetMessage(soap, p, "-name2:GetMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetMessage(struct soap *soap, const char *URL, struct __name2__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetMessage(soap, p), 0) || ::soap_put___name2__GetMessage(soap, p, "-name2:GetMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetMessage(struct soap *soap, const char *URL, struct __name2__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetMessage(soap, p), 0) || ::soap_put___name2__GetMessage(soap, p, "-name2:GetMessage", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetMessage * SOAP_FMAC4 soap_get___name2__GetMessage(struct soap*, struct __name2__GetMessage *, const char*, const char*);

inline int soap_read___name2__GetMessage(struct soap *soap, struct __name2__GetMessage *p)
{
	if (p)
	{	::soap_default___name2__GetMessage(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetMessage(struct soap *soap, const char *URL, struct __name2__GetMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetMessage(struct soap *soap, struct __name2__GetMessage *p)
{
	if (::soap_read___name2__GetMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__HasMessage_DEFINED
#define SOAP_TYPE___name2__HasMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__HasMessage(struct soap*, struct __name2__HasMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__HasMessage(struct soap*, const struct __name2__HasMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__HasMessage(struct soap*, const char*, int, const struct __name2__HasMessage *, const char*);
SOAP_FMAC3 struct __name2__HasMessage * SOAP_FMAC4 soap_in___name2__HasMessage(struct soap*, const char*, struct __name2__HasMessage *, const char*);
SOAP_FMAC1 struct __name2__HasMessage * SOAP_FMAC2 soap_instantiate___name2__HasMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__HasMessage * soap_new___name2__HasMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__HasMessage(soap, n, NULL, NULL, NULL);
}

inline struct __name2__HasMessage * soap_new_req___name2__HasMessage(
	struct soap *soap)
{
	struct __name2__HasMessage *_p = ::soap_new___name2__HasMessage(soap);
	if (_p)
	{	::soap_default___name2__HasMessage(soap, _p);
	}
	return _p;
}

inline struct __name2__HasMessage * soap_new_set___name2__HasMessage(
	struct soap *soap,
	_tempuri__HasMessage *tempuri__HasMessage)
{
	struct __name2__HasMessage *_p = ::soap_new___name2__HasMessage(soap);
	if (_p)
	{	::soap_default___name2__HasMessage(soap, _p);
		_p->tempuri__HasMessage = tempuri__HasMessage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__HasMessage(struct soap*, const struct __name2__HasMessage *, const char*, const char*);

inline int soap_write___name2__HasMessage(struct soap *soap, struct __name2__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__HasMessage(soap, p), 0) || ::soap_put___name2__HasMessage(soap, p, "-name2:HasMessage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__HasMessage(struct soap *soap, const char *URL, struct __name2__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__HasMessage(soap, p), 0) || ::soap_put___name2__HasMessage(soap, p, "-name2:HasMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__HasMessage(struct soap *soap, const char *URL, struct __name2__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__HasMessage(soap, p), 0) || ::soap_put___name2__HasMessage(soap, p, "-name2:HasMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__HasMessage(struct soap *soap, const char *URL, struct __name2__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__HasMessage(soap, p), 0) || ::soap_put___name2__HasMessage(soap, p, "-name2:HasMessage", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__HasMessage * SOAP_FMAC4 soap_get___name2__HasMessage(struct soap*, struct __name2__HasMessage *, const char*, const char*);

inline int soap_read___name2__HasMessage(struct soap *soap, struct __name2__HasMessage *p)
{
	if (p)
	{	::soap_default___name2__HasMessage(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__HasMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__HasMessage(struct soap *soap, const char *URL, struct __name2__HasMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__HasMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__HasMessage(struct soap *soap, struct __name2__HasMessage *p)
{
	if (::soap_read___name2__HasMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__IsSamplePlateTrayIn_DEFINED
#define SOAP_TYPE___name2__IsSamplePlateTrayIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__IsSamplePlateTrayIn(struct soap*, struct __name2__IsSamplePlateTrayIn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__IsSamplePlateTrayIn(struct soap*, const struct __name2__IsSamplePlateTrayIn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__IsSamplePlateTrayIn(struct soap*, const char*, int, const struct __name2__IsSamplePlateTrayIn *, const char*);
SOAP_FMAC3 struct __name2__IsSamplePlateTrayIn * SOAP_FMAC4 soap_in___name2__IsSamplePlateTrayIn(struct soap*, const char*, struct __name2__IsSamplePlateTrayIn *, const char*);
SOAP_FMAC1 struct __name2__IsSamplePlateTrayIn * SOAP_FMAC2 soap_instantiate___name2__IsSamplePlateTrayIn(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__IsSamplePlateTrayIn * soap_new___name2__IsSamplePlateTrayIn(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__IsSamplePlateTrayIn(soap, n, NULL, NULL, NULL);
}

inline struct __name2__IsSamplePlateTrayIn * soap_new_req___name2__IsSamplePlateTrayIn(
	struct soap *soap)
{
	struct __name2__IsSamplePlateTrayIn *_p = ::soap_new___name2__IsSamplePlateTrayIn(soap);
	if (_p)
	{	::soap_default___name2__IsSamplePlateTrayIn(soap, _p);
	}
	return _p;
}

inline struct __name2__IsSamplePlateTrayIn * soap_new_set___name2__IsSamplePlateTrayIn(
	struct soap *soap,
	_tempuri__IsSamplePlateTrayIn *tempuri__IsSamplePlateTrayIn)
{
	struct __name2__IsSamplePlateTrayIn *_p = ::soap_new___name2__IsSamplePlateTrayIn(soap);
	if (_p)
	{	::soap_default___name2__IsSamplePlateTrayIn(soap, _p);
		_p->tempuri__IsSamplePlateTrayIn = tempuri__IsSamplePlateTrayIn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__IsSamplePlateTrayIn(struct soap*, const struct __name2__IsSamplePlateTrayIn *, const char*, const char*);

inline int soap_write___name2__IsSamplePlateTrayIn(struct soap *soap, struct __name2__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__IsSamplePlateTrayIn(soap, p), 0) || ::soap_put___name2__IsSamplePlateTrayIn(soap, p, "-name2:IsSamplePlateTrayIn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__IsSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name2__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__IsSamplePlateTrayIn(soap, p), 0) || ::soap_put___name2__IsSamplePlateTrayIn(soap, p, "-name2:IsSamplePlateTrayIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__IsSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name2__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__IsSamplePlateTrayIn(soap, p), 0) || ::soap_put___name2__IsSamplePlateTrayIn(soap, p, "-name2:IsSamplePlateTrayIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__IsSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name2__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__IsSamplePlateTrayIn(soap, p), 0) || ::soap_put___name2__IsSamplePlateTrayIn(soap, p, "-name2:IsSamplePlateTrayIn", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__IsSamplePlateTrayIn * SOAP_FMAC4 soap_get___name2__IsSamplePlateTrayIn(struct soap*, struct __name2__IsSamplePlateTrayIn *, const char*, const char*);

inline int soap_read___name2__IsSamplePlateTrayIn(struct soap *soap, struct __name2__IsSamplePlateTrayIn *p)
{
	if (p)
	{	::soap_default___name2__IsSamplePlateTrayIn(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__IsSamplePlateTrayIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__IsSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name2__IsSamplePlateTrayIn *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__IsSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__IsSamplePlateTrayIn(struct soap *soap, struct __name2__IsSamplePlateTrayIn *p)
{
	if (::soap_read___name2__IsSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__IsChipDocked_DEFINED
#define SOAP_TYPE___name2__IsChipDocked_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__IsChipDocked(struct soap*, struct __name2__IsChipDocked *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__IsChipDocked(struct soap*, const struct __name2__IsChipDocked *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__IsChipDocked(struct soap*, const char*, int, const struct __name2__IsChipDocked *, const char*);
SOAP_FMAC3 struct __name2__IsChipDocked * SOAP_FMAC4 soap_in___name2__IsChipDocked(struct soap*, const char*, struct __name2__IsChipDocked *, const char*);
SOAP_FMAC1 struct __name2__IsChipDocked * SOAP_FMAC2 soap_instantiate___name2__IsChipDocked(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__IsChipDocked * soap_new___name2__IsChipDocked(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__IsChipDocked(soap, n, NULL, NULL, NULL);
}

inline struct __name2__IsChipDocked * soap_new_req___name2__IsChipDocked(
	struct soap *soap)
{
	struct __name2__IsChipDocked *_p = ::soap_new___name2__IsChipDocked(soap);
	if (_p)
	{	::soap_default___name2__IsChipDocked(soap, _p);
	}
	return _p;
}

inline struct __name2__IsChipDocked * soap_new_set___name2__IsChipDocked(
	struct soap *soap,
	_tempuri__IsChipDocked *tempuri__IsChipDocked)
{
	struct __name2__IsChipDocked *_p = ::soap_new___name2__IsChipDocked(soap);
	if (_p)
	{	::soap_default___name2__IsChipDocked(soap, _p);
		_p->tempuri__IsChipDocked = tempuri__IsChipDocked;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__IsChipDocked(struct soap*, const struct __name2__IsChipDocked *, const char*, const char*);

inline int soap_write___name2__IsChipDocked(struct soap *soap, struct __name2__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__IsChipDocked(soap, p), 0) || ::soap_put___name2__IsChipDocked(soap, p, "-name2:IsChipDocked", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__IsChipDocked(struct soap *soap, const char *URL, struct __name2__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__IsChipDocked(soap, p), 0) || ::soap_put___name2__IsChipDocked(soap, p, "-name2:IsChipDocked", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__IsChipDocked(struct soap *soap, const char *URL, struct __name2__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__IsChipDocked(soap, p), 0) || ::soap_put___name2__IsChipDocked(soap, p, "-name2:IsChipDocked", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__IsChipDocked(struct soap *soap, const char *URL, struct __name2__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__IsChipDocked(soap, p), 0) || ::soap_put___name2__IsChipDocked(soap, p, "-name2:IsChipDocked", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__IsChipDocked * SOAP_FMAC4 soap_get___name2__IsChipDocked(struct soap*, struct __name2__IsChipDocked *, const char*, const char*);

inline int soap_read___name2__IsChipDocked(struct soap *soap, struct __name2__IsChipDocked *p)
{
	if (p)
	{	::soap_default___name2__IsChipDocked(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__IsChipDocked(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__IsChipDocked(struct soap *soap, const char *URL, struct __name2__IsChipDocked *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__IsChipDocked(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__IsChipDocked(struct soap *soap, struct __name2__IsChipDocked *p)
{
	if (::soap_read___name2__IsChipDocked(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetOperationMode_DEFINED
#define SOAP_TYPE___name2__GetOperationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetOperationMode(struct soap*, struct __name2__GetOperationMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetOperationMode(struct soap*, const struct __name2__GetOperationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetOperationMode(struct soap*, const char*, int, const struct __name2__GetOperationMode *, const char*);
SOAP_FMAC3 struct __name2__GetOperationMode * SOAP_FMAC4 soap_in___name2__GetOperationMode(struct soap*, const char*, struct __name2__GetOperationMode *, const char*);
SOAP_FMAC1 struct __name2__GetOperationMode * SOAP_FMAC2 soap_instantiate___name2__GetOperationMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetOperationMode * soap_new___name2__GetOperationMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetOperationMode(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetOperationMode * soap_new_req___name2__GetOperationMode(
	struct soap *soap)
{
	struct __name2__GetOperationMode *_p = ::soap_new___name2__GetOperationMode(soap);
	if (_p)
	{	::soap_default___name2__GetOperationMode(soap, _p);
	}
	return _p;
}

inline struct __name2__GetOperationMode * soap_new_set___name2__GetOperationMode(
	struct soap *soap,
	_tempuri__GetOperationMode *tempuri__GetOperationMode)
{
	struct __name2__GetOperationMode *_p = ::soap_new___name2__GetOperationMode(soap);
	if (_p)
	{	::soap_default___name2__GetOperationMode(soap, _p);
		_p->tempuri__GetOperationMode = tempuri__GetOperationMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetOperationMode(struct soap*, const struct __name2__GetOperationMode *, const char*, const char*);

inline int soap_write___name2__GetOperationMode(struct soap *soap, struct __name2__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetOperationMode(soap, p), 0) || ::soap_put___name2__GetOperationMode(soap, p, "-name2:GetOperationMode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetOperationMode(struct soap *soap, const char *URL, struct __name2__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetOperationMode(soap, p), 0) || ::soap_put___name2__GetOperationMode(soap, p, "-name2:GetOperationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetOperationMode(struct soap *soap, const char *URL, struct __name2__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetOperationMode(soap, p), 0) || ::soap_put___name2__GetOperationMode(soap, p, "-name2:GetOperationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetOperationMode(struct soap *soap, const char *URL, struct __name2__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetOperationMode(soap, p), 0) || ::soap_put___name2__GetOperationMode(soap, p, "-name2:GetOperationMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetOperationMode * SOAP_FMAC4 soap_get___name2__GetOperationMode(struct soap*, struct __name2__GetOperationMode *, const char*, const char*);

inline int soap_read___name2__GetOperationMode(struct soap *soap, struct __name2__GetOperationMode *p)
{
	if (p)
	{	::soap_default___name2__GetOperationMode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetOperationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetOperationMode(struct soap *soap, const char *URL, struct __name2__GetOperationMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetOperationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetOperationMode(struct soap *soap, struct __name2__GetOperationMode *p)
{
	if (::soap_read___name2__GetOperationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__RunMaintenanceProcedure_DEFINED
#define SOAP_TYPE___name2__RunMaintenanceProcedure_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__RunMaintenanceProcedure(struct soap*, struct __name2__RunMaintenanceProcedure *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__RunMaintenanceProcedure(struct soap*, const struct __name2__RunMaintenanceProcedure *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__RunMaintenanceProcedure(struct soap*, const char*, int, const struct __name2__RunMaintenanceProcedure *, const char*);
SOAP_FMAC3 struct __name2__RunMaintenanceProcedure * SOAP_FMAC4 soap_in___name2__RunMaintenanceProcedure(struct soap*, const char*, struct __name2__RunMaintenanceProcedure *, const char*);
SOAP_FMAC1 struct __name2__RunMaintenanceProcedure * SOAP_FMAC2 soap_instantiate___name2__RunMaintenanceProcedure(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__RunMaintenanceProcedure * soap_new___name2__RunMaintenanceProcedure(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__RunMaintenanceProcedure(soap, n, NULL, NULL, NULL);
}

inline struct __name2__RunMaintenanceProcedure * soap_new_req___name2__RunMaintenanceProcedure(
	struct soap *soap)
{
	struct __name2__RunMaintenanceProcedure *_p = ::soap_new___name2__RunMaintenanceProcedure(soap);
	if (_p)
	{	::soap_default___name2__RunMaintenanceProcedure(soap, _p);
	}
	return _p;
}

inline struct __name2__RunMaintenanceProcedure * soap_new_set___name2__RunMaintenanceProcedure(
	struct soap *soap,
	_tempuri__RunMaintenanceProcedure *tempuri__RunMaintenanceProcedure)
{
	struct __name2__RunMaintenanceProcedure *_p = ::soap_new___name2__RunMaintenanceProcedure(soap);
	if (_p)
	{	::soap_default___name2__RunMaintenanceProcedure(soap, _p);
		_p->tempuri__RunMaintenanceProcedure = tempuri__RunMaintenanceProcedure;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__RunMaintenanceProcedure(struct soap*, const struct __name2__RunMaintenanceProcedure *, const char*, const char*);

inline int soap_write___name2__RunMaintenanceProcedure(struct soap *soap, struct __name2__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__RunMaintenanceProcedure(soap, p), 0) || ::soap_put___name2__RunMaintenanceProcedure(soap, p, "-name2:RunMaintenanceProcedure", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__RunMaintenanceProcedure(struct soap *soap, const char *URL, struct __name2__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__RunMaintenanceProcedure(soap, p), 0) || ::soap_put___name2__RunMaintenanceProcedure(soap, p, "-name2:RunMaintenanceProcedure", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__RunMaintenanceProcedure(struct soap *soap, const char *URL, struct __name2__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__RunMaintenanceProcedure(soap, p), 0) || ::soap_put___name2__RunMaintenanceProcedure(soap, p, "-name2:RunMaintenanceProcedure", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__RunMaintenanceProcedure(struct soap *soap, const char *URL, struct __name2__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__RunMaintenanceProcedure(soap, p), 0) || ::soap_put___name2__RunMaintenanceProcedure(soap, p, "-name2:RunMaintenanceProcedure", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__RunMaintenanceProcedure * SOAP_FMAC4 soap_get___name2__RunMaintenanceProcedure(struct soap*, struct __name2__RunMaintenanceProcedure *, const char*, const char*);

inline int soap_read___name2__RunMaintenanceProcedure(struct soap *soap, struct __name2__RunMaintenanceProcedure *p)
{
	if (p)
	{	::soap_default___name2__RunMaintenanceProcedure(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__RunMaintenanceProcedure(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__RunMaintenanceProcedure(struct soap *soap, const char *URL, struct __name2__RunMaintenanceProcedure *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__RunMaintenanceProcedure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__RunMaintenanceProcedure(struct soap *soap, struct __name2__RunMaintenanceProcedure *p)
{
	if (::soap_read___name2__RunMaintenanceProcedure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetNamesOfMaintenanceProcedures_DEFINED
#define SOAP_TYPE___name2__GetNamesOfMaintenanceProcedures_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetNamesOfMaintenanceProcedures(struct soap*, struct __name2__GetNamesOfMaintenanceProcedures *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetNamesOfMaintenanceProcedures(struct soap*, const struct __name2__GetNamesOfMaintenanceProcedures *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetNamesOfMaintenanceProcedures(struct soap*, const char*, int, const struct __name2__GetNamesOfMaintenanceProcedures *, const char*);
SOAP_FMAC3 struct __name2__GetNamesOfMaintenanceProcedures * SOAP_FMAC4 soap_in___name2__GetNamesOfMaintenanceProcedures(struct soap*, const char*, struct __name2__GetNamesOfMaintenanceProcedures *, const char*);
SOAP_FMAC1 struct __name2__GetNamesOfMaintenanceProcedures * SOAP_FMAC2 soap_instantiate___name2__GetNamesOfMaintenanceProcedures(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetNamesOfMaintenanceProcedures * soap_new___name2__GetNamesOfMaintenanceProcedures(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetNamesOfMaintenanceProcedures(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetNamesOfMaintenanceProcedures * soap_new_req___name2__GetNamesOfMaintenanceProcedures(
	struct soap *soap)
{
	struct __name2__GetNamesOfMaintenanceProcedures *_p = ::soap_new___name2__GetNamesOfMaintenanceProcedures(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfMaintenanceProcedures(soap, _p);
	}
	return _p;
}

inline struct __name2__GetNamesOfMaintenanceProcedures * soap_new_set___name2__GetNamesOfMaintenanceProcedures(
	struct soap *soap,
	_tempuri__GetNamesOfMaintenanceProcedures *tempuri__GetNamesOfMaintenanceProcedures)
{
	struct __name2__GetNamesOfMaintenanceProcedures *_p = ::soap_new___name2__GetNamesOfMaintenanceProcedures(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfMaintenanceProcedures(soap, _p);
		_p->tempuri__GetNamesOfMaintenanceProcedures = tempuri__GetNamesOfMaintenanceProcedures;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetNamesOfMaintenanceProcedures(struct soap*, const struct __name2__GetNamesOfMaintenanceProcedures *, const char*, const char*);

inline int soap_write___name2__GetNamesOfMaintenanceProcedures(struct soap *soap, struct __name2__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetNamesOfMaintenanceProcedures(soap, p), 0) || ::soap_put___name2__GetNamesOfMaintenanceProcedures(soap, p, "-name2:GetNamesOfMaintenanceProcedures", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, struct __name2__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfMaintenanceProcedures(soap, p), 0) || ::soap_put___name2__GetNamesOfMaintenanceProcedures(soap, p, "-name2:GetNamesOfMaintenanceProcedures", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, struct __name2__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfMaintenanceProcedures(soap, p), 0) || ::soap_put___name2__GetNamesOfMaintenanceProcedures(soap, p, "-name2:GetNamesOfMaintenanceProcedures", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, struct __name2__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfMaintenanceProcedures(soap, p), 0) || ::soap_put___name2__GetNamesOfMaintenanceProcedures(soap, p, "-name2:GetNamesOfMaintenanceProcedures", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetNamesOfMaintenanceProcedures * SOAP_FMAC4 soap_get___name2__GetNamesOfMaintenanceProcedures(struct soap*, struct __name2__GetNamesOfMaintenanceProcedures *, const char*, const char*);

inline int soap_read___name2__GetNamesOfMaintenanceProcedures(struct soap *soap, struct __name2__GetNamesOfMaintenanceProcedures *p)
{
	if (p)
	{	::soap_default___name2__GetNamesOfMaintenanceProcedures(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetNamesOfMaintenanceProcedures(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, struct __name2__GetNamesOfMaintenanceProcedures *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetNamesOfMaintenanceProcedures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetNamesOfMaintenanceProcedures(struct soap *soap, struct __name2__GetNamesOfMaintenanceProcedures *p)
{
	if (::soap_read___name2__GetNamesOfMaintenanceProcedures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetStandbyAfterFinish_DEFINED
#define SOAP_TYPE___name2__GetStandbyAfterFinish_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetStandbyAfterFinish(struct soap*, struct __name2__GetStandbyAfterFinish *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetStandbyAfterFinish(struct soap*, const struct __name2__GetStandbyAfterFinish *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetStandbyAfterFinish(struct soap*, const char*, int, const struct __name2__GetStandbyAfterFinish *, const char*);
SOAP_FMAC3 struct __name2__GetStandbyAfterFinish * SOAP_FMAC4 soap_in___name2__GetStandbyAfterFinish(struct soap*, const char*, struct __name2__GetStandbyAfterFinish *, const char*);
SOAP_FMAC1 struct __name2__GetStandbyAfterFinish * SOAP_FMAC2 soap_instantiate___name2__GetStandbyAfterFinish(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetStandbyAfterFinish * soap_new___name2__GetStandbyAfterFinish(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetStandbyAfterFinish(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetStandbyAfterFinish * soap_new_req___name2__GetStandbyAfterFinish(
	struct soap *soap)
{
	struct __name2__GetStandbyAfterFinish *_p = ::soap_new___name2__GetStandbyAfterFinish(soap);
	if (_p)
	{	::soap_default___name2__GetStandbyAfterFinish(soap, _p);
	}
	return _p;
}

inline struct __name2__GetStandbyAfterFinish * soap_new_set___name2__GetStandbyAfterFinish(
	struct soap *soap,
	_tempuri__GetStandbyAfterFinish *tempuri__GetStandbyAfterFinish)
{
	struct __name2__GetStandbyAfterFinish *_p = ::soap_new___name2__GetStandbyAfterFinish(soap);
	if (_p)
	{	::soap_default___name2__GetStandbyAfterFinish(soap, _p);
		_p->tempuri__GetStandbyAfterFinish = tempuri__GetStandbyAfterFinish;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetStandbyAfterFinish(struct soap*, const struct __name2__GetStandbyAfterFinish *, const char*, const char*);

inline int soap_write___name2__GetStandbyAfterFinish(struct soap *soap, struct __name2__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetStandbyAfterFinish(soap, p), 0) || ::soap_put___name2__GetStandbyAfterFinish(soap, p, "-name2:GetStandbyAfterFinish", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name2__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetStandbyAfterFinish(soap, p), 0) || ::soap_put___name2__GetStandbyAfterFinish(soap, p, "-name2:GetStandbyAfterFinish", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name2__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetStandbyAfterFinish(soap, p), 0) || ::soap_put___name2__GetStandbyAfterFinish(soap, p, "-name2:GetStandbyAfterFinish", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name2__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetStandbyAfterFinish(soap, p), 0) || ::soap_put___name2__GetStandbyAfterFinish(soap, p, "-name2:GetStandbyAfterFinish", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetStandbyAfterFinish * SOAP_FMAC4 soap_get___name2__GetStandbyAfterFinish(struct soap*, struct __name2__GetStandbyAfterFinish *, const char*, const char*);

inline int soap_read___name2__GetStandbyAfterFinish(struct soap *soap, struct __name2__GetStandbyAfterFinish *p)
{
	if (p)
	{	::soap_default___name2__GetStandbyAfterFinish(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetStandbyAfterFinish(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name2__GetStandbyAfterFinish *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetStandbyAfterFinish(struct soap *soap, struct __name2__GetStandbyAfterFinish *p)
{
	if (::soap_read___name2__GetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__SetStandbyAfterFinish_DEFINED
#define SOAP_TYPE___name2__SetStandbyAfterFinish_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__SetStandbyAfterFinish(struct soap*, struct __name2__SetStandbyAfterFinish *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__SetStandbyAfterFinish(struct soap*, const struct __name2__SetStandbyAfterFinish *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__SetStandbyAfterFinish(struct soap*, const char*, int, const struct __name2__SetStandbyAfterFinish *, const char*);
SOAP_FMAC3 struct __name2__SetStandbyAfterFinish * SOAP_FMAC4 soap_in___name2__SetStandbyAfterFinish(struct soap*, const char*, struct __name2__SetStandbyAfterFinish *, const char*);
SOAP_FMAC1 struct __name2__SetStandbyAfterFinish * SOAP_FMAC2 soap_instantiate___name2__SetStandbyAfterFinish(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__SetStandbyAfterFinish * soap_new___name2__SetStandbyAfterFinish(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__SetStandbyAfterFinish(soap, n, NULL, NULL, NULL);
}

inline struct __name2__SetStandbyAfterFinish * soap_new_req___name2__SetStandbyAfterFinish(
	struct soap *soap)
{
	struct __name2__SetStandbyAfterFinish *_p = ::soap_new___name2__SetStandbyAfterFinish(soap);
	if (_p)
	{	::soap_default___name2__SetStandbyAfterFinish(soap, _p);
	}
	return _p;
}

inline struct __name2__SetStandbyAfterFinish * soap_new_set___name2__SetStandbyAfterFinish(
	struct soap *soap,
	_tempuri__SetStandbyAfterFinish *tempuri__SetStandbyAfterFinish)
{
	struct __name2__SetStandbyAfterFinish *_p = ::soap_new___name2__SetStandbyAfterFinish(soap);
	if (_p)
	{	::soap_default___name2__SetStandbyAfterFinish(soap, _p);
		_p->tempuri__SetStandbyAfterFinish = tempuri__SetStandbyAfterFinish;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__SetStandbyAfterFinish(struct soap*, const struct __name2__SetStandbyAfterFinish *, const char*, const char*);

inline int soap_write___name2__SetStandbyAfterFinish(struct soap *soap, struct __name2__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__SetStandbyAfterFinish(soap, p), 0) || ::soap_put___name2__SetStandbyAfterFinish(soap, p, "-name2:SetStandbyAfterFinish", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__SetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name2__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SetStandbyAfterFinish(soap, p), 0) || ::soap_put___name2__SetStandbyAfterFinish(soap, p, "-name2:SetStandbyAfterFinish", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__SetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name2__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SetStandbyAfterFinish(soap, p), 0) || ::soap_put___name2__SetStandbyAfterFinish(soap, p, "-name2:SetStandbyAfterFinish", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__SetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name2__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SetStandbyAfterFinish(soap, p), 0) || ::soap_put___name2__SetStandbyAfterFinish(soap, p, "-name2:SetStandbyAfterFinish", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__SetStandbyAfterFinish * SOAP_FMAC4 soap_get___name2__SetStandbyAfterFinish(struct soap*, struct __name2__SetStandbyAfterFinish *, const char*, const char*);

inline int soap_read___name2__SetStandbyAfterFinish(struct soap *soap, struct __name2__SetStandbyAfterFinish *p)
{
	if (p)
	{	::soap_default___name2__SetStandbyAfterFinish(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__SetStandbyAfterFinish(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__SetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name2__SetStandbyAfterFinish *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__SetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__SetStandbyAfterFinish(struct soap *soap, struct __name2__SetStandbyAfterFinish *p)
{
	if (::soap_read___name2__SetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__LeaveStandby_DEFINED
#define SOAP_TYPE___name2__LeaveStandby_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__LeaveStandby(struct soap*, struct __name2__LeaveStandby *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__LeaveStandby(struct soap*, const struct __name2__LeaveStandby *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__LeaveStandby(struct soap*, const char*, int, const struct __name2__LeaveStandby *, const char*);
SOAP_FMAC3 struct __name2__LeaveStandby * SOAP_FMAC4 soap_in___name2__LeaveStandby(struct soap*, const char*, struct __name2__LeaveStandby *, const char*);
SOAP_FMAC1 struct __name2__LeaveStandby * SOAP_FMAC2 soap_instantiate___name2__LeaveStandby(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__LeaveStandby * soap_new___name2__LeaveStandby(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__LeaveStandby(soap, n, NULL, NULL, NULL);
}

inline struct __name2__LeaveStandby * soap_new_req___name2__LeaveStandby(
	struct soap *soap)
{
	struct __name2__LeaveStandby *_p = ::soap_new___name2__LeaveStandby(soap);
	if (_p)
	{	::soap_default___name2__LeaveStandby(soap, _p);
	}
	return _p;
}

inline struct __name2__LeaveStandby * soap_new_set___name2__LeaveStandby(
	struct soap *soap,
	_tempuri__LeaveStandby *tempuri__LeaveStandby)
{
	struct __name2__LeaveStandby *_p = ::soap_new___name2__LeaveStandby(soap);
	if (_p)
	{	::soap_default___name2__LeaveStandby(soap, _p);
		_p->tempuri__LeaveStandby = tempuri__LeaveStandby;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__LeaveStandby(struct soap*, const struct __name2__LeaveStandby *, const char*, const char*);

inline int soap_write___name2__LeaveStandby(struct soap *soap, struct __name2__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__LeaveStandby(soap, p), 0) || ::soap_put___name2__LeaveStandby(soap, p, "-name2:LeaveStandby", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__LeaveStandby(struct soap *soap, const char *URL, struct __name2__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__LeaveStandby(soap, p), 0) || ::soap_put___name2__LeaveStandby(soap, p, "-name2:LeaveStandby", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__LeaveStandby(struct soap *soap, const char *URL, struct __name2__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__LeaveStandby(soap, p), 0) || ::soap_put___name2__LeaveStandby(soap, p, "-name2:LeaveStandby", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__LeaveStandby(struct soap *soap, const char *URL, struct __name2__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__LeaveStandby(soap, p), 0) || ::soap_put___name2__LeaveStandby(soap, p, "-name2:LeaveStandby", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__LeaveStandby * SOAP_FMAC4 soap_get___name2__LeaveStandby(struct soap*, struct __name2__LeaveStandby *, const char*, const char*);

inline int soap_read___name2__LeaveStandby(struct soap *soap, struct __name2__LeaveStandby *p)
{
	if (p)
	{	::soap_default___name2__LeaveStandby(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__LeaveStandby(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__LeaveStandby(struct soap *soap, const char *URL, struct __name2__LeaveStandby *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__LeaveStandby(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__LeaveStandby(struct soap *soap, struct __name2__LeaveStandby *p)
{
	if (::soap_read___name2__LeaveStandby(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__AbortScript_DEFINED
#define SOAP_TYPE___name2__AbortScript_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__AbortScript(struct soap*, struct __name2__AbortScript *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__AbortScript(struct soap*, const struct __name2__AbortScript *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__AbortScript(struct soap*, const char*, int, const struct __name2__AbortScript *, const char*);
SOAP_FMAC3 struct __name2__AbortScript * SOAP_FMAC4 soap_in___name2__AbortScript(struct soap*, const char*, struct __name2__AbortScript *, const char*);
SOAP_FMAC1 struct __name2__AbortScript * SOAP_FMAC2 soap_instantiate___name2__AbortScript(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__AbortScript * soap_new___name2__AbortScript(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__AbortScript(soap, n, NULL, NULL, NULL);
}

inline struct __name2__AbortScript * soap_new_req___name2__AbortScript(
	struct soap *soap)
{
	struct __name2__AbortScript *_p = ::soap_new___name2__AbortScript(soap);
	if (_p)
	{	::soap_default___name2__AbortScript(soap, _p);
	}
	return _p;
}

inline struct __name2__AbortScript * soap_new_set___name2__AbortScript(
	struct soap *soap,
	_tempuri__AbortScript *tempuri__AbortScript)
{
	struct __name2__AbortScript *_p = ::soap_new___name2__AbortScript(soap);
	if (_p)
	{	::soap_default___name2__AbortScript(soap, _p);
		_p->tempuri__AbortScript = tempuri__AbortScript;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__AbortScript(struct soap*, const struct __name2__AbortScript *, const char*, const char*);

inline int soap_write___name2__AbortScript(struct soap *soap, struct __name2__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__AbortScript(soap, p), 0) || ::soap_put___name2__AbortScript(soap, p, "-name2:AbortScript", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__AbortScript(struct soap *soap, const char *URL, struct __name2__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__AbortScript(soap, p), 0) || ::soap_put___name2__AbortScript(soap, p, "-name2:AbortScript", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__AbortScript(struct soap *soap, const char *URL, struct __name2__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__AbortScript(soap, p), 0) || ::soap_put___name2__AbortScript(soap, p, "-name2:AbortScript", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__AbortScript(struct soap *soap, const char *URL, struct __name2__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__AbortScript(soap, p), 0) || ::soap_put___name2__AbortScript(soap, p, "-name2:AbortScript", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__AbortScript * SOAP_FMAC4 soap_get___name2__AbortScript(struct soap*, struct __name2__AbortScript *, const char*, const char*);

inline int soap_read___name2__AbortScript(struct soap *soap, struct __name2__AbortScript *p)
{
	if (p)
	{	::soap_default___name2__AbortScript(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__AbortScript(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__AbortScript(struct soap *soap, const char *URL, struct __name2__AbortScript *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__AbortScript(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__AbortScript(struct soap *soap, struct __name2__AbortScript *p)
{
	if (::soap_read___name2__AbortScript(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__ResetRunset_DEFINED
#define SOAP_TYPE___name2__ResetRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__ResetRunset(struct soap*, struct __name2__ResetRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__ResetRunset(struct soap*, const struct __name2__ResetRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__ResetRunset(struct soap*, const char*, int, const struct __name2__ResetRunset *, const char*);
SOAP_FMAC3 struct __name2__ResetRunset * SOAP_FMAC4 soap_in___name2__ResetRunset(struct soap*, const char*, struct __name2__ResetRunset *, const char*);
SOAP_FMAC1 struct __name2__ResetRunset * SOAP_FMAC2 soap_instantiate___name2__ResetRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__ResetRunset * soap_new___name2__ResetRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__ResetRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name2__ResetRunset * soap_new_req___name2__ResetRunset(
	struct soap *soap)
{
	struct __name2__ResetRunset *_p = ::soap_new___name2__ResetRunset(soap);
	if (_p)
	{	::soap_default___name2__ResetRunset(soap, _p);
	}
	return _p;
}

inline struct __name2__ResetRunset * soap_new_set___name2__ResetRunset(
	struct soap *soap,
	_tempuri__ResetRunset *tempuri__ResetRunset)
{
	struct __name2__ResetRunset *_p = ::soap_new___name2__ResetRunset(soap);
	if (_p)
	{	::soap_default___name2__ResetRunset(soap, _p);
		_p->tempuri__ResetRunset = tempuri__ResetRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__ResetRunset(struct soap*, const struct __name2__ResetRunset *, const char*, const char*);

inline int soap_write___name2__ResetRunset(struct soap *soap, struct __name2__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__ResetRunset(soap, p), 0) || ::soap_put___name2__ResetRunset(soap, p, "-name2:ResetRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__ResetRunset(struct soap *soap, const char *URL, struct __name2__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__ResetRunset(soap, p), 0) || ::soap_put___name2__ResetRunset(soap, p, "-name2:ResetRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__ResetRunset(struct soap *soap, const char *URL, struct __name2__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__ResetRunset(soap, p), 0) || ::soap_put___name2__ResetRunset(soap, p, "-name2:ResetRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__ResetRunset(struct soap *soap, const char *URL, struct __name2__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__ResetRunset(soap, p), 0) || ::soap_put___name2__ResetRunset(soap, p, "-name2:ResetRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__ResetRunset * SOAP_FMAC4 soap_get___name2__ResetRunset(struct soap*, struct __name2__ResetRunset *, const char*, const char*);

inline int soap_read___name2__ResetRunset(struct soap *soap, struct __name2__ResetRunset *p)
{
	if (p)
	{	::soap_default___name2__ResetRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__ResetRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__ResetRunset(struct soap *soap, const char *URL, struct __name2__ResetRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__ResetRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__ResetRunset(struct soap *soap, struct __name2__ResetRunset *p)
{
	if (::soap_read___name2__ResetRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__ResumeRunset_DEFINED
#define SOAP_TYPE___name2__ResumeRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__ResumeRunset(struct soap*, struct __name2__ResumeRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__ResumeRunset(struct soap*, const struct __name2__ResumeRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__ResumeRunset(struct soap*, const char*, int, const struct __name2__ResumeRunset *, const char*);
SOAP_FMAC3 struct __name2__ResumeRunset * SOAP_FMAC4 soap_in___name2__ResumeRunset(struct soap*, const char*, struct __name2__ResumeRunset *, const char*);
SOAP_FMAC1 struct __name2__ResumeRunset * SOAP_FMAC2 soap_instantiate___name2__ResumeRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__ResumeRunset * soap_new___name2__ResumeRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__ResumeRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name2__ResumeRunset * soap_new_req___name2__ResumeRunset(
	struct soap *soap)
{
	struct __name2__ResumeRunset *_p = ::soap_new___name2__ResumeRunset(soap);
	if (_p)
	{	::soap_default___name2__ResumeRunset(soap, _p);
	}
	return _p;
}

inline struct __name2__ResumeRunset * soap_new_set___name2__ResumeRunset(
	struct soap *soap,
	_tempuri__ResumeRunset *tempuri__ResumeRunset)
{
	struct __name2__ResumeRunset *_p = ::soap_new___name2__ResumeRunset(soap);
	if (_p)
	{	::soap_default___name2__ResumeRunset(soap, _p);
		_p->tempuri__ResumeRunset = tempuri__ResumeRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__ResumeRunset(struct soap*, const struct __name2__ResumeRunset *, const char*, const char*);

inline int soap_write___name2__ResumeRunset(struct soap *soap, struct __name2__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__ResumeRunset(soap, p), 0) || ::soap_put___name2__ResumeRunset(soap, p, "-name2:ResumeRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__ResumeRunset(struct soap *soap, const char *URL, struct __name2__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__ResumeRunset(soap, p), 0) || ::soap_put___name2__ResumeRunset(soap, p, "-name2:ResumeRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__ResumeRunset(struct soap *soap, const char *URL, struct __name2__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__ResumeRunset(soap, p), 0) || ::soap_put___name2__ResumeRunset(soap, p, "-name2:ResumeRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__ResumeRunset(struct soap *soap, const char *URL, struct __name2__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__ResumeRunset(soap, p), 0) || ::soap_put___name2__ResumeRunset(soap, p, "-name2:ResumeRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__ResumeRunset * SOAP_FMAC4 soap_get___name2__ResumeRunset(struct soap*, struct __name2__ResumeRunset *, const char*, const char*);

inline int soap_read___name2__ResumeRunset(struct soap *soap, struct __name2__ResumeRunset *p)
{
	if (p)
	{	::soap_default___name2__ResumeRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__ResumeRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__ResumeRunset(struct soap *soap, const char *URL, struct __name2__ResumeRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__ResumeRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__ResumeRunset(struct soap *soap, struct __name2__ResumeRunset *p)
{
	if (::soap_read___name2__ResumeRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__PauseRunsetAfter_DEFINED
#define SOAP_TYPE___name2__PauseRunsetAfter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__PauseRunsetAfter(struct soap*, struct __name2__PauseRunsetAfter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__PauseRunsetAfter(struct soap*, const struct __name2__PauseRunsetAfter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__PauseRunsetAfter(struct soap*, const char*, int, const struct __name2__PauseRunsetAfter *, const char*);
SOAP_FMAC3 struct __name2__PauseRunsetAfter * SOAP_FMAC4 soap_in___name2__PauseRunsetAfter(struct soap*, const char*, struct __name2__PauseRunsetAfter *, const char*);
SOAP_FMAC1 struct __name2__PauseRunsetAfter * SOAP_FMAC2 soap_instantiate___name2__PauseRunsetAfter(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__PauseRunsetAfter * soap_new___name2__PauseRunsetAfter(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__PauseRunsetAfter(soap, n, NULL, NULL, NULL);
}

inline struct __name2__PauseRunsetAfter * soap_new_req___name2__PauseRunsetAfter(
	struct soap *soap)
{
	struct __name2__PauseRunsetAfter *_p = ::soap_new___name2__PauseRunsetAfter(soap);
	if (_p)
	{	::soap_default___name2__PauseRunsetAfter(soap, _p);
	}
	return _p;
}

inline struct __name2__PauseRunsetAfter * soap_new_set___name2__PauseRunsetAfter(
	struct soap *soap,
	_tempuri__PauseRunsetAfter *tempuri__PauseRunsetAfter)
{
	struct __name2__PauseRunsetAfter *_p = ::soap_new___name2__PauseRunsetAfter(soap);
	if (_p)
	{	::soap_default___name2__PauseRunsetAfter(soap, _p);
		_p->tempuri__PauseRunsetAfter = tempuri__PauseRunsetAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__PauseRunsetAfter(struct soap*, const struct __name2__PauseRunsetAfter *, const char*, const char*);

inline int soap_write___name2__PauseRunsetAfter(struct soap *soap, struct __name2__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__PauseRunsetAfter(soap, p), 0) || ::soap_put___name2__PauseRunsetAfter(soap, p, "-name2:PauseRunsetAfter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__PauseRunsetAfter(struct soap *soap, const char *URL, struct __name2__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__PauseRunsetAfter(soap, p), 0) || ::soap_put___name2__PauseRunsetAfter(soap, p, "-name2:PauseRunsetAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__PauseRunsetAfter(struct soap *soap, const char *URL, struct __name2__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__PauseRunsetAfter(soap, p), 0) || ::soap_put___name2__PauseRunsetAfter(soap, p, "-name2:PauseRunsetAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__PauseRunsetAfter(struct soap *soap, const char *URL, struct __name2__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__PauseRunsetAfter(soap, p), 0) || ::soap_put___name2__PauseRunsetAfter(soap, p, "-name2:PauseRunsetAfter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__PauseRunsetAfter * SOAP_FMAC4 soap_get___name2__PauseRunsetAfter(struct soap*, struct __name2__PauseRunsetAfter *, const char*, const char*);

inline int soap_read___name2__PauseRunsetAfter(struct soap *soap, struct __name2__PauseRunsetAfter *p)
{
	if (p)
	{	::soap_default___name2__PauseRunsetAfter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__PauseRunsetAfter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__PauseRunsetAfter(struct soap *soap, const char *URL, struct __name2__PauseRunsetAfter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__PauseRunsetAfter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__PauseRunsetAfter(struct soap *soap, struct __name2__PauseRunsetAfter *p)
{
	if (::soap_read___name2__PauseRunsetAfter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__StartSelectedRunsetFrom_DEFINED
#define SOAP_TYPE___name2__StartSelectedRunsetFrom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__StartSelectedRunsetFrom(struct soap*, struct __name2__StartSelectedRunsetFrom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__StartSelectedRunsetFrom(struct soap*, const struct __name2__StartSelectedRunsetFrom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__StartSelectedRunsetFrom(struct soap*, const char*, int, const struct __name2__StartSelectedRunsetFrom *, const char*);
SOAP_FMAC3 struct __name2__StartSelectedRunsetFrom * SOAP_FMAC4 soap_in___name2__StartSelectedRunsetFrom(struct soap*, const char*, struct __name2__StartSelectedRunsetFrom *, const char*);
SOAP_FMAC1 struct __name2__StartSelectedRunsetFrom * SOAP_FMAC2 soap_instantiate___name2__StartSelectedRunsetFrom(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__StartSelectedRunsetFrom * soap_new___name2__StartSelectedRunsetFrom(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__StartSelectedRunsetFrom(soap, n, NULL, NULL, NULL);
}

inline struct __name2__StartSelectedRunsetFrom * soap_new_req___name2__StartSelectedRunsetFrom(
	struct soap *soap)
{
	struct __name2__StartSelectedRunsetFrom *_p = ::soap_new___name2__StartSelectedRunsetFrom(soap);
	if (_p)
	{	::soap_default___name2__StartSelectedRunsetFrom(soap, _p);
	}
	return _p;
}

inline struct __name2__StartSelectedRunsetFrom * soap_new_set___name2__StartSelectedRunsetFrom(
	struct soap *soap,
	_tempuri__StartSelectedRunsetFrom *tempuri__StartSelectedRunsetFrom)
{
	struct __name2__StartSelectedRunsetFrom *_p = ::soap_new___name2__StartSelectedRunsetFrom(soap);
	if (_p)
	{	::soap_default___name2__StartSelectedRunsetFrom(soap, _p);
		_p->tempuri__StartSelectedRunsetFrom = tempuri__StartSelectedRunsetFrom;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__StartSelectedRunsetFrom(struct soap*, const struct __name2__StartSelectedRunsetFrom *, const char*, const char*);

inline int soap_write___name2__StartSelectedRunsetFrom(struct soap *soap, struct __name2__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__StartSelectedRunsetFrom(soap, p), 0) || ::soap_put___name2__StartSelectedRunsetFrom(soap, p, "-name2:StartSelectedRunsetFrom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__StartSelectedRunsetFrom(struct soap *soap, const char *URL, struct __name2__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__StartSelectedRunsetFrom(soap, p), 0) || ::soap_put___name2__StartSelectedRunsetFrom(soap, p, "-name2:StartSelectedRunsetFrom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__StartSelectedRunsetFrom(struct soap *soap, const char *URL, struct __name2__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__StartSelectedRunsetFrom(soap, p), 0) || ::soap_put___name2__StartSelectedRunsetFrom(soap, p, "-name2:StartSelectedRunsetFrom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__StartSelectedRunsetFrom(struct soap *soap, const char *URL, struct __name2__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__StartSelectedRunsetFrom(soap, p), 0) || ::soap_put___name2__StartSelectedRunsetFrom(soap, p, "-name2:StartSelectedRunsetFrom", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__StartSelectedRunsetFrom * SOAP_FMAC4 soap_get___name2__StartSelectedRunsetFrom(struct soap*, struct __name2__StartSelectedRunsetFrom *, const char*, const char*);

inline int soap_read___name2__StartSelectedRunsetFrom(struct soap *soap, struct __name2__StartSelectedRunsetFrom *p)
{
	if (p)
	{	::soap_default___name2__StartSelectedRunsetFrom(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__StartSelectedRunsetFrom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__StartSelectedRunsetFrom(struct soap *soap, const char *URL, struct __name2__StartSelectedRunsetFrom *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__StartSelectedRunsetFrom(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__StartSelectedRunsetFrom(struct soap *soap, struct __name2__StartSelectedRunsetFrom *p)
{
	if (::soap_read___name2__StartSelectedRunsetFrom(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__StartSelectedRunset_DEFINED
#define SOAP_TYPE___name2__StartSelectedRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__StartSelectedRunset(struct soap*, struct __name2__StartSelectedRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__StartSelectedRunset(struct soap*, const struct __name2__StartSelectedRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__StartSelectedRunset(struct soap*, const char*, int, const struct __name2__StartSelectedRunset *, const char*);
SOAP_FMAC3 struct __name2__StartSelectedRunset * SOAP_FMAC4 soap_in___name2__StartSelectedRunset(struct soap*, const char*, struct __name2__StartSelectedRunset *, const char*);
SOAP_FMAC1 struct __name2__StartSelectedRunset * SOAP_FMAC2 soap_instantiate___name2__StartSelectedRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__StartSelectedRunset * soap_new___name2__StartSelectedRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__StartSelectedRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name2__StartSelectedRunset * soap_new_req___name2__StartSelectedRunset(
	struct soap *soap)
{
	struct __name2__StartSelectedRunset *_p = ::soap_new___name2__StartSelectedRunset(soap);
	if (_p)
	{	::soap_default___name2__StartSelectedRunset(soap, _p);
	}
	return _p;
}

inline struct __name2__StartSelectedRunset * soap_new_set___name2__StartSelectedRunset(
	struct soap *soap,
	_tempuri__StartSelectedRunset *tempuri__StartSelectedRunset)
{
	struct __name2__StartSelectedRunset *_p = ::soap_new___name2__StartSelectedRunset(soap);
	if (_p)
	{	::soap_default___name2__StartSelectedRunset(soap, _p);
		_p->tempuri__StartSelectedRunset = tempuri__StartSelectedRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__StartSelectedRunset(struct soap*, const struct __name2__StartSelectedRunset *, const char*, const char*);

inline int soap_write___name2__StartSelectedRunset(struct soap *soap, struct __name2__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__StartSelectedRunset(soap, p), 0) || ::soap_put___name2__StartSelectedRunset(soap, p, "-name2:StartSelectedRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__StartSelectedRunset(struct soap *soap, const char *URL, struct __name2__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__StartSelectedRunset(soap, p), 0) || ::soap_put___name2__StartSelectedRunset(soap, p, "-name2:StartSelectedRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__StartSelectedRunset(struct soap *soap, const char *URL, struct __name2__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__StartSelectedRunset(soap, p), 0) || ::soap_put___name2__StartSelectedRunset(soap, p, "-name2:StartSelectedRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__StartSelectedRunset(struct soap *soap, const char *URL, struct __name2__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__StartSelectedRunset(soap, p), 0) || ::soap_put___name2__StartSelectedRunset(soap, p, "-name2:StartSelectedRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__StartSelectedRunset * SOAP_FMAC4 soap_get___name2__StartSelectedRunset(struct soap*, struct __name2__StartSelectedRunset *, const char*, const char*);

inline int soap_read___name2__StartSelectedRunset(struct soap *soap, struct __name2__StartSelectedRunset *p)
{
	if (p)
	{	::soap_default___name2__StartSelectedRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__StartSelectedRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__StartSelectedRunset(struct soap *soap, const char *URL, struct __name2__StartSelectedRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__StartSelectedRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__StartSelectedRunset(struct soap *soap, struct __name2__StartSelectedRunset *p)
{
	if (::soap_read___name2__StartSelectedRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__MoveSamplePlateTrayIn_DEFINED
#define SOAP_TYPE___name2__MoveSamplePlateTrayIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__MoveSamplePlateTrayIn(struct soap*, struct __name2__MoveSamplePlateTrayIn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__MoveSamplePlateTrayIn(struct soap*, const struct __name2__MoveSamplePlateTrayIn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__MoveSamplePlateTrayIn(struct soap*, const char*, int, const struct __name2__MoveSamplePlateTrayIn *, const char*);
SOAP_FMAC3 struct __name2__MoveSamplePlateTrayIn * SOAP_FMAC4 soap_in___name2__MoveSamplePlateTrayIn(struct soap*, const char*, struct __name2__MoveSamplePlateTrayIn *, const char*);
SOAP_FMAC1 struct __name2__MoveSamplePlateTrayIn * SOAP_FMAC2 soap_instantiate___name2__MoveSamplePlateTrayIn(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__MoveSamplePlateTrayIn * soap_new___name2__MoveSamplePlateTrayIn(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__MoveSamplePlateTrayIn(soap, n, NULL, NULL, NULL);
}

inline struct __name2__MoveSamplePlateTrayIn * soap_new_req___name2__MoveSamplePlateTrayIn(
	struct soap *soap)
{
	struct __name2__MoveSamplePlateTrayIn *_p = ::soap_new___name2__MoveSamplePlateTrayIn(soap);
	if (_p)
	{	::soap_default___name2__MoveSamplePlateTrayIn(soap, _p);
	}
	return _p;
}

inline struct __name2__MoveSamplePlateTrayIn * soap_new_set___name2__MoveSamplePlateTrayIn(
	struct soap *soap,
	_tempuri__MoveSamplePlateTrayIn *tempuri__MoveSamplePlateTrayIn)
{
	struct __name2__MoveSamplePlateTrayIn *_p = ::soap_new___name2__MoveSamplePlateTrayIn(soap);
	if (_p)
	{	::soap_default___name2__MoveSamplePlateTrayIn(soap, _p);
		_p->tempuri__MoveSamplePlateTrayIn = tempuri__MoveSamplePlateTrayIn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__MoveSamplePlateTrayIn(struct soap*, const struct __name2__MoveSamplePlateTrayIn *, const char*, const char*);

inline int soap_write___name2__MoveSamplePlateTrayIn(struct soap *soap, struct __name2__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__MoveSamplePlateTrayIn(soap, p), 0) || ::soap_put___name2__MoveSamplePlateTrayIn(soap, p, "-name2:MoveSamplePlateTrayIn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name2__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__MoveSamplePlateTrayIn(soap, p), 0) || ::soap_put___name2__MoveSamplePlateTrayIn(soap, p, "-name2:MoveSamplePlateTrayIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name2__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__MoveSamplePlateTrayIn(soap, p), 0) || ::soap_put___name2__MoveSamplePlateTrayIn(soap, p, "-name2:MoveSamplePlateTrayIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name2__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__MoveSamplePlateTrayIn(soap, p), 0) || ::soap_put___name2__MoveSamplePlateTrayIn(soap, p, "-name2:MoveSamplePlateTrayIn", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__MoveSamplePlateTrayIn * SOAP_FMAC4 soap_get___name2__MoveSamplePlateTrayIn(struct soap*, struct __name2__MoveSamplePlateTrayIn *, const char*, const char*);

inline int soap_read___name2__MoveSamplePlateTrayIn(struct soap *soap, struct __name2__MoveSamplePlateTrayIn *p)
{
	if (p)
	{	::soap_default___name2__MoveSamplePlateTrayIn(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__MoveSamplePlateTrayIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name2__MoveSamplePlateTrayIn *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__MoveSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__MoveSamplePlateTrayIn(struct soap *soap, struct __name2__MoveSamplePlateTrayIn *p)
{
	if (::soap_read___name2__MoveSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__MoveSamplePlateTrayOut_DEFINED
#define SOAP_TYPE___name2__MoveSamplePlateTrayOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__MoveSamplePlateTrayOut(struct soap*, struct __name2__MoveSamplePlateTrayOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__MoveSamplePlateTrayOut(struct soap*, const struct __name2__MoveSamplePlateTrayOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__MoveSamplePlateTrayOut(struct soap*, const char*, int, const struct __name2__MoveSamplePlateTrayOut *, const char*);
SOAP_FMAC3 struct __name2__MoveSamplePlateTrayOut * SOAP_FMAC4 soap_in___name2__MoveSamplePlateTrayOut(struct soap*, const char*, struct __name2__MoveSamplePlateTrayOut *, const char*);
SOAP_FMAC1 struct __name2__MoveSamplePlateTrayOut * SOAP_FMAC2 soap_instantiate___name2__MoveSamplePlateTrayOut(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__MoveSamplePlateTrayOut * soap_new___name2__MoveSamplePlateTrayOut(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__MoveSamplePlateTrayOut(soap, n, NULL, NULL, NULL);
}

inline struct __name2__MoveSamplePlateTrayOut * soap_new_req___name2__MoveSamplePlateTrayOut(
	struct soap *soap)
{
	struct __name2__MoveSamplePlateTrayOut *_p = ::soap_new___name2__MoveSamplePlateTrayOut(soap);
	if (_p)
	{	::soap_default___name2__MoveSamplePlateTrayOut(soap, _p);
	}
	return _p;
}

inline struct __name2__MoveSamplePlateTrayOut * soap_new_set___name2__MoveSamplePlateTrayOut(
	struct soap *soap,
	_tempuri__MoveSamplePlateTrayOut *tempuri__MoveSamplePlateTrayOut)
{
	struct __name2__MoveSamplePlateTrayOut *_p = ::soap_new___name2__MoveSamplePlateTrayOut(soap);
	if (_p)
	{	::soap_default___name2__MoveSamplePlateTrayOut(soap, _p);
		_p->tempuri__MoveSamplePlateTrayOut = tempuri__MoveSamplePlateTrayOut;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__MoveSamplePlateTrayOut(struct soap*, const struct __name2__MoveSamplePlateTrayOut *, const char*, const char*);

inline int soap_write___name2__MoveSamplePlateTrayOut(struct soap *soap, struct __name2__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__MoveSamplePlateTrayOut(soap, p), 0) || ::soap_put___name2__MoveSamplePlateTrayOut(soap, p, "-name2:MoveSamplePlateTrayOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, struct __name2__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__MoveSamplePlateTrayOut(soap, p), 0) || ::soap_put___name2__MoveSamplePlateTrayOut(soap, p, "-name2:MoveSamplePlateTrayOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, struct __name2__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__MoveSamplePlateTrayOut(soap, p), 0) || ::soap_put___name2__MoveSamplePlateTrayOut(soap, p, "-name2:MoveSamplePlateTrayOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, struct __name2__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__MoveSamplePlateTrayOut(soap, p), 0) || ::soap_put___name2__MoveSamplePlateTrayOut(soap, p, "-name2:MoveSamplePlateTrayOut", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__MoveSamplePlateTrayOut * SOAP_FMAC4 soap_get___name2__MoveSamplePlateTrayOut(struct soap*, struct __name2__MoveSamplePlateTrayOut *, const char*, const char*);

inline int soap_read___name2__MoveSamplePlateTrayOut(struct soap *soap, struct __name2__MoveSamplePlateTrayOut *p)
{
	if (p)
	{	::soap_default___name2__MoveSamplePlateTrayOut(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__MoveSamplePlateTrayOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, struct __name2__MoveSamplePlateTrayOut *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__MoveSamplePlateTrayOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__MoveSamplePlateTrayOut(struct soap *soap, struct __name2__MoveSamplePlateTrayOut *p)
{
	if (::soap_read___name2__MoveSamplePlateTrayOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetCurrentSamplePlateId_DEFINED
#define SOAP_TYPE___name2__GetCurrentSamplePlateId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetCurrentSamplePlateId(struct soap*, struct __name2__GetCurrentSamplePlateId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetCurrentSamplePlateId(struct soap*, const struct __name2__GetCurrentSamplePlateId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetCurrentSamplePlateId(struct soap*, const char*, int, const struct __name2__GetCurrentSamplePlateId *, const char*);
SOAP_FMAC3 struct __name2__GetCurrentSamplePlateId * SOAP_FMAC4 soap_in___name2__GetCurrentSamplePlateId(struct soap*, const char*, struct __name2__GetCurrentSamplePlateId *, const char*);
SOAP_FMAC1 struct __name2__GetCurrentSamplePlateId * SOAP_FMAC2 soap_instantiate___name2__GetCurrentSamplePlateId(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetCurrentSamplePlateId * soap_new___name2__GetCurrentSamplePlateId(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetCurrentSamplePlateId(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetCurrentSamplePlateId * soap_new_req___name2__GetCurrentSamplePlateId(
	struct soap *soap)
{
	struct __name2__GetCurrentSamplePlateId *_p = ::soap_new___name2__GetCurrentSamplePlateId(soap);
	if (_p)
	{	::soap_default___name2__GetCurrentSamplePlateId(soap, _p);
	}
	return _p;
}

inline struct __name2__GetCurrentSamplePlateId * soap_new_set___name2__GetCurrentSamplePlateId(
	struct soap *soap,
	_tempuri__GetCurrentSamplePlateId *tempuri__GetCurrentSamplePlateId)
{
	struct __name2__GetCurrentSamplePlateId *_p = ::soap_new___name2__GetCurrentSamplePlateId(soap);
	if (_p)
	{	::soap_default___name2__GetCurrentSamplePlateId(soap, _p);
		_p->tempuri__GetCurrentSamplePlateId = tempuri__GetCurrentSamplePlateId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetCurrentSamplePlateId(struct soap*, const struct __name2__GetCurrentSamplePlateId *, const char*, const char*);

inline int soap_write___name2__GetCurrentSamplePlateId(struct soap *soap, struct __name2__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetCurrentSamplePlateId(soap, p), 0) || ::soap_put___name2__GetCurrentSamplePlateId(soap, p, "-name2:GetCurrentSamplePlateId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetCurrentSamplePlateId(struct soap *soap, const char *URL, struct __name2__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetCurrentSamplePlateId(soap, p), 0) || ::soap_put___name2__GetCurrentSamplePlateId(soap, p, "-name2:GetCurrentSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetCurrentSamplePlateId(struct soap *soap, const char *URL, struct __name2__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetCurrentSamplePlateId(soap, p), 0) || ::soap_put___name2__GetCurrentSamplePlateId(soap, p, "-name2:GetCurrentSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetCurrentSamplePlateId(struct soap *soap, const char *URL, struct __name2__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetCurrentSamplePlateId(soap, p), 0) || ::soap_put___name2__GetCurrentSamplePlateId(soap, p, "-name2:GetCurrentSamplePlateId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetCurrentSamplePlateId * SOAP_FMAC4 soap_get___name2__GetCurrentSamplePlateId(struct soap*, struct __name2__GetCurrentSamplePlateId *, const char*, const char*);

inline int soap_read___name2__GetCurrentSamplePlateId(struct soap *soap, struct __name2__GetCurrentSamplePlateId *p)
{
	if (p)
	{	::soap_default___name2__GetCurrentSamplePlateId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetCurrentSamplePlateId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetCurrentSamplePlateId(struct soap *soap, const char *URL, struct __name2__GetCurrentSamplePlateId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetCurrentSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetCurrentSamplePlateId(struct soap *soap, struct __name2__GetCurrentSamplePlateId *p)
{
	if (::soap_read___name2__GetCurrentSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetSamplePlateId_DEFINED
#define SOAP_TYPE___name2__GetSamplePlateId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetSamplePlateId(struct soap*, struct __name2__GetSamplePlateId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetSamplePlateId(struct soap*, const struct __name2__GetSamplePlateId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetSamplePlateId(struct soap*, const char*, int, const struct __name2__GetSamplePlateId *, const char*);
SOAP_FMAC3 struct __name2__GetSamplePlateId * SOAP_FMAC4 soap_in___name2__GetSamplePlateId(struct soap*, const char*, struct __name2__GetSamplePlateId *, const char*);
SOAP_FMAC1 struct __name2__GetSamplePlateId * SOAP_FMAC2 soap_instantiate___name2__GetSamplePlateId(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetSamplePlateId * soap_new___name2__GetSamplePlateId(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetSamplePlateId(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetSamplePlateId * soap_new_req___name2__GetSamplePlateId(
	struct soap *soap)
{
	struct __name2__GetSamplePlateId *_p = ::soap_new___name2__GetSamplePlateId(soap);
	if (_p)
	{	::soap_default___name2__GetSamplePlateId(soap, _p);
	}
	return _p;
}

inline struct __name2__GetSamplePlateId * soap_new_set___name2__GetSamplePlateId(
	struct soap *soap,
	_tempuri__GetSamplePlateId *tempuri__GetSamplePlateId)
{
	struct __name2__GetSamplePlateId *_p = ::soap_new___name2__GetSamplePlateId(soap);
	if (_p)
	{	::soap_default___name2__GetSamplePlateId(soap, _p);
		_p->tempuri__GetSamplePlateId = tempuri__GetSamplePlateId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetSamplePlateId(struct soap*, const struct __name2__GetSamplePlateId *, const char*, const char*);

inline int soap_write___name2__GetSamplePlateId(struct soap *soap, struct __name2__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetSamplePlateId(soap, p), 0) || ::soap_put___name2__GetSamplePlateId(soap, p, "-name2:GetSamplePlateId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetSamplePlateId(struct soap *soap, const char *URL, struct __name2__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetSamplePlateId(soap, p), 0) || ::soap_put___name2__GetSamplePlateId(soap, p, "-name2:GetSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetSamplePlateId(struct soap *soap, const char *URL, struct __name2__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetSamplePlateId(soap, p), 0) || ::soap_put___name2__GetSamplePlateId(soap, p, "-name2:GetSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetSamplePlateId(struct soap *soap, const char *URL, struct __name2__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetSamplePlateId(soap, p), 0) || ::soap_put___name2__GetSamplePlateId(soap, p, "-name2:GetSamplePlateId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetSamplePlateId * SOAP_FMAC4 soap_get___name2__GetSamplePlateId(struct soap*, struct __name2__GetSamplePlateId *, const char*, const char*);

inline int soap_read___name2__GetSamplePlateId(struct soap *soap, struct __name2__GetSamplePlateId *p)
{
	if (p)
	{	::soap_default___name2__GetSamplePlateId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetSamplePlateId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetSamplePlateId(struct soap *soap, const char *URL, struct __name2__GetSamplePlateId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetSamplePlateId(struct soap *soap, struct __name2__GetSamplePlateId *p)
{
	if (::soap_read___name2__GetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__SetSamplePlateId_DEFINED
#define SOAP_TYPE___name2__SetSamplePlateId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__SetSamplePlateId(struct soap*, struct __name2__SetSamplePlateId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__SetSamplePlateId(struct soap*, const struct __name2__SetSamplePlateId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__SetSamplePlateId(struct soap*, const char*, int, const struct __name2__SetSamplePlateId *, const char*);
SOAP_FMAC3 struct __name2__SetSamplePlateId * SOAP_FMAC4 soap_in___name2__SetSamplePlateId(struct soap*, const char*, struct __name2__SetSamplePlateId *, const char*);
SOAP_FMAC1 struct __name2__SetSamplePlateId * SOAP_FMAC2 soap_instantiate___name2__SetSamplePlateId(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__SetSamplePlateId * soap_new___name2__SetSamplePlateId(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__SetSamplePlateId(soap, n, NULL, NULL, NULL);
}

inline struct __name2__SetSamplePlateId * soap_new_req___name2__SetSamplePlateId(
	struct soap *soap)
{
	struct __name2__SetSamplePlateId *_p = ::soap_new___name2__SetSamplePlateId(soap);
	if (_p)
	{	::soap_default___name2__SetSamplePlateId(soap, _p);
	}
	return _p;
}

inline struct __name2__SetSamplePlateId * soap_new_set___name2__SetSamplePlateId(
	struct soap *soap,
	_tempuri__SetSamplePlateId *tempuri__SetSamplePlateId)
{
	struct __name2__SetSamplePlateId *_p = ::soap_new___name2__SetSamplePlateId(soap);
	if (_p)
	{	::soap_default___name2__SetSamplePlateId(soap, _p);
		_p->tempuri__SetSamplePlateId = tempuri__SetSamplePlateId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__SetSamplePlateId(struct soap*, const struct __name2__SetSamplePlateId *, const char*, const char*);

inline int soap_write___name2__SetSamplePlateId(struct soap *soap, struct __name2__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__SetSamplePlateId(soap, p), 0) || ::soap_put___name2__SetSamplePlateId(soap, p, "-name2:SetSamplePlateId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__SetSamplePlateId(struct soap *soap, const char *URL, struct __name2__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SetSamplePlateId(soap, p), 0) || ::soap_put___name2__SetSamplePlateId(soap, p, "-name2:SetSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__SetSamplePlateId(struct soap *soap, const char *URL, struct __name2__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SetSamplePlateId(soap, p), 0) || ::soap_put___name2__SetSamplePlateId(soap, p, "-name2:SetSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__SetSamplePlateId(struct soap *soap, const char *URL, struct __name2__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SetSamplePlateId(soap, p), 0) || ::soap_put___name2__SetSamplePlateId(soap, p, "-name2:SetSamplePlateId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__SetSamplePlateId * SOAP_FMAC4 soap_get___name2__SetSamplePlateId(struct soap*, struct __name2__SetSamplePlateId *, const char*, const char*);

inline int soap_read___name2__SetSamplePlateId(struct soap *soap, struct __name2__SetSamplePlateId *p)
{
	if (p)
	{	::soap_default___name2__SetSamplePlateId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__SetSamplePlateId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__SetSamplePlateId(struct soap *soap, const char *URL, struct __name2__SetSamplePlateId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__SetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__SetSamplePlateId(struct soap *soap, struct __name2__SetSamplePlateId *p)
{
	if (::soap_read___name2__SetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__CreateRunset_DEFINED
#define SOAP_TYPE___name2__CreateRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__CreateRunset(struct soap*, struct __name2__CreateRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__CreateRunset(struct soap*, const struct __name2__CreateRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__CreateRunset(struct soap*, const char*, int, const struct __name2__CreateRunset *, const char*);
SOAP_FMAC3 struct __name2__CreateRunset * SOAP_FMAC4 soap_in___name2__CreateRunset(struct soap*, const char*, struct __name2__CreateRunset *, const char*);
SOAP_FMAC1 struct __name2__CreateRunset * SOAP_FMAC2 soap_instantiate___name2__CreateRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__CreateRunset * soap_new___name2__CreateRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__CreateRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name2__CreateRunset * soap_new_req___name2__CreateRunset(
	struct soap *soap)
{
	struct __name2__CreateRunset *_p = ::soap_new___name2__CreateRunset(soap);
	if (_p)
	{	::soap_default___name2__CreateRunset(soap, _p);
	}
	return _p;
}

inline struct __name2__CreateRunset * soap_new_set___name2__CreateRunset(
	struct soap *soap,
	_tempuri__CreateRunset *tempuri__CreateRunset)
{
	struct __name2__CreateRunset *_p = ::soap_new___name2__CreateRunset(soap);
	if (_p)
	{	::soap_default___name2__CreateRunset(soap, _p);
		_p->tempuri__CreateRunset = tempuri__CreateRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__CreateRunset(struct soap*, const struct __name2__CreateRunset *, const char*, const char*);

inline int soap_write___name2__CreateRunset(struct soap *soap, struct __name2__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__CreateRunset(soap, p), 0) || ::soap_put___name2__CreateRunset(soap, p, "-name2:CreateRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__CreateRunset(struct soap *soap, const char *URL, struct __name2__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__CreateRunset(soap, p), 0) || ::soap_put___name2__CreateRunset(soap, p, "-name2:CreateRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__CreateRunset(struct soap *soap, const char *URL, struct __name2__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__CreateRunset(soap, p), 0) || ::soap_put___name2__CreateRunset(soap, p, "-name2:CreateRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__CreateRunset(struct soap *soap, const char *URL, struct __name2__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__CreateRunset(soap, p), 0) || ::soap_put___name2__CreateRunset(soap, p, "-name2:CreateRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__CreateRunset * SOAP_FMAC4 soap_get___name2__CreateRunset(struct soap*, struct __name2__CreateRunset *, const char*, const char*);

inline int soap_read___name2__CreateRunset(struct soap *soap, struct __name2__CreateRunset *p)
{
	if (p)
	{	::soap_default___name2__CreateRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__CreateRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__CreateRunset(struct soap *soap, const char *URL, struct __name2__CreateRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__CreateRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__CreateRunset(struct soap *soap, struct __name2__CreateRunset *p)
{
	if (::soap_read___name2__CreateRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__SelectRunset_DEFINED
#define SOAP_TYPE___name2__SelectRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__SelectRunset(struct soap*, struct __name2__SelectRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__SelectRunset(struct soap*, const struct __name2__SelectRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__SelectRunset(struct soap*, const char*, int, const struct __name2__SelectRunset *, const char*);
SOAP_FMAC3 struct __name2__SelectRunset * SOAP_FMAC4 soap_in___name2__SelectRunset(struct soap*, const char*, struct __name2__SelectRunset *, const char*);
SOAP_FMAC1 struct __name2__SelectRunset * SOAP_FMAC2 soap_instantiate___name2__SelectRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__SelectRunset * soap_new___name2__SelectRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__SelectRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name2__SelectRunset * soap_new_req___name2__SelectRunset(
	struct soap *soap)
{
	struct __name2__SelectRunset *_p = ::soap_new___name2__SelectRunset(soap);
	if (_p)
	{	::soap_default___name2__SelectRunset(soap, _p);
	}
	return _p;
}

inline struct __name2__SelectRunset * soap_new_set___name2__SelectRunset(
	struct soap *soap,
	_tempuri__SelectRunset *tempuri__SelectRunset)
{
	struct __name2__SelectRunset *_p = ::soap_new___name2__SelectRunset(soap);
	if (_p)
	{	::soap_default___name2__SelectRunset(soap, _p);
		_p->tempuri__SelectRunset = tempuri__SelectRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__SelectRunset(struct soap*, const struct __name2__SelectRunset *, const char*, const char*);

inline int soap_write___name2__SelectRunset(struct soap *soap, struct __name2__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__SelectRunset(soap, p), 0) || ::soap_put___name2__SelectRunset(soap, p, "-name2:SelectRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__SelectRunset(struct soap *soap, const char *URL, struct __name2__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SelectRunset(soap, p), 0) || ::soap_put___name2__SelectRunset(soap, p, "-name2:SelectRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__SelectRunset(struct soap *soap, const char *URL, struct __name2__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SelectRunset(soap, p), 0) || ::soap_put___name2__SelectRunset(soap, p, "-name2:SelectRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__SelectRunset(struct soap *soap, const char *URL, struct __name2__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SelectRunset(soap, p), 0) || ::soap_put___name2__SelectRunset(soap, p, "-name2:SelectRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__SelectRunset * SOAP_FMAC4 soap_get___name2__SelectRunset(struct soap*, struct __name2__SelectRunset *, const char*, const char*);

inline int soap_read___name2__SelectRunset(struct soap *soap, struct __name2__SelectRunset *p)
{
	if (p)
	{	::soap_default___name2__SelectRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__SelectRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__SelectRunset(struct soap *soap, const char *URL, struct __name2__SelectRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__SelectRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__SelectRunset(struct soap *soap, struct __name2__SelectRunset *p)
{
	if (::soap_read___name2__SelectRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__SelectMethod_DEFINED
#define SOAP_TYPE___name2__SelectMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__SelectMethod(struct soap*, struct __name2__SelectMethod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__SelectMethod(struct soap*, const struct __name2__SelectMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__SelectMethod(struct soap*, const char*, int, const struct __name2__SelectMethod *, const char*);
SOAP_FMAC3 struct __name2__SelectMethod * SOAP_FMAC4 soap_in___name2__SelectMethod(struct soap*, const char*, struct __name2__SelectMethod *, const char*);
SOAP_FMAC1 struct __name2__SelectMethod * SOAP_FMAC2 soap_instantiate___name2__SelectMethod(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__SelectMethod * soap_new___name2__SelectMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__SelectMethod(soap, n, NULL, NULL, NULL);
}

inline struct __name2__SelectMethod * soap_new_req___name2__SelectMethod(
	struct soap *soap)
{
	struct __name2__SelectMethod *_p = ::soap_new___name2__SelectMethod(soap);
	if (_p)
	{	::soap_default___name2__SelectMethod(soap, _p);
	}
	return _p;
}

inline struct __name2__SelectMethod * soap_new_set___name2__SelectMethod(
	struct soap *soap,
	_tempuri__SelectMethod *tempuri__SelectMethod)
{
	struct __name2__SelectMethod *_p = ::soap_new___name2__SelectMethod(soap);
	if (_p)
	{	::soap_default___name2__SelectMethod(soap, _p);
		_p->tempuri__SelectMethod = tempuri__SelectMethod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__SelectMethod(struct soap*, const struct __name2__SelectMethod *, const char*, const char*);

inline int soap_write___name2__SelectMethod(struct soap *soap, struct __name2__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__SelectMethod(soap, p), 0) || ::soap_put___name2__SelectMethod(soap, p, "-name2:SelectMethod", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__SelectMethod(struct soap *soap, const char *URL, struct __name2__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SelectMethod(soap, p), 0) || ::soap_put___name2__SelectMethod(soap, p, "-name2:SelectMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__SelectMethod(struct soap *soap, const char *URL, struct __name2__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SelectMethod(soap, p), 0) || ::soap_put___name2__SelectMethod(soap, p, "-name2:SelectMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__SelectMethod(struct soap *soap, const char *URL, struct __name2__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__SelectMethod(soap, p), 0) || ::soap_put___name2__SelectMethod(soap, p, "-name2:SelectMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__SelectMethod * SOAP_FMAC4 soap_get___name2__SelectMethod(struct soap*, struct __name2__SelectMethod *, const char*, const char*);

inline int soap_read___name2__SelectMethod(struct soap *soap, struct __name2__SelectMethod *p)
{
	if (p)
	{	::soap_default___name2__SelectMethod(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__SelectMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__SelectMethod(struct soap *soap, const char *URL, struct __name2__SelectMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__SelectMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__SelectMethod(struct soap *soap, struct __name2__SelectMethod *p)
{
	if (::soap_read___name2__SelectMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetMethodNamesOfRunset_DEFINED
#define SOAP_TYPE___name2__GetMethodNamesOfRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetMethodNamesOfRunset(struct soap*, struct __name2__GetMethodNamesOfRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetMethodNamesOfRunset(struct soap*, const struct __name2__GetMethodNamesOfRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetMethodNamesOfRunset(struct soap*, const char*, int, const struct __name2__GetMethodNamesOfRunset *, const char*);
SOAP_FMAC3 struct __name2__GetMethodNamesOfRunset * SOAP_FMAC4 soap_in___name2__GetMethodNamesOfRunset(struct soap*, const char*, struct __name2__GetMethodNamesOfRunset *, const char*);
SOAP_FMAC1 struct __name2__GetMethodNamesOfRunset * SOAP_FMAC2 soap_instantiate___name2__GetMethodNamesOfRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetMethodNamesOfRunset * soap_new___name2__GetMethodNamesOfRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetMethodNamesOfRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetMethodNamesOfRunset * soap_new_req___name2__GetMethodNamesOfRunset(
	struct soap *soap)
{
	struct __name2__GetMethodNamesOfRunset *_p = ::soap_new___name2__GetMethodNamesOfRunset(soap);
	if (_p)
	{	::soap_default___name2__GetMethodNamesOfRunset(soap, _p);
	}
	return _p;
}

inline struct __name2__GetMethodNamesOfRunset * soap_new_set___name2__GetMethodNamesOfRunset(
	struct soap *soap,
	_tempuri__GetMethodNamesOfRunset *tempuri__GetMethodNamesOfRunset)
{
	struct __name2__GetMethodNamesOfRunset *_p = ::soap_new___name2__GetMethodNamesOfRunset(soap);
	if (_p)
	{	::soap_default___name2__GetMethodNamesOfRunset(soap, _p);
		_p->tempuri__GetMethodNamesOfRunset = tempuri__GetMethodNamesOfRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetMethodNamesOfRunset(struct soap*, const struct __name2__GetMethodNamesOfRunset *, const char*, const char*);

inline int soap_write___name2__GetMethodNamesOfRunset(struct soap *soap, struct __name2__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetMethodNamesOfRunset(soap, p), 0) || ::soap_put___name2__GetMethodNamesOfRunset(soap, p, "-name2:GetMethodNamesOfRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetMethodNamesOfRunset(struct soap *soap, const char *URL, struct __name2__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetMethodNamesOfRunset(soap, p), 0) || ::soap_put___name2__GetMethodNamesOfRunset(soap, p, "-name2:GetMethodNamesOfRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetMethodNamesOfRunset(struct soap *soap, const char *URL, struct __name2__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetMethodNamesOfRunset(soap, p), 0) || ::soap_put___name2__GetMethodNamesOfRunset(soap, p, "-name2:GetMethodNamesOfRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetMethodNamesOfRunset(struct soap *soap, const char *URL, struct __name2__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetMethodNamesOfRunset(soap, p), 0) || ::soap_put___name2__GetMethodNamesOfRunset(soap, p, "-name2:GetMethodNamesOfRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetMethodNamesOfRunset * SOAP_FMAC4 soap_get___name2__GetMethodNamesOfRunset(struct soap*, struct __name2__GetMethodNamesOfRunset *, const char*, const char*);

inline int soap_read___name2__GetMethodNamesOfRunset(struct soap *soap, struct __name2__GetMethodNamesOfRunset *p)
{
	if (p)
	{	::soap_default___name2__GetMethodNamesOfRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetMethodNamesOfRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetMethodNamesOfRunset(struct soap *soap, const char *URL, struct __name2__GetMethodNamesOfRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetMethodNamesOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetMethodNamesOfRunset(struct soap *soap, struct __name2__GetMethodNamesOfRunset *p)
{
	if (::soap_read___name2__GetMethodNamesOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetAssayTypeOfRunset_DEFINED
#define SOAP_TYPE___name2__GetAssayTypeOfRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetAssayTypeOfRunset(struct soap*, struct __name2__GetAssayTypeOfRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetAssayTypeOfRunset(struct soap*, const struct __name2__GetAssayTypeOfRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetAssayTypeOfRunset(struct soap*, const char*, int, const struct __name2__GetAssayTypeOfRunset *, const char*);
SOAP_FMAC3 struct __name2__GetAssayTypeOfRunset * SOAP_FMAC4 soap_in___name2__GetAssayTypeOfRunset(struct soap*, const char*, struct __name2__GetAssayTypeOfRunset *, const char*);
SOAP_FMAC1 struct __name2__GetAssayTypeOfRunset * SOAP_FMAC2 soap_instantiate___name2__GetAssayTypeOfRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetAssayTypeOfRunset * soap_new___name2__GetAssayTypeOfRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetAssayTypeOfRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetAssayTypeOfRunset * soap_new_req___name2__GetAssayTypeOfRunset(
	struct soap *soap)
{
	struct __name2__GetAssayTypeOfRunset *_p = ::soap_new___name2__GetAssayTypeOfRunset(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypeOfRunset(soap, _p);
	}
	return _p;
}

inline struct __name2__GetAssayTypeOfRunset * soap_new_set___name2__GetAssayTypeOfRunset(
	struct soap *soap,
	_tempuri__GetAssayTypeOfRunset *tempuri__GetAssayTypeOfRunset)
{
	struct __name2__GetAssayTypeOfRunset *_p = ::soap_new___name2__GetAssayTypeOfRunset(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypeOfRunset(soap, _p);
		_p->tempuri__GetAssayTypeOfRunset = tempuri__GetAssayTypeOfRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetAssayTypeOfRunset(struct soap*, const struct __name2__GetAssayTypeOfRunset *, const char*, const char*);

inline int soap_write___name2__GetAssayTypeOfRunset(struct soap *soap, struct __name2__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetAssayTypeOfRunset(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfRunset(soap, p, "-name2:GetAssayTypeOfRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetAssayTypeOfRunset(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfRunset(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfRunset(soap, p, "-name2:GetAssayTypeOfRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetAssayTypeOfRunset(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfRunset(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfRunset(soap, p, "-name2:GetAssayTypeOfRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetAssayTypeOfRunset(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfRunset(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfRunset(soap, p, "-name2:GetAssayTypeOfRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetAssayTypeOfRunset * SOAP_FMAC4 soap_get___name2__GetAssayTypeOfRunset(struct soap*, struct __name2__GetAssayTypeOfRunset *, const char*, const char*);

inline int soap_read___name2__GetAssayTypeOfRunset(struct soap *soap, struct __name2__GetAssayTypeOfRunset *p)
{
	if (p)
	{	::soap_default___name2__GetAssayTypeOfRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetAssayTypeOfRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetAssayTypeOfRunset(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetAssayTypeOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetAssayTypeOfRunset(struct soap *soap, struct __name2__GetAssayTypeOfRunset *p)
{
	if (::soap_read___name2__GetAssayTypeOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetAssayTypeOfCurrentRunset_DEFINED
#define SOAP_TYPE___name2__GetAssayTypeOfCurrentRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetAssayTypeOfCurrentRunset(struct soap*, struct __name2__GetAssayTypeOfCurrentRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetAssayTypeOfCurrentRunset(struct soap*, const struct __name2__GetAssayTypeOfCurrentRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetAssayTypeOfCurrentRunset(struct soap*, const char*, int, const struct __name2__GetAssayTypeOfCurrentRunset *, const char*);
SOAP_FMAC3 struct __name2__GetAssayTypeOfCurrentRunset * SOAP_FMAC4 soap_in___name2__GetAssayTypeOfCurrentRunset(struct soap*, const char*, struct __name2__GetAssayTypeOfCurrentRunset *, const char*);
SOAP_FMAC1 struct __name2__GetAssayTypeOfCurrentRunset * SOAP_FMAC2 soap_instantiate___name2__GetAssayTypeOfCurrentRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetAssayTypeOfCurrentRunset * soap_new___name2__GetAssayTypeOfCurrentRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetAssayTypeOfCurrentRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetAssayTypeOfCurrentRunset * soap_new_req___name2__GetAssayTypeOfCurrentRunset(
	struct soap *soap)
{
	struct __name2__GetAssayTypeOfCurrentRunset *_p = ::soap_new___name2__GetAssayTypeOfCurrentRunset(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypeOfCurrentRunset(soap, _p);
	}
	return _p;
}

inline struct __name2__GetAssayTypeOfCurrentRunset * soap_new_set___name2__GetAssayTypeOfCurrentRunset(
	struct soap *soap,
	_tempuri__GetAssayTypeOfCurrentRunset *tempuri__GetAssayTypeOfCurrentRunset)
{
	struct __name2__GetAssayTypeOfCurrentRunset *_p = ::soap_new___name2__GetAssayTypeOfCurrentRunset(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypeOfCurrentRunset(soap, _p);
		_p->tempuri__GetAssayTypeOfCurrentRunset = tempuri__GetAssayTypeOfCurrentRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetAssayTypeOfCurrentRunset(struct soap*, const struct __name2__GetAssayTypeOfCurrentRunset *, const char*, const char*);

inline int soap_write___name2__GetAssayTypeOfCurrentRunset(struct soap *soap, struct __name2__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetAssayTypeOfCurrentRunset(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfCurrentRunset(soap, p, "-name2:GetAssayTypeOfCurrentRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfCurrentRunset(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfCurrentRunset(soap, p, "-name2:GetAssayTypeOfCurrentRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfCurrentRunset(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfCurrentRunset(soap, p, "-name2:GetAssayTypeOfCurrentRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfCurrentRunset(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfCurrentRunset(soap, p, "-name2:GetAssayTypeOfCurrentRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetAssayTypeOfCurrentRunset * SOAP_FMAC4 soap_get___name2__GetAssayTypeOfCurrentRunset(struct soap*, struct __name2__GetAssayTypeOfCurrentRunset *, const char*, const char*);

inline int soap_read___name2__GetAssayTypeOfCurrentRunset(struct soap *soap, struct __name2__GetAssayTypeOfCurrentRunset *p)
{
	if (p)
	{	::soap_default___name2__GetAssayTypeOfCurrentRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetAssayTypeOfCurrentRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfCurrentRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetAssayTypeOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetAssayTypeOfCurrentRunset(struct soap *soap, struct __name2__GetAssayTypeOfCurrentRunset *p)
{
	if (::soap_read___name2__GetAssayTypeOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetNameOfCurrentRunset_DEFINED
#define SOAP_TYPE___name2__GetNameOfCurrentRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetNameOfCurrentRunset(struct soap*, struct __name2__GetNameOfCurrentRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetNameOfCurrentRunset(struct soap*, const struct __name2__GetNameOfCurrentRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetNameOfCurrentRunset(struct soap*, const char*, int, const struct __name2__GetNameOfCurrentRunset *, const char*);
SOAP_FMAC3 struct __name2__GetNameOfCurrentRunset * SOAP_FMAC4 soap_in___name2__GetNameOfCurrentRunset(struct soap*, const char*, struct __name2__GetNameOfCurrentRunset *, const char*);
SOAP_FMAC1 struct __name2__GetNameOfCurrentRunset * SOAP_FMAC2 soap_instantiate___name2__GetNameOfCurrentRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetNameOfCurrentRunset * soap_new___name2__GetNameOfCurrentRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetNameOfCurrentRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetNameOfCurrentRunset * soap_new_req___name2__GetNameOfCurrentRunset(
	struct soap *soap)
{
	struct __name2__GetNameOfCurrentRunset *_p = ::soap_new___name2__GetNameOfCurrentRunset(soap);
	if (_p)
	{	::soap_default___name2__GetNameOfCurrentRunset(soap, _p);
	}
	return _p;
}

inline struct __name2__GetNameOfCurrentRunset * soap_new_set___name2__GetNameOfCurrentRunset(
	struct soap *soap,
	_tempuri__GetNameOfCurrentRunset *tempuri__GetNameOfCurrentRunset)
{
	struct __name2__GetNameOfCurrentRunset *_p = ::soap_new___name2__GetNameOfCurrentRunset(soap);
	if (_p)
	{	::soap_default___name2__GetNameOfCurrentRunset(soap, _p);
		_p->tempuri__GetNameOfCurrentRunset = tempuri__GetNameOfCurrentRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetNameOfCurrentRunset(struct soap*, const struct __name2__GetNameOfCurrentRunset *, const char*, const char*);

inline int soap_write___name2__GetNameOfCurrentRunset(struct soap *soap, struct __name2__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetNameOfCurrentRunset(soap, p), 0) || ::soap_put___name2__GetNameOfCurrentRunset(soap, p, "-name2:GetNameOfCurrentRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetNameOfCurrentRunset(struct soap *soap, const char *URL, struct __name2__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNameOfCurrentRunset(soap, p), 0) || ::soap_put___name2__GetNameOfCurrentRunset(soap, p, "-name2:GetNameOfCurrentRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetNameOfCurrentRunset(struct soap *soap, const char *URL, struct __name2__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNameOfCurrentRunset(soap, p), 0) || ::soap_put___name2__GetNameOfCurrentRunset(soap, p, "-name2:GetNameOfCurrentRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetNameOfCurrentRunset(struct soap *soap, const char *URL, struct __name2__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNameOfCurrentRunset(soap, p), 0) || ::soap_put___name2__GetNameOfCurrentRunset(soap, p, "-name2:GetNameOfCurrentRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetNameOfCurrentRunset * SOAP_FMAC4 soap_get___name2__GetNameOfCurrentRunset(struct soap*, struct __name2__GetNameOfCurrentRunset *, const char*, const char*);

inline int soap_read___name2__GetNameOfCurrentRunset(struct soap *soap, struct __name2__GetNameOfCurrentRunset *p)
{
	if (p)
	{	::soap_default___name2__GetNameOfCurrentRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetNameOfCurrentRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetNameOfCurrentRunset(struct soap *soap, const char *URL, struct __name2__GetNameOfCurrentRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetNameOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetNameOfCurrentRunset(struct soap *soap, struct __name2__GetNameOfCurrentRunset *p)
{
	if (::soap_read___name2__GetNameOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetAssayTypesOfAllRunsets_DEFINED
#define SOAP_TYPE___name2__GetAssayTypesOfAllRunsets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetAssayTypesOfAllRunsets(struct soap*, struct __name2__GetAssayTypesOfAllRunsets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetAssayTypesOfAllRunsets(struct soap*, const struct __name2__GetAssayTypesOfAllRunsets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetAssayTypesOfAllRunsets(struct soap*, const char*, int, const struct __name2__GetAssayTypesOfAllRunsets *, const char*);
SOAP_FMAC3 struct __name2__GetAssayTypesOfAllRunsets * SOAP_FMAC4 soap_in___name2__GetAssayTypesOfAllRunsets(struct soap*, const char*, struct __name2__GetAssayTypesOfAllRunsets *, const char*);
SOAP_FMAC1 struct __name2__GetAssayTypesOfAllRunsets * SOAP_FMAC2 soap_instantiate___name2__GetAssayTypesOfAllRunsets(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetAssayTypesOfAllRunsets * soap_new___name2__GetAssayTypesOfAllRunsets(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetAssayTypesOfAllRunsets(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetAssayTypesOfAllRunsets * soap_new_req___name2__GetAssayTypesOfAllRunsets(
	struct soap *soap)
{
	struct __name2__GetAssayTypesOfAllRunsets *_p = ::soap_new___name2__GetAssayTypesOfAllRunsets(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypesOfAllRunsets(soap, _p);
	}
	return _p;
}

inline struct __name2__GetAssayTypesOfAllRunsets * soap_new_set___name2__GetAssayTypesOfAllRunsets(
	struct soap *soap,
	_tempuri__GetAssayTypesOfAllRunsets *tempuri__GetAssayTypesOfAllRunsets)
{
	struct __name2__GetAssayTypesOfAllRunsets *_p = ::soap_new___name2__GetAssayTypesOfAllRunsets(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypesOfAllRunsets(soap, _p);
		_p->tempuri__GetAssayTypesOfAllRunsets = tempuri__GetAssayTypesOfAllRunsets;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetAssayTypesOfAllRunsets(struct soap*, const struct __name2__GetAssayTypesOfAllRunsets *, const char*, const char*);

inline int soap_write___name2__GetAssayTypesOfAllRunsets(struct soap *soap, struct __name2__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetAssayTypesOfAllRunsets(soap, p), 0) || ::soap_put___name2__GetAssayTypesOfAllRunsets(soap, p, "-name2:GetAssayTypesOfAllRunsets", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, struct __name2__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypesOfAllRunsets(soap, p), 0) || ::soap_put___name2__GetAssayTypesOfAllRunsets(soap, p, "-name2:GetAssayTypesOfAllRunsets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, struct __name2__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypesOfAllRunsets(soap, p), 0) || ::soap_put___name2__GetAssayTypesOfAllRunsets(soap, p, "-name2:GetAssayTypesOfAllRunsets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, struct __name2__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypesOfAllRunsets(soap, p), 0) || ::soap_put___name2__GetAssayTypesOfAllRunsets(soap, p, "-name2:GetAssayTypesOfAllRunsets", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetAssayTypesOfAllRunsets * SOAP_FMAC4 soap_get___name2__GetAssayTypesOfAllRunsets(struct soap*, struct __name2__GetAssayTypesOfAllRunsets *, const char*, const char*);

inline int soap_read___name2__GetAssayTypesOfAllRunsets(struct soap *soap, struct __name2__GetAssayTypesOfAllRunsets *p)
{
	if (p)
	{	::soap_default___name2__GetAssayTypesOfAllRunsets(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetAssayTypesOfAllRunsets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, struct __name2__GetAssayTypesOfAllRunsets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetAssayTypesOfAllRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetAssayTypesOfAllRunsets(struct soap *soap, struct __name2__GetAssayTypesOfAllRunsets *p)
{
	if (::soap_read___name2__GetAssayTypesOfAllRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetNamesOfRunsetsOfAssayType_DEFINED
#define SOAP_TYPE___name2__GetNamesOfRunsetsOfAssayType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetNamesOfRunsetsOfAssayType(struct soap*, struct __name2__GetNamesOfRunsetsOfAssayType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetNamesOfRunsetsOfAssayType(struct soap*, const struct __name2__GetNamesOfRunsetsOfAssayType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetNamesOfRunsetsOfAssayType(struct soap*, const char*, int, const struct __name2__GetNamesOfRunsetsOfAssayType *, const char*);
SOAP_FMAC3 struct __name2__GetNamesOfRunsetsOfAssayType * SOAP_FMAC4 soap_in___name2__GetNamesOfRunsetsOfAssayType(struct soap*, const char*, struct __name2__GetNamesOfRunsetsOfAssayType *, const char*);
SOAP_FMAC1 struct __name2__GetNamesOfRunsetsOfAssayType * SOAP_FMAC2 soap_instantiate___name2__GetNamesOfRunsetsOfAssayType(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetNamesOfRunsetsOfAssayType * soap_new___name2__GetNamesOfRunsetsOfAssayType(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetNamesOfRunsetsOfAssayType(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetNamesOfRunsetsOfAssayType * soap_new_req___name2__GetNamesOfRunsetsOfAssayType(
	struct soap *soap)
{
	struct __name2__GetNamesOfRunsetsOfAssayType *_p = ::soap_new___name2__GetNamesOfRunsetsOfAssayType(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfRunsetsOfAssayType(soap, _p);
	}
	return _p;
}

inline struct __name2__GetNamesOfRunsetsOfAssayType * soap_new_set___name2__GetNamesOfRunsetsOfAssayType(
	struct soap *soap,
	_tempuri__GetNamesOfRunsetsOfAssayType *tempuri__GetNamesOfRunsetsOfAssayType)
{
	struct __name2__GetNamesOfRunsetsOfAssayType *_p = ::soap_new___name2__GetNamesOfRunsetsOfAssayType(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfRunsetsOfAssayType(soap, _p);
		_p->tempuri__GetNamesOfRunsetsOfAssayType = tempuri__GetNamesOfRunsetsOfAssayType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetNamesOfRunsetsOfAssayType(struct soap*, const struct __name2__GetNamesOfRunsetsOfAssayType *, const char*, const char*);

inline int soap_write___name2__GetNamesOfRunsetsOfAssayType(struct soap *soap, struct __name2__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetNamesOfRunsetsOfAssayType(soap, p), 0) || ::soap_put___name2__GetNamesOfRunsetsOfAssayType(soap, p, "-name2:GetNamesOfRunsetsOfAssayType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, struct __name2__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfRunsetsOfAssayType(soap, p), 0) || ::soap_put___name2__GetNamesOfRunsetsOfAssayType(soap, p, "-name2:GetNamesOfRunsetsOfAssayType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, struct __name2__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfRunsetsOfAssayType(soap, p), 0) || ::soap_put___name2__GetNamesOfRunsetsOfAssayType(soap, p, "-name2:GetNamesOfRunsetsOfAssayType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, struct __name2__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfRunsetsOfAssayType(soap, p), 0) || ::soap_put___name2__GetNamesOfRunsetsOfAssayType(soap, p, "-name2:GetNamesOfRunsetsOfAssayType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetNamesOfRunsetsOfAssayType * SOAP_FMAC4 soap_get___name2__GetNamesOfRunsetsOfAssayType(struct soap*, struct __name2__GetNamesOfRunsetsOfAssayType *, const char*, const char*);

inline int soap_read___name2__GetNamesOfRunsetsOfAssayType(struct soap *soap, struct __name2__GetNamesOfRunsetsOfAssayType *p)
{
	if (p)
	{	::soap_default___name2__GetNamesOfRunsetsOfAssayType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetNamesOfRunsetsOfAssayType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, struct __name2__GetNamesOfRunsetsOfAssayType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetNamesOfRunsetsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetNamesOfRunsetsOfAssayType(struct soap *soap, struct __name2__GetNamesOfRunsetsOfAssayType *p)
{
	if (::soap_read___name2__GetNamesOfRunsetsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetNamesOfRunsets_DEFINED
#define SOAP_TYPE___name2__GetNamesOfRunsets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetNamesOfRunsets(struct soap*, struct __name2__GetNamesOfRunsets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetNamesOfRunsets(struct soap*, const struct __name2__GetNamesOfRunsets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetNamesOfRunsets(struct soap*, const char*, int, const struct __name2__GetNamesOfRunsets *, const char*);
SOAP_FMAC3 struct __name2__GetNamesOfRunsets * SOAP_FMAC4 soap_in___name2__GetNamesOfRunsets(struct soap*, const char*, struct __name2__GetNamesOfRunsets *, const char*);
SOAP_FMAC1 struct __name2__GetNamesOfRunsets * SOAP_FMAC2 soap_instantiate___name2__GetNamesOfRunsets(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetNamesOfRunsets * soap_new___name2__GetNamesOfRunsets(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetNamesOfRunsets(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetNamesOfRunsets * soap_new_req___name2__GetNamesOfRunsets(
	struct soap *soap)
{
	struct __name2__GetNamesOfRunsets *_p = ::soap_new___name2__GetNamesOfRunsets(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfRunsets(soap, _p);
	}
	return _p;
}

inline struct __name2__GetNamesOfRunsets * soap_new_set___name2__GetNamesOfRunsets(
	struct soap *soap,
	_tempuri__GetNamesOfRunsets *tempuri__GetNamesOfRunsets)
{
	struct __name2__GetNamesOfRunsets *_p = ::soap_new___name2__GetNamesOfRunsets(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfRunsets(soap, _p);
		_p->tempuri__GetNamesOfRunsets = tempuri__GetNamesOfRunsets;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetNamesOfRunsets(struct soap*, const struct __name2__GetNamesOfRunsets *, const char*, const char*);

inline int soap_write___name2__GetNamesOfRunsets(struct soap *soap, struct __name2__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetNamesOfRunsets(soap, p), 0) || ::soap_put___name2__GetNamesOfRunsets(soap, p, "-name2:GetNamesOfRunsets", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetNamesOfRunsets(struct soap *soap, const char *URL, struct __name2__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfRunsets(soap, p), 0) || ::soap_put___name2__GetNamesOfRunsets(soap, p, "-name2:GetNamesOfRunsets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetNamesOfRunsets(struct soap *soap, const char *URL, struct __name2__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfRunsets(soap, p), 0) || ::soap_put___name2__GetNamesOfRunsets(soap, p, "-name2:GetNamesOfRunsets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetNamesOfRunsets(struct soap *soap, const char *URL, struct __name2__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfRunsets(soap, p), 0) || ::soap_put___name2__GetNamesOfRunsets(soap, p, "-name2:GetNamesOfRunsets", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetNamesOfRunsets * SOAP_FMAC4 soap_get___name2__GetNamesOfRunsets(struct soap*, struct __name2__GetNamesOfRunsets *, const char*, const char*);

inline int soap_read___name2__GetNamesOfRunsets(struct soap *soap, struct __name2__GetNamesOfRunsets *p)
{
	if (p)
	{	::soap_default___name2__GetNamesOfRunsets(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetNamesOfRunsets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetNamesOfRunsets(struct soap *soap, const char *URL, struct __name2__GetNamesOfRunsets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetNamesOfRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetNamesOfRunsets(struct soap *soap, struct __name2__GetNamesOfRunsets *p)
{
	if (::soap_read___name2__GetNamesOfRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetAssayTypeOfMethod_DEFINED
#define SOAP_TYPE___name2__GetAssayTypeOfMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetAssayTypeOfMethod(struct soap*, struct __name2__GetAssayTypeOfMethod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetAssayTypeOfMethod(struct soap*, const struct __name2__GetAssayTypeOfMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetAssayTypeOfMethod(struct soap*, const char*, int, const struct __name2__GetAssayTypeOfMethod *, const char*);
SOAP_FMAC3 struct __name2__GetAssayTypeOfMethod * SOAP_FMAC4 soap_in___name2__GetAssayTypeOfMethod(struct soap*, const char*, struct __name2__GetAssayTypeOfMethod *, const char*);
SOAP_FMAC1 struct __name2__GetAssayTypeOfMethod * SOAP_FMAC2 soap_instantiate___name2__GetAssayTypeOfMethod(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetAssayTypeOfMethod * soap_new___name2__GetAssayTypeOfMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetAssayTypeOfMethod(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetAssayTypeOfMethod * soap_new_req___name2__GetAssayTypeOfMethod(
	struct soap *soap)
{
	struct __name2__GetAssayTypeOfMethod *_p = ::soap_new___name2__GetAssayTypeOfMethod(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypeOfMethod(soap, _p);
	}
	return _p;
}

inline struct __name2__GetAssayTypeOfMethod * soap_new_set___name2__GetAssayTypeOfMethod(
	struct soap *soap,
	_tempuri__GetAssayTypeOfMethod *tempuri__GetAssayTypeOfMethod)
{
	struct __name2__GetAssayTypeOfMethod *_p = ::soap_new___name2__GetAssayTypeOfMethod(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypeOfMethod(soap, _p);
		_p->tempuri__GetAssayTypeOfMethod = tempuri__GetAssayTypeOfMethod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetAssayTypeOfMethod(struct soap*, const struct __name2__GetAssayTypeOfMethod *, const char*, const char*);

inline int soap_write___name2__GetAssayTypeOfMethod(struct soap *soap, struct __name2__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetAssayTypeOfMethod(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfMethod(soap, p, "-name2:GetAssayTypeOfMethod", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetAssayTypeOfMethod(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfMethod(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfMethod(soap, p, "-name2:GetAssayTypeOfMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetAssayTypeOfMethod(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfMethod(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfMethod(soap, p, "-name2:GetAssayTypeOfMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetAssayTypeOfMethod(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfMethod(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfMethod(soap, p, "-name2:GetAssayTypeOfMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetAssayTypeOfMethod * SOAP_FMAC4 soap_get___name2__GetAssayTypeOfMethod(struct soap*, struct __name2__GetAssayTypeOfMethod *, const char*, const char*);

inline int soap_read___name2__GetAssayTypeOfMethod(struct soap *soap, struct __name2__GetAssayTypeOfMethod *p)
{
	if (p)
	{	::soap_default___name2__GetAssayTypeOfMethod(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetAssayTypeOfMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetAssayTypeOfMethod(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetAssayTypeOfMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetAssayTypeOfMethod(struct soap *soap, struct __name2__GetAssayTypeOfMethod *p)
{
	if (::soap_read___name2__GetAssayTypeOfMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetAssayTypeOfCurrentMethod_DEFINED
#define SOAP_TYPE___name2__GetAssayTypeOfCurrentMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetAssayTypeOfCurrentMethod(struct soap*, struct __name2__GetAssayTypeOfCurrentMethod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetAssayTypeOfCurrentMethod(struct soap*, const struct __name2__GetAssayTypeOfCurrentMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetAssayTypeOfCurrentMethod(struct soap*, const char*, int, const struct __name2__GetAssayTypeOfCurrentMethod *, const char*);
SOAP_FMAC3 struct __name2__GetAssayTypeOfCurrentMethod * SOAP_FMAC4 soap_in___name2__GetAssayTypeOfCurrentMethod(struct soap*, const char*, struct __name2__GetAssayTypeOfCurrentMethod *, const char*);
SOAP_FMAC1 struct __name2__GetAssayTypeOfCurrentMethod * SOAP_FMAC2 soap_instantiate___name2__GetAssayTypeOfCurrentMethod(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetAssayTypeOfCurrentMethod * soap_new___name2__GetAssayTypeOfCurrentMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetAssayTypeOfCurrentMethod(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetAssayTypeOfCurrentMethod * soap_new_req___name2__GetAssayTypeOfCurrentMethod(
	struct soap *soap)
{
	struct __name2__GetAssayTypeOfCurrentMethod *_p = ::soap_new___name2__GetAssayTypeOfCurrentMethod(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypeOfCurrentMethod(soap, _p);
	}
	return _p;
}

inline struct __name2__GetAssayTypeOfCurrentMethod * soap_new_set___name2__GetAssayTypeOfCurrentMethod(
	struct soap *soap,
	_tempuri__GetAssayTypeOfCurrentMethod *tempuri__GetAssayTypeOfCurrentMethod)
{
	struct __name2__GetAssayTypeOfCurrentMethod *_p = ::soap_new___name2__GetAssayTypeOfCurrentMethod(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypeOfCurrentMethod(soap, _p);
		_p->tempuri__GetAssayTypeOfCurrentMethod = tempuri__GetAssayTypeOfCurrentMethod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetAssayTypeOfCurrentMethod(struct soap*, const struct __name2__GetAssayTypeOfCurrentMethod *, const char*, const char*);

inline int soap_write___name2__GetAssayTypeOfCurrentMethod(struct soap *soap, struct __name2__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetAssayTypeOfCurrentMethod(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfCurrentMethod(soap, p, "-name2:GetAssayTypeOfCurrentMethod", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfCurrentMethod(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfCurrentMethod(soap, p, "-name2:GetAssayTypeOfCurrentMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfCurrentMethod(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfCurrentMethod(soap, p, "-name2:GetAssayTypeOfCurrentMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypeOfCurrentMethod(soap, p), 0) || ::soap_put___name2__GetAssayTypeOfCurrentMethod(soap, p, "-name2:GetAssayTypeOfCurrentMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetAssayTypeOfCurrentMethod * SOAP_FMAC4 soap_get___name2__GetAssayTypeOfCurrentMethod(struct soap*, struct __name2__GetAssayTypeOfCurrentMethod *, const char*, const char*);

inline int soap_read___name2__GetAssayTypeOfCurrentMethod(struct soap *soap, struct __name2__GetAssayTypeOfCurrentMethod *p)
{
	if (p)
	{	::soap_default___name2__GetAssayTypeOfCurrentMethod(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetAssayTypeOfCurrentMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, struct __name2__GetAssayTypeOfCurrentMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetAssayTypeOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetAssayTypeOfCurrentMethod(struct soap *soap, struct __name2__GetAssayTypeOfCurrentMethod *p)
{
	if (::soap_read___name2__GetAssayTypeOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetNameOfCurrentMethod_DEFINED
#define SOAP_TYPE___name2__GetNameOfCurrentMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetNameOfCurrentMethod(struct soap*, struct __name2__GetNameOfCurrentMethod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetNameOfCurrentMethod(struct soap*, const struct __name2__GetNameOfCurrentMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetNameOfCurrentMethod(struct soap*, const char*, int, const struct __name2__GetNameOfCurrentMethod *, const char*);
SOAP_FMAC3 struct __name2__GetNameOfCurrentMethod * SOAP_FMAC4 soap_in___name2__GetNameOfCurrentMethod(struct soap*, const char*, struct __name2__GetNameOfCurrentMethod *, const char*);
SOAP_FMAC1 struct __name2__GetNameOfCurrentMethod * SOAP_FMAC2 soap_instantiate___name2__GetNameOfCurrentMethod(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetNameOfCurrentMethod * soap_new___name2__GetNameOfCurrentMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetNameOfCurrentMethod(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetNameOfCurrentMethod * soap_new_req___name2__GetNameOfCurrentMethod(
	struct soap *soap)
{
	struct __name2__GetNameOfCurrentMethod *_p = ::soap_new___name2__GetNameOfCurrentMethod(soap);
	if (_p)
	{	::soap_default___name2__GetNameOfCurrentMethod(soap, _p);
	}
	return _p;
}

inline struct __name2__GetNameOfCurrentMethod * soap_new_set___name2__GetNameOfCurrentMethod(
	struct soap *soap,
	_tempuri__GetNameOfCurrentMethod *tempuri__GetNameOfCurrentMethod)
{
	struct __name2__GetNameOfCurrentMethod *_p = ::soap_new___name2__GetNameOfCurrentMethod(soap);
	if (_p)
	{	::soap_default___name2__GetNameOfCurrentMethod(soap, _p);
		_p->tempuri__GetNameOfCurrentMethod = tempuri__GetNameOfCurrentMethod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetNameOfCurrentMethod(struct soap*, const struct __name2__GetNameOfCurrentMethod *, const char*, const char*);

inline int soap_write___name2__GetNameOfCurrentMethod(struct soap *soap, struct __name2__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetNameOfCurrentMethod(soap, p), 0) || ::soap_put___name2__GetNameOfCurrentMethod(soap, p, "-name2:GetNameOfCurrentMethod", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetNameOfCurrentMethod(struct soap *soap, const char *URL, struct __name2__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNameOfCurrentMethod(soap, p), 0) || ::soap_put___name2__GetNameOfCurrentMethod(soap, p, "-name2:GetNameOfCurrentMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetNameOfCurrentMethod(struct soap *soap, const char *URL, struct __name2__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNameOfCurrentMethod(soap, p), 0) || ::soap_put___name2__GetNameOfCurrentMethod(soap, p, "-name2:GetNameOfCurrentMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetNameOfCurrentMethod(struct soap *soap, const char *URL, struct __name2__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNameOfCurrentMethod(soap, p), 0) || ::soap_put___name2__GetNameOfCurrentMethod(soap, p, "-name2:GetNameOfCurrentMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetNameOfCurrentMethod * SOAP_FMAC4 soap_get___name2__GetNameOfCurrentMethod(struct soap*, struct __name2__GetNameOfCurrentMethod *, const char*, const char*);

inline int soap_read___name2__GetNameOfCurrentMethod(struct soap *soap, struct __name2__GetNameOfCurrentMethod *p)
{
	if (p)
	{	::soap_default___name2__GetNameOfCurrentMethod(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetNameOfCurrentMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetNameOfCurrentMethod(struct soap *soap, const char *URL, struct __name2__GetNameOfCurrentMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetNameOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetNameOfCurrentMethod(struct soap *soap, struct __name2__GetNameOfCurrentMethod *p)
{
	if (::soap_read___name2__GetNameOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetAssayTypesOfAllMethods_DEFINED
#define SOAP_TYPE___name2__GetAssayTypesOfAllMethods_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetAssayTypesOfAllMethods(struct soap*, struct __name2__GetAssayTypesOfAllMethods *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetAssayTypesOfAllMethods(struct soap*, const struct __name2__GetAssayTypesOfAllMethods *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetAssayTypesOfAllMethods(struct soap*, const char*, int, const struct __name2__GetAssayTypesOfAllMethods *, const char*);
SOAP_FMAC3 struct __name2__GetAssayTypesOfAllMethods * SOAP_FMAC4 soap_in___name2__GetAssayTypesOfAllMethods(struct soap*, const char*, struct __name2__GetAssayTypesOfAllMethods *, const char*);
SOAP_FMAC1 struct __name2__GetAssayTypesOfAllMethods * SOAP_FMAC2 soap_instantiate___name2__GetAssayTypesOfAllMethods(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetAssayTypesOfAllMethods * soap_new___name2__GetAssayTypesOfAllMethods(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetAssayTypesOfAllMethods(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetAssayTypesOfAllMethods * soap_new_req___name2__GetAssayTypesOfAllMethods(
	struct soap *soap)
{
	struct __name2__GetAssayTypesOfAllMethods *_p = ::soap_new___name2__GetAssayTypesOfAllMethods(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypesOfAllMethods(soap, _p);
	}
	return _p;
}

inline struct __name2__GetAssayTypesOfAllMethods * soap_new_set___name2__GetAssayTypesOfAllMethods(
	struct soap *soap,
	_tempuri__GetAssayTypesOfAllMethods *tempuri__GetAssayTypesOfAllMethods)
{
	struct __name2__GetAssayTypesOfAllMethods *_p = ::soap_new___name2__GetAssayTypesOfAllMethods(soap);
	if (_p)
	{	::soap_default___name2__GetAssayTypesOfAllMethods(soap, _p);
		_p->tempuri__GetAssayTypesOfAllMethods = tempuri__GetAssayTypesOfAllMethods;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetAssayTypesOfAllMethods(struct soap*, const struct __name2__GetAssayTypesOfAllMethods *, const char*, const char*);

inline int soap_write___name2__GetAssayTypesOfAllMethods(struct soap *soap, struct __name2__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetAssayTypesOfAllMethods(soap, p), 0) || ::soap_put___name2__GetAssayTypesOfAllMethods(soap, p, "-name2:GetAssayTypesOfAllMethods", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, struct __name2__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypesOfAllMethods(soap, p), 0) || ::soap_put___name2__GetAssayTypesOfAllMethods(soap, p, "-name2:GetAssayTypesOfAllMethods", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, struct __name2__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypesOfAllMethods(soap, p), 0) || ::soap_put___name2__GetAssayTypesOfAllMethods(soap, p, "-name2:GetAssayTypesOfAllMethods", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, struct __name2__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetAssayTypesOfAllMethods(soap, p), 0) || ::soap_put___name2__GetAssayTypesOfAllMethods(soap, p, "-name2:GetAssayTypesOfAllMethods", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetAssayTypesOfAllMethods * SOAP_FMAC4 soap_get___name2__GetAssayTypesOfAllMethods(struct soap*, struct __name2__GetAssayTypesOfAllMethods *, const char*, const char*);

inline int soap_read___name2__GetAssayTypesOfAllMethods(struct soap *soap, struct __name2__GetAssayTypesOfAllMethods *p)
{
	if (p)
	{	::soap_default___name2__GetAssayTypesOfAllMethods(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetAssayTypesOfAllMethods(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, struct __name2__GetAssayTypesOfAllMethods *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetAssayTypesOfAllMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetAssayTypesOfAllMethods(struct soap *soap, struct __name2__GetAssayTypesOfAllMethods *p)
{
	if (::soap_read___name2__GetAssayTypesOfAllMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetNamesOfMethodsOfAssayType_DEFINED
#define SOAP_TYPE___name2__GetNamesOfMethodsOfAssayType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetNamesOfMethodsOfAssayType(struct soap*, struct __name2__GetNamesOfMethodsOfAssayType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetNamesOfMethodsOfAssayType(struct soap*, const struct __name2__GetNamesOfMethodsOfAssayType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetNamesOfMethodsOfAssayType(struct soap*, const char*, int, const struct __name2__GetNamesOfMethodsOfAssayType *, const char*);
SOAP_FMAC3 struct __name2__GetNamesOfMethodsOfAssayType * SOAP_FMAC4 soap_in___name2__GetNamesOfMethodsOfAssayType(struct soap*, const char*, struct __name2__GetNamesOfMethodsOfAssayType *, const char*);
SOAP_FMAC1 struct __name2__GetNamesOfMethodsOfAssayType * SOAP_FMAC2 soap_instantiate___name2__GetNamesOfMethodsOfAssayType(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetNamesOfMethodsOfAssayType * soap_new___name2__GetNamesOfMethodsOfAssayType(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetNamesOfMethodsOfAssayType(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetNamesOfMethodsOfAssayType * soap_new_req___name2__GetNamesOfMethodsOfAssayType(
	struct soap *soap)
{
	struct __name2__GetNamesOfMethodsOfAssayType *_p = ::soap_new___name2__GetNamesOfMethodsOfAssayType(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfMethodsOfAssayType(soap, _p);
	}
	return _p;
}

inline struct __name2__GetNamesOfMethodsOfAssayType * soap_new_set___name2__GetNamesOfMethodsOfAssayType(
	struct soap *soap,
	_tempuri__GetNamesOfMethodsOfAssayType *tempuri__GetNamesOfMethodsOfAssayType)
{
	struct __name2__GetNamesOfMethodsOfAssayType *_p = ::soap_new___name2__GetNamesOfMethodsOfAssayType(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfMethodsOfAssayType(soap, _p);
		_p->tempuri__GetNamesOfMethodsOfAssayType = tempuri__GetNamesOfMethodsOfAssayType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetNamesOfMethodsOfAssayType(struct soap*, const struct __name2__GetNamesOfMethodsOfAssayType *, const char*, const char*);

inline int soap_write___name2__GetNamesOfMethodsOfAssayType(struct soap *soap, struct __name2__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetNamesOfMethodsOfAssayType(soap, p), 0) || ::soap_put___name2__GetNamesOfMethodsOfAssayType(soap, p, "-name2:GetNamesOfMethodsOfAssayType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, struct __name2__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfMethodsOfAssayType(soap, p), 0) || ::soap_put___name2__GetNamesOfMethodsOfAssayType(soap, p, "-name2:GetNamesOfMethodsOfAssayType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, struct __name2__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfMethodsOfAssayType(soap, p), 0) || ::soap_put___name2__GetNamesOfMethodsOfAssayType(soap, p, "-name2:GetNamesOfMethodsOfAssayType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, struct __name2__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfMethodsOfAssayType(soap, p), 0) || ::soap_put___name2__GetNamesOfMethodsOfAssayType(soap, p, "-name2:GetNamesOfMethodsOfAssayType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetNamesOfMethodsOfAssayType * SOAP_FMAC4 soap_get___name2__GetNamesOfMethodsOfAssayType(struct soap*, struct __name2__GetNamesOfMethodsOfAssayType *, const char*, const char*);

inline int soap_read___name2__GetNamesOfMethodsOfAssayType(struct soap *soap, struct __name2__GetNamesOfMethodsOfAssayType *p)
{
	if (p)
	{	::soap_default___name2__GetNamesOfMethodsOfAssayType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetNamesOfMethodsOfAssayType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, struct __name2__GetNamesOfMethodsOfAssayType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetNamesOfMethodsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetNamesOfMethodsOfAssayType(struct soap *soap, struct __name2__GetNamesOfMethodsOfAssayType *p)
{
	if (::soap_read___name2__GetNamesOfMethodsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name2__GetNamesOfMethods_DEFINED
#define SOAP_TYPE___name2__GetNamesOfMethods_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name2__GetNamesOfMethods(struct soap*, struct __name2__GetNamesOfMethods *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name2__GetNamesOfMethods(struct soap*, const struct __name2__GetNamesOfMethods *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name2__GetNamesOfMethods(struct soap*, const char*, int, const struct __name2__GetNamesOfMethods *, const char*);
SOAP_FMAC3 struct __name2__GetNamesOfMethods * SOAP_FMAC4 soap_in___name2__GetNamesOfMethods(struct soap*, const char*, struct __name2__GetNamesOfMethods *, const char*);
SOAP_FMAC1 struct __name2__GetNamesOfMethods * SOAP_FMAC2 soap_instantiate___name2__GetNamesOfMethods(struct soap*, int, const char*, const char*, size_t*);

inline struct __name2__GetNamesOfMethods * soap_new___name2__GetNamesOfMethods(struct soap *soap, int n = -1)
{
	return soap_instantiate___name2__GetNamesOfMethods(soap, n, NULL, NULL, NULL);
}

inline struct __name2__GetNamesOfMethods * soap_new_req___name2__GetNamesOfMethods(
	struct soap *soap)
{
	struct __name2__GetNamesOfMethods *_p = ::soap_new___name2__GetNamesOfMethods(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfMethods(soap, _p);
	}
	return _p;
}

inline struct __name2__GetNamesOfMethods * soap_new_set___name2__GetNamesOfMethods(
	struct soap *soap,
	_tempuri__GetNamesOfMethods *tempuri__GetNamesOfMethods)
{
	struct __name2__GetNamesOfMethods *_p = ::soap_new___name2__GetNamesOfMethods(soap);
	if (_p)
	{	::soap_default___name2__GetNamesOfMethods(soap, _p);
		_p->tempuri__GetNamesOfMethods = tempuri__GetNamesOfMethods;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name2__GetNamesOfMethods(struct soap*, const struct __name2__GetNamesOfMethods *, const char*, const char*);

inline int soap_write___name2__GetNamesOfMethods(struct soap *soap, struct __name2__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name2__GetNamesOfMethods(soap, p), 0) || ::soap_put___name2__GetNamesOfMethods(soap, p, "-name2:GetNamesOfMethods", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name2__GetNamesOfMethods(struct soap *soap, const char *URL, struct __name2__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfMethods(soap, p), 0) || ::soap_put___name2__GetNamesOfMethods(soap, p, "-name2:GetNamesOfMethods", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name2__GetNamesOfMethods(struct soap *soap, const char *URL, struct __name2__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfMethods(soap, p), 0) || ::soap_put___name2__GetNamesOfMethods(soap, p, "-name2:GetNamesOfMethods", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name2__GetNamesOfMethods(struct soap *soap, const char *URL, struct __name2__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name2__GetNamesOfMethods(soap, p), 0) || ::soap_put___name2__GetNamesOfMethods(soap, p, "-name2:GetNamesOfMethods", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name2__GetNamesOfMethods * SOAP_FMAC4 soap_get___name2__GetNamesOfMethods(struct soap*, struct __name2__GetNamesOfMethods *, const char*, const char*);

inline int soap_read___name2__GetNamesOfMethods(struct soap *soap, struct __name2__GetNamesOfMethods *p)
{
	if (p)
	{	::soap_default___name2__GetNamesOfMethods(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name2__GetNamesOfMethods(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name2__GetNamesOfMethods(struct soap *soap, const char *URL, struct __name2__GetNamesOfMethods *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name2__GetNamesOfMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name2__GetNamesOfMethods(struct soap *soap, struct __name2__GetNamesOfMethods *p)
{
	if (::soap_read___name2__GetNamesOfMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetWarnings_DEFINED
#define SOAP_TYPE___name__GetWarnings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetWarnings(struct soap*, struct __name__GetWarnings *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetWarnings(struct soap*, const struct __name__GetWarnings *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetWarnings(struct soap*, const char*, int, const struct __name__GetWarnings *, const char*);
SOAP_FMAC3 struct __name__GetWarnings * SOAP_FMAC4 soap_in___name__GetWarnings(struct soap*, const char*, struct __name__GetWarnings *, const char*);
SOAP_FMAC1 struct __name__GetWarnings * SOAP_FMAC2 soap_instantiate___name__GetWarnings(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetWarnings * soap_new___name__GetWarnings(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetWarnings(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetWarnings * soap_new_req___name__GetWarnings(
	struct soap *soap)
{
	struct __name__GetWarnings *_p = ::soap_new___name__GetWarnings(soap);
	if (_p)
	{	::soap_default___name__GetWarnings(soap, _p);
	}
	return _p;
}

inline struct __name__GetWarnings * soap_new_set___name__GetWarnings(
	struct soap *soap,
	_tempuri__GetWarnings *tempuri__GetWarnings)
{
	struct __name__GetWarnings *_p = ::soap_new___name__GetWarnings(soap);
	if (_p)
	{	::soap_default___name__GetWarnings(soap, _p);
		_p->tempuri__GetWarnings = tempuri__GetWarnings;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetWarnings(struct soap*, const struct __name__GetWarnings *, const char*, const char*);

inline int soap_write___name__GetWarnings(struct soap *soap, struct __name__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetWarnings(soap, p), 0) || ::soap_put___name__GetWarnings(soap, p, "-name:GetWarnings", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetWarnings(struct soap *soap, const char *URL, struct __name__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetWarnings(soap, p), 0) || ::soap_put___name__GetWarnings(soap, p, "-name:GetWarnings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetWarnings(struct soap *soap, const char *URL, struct __name__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetWarnings(soap, p), 0) || ::soap_put___name__GetWarnings(soap, p, "-name:GetWarnings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetWarnings(struct soap *soap, const char *URL, struct __name__GetWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetWarnings(soap, p), 0) || ::soap_put___name__GetWarnings(soap, p, "-name:GetWarnings", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetWarnings * SOAP_FMAC4 soap_get___name__GetWarnings(struct soap*, struct __name__GetWarnings *, const char*, const char*);

inline int soap_read___name__GetWarnings(struct soap *soap, struct __name__GetWarnings *p)
{
	if (p)
	{	::soap_default___name__GetWarnings(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetWarnings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetWarnings(struct soap *soap, const char *URL, struct __name__GetWarnings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetWarnings(struct soap *soap, struct __name__GetWarnings *p)
{
	if (::soap_read___name__GetWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__HasWarnings_DEFINED
#define SOAP_TYPE___name__HasWarnings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__HasWarnings(struct soap*, struct __name__HasWarnings *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__HasWarnings(struct soap*, const struct __name__HasWarnings *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__HasWarnings(struct soap*, const char*, int, const struct __name__HasWarnings *, const char*);
SOAP_FMAC3 struct __name__HasWarnings * SOAP_FMAC4 soap_in___name__HasWarnings(struct soap*, const char*, struct __name__HasWarnings *, const char*);
SOAP_FMAC1 struct __name__HasWarnings * SOAP_FMAC2 soap_instantiate___name__HasWarnings(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__HasWarnings * soap_new___name__HasWarnings(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__HasWarnings(soap, n, NULL, NULL, NULL);
}

inline struct __name__HasWarnings * soap_new_req___name__HasWarnings(
	struct soap *soap)
{
	struct __name__HasWarnings *_p = ::soap_new___name__HasWarnings(soap);
	if (_p)
	{	::soap_default___name__HasWarnings(soap, _p);
	}
	return _p;
}

inline struct __name__HasWarnings * soap_new_set___name__HasWarnings(
	struct soap *soap,
	_tempuri__HasWarnings *tempuri__HasWarnings)
{
	struct __name__HasWarnings *_p = ::soap_new___name__HasWarnings(soap);
	if (_p)
	{	::soap_default___name__HasWarnings(soap, _p);
		_p->tempuri__HasWarnings = tempuri__HasWarnings;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__HasWarnings(struct soap*, const struct __name__HasWarnings *, const char*, const char*);

inline int soap_write___name__HasWarnings(struct soap *soap, struct __name__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__HasWarnings(soap, p), 0) || ::soap_put___name__HasWarnings(soap, p, "-name:HasWarnings", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__HasWarnings(struct soap *soap, const char *URL, struct __name__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__HasWarnings(soap, p), 0) || ::soap_put___name__HasWarnings(soap, p, "-name:HasWarnings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__HasWarnings(struct soap *soap, const char *URL, struct __name__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__HasWarnings(soap, p), 0) || ::soap_put___name__HasWarnings(soap, p, "-name:HasWarnings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__HasWarnings(struct soap *soap, const char *URL, struct __name__HasWarnings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__HasWarnings(soap, p), 0) || ::soap_put___name__HasWarnings(soap, p, "-name:HasWarnings", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__HasWarnings * SOAP_FMAC4 soap_get___name__HasWarnings(struct soap*, struct __name__HasWarnings *, const char*, const char*);

inline int soap_read___name__HasWarnings(struct soap *soap, struct __name__HasWarnings *p)
{
	if (p)
	{	::soap_default___name__HasWarnings(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__HasWarnings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__HasWarnings(struct soap *soap, const char *URL, struct __name__HasWarnings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__HasWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__HasWarnings(struct soap *soap, struct __name__HasWarnings *p)
{
	if (::soap_read___name__HasWarnings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetErrors_DEFINED
#define SOAP_TYPE___name__GetErrors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetErrors(struct soap*, struct __name__GetErrors *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetErrors(struct soap*, const struct __name__GetErrors *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetErrors(struct soap*, const char*, int, const struct __name__GetErrors *, const char*);
SOAP_FMAC3 struct __name__GetErrors * SOAP_FMAC4 soap_in___name__GetErrors(struct soap*, const char*, struct __name__GetErrors *, const char*);
SOAP_FMAC1 struct __name__GetErrors * SOAP_FMAC2 soap_instantiate___name__GetErrors(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetErrors * soap_new___name__GetErrors(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetErrors(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetErrors * soap_new_req___name__GetErrors(
	struct soap *soap)
{
	struct __name__GetErrors *_p = ::soap_new___name__GetErrors(soap);
	if (_p)
	{	::soap_default___name__GetErrors(soap, _p);
	}
	return _p;
}

inline struct __name__GetErrors * soap_new_set___name__GetErrors(
	struct soap *soap,
	_tempuri__GetErrors *tempuri__GetErrors)
{
	struct __name__GetErrors *_p = ::soap_new___name__GetErrors(soap);
	if (_p)
	{	::soap_default___name__GetErrors(soap, _p);
		_p->tempuri__GetErrors = tempuri__GetErrors;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetErrors(struct soap*, const struct __name__GetErrors *, const char*, const char*);

inline int soap_write___name__GetErrors(struct soap *soap, struct __name__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetErrors(soap, p), 0) || ::soap_put___name__GetErrors(soap, p, "-name:GetErrors", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetErrors(struct soap *soap, const char *URL, struct __name__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetErrors(soap, p), 0) || ::soap_put___name__GetErrors(soap, p, "-name:GetErrors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetErrors(struct soap *soap, const char *URL, struct __name__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetErrors(soap, p), 0) || ::soap_put___name__GetErrors(soap, p, "-name:GetErrors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetErrors(struct soap *soap, const char *URL, struct __name__GetErrors const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetErrors(soap, p), 0) || ::soap_put___name__GetErrors(soap, p, "-name:GetErrors", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetErrors * SOAP_FMAC4 soap_get___name__GetErrors(struct soap*, struct __name__GetErrors *, const char*, const char*);

inline int soap_read___name__GetErrors(struct soap *soap, struct __name__GetErrors *p)
{
	if (p)
	{	::soap_default___name__GetErrors(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetErrors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetErrors(struct soap *soap, const char *URL, struct __name__GetErrors *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetErrors(struct soap *soap, struct __name__GetErrors *p)
{
	if (::soap_read___name__GetErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__HasErrors_DEFINED
#define SOAP_TYPE___name__HasErrors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__HasErrors(struct soap*, struct __name__HasErrors *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__HasErrors(struct soap*, const struct __name__HasErrors *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__HasErrors(struct soap*, const char*, int, const struct __name__HasErrors *, const char*);
SOAP_FMAC3 struct __name__HasErrors * SOAP_FMAC4 soap_in___name__HasErrors(struct soap*, const char*, struct __name__HasErrors *, const char*);
SOAP_FMAC1 struct __name__HasErrors * SOAP_FMAC2 soap_instantiate___name__HasErrors(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__HasErrors * soap_new___name__HasErrors(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__HasErrors(soap, n, NULL, NULL, NULL);
}

inline struct __name__HasErrors * soap_new_req___name__HasErrors(
	struct soap *soap)
{
	struct __name__HasErrors *_p = ::soap_new___name__HasErrors(soap);
	if (_p)
	{	::soap_default___name__HasErrors(soap, _p);
	}
	return _p;
}

inline struct __name__HasErrors * soap_new_set___name__HasErrors(
	struct soap *soap,
	_tempuri__HasErrors *tempuri__HasErrors)
{
	struct __name__HasErrors *_p = ::soap_new___name__HasErrors(soap);
	if (_p)
	{	::soap_default___name__HasErrors(soap, _p);
		_p->tempuri__HasErrors = tempuri__HasErrors;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__HasErrors(struct soap*, const struct __name__HasErrors *, const char*, const char*);

inline int soap_write___name__HasErrors(struct soap *soap, struct __name__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__HasErrors(soap, p), 0) || ::soap_put___name__HasErrors(soap, p, "-name:HasErrors", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__HasErrors(struct soap *soap, const char *URL, struct __name__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__HasErrors(soap, p), 0) || ::soap_put___name__HasErrors(soap, p, "-name:HasErrors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__HasErrors(struct soap *soap, const char *URL, struct __name__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__HasErrors(soap, p), 0) || ::soap_put___name__HasErrors(soap, p, "-name:HasErrors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__HasErrors(struct soap *soap, const char *URL, struct __name__HasErrors const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__HasErrors(soap, p), 0) || ::soap_put___name__HasErrors(soap, p, "-name:HasErrors", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__HasErrors * SOAP_FMAC4 soap_get___name__HasErrors(struct soap*, struct __name__HasErrors *, const char*, const char*);

inline int soap_read___name__HasErrors(struct soap *soap, struct __name__HasErrors *p)
{
	if (p)
	{	::soap_default___name__HasErrors(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__HasErrors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__HasErrors(struct soap *soap, const char *URL, struct __name__HasErrors *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__HasErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__HasErrors(struct soap *soap, struct __name__HasErrors *p)
{
	if (::soap_read___name__HasErrors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetMessage_DEFINED
#define SOAP_TYPE___name__GetMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetMessage(struct soap*, struct __name__GetMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetMessage(struct soap*, const struct __name__GetMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetMessage(struct soap*, const char*, int, const struct __name__GetMessage *, const char*);
SOAP_FMAC3 struct __name__GetMessage * SOAP_FMAC4 soap_in___name__GetMessage(struct soap*, const char*, struct __name__GetMessage *, const char*);
SOAP_FMAC1 struct __name__GetMessage * SOAP_FMAC2 soap_instantiate___name__GetMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetMessage * soap_new___name__GetMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetMessage(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetMessage * soap_new_req___name__GetMessage(
	struct soap *soap)
{
	struct __name__GetMessage *_p = ::soap_new___name__GetMessage(soap);
	if (_p)
	{	::soap_default___name__GetMessage(soap, _p);
	}
	return _p;
}

inline struct __name__GetMessage * soap_new_set___name__GetMessage(
	struct soap *soap,
	_tempuri__GetMessage *tempuri__GetMessage)
{
	struct __name__GetMessage *_p = ::soap_new___name__GetMessage(soap);
	if (_p)
	{	::soap_default___name__GetMessage(soap, _p);
		_p->tempuri__GetMessage = tempuri__GetMessage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetMessage(struct soap*, const struct __name__GetMessage *, const char*, const char*);

inline int soap_write___name__GetMessage(struct soap *soap, struct __name__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetMessage(soap, p), 0) || ::soap_put___name__GetMessage(soap, p, "-name:GetMessage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetMessage(struct soap *soap, const char *URL, struct __name__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetMessage(soap, p), 0) || ::soap_put___name__GetMessage(soap, p, "-name:GetMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetMessage(struct soap *soap, const char *URL, struct __name__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetMessage(soap, p), 0) || ::soap_put___name__GetMessage(soap, p, "-name:GetMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetMessage(struct soap *soap, const char *URL, struct __name__GetMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetMessage(soap, p), 0) || ::soap_put___name__GetMessage(soap, p, "-name:GetMessage", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetMessage * SOAP_FMAC4 soap_get___name__GetMessage(struct soap*, struct __name__GetMessage *, const char*, const char*);

inline int soap_read___name__GetMessage(struct soap *soap, struct __name__GetMessage *p)
{
	if (p)
	{	::soap_default___name__GetMessage(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetMessage(struct soap *soap, const char *URL, struct __name__GetMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetMessage(struct soap *soap, struct __name__GetMessage *p)
{
	if (::soap_read___name__GetMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__HasMessage_DEFINED
#define SOAP_TYPE___name__HasMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__HasMessage(struct soap*, struct __name__HasMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__HasMessage(struct soap*, const struct __name__HasMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__HasMessage(struct soap*, const char*, int, const struct __name__HasMessage *, const char*);
SOAP_FMAC3 struct __name__HasMessage * SOAP_FMAC4 soap_in___name__HasMessage(struct soap*, const char*, struct __name__HasMessage *, const char*);
SOAP_FMAC1 struct __name__HasMessage * SOAP_FMAC2 soap_instantiate___name__HasMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__HasMessage * soap_new___name__HasMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__HasMessage(soap, n, NULL, NULL, NULL);
}

inline struct __name__HasMessage * soap_new_req___name__HasMessage(
	struct soap *soap)
{
	struct __name__HasMessage *_p = ::soap_new___name__HasMessage(soap);
	if (_p)
	{	::soap_default___name__HasMessage(soap, _p);
	}
	return _p;
}

inline struct __name__HasMessage * soap_new_set___name__HasMessage(
	struct soap *soap,
	_tempuri__HasMessage *tempuri__HasMessage)
{
	struct __name__HasMessage *_p = ::soap_new___name__HasMessage(soap);
	if (_p)
	{	::soap_default___name__HasMessage(soap, _p);
		_p->tempuri__HasMessage = tempuri__HasMessage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__HasMessage(struct soap*, const struct __name__HasMessage *, const char*, const char*);

inline int soap_write___name__HasMessage(struct soap *soap, struct __name__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__HasMessage(soap, p), 0) || ::soap_put___name__HasMessage(soap, p, "-name:HasMessage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__HasMessage(struct soap *soap, const char *URL, struct __name__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__HasMessage(soap, p), 0) || ::soap_put___name__HasMessage(soap, p, "-name:HasMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__HasMessage(struct soap *soap, const char *URL, struct __name__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__HasMessage(soap, p), 0) || ::soap_put___name__HasMessage(soap, p, "-name:HasMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__HasMessage(struct soap *soap, const char *URL, struct __name__HasMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__HasMessage(soap, p), 0) || ::soap_put___name__HasMessage(soap, p, "-name:HasMessage", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__HasMessage * SOAP_FMAC4 soap_get___name__HasMessage(struct soap*, struct __name__HasMessage *, const char*, const char*);

inline int soap_read___name__HasMessage(struct soap *soap, struct __name__HasMessage *p)
{
	if (p)
	{	::soap_default___name__HasMessage(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__HasMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__HasMessage(struct soap *soap, const char *URL, struct __name__HasMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__HasMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__HasMessage(struct soap *soap, struct __name__HasMessage *p)
{
	if (::soap_read___name__HasMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__IsSamplePlateTrayIn_DEFINED
#define SOAP_TYPE___name__IsSamplePlateTrayIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__IsSamplePlateTrayIn(struct soap*, struct __name__IsSamplePlateTrayIn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__IsSamplePlateTrayIn(struct soap*, const struct __name__IsSamplePlateTrayIn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__IsSamplePlateTrayIn(struct soap*, const char*, int, const struct __name__IsSamplePlateTrayIn *, const char*);
SOAP_FMAC3 struct __name__IsSamplePlateTrayIn * SOAP_FMAC4 soap_in___name__IsSamplePlateTrayIn(struct soap*, const char*, struct __name__IsSamplePlateTrayIn *, const char*);
SOAP_FMAC1 struct __name__IsSamplePlateTrayIn * SOAP_FMAC2 soap_instantiate___name__IsSamplePlateTrayIn(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__IsSamplePlateTrayIn * soap_new___name__IsSamplePlateTrayIn(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__IsSamplePlateTrayIn(soap, n, NULL, NULL, NULL);
}

inline struct __name__IsSamplePlateTrayIn * soap_new_req___name__IsSamplePlateTrayIn(
	struct soap *soap)
{
	struct __name__IsSamplePlateTrayIn *_p = ::soap_new___name__IsSamplePlateTrayIn(soap);
	if (_p)
	{	::soap_default___name__IsSamplePlateTrayIn(soap, _p);
	}
	return _p;
}

inline struct __name__IsSamplePlateTrayIn * soap_new_set___name__IsSamplePlateTrayIn(
	struct soap *soap,
	_tempuri__IsSamplePlateTrayIn *tempuri__IsSamplePlateTrayIn)
{
	struct __name__IsSamplePlateTrayIn *_p = ::soap_new___name__IsSamplePlateTrayIn(soap);
	if (_p)
	{	::soap_default___name__IsSamplePlateTrayIn(soap, _p);
		_p->tempuri__IsSamplePlateTrayIn = tempuri__IsSamplePlateTrayIn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__IsSamplePlateTrayIn(struct soap*, const struct __name__IsSamplePlateTrayIn *, const char*, const char*);

inline int soap_write___name__IsSamplePlateTrayIn(struct soap *soap, struct __name__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__IsSamplePlateTrayIn(soap, p), 0) || ::soap_put___name__IsSamplePlateTrayIn(soap, p, "-name:IsSamplePlateTrayIn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__IsSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__IsSamplePlateTrayIn(soap, p), 0) || ::soap_put___name__IsSamplePlateTrayIn(soap, p, "-name:IsSamplePlateTrayIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__IsSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__IsSamplePlateTrayIn(soap, p), 0) || ::soap_put___name__IsSamplePlateTrayIn(soap, p, "-name:IsSamplePlateTrayIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__IsSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name__IsSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__IsSamplePlateTrayIn(soap, p), 0) || ::soap_put___name__IsSamplePlateTrayIn(soap, p, "-name:IsSamplePlateTrayIn", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__IsSamplePlateTrayIn * SOAP_FMAC4 soap_get___name__IsSamplePlateTrayIn(struct soap*, struct __name__IsSamplePlateTrayIn *, const char*, const char*);

inline int soap_read___name__IsSamplePlateTrayIn(struct soap *soap, struct __name__IsSamplePlateTrayIn *p)
{
	if (p)
	{	::soap_default___name__IsSamplePlateTrayIn(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__IsSamplePlateTrayIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__IsSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name__IsSamplePlateTrayIn *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__IsSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__IsSamplePlateTrayIn(struct soap *soap, struct __name__IsSamplePlateTrayIn *p)
{
	if (::soap_read___name__IsSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__IsChipDocked_DEFINED
#define SOAP_TYPE___name__IsChipDocked_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__IsChipDocked(struct soap*, struct __name__IsChipDocked *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__IsChipDocked(struct soap*, const struct __name__IsChipDocked *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__IsChipDocked(struct soap*, const char*, int, const struct __name__IsChipDocked *, const char*);
SOAP_FMAC3 struct __name__IsChipDocked * SOAP_FMAC4 soap_in___name__IsChipDocked(struct soap*, const char*, struct __name__IsChipDocked *, const char*);
SOAP_FMAC1 struct __name__IsChipDocked * SOAP_FMAC2 soap_instantiate___name__IsChipDocked(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__IsChipDocked * soap_new___name__IsChipDocked(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__IsChipDocked(soap, n, NULL, NULL, NULL);
}

inline struct __name__IsChipDocked * soap_new_req___name__IsChipDocked(
	struct soap *soap)
{
	struct __name__IsChipDocked *_p = ::soap_new___name__IsChipDocked(soap);
	if (_p)
	{	::soap_default___name__IsChipDocked(soap, _p);
	}
	return _p;
}

inline struct __name__IsChipDocked * soap_new_set___name__IsChipDocked(
	struct soap *soap,
	_tempuri__IsChipDocked *tempuri__IsChipDocked)
{
	struct __name__IsChipDocked *_p = ::soap_new___name__IsChipDocked(soap);
	if (_p)
	{	::soap_default___name__IsChipDocked(soap, _p);
		_p->tempuri__IsChipDocked = tempuri__IsChipDocked;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__IsChipDocked(struct soap*, const struct __name__IsChipDocked *, const char*, const char*);

inline int soap_write___name__IsChipDocked(struct soap *soap, struct __name__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__IsChipDocked(soap, p), 0) || ::soap_put___name__IsChipDocked(soap, p, "-name:IsChipDocked", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__IsChipDocked(struct soap *soap, const char *URL, struct __name__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__IsChipDocked(soap, p), 0) || ::soap_put___name__IsChipDocked(soap, p, "-name:IsChipDocked", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__IsChipDocked(struct soap *soap, const char *URL, struct __name__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__IsChipDocked(soap, p), 0) || ::soap_put___name__IsChipDocked(soap, p, "-name:IsChipDocked", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__IsChipDocked(struct soap *soap, const char *URL, struct __name__IsChipDocked const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__IsChipDocked(soap, p), 0) || ::soap_put___name__IsChipDocked(soap, p, "-name:IsChipDocked", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__IsChipDocked * SOAP_FMAC4 soap_get___name__IsChipDocked(struct soap*, struct __name__IsChipDocked *, const char*, const char*);

inline int soap_read___name__IsChipDocked(struct soap *soap, struct __name__IsChipDocked *p)
{
	if (p)
	{	::soap_default___name__IsChipDocked(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__IsChipDocked(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__IsChipDocked(struct soap *soap, const char *URL, struct __name__IsChipDocked *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__IsChipDocked(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__IsChipDocked(struct soap *soap, struct __name__IsChipDocked *p)
{
	if (::soap_read___name__IsChipDocked(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetOperationMode_DEFINED
#define SOAP_TYPE___name__GetOperationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetOperationMode(struct soap*, struct __name__GetOperationMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetOperationMode(struct soap*, const struct __name__GetOperationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetOperationMode(struct soap*, const char*, int, const struct __name__GetOperationMode *, const char*);
SOAP_FMAC3 struct __name__GetOperationMode * SOAP_FMAC4 soap_in___name__GetOperationMode(struct soap*, const char*, struct __name__GetOperationMode *, const char*);
SOAP_FMAC1 struct __name__GetOperationMode * SOAP_FMAC2 soap_instantiate___name__GetOperationMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetOperationMode * soap_new___name__GetOperationMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetOperationMode(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetOperationMode * soap_new_req___name__GetOperationMode(
	struct soap *soap)
{
	struct __name__GetOperationMode *_p = ::soap_new___name__GetOperationMode(soap);
	if (_p)
	{	::soap_default___name__GetOperationMode(soap, _p);
	}
	return _p;
}

inline struct __name__GetOperationMode * soap_new_set___name__GetOperationMode(
	struct soap *soap,
	_tempuri__GetOperationMode *tempuri__GetOperationMode)
{
	struct __name__GetOperationMode *_p = ::soap_new___name__GetOperationMode(soap);
	if (_p)
	{	::soap_default___name__GetOperationMode(soap, _p);
		_p->tempuri__GetOperationMode = tempuri__GetOperationMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetOperationMode(struct soap*, const struct __name__GetOperationMode *, const char*, const char*);

inline int soap_write___name__GetOperationMode(struct soap *soap, struct __name__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetOperationMode(soap, p), 0) || ::soap_put___name__GetOperationMode(soap, p, "-name:GetOperationMode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetOperationMode(struct soap *soap, const char *URL, struct __name__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetOperationMode(soap, p), 0) || ::soap_put___name__GetOperationMode(soap, p, "-name:GetOperationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetOperationMode(struct soap *soap, const char *URL, struct __name__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetOperationMode(soap, p), 0) || ::soap_put___name__GetOperationMode(soap, p, "-name:GetOperationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetOperationMode(struct soap *soap, const char *URL, struct __name__GetOperationMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetOperationMode(soap, p), 0) || ::soap_put___name__GetOperationMode(soap, p, "-name:GetOperationMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetOperationMode * SOAP_FMAC4 soap_get___name__GetOperationMode(struct soap*, struct __name__GetOperationMode *, const char*, const char*);

inline int soap_read___name__GetOperationMode(struct soap *soap, struct __name__GetOperationMode *p)
{
	if (p)
	{	::soap_default___name__GetOperationMode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetOperationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetOperationMode(struct soap *soap, const char *URL, struct __name__GetOperationMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetOperationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetOperationMode(struct soap *soap, struct __name__GetOperationMode *p)
{
	if (::soap_read___name__GetOperationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__RunMaintenanceProcedure_DEFINED
#define SOAP_TYPE___name__RunMaintenanceProcedure_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__RunMaintenanceProcedure(struct soap*, struct __name__RunMaintenanceProcedure *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__RunMaintenanceProcedure(struct soap*, const struct __name__RunMaintenanceProcedure *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__RunMaintenanceProcedure(struct soap*, const char*, int, const struct __name__RunMaintenanceProcedure *, const char*);
SOAP_FMAC3 struct __name__RunMaintenanceProcedure * SOAP_FMAC4 soap_in___name__RunMaintenanceProcedure(struct soap*, const char*, struct __name__RunMaintenanceProcedure *, const char*);
SOAP_FMAC1 struct __name__RunMaintenanceProcedure * SOAP_FMAC2 soap_instantiate___name__RunMaintenanceProcedure(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__RunMaintenanceProcedure * soap_new___name__RunMaintenanceProcedure(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__RunMaintenanceProcedure(soap, n, NULL, NULL, NULL);
}

inline struct __name__RunMaintenanceProcedure * soap_new_req___name__RunMaintenanceProcedure(
	struct soap *soap)
{
	struct __name__RunMaintenanceProcedure *_p = ::soap_new___name__RunMaintenanceProcedure(soap);
	if (_p)
	{	::soap_default___name__RunMaintenanceProcedure(soap, _p);
	}
	return _p;
}

inline struct __name__RunMaintenanceProcedure * soap_new_set___name__RunMaintenanceProcedure(
	struct soap *soap,
	_tempuri__RunMaintenanceProcedure *tempuri__RunMaintenanceProcedure)
{
	struct __name__RunMaintenanceProcedure *_p = ::soap_new___name__RunMaintenanceProcedure(soap);
	if (_p)
	{	::soap_default___name__RunMaintenanceProcedure(soap, _p);
		_p->tempuri__RunMaintenanceProcedure = tempuri__RunMaintenanceProcedure;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__RunMaintenanceProcedure(struct soap*, const struct __name__RunMaintenanceProcedure *, const char*, const char*);

inline int soap_write___name__RunMaintenanceProcedure(struct soap *soap, struct __name__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__RunMaintenanceProcedure(soap, p), 0) || ::soap_put___name__RunMaintenanceProcedure(soap, p, "-name:RunMaintenanceProcedure", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__RunMaintenanceProcedure(struct soap *soap, const char *URL, struct __name__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__RunMaintenanceProcedure(soap, p), 0) || ::soap_put___name__RunMaintenanceProcedure(soap, p, "-name:RunMaintenanceProcedure", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__RunMaintenanceProcedure(struct soap *soap, const char *URL, struct __name__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__RunMaintenanceProcedure(soap, p), 0) || ::soap_put___name__RunMaintenanceProcedure(soap, p, "-name:RunMaintenanceProcedure", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__RunMaintenanceProcedure(struct soap *soap, const char *URL, struct __name__RunMaintenanceProcedure const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__RunMaintenanceProcedure(soap, p), 0) || ::soap_put___name__RunMaintenanceProcedure(soap, p, "-name:RunMaintenanceProcedure", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__RunMaintenanceProcedure * SOAP_FMAC4 soap_get___name__RunMaintenanceProcedure(struct soap*, struct __name__RunMaintenanceProcedure *, const char*, const char*);

inline int soap_read___name__RunMaintenanceProcedure(struct soap *soap, struct __name__RunMaintenanceProcedure *p)
{
	if (p)
	{	::soap_default___name__RunMaintenanceProcedure(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__RunMaintenanceProcedure(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__RunMaintenanceProcedure(struct soap *soap, const char *URL, struct __name__RunMaintenanceProcedure *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__RunMaintenanceProcedure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__RunMaintenanceProcedure(struct soap *soap, struct __name__RunMaintenanceProcedure *p)
{
	if (::soap_read___name__RunMaintenanceProcedure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetNamesOfMaintenanceProcedures_DEFINED
#define SOAP_TYPE___name__GetNamesOfMaintenanceProcedures_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetNamesOfMaintenanceProcedures(struct soap*, struct __name__GetNamesOfMaintenanceProcedures *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetNamesOfMaintenanceProcedures(struct soap*, const struct __name__GetNamesOfMaintenanceProcedures *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetNamesOfMaintenanceProcedures(struct soap*, const char*, int, const struct __name__GetNamesOfMaintenanceProcedures *, const char*);
SOAP_FMAC3 struct __name__GetNamesOfMaintenanceProcedures * SOAP_FMAC4 soap_in___name__GetNamesOfMaintenanceProcedures(struct soap*, const char*, struct __name__GetNamesOfMaintenanceProcedures *, const char*);
SOAP_FMAC1 struct __name__GetNamesOfMaintenanceProcedures * SOAP_FMAC2 soap_instantiate___name__GetNamesOfMaintenanceProcedures(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetNamesOfMaintenanceProcedures * soap_new___name__GetNamesOfMaintenanceProcedures(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetNamesOfMaintenanceProcedures(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetNamesOfMaintenanceProcedures * soap_new_req___name__GetNamesOfMaintenanceProcedures(
	struct soap *soap)
{
	struct __name__GetNamesOfMaintenanceProcedures *_p = ::soap_new___name__GetNamesOfMaintenanceProcedures(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfMaintenanceProcedures(soap, _p);
	}
	return _p;
}

inline struct __name__GetNamesOfMaintenanceProcedures * soap_new_set___name__GetNamesOfMaintenanceProcedures(
	struct soap *soap,
	_tempuri__GetNamesOfMaintenanceProcedures *tempuri__GetNamesOfMaintenanceProcedures)
{
	struct __name__GetNamesOfMaintenanceProcedures *_p = ::soap_new___name__GetNamesOfMaintenanceProcedures(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfMaintenanceProcedures(soap, _p);
		_p->tempuri__GetNamesOfMaintenanceProcedures = tempuri__GetNamesOfMaintenanceProcedures;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetNamesOfMaintenanceProcedures(struct soap*, const struct __name__GetNamesOfMaintenanceProcedures *, const char*, const char*);

inline int soap_write___name__GetNamesOfMaintenanceProcedures(struct soap *soap, struct __name__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetNamesOfMaintenanceProcedures(soap, p), 0) || ::soap_put___name__GetNamesOfMaintenanceProcedures(soap, p, "-name:GetNamesOfMaintenanceProcedures", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, struct __name__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfMaintenanceProcedures(soap, p), 0) || ::soap_put___name__GetNamesOfMaintenanceProcedures(soap, p, "-name:GetNamesOfMaintenanceProcedures", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, struct __name__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfMaintenanceProcedures(soap, p), 0) || ::soap_put___name__GetNamesOfMaintenanceProcedures(soap, p, "-name:GetNamesOfMaintenanceProcedures", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, struct __name__GetNamesOfMaintenanceProcedures const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfMaintenanceProcedures(soap, p), 0) || ::soap_put___name__GetNamesOfMaintenanceProcedures(soap, p, "-name:GetNamesOfMaintenanceProcedures", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetNamesOfMaintenanceProcedures * SOAP_FMAC4 soap_get___name__GetNamesOfMaintenanceProcedures(struct soap*, struct __name__GetNamesOfMaintenanceProcedures *, const char*, const char*);

inline int soap_read___name__GetNamesOfMaintenanceProcedures(struct soap *soap, struct __name__GetNamesOfMaintenanceProcedures *p)
{
	if (p)
	{	::soap_default___name__GetNamesOfMaintenanceProcedures(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetNamesOfMaintenanceProcedures(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetNamesOfMaintenanceProcedures(struct soap *soap, const char *URL, struct __name__GetNamesOfMaintenanceProcedures *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetNamesOfMaintenanceProcedures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetNamesOfMaintenanceProcedures(struct soap *soap, struct __name__GetNamesOfMaintenanceProcedures *p)
{
	if (::soap_read___name__GetNamesOfMaintenanceProcedures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetStandbyAfterFinish_DEFINED
#define SOAP_TYPE___name__GetStandbyAfterFinish_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetStandbyAfterFinish(struct soap*, struct __name__GetStandbyAfterFinish *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetStandbyAfterFinish(struct soap*, const struct __name__GetStandbyAfterFinish *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetStandbyAfterFinish(struct soap*, const char*, int, const struct __name__GetStandbyAfterFinish *, const char*);
SOAP_FMAC3 struct __name__GetStandbyAfterFinish * SOAP_FMAC4 soap_in___name__GetStandbyAfterFinish(struct soap*, const char*, struct __name__GetStandbyAfterFinish *, const char*);
SOAP_FMAC1 struct __name__GetStandbyAfterFinish * SOAP_FMAC2 soap_instantiate___name__GetStandbyAfterFinish(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetStandbyAfterFinish * soap_new___name__GetStandbyAfterFinish(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetStandbyAfterFinish(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetStandbyAfterFinish * soap_new_req___name__GetStandbyAfterFinish(
	struct soap *soap)
{
	struct __name__GetStandbyAfterFinish *_p = ::soap_new___name__GetStandbyAfterFinish(soap);
	if (_p)
	{	::soap_default___name__GetStandbyAfterFinish(soap, _p);
	}
	return _p;
}

inline struct __name__GetStandbyAfterFinish * soap_new_set___name__GetStandbyAfterFinish(
	struct soap *soap,
	_tempuri__GetStandbyAfterFinish *tempuri__GetStandbyAfterFinish)
{
	struct __name__GetStandbyAfterFinish *_p = ::soap_new___name__GetStandbyAfterFinish(soap);
	if (_p)
	{	::soap_default___name__GetStandbyAfterFinish(soap, _p);
		_p->tempuri__GetStandbyAfterFinish = tempuri__GetStandbyAfterFinish;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetStandbyAfterFinish(struct soap*, const struct __name__GetStandbyAfterFinish *, const char*, const char*);

inline int soap_write___name__GetStandbyAfterFinish(struct soap *soap, struct __name__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetStandbyAfterFinish(soap, p), 0) || ::soap_put___name__GetStandbyAfterFinish(soap, p, "-name:GetStandbyAfterFinish", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetStandbyAfterFinish(soap, p), 0) || ::soap_put___name__GetStandbyAfterFinish(soap, p, "-name:GetStandbyAfterFinish", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetStandbyAfterFinish(soap, p), 0) || ::soap_put___name__GetStandbyAfterFinish(soap, p, "-name:GetStandbyAfterFinish", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name__GetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetStandbyAfterFinish(soap, p), 0) || ::soap_put___name__GetStandbyAfterFinish(soap, p, "-name:GetStandbyAfterFinish", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetStandbyAfterFinish * SOAP_FMAC4 soap_get___name__GetStandbyAfterFinish(struct soap*, struct __name__GetStandbyAfterFinish *, const char*, const char*);

inline int soap_read___name__GetStandbyAfterFinish(struct soap *soap, struct __name__GetStandbyAfterFinish *p)
{
	if (p)
	{	::soap_default___name__GetStandbyAfterFinish(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetStandbyAfterFinish(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name__GetStandbyAfterFinish *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetStandbyAfterFinish(struct soap *soap, struct __name__GetStandbyAfterFinish *p)
{
	if (::soap_read___name__GetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__SetStandbyAfterFinish_DEFINED
#define SOAP_TYPE___name__SetStandbyAfterFinish_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__SetStandbyAfterFinish(struct soap*, struct __name__SetStandbyAfterFinish *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__SetStandbyAfterFinish(struct soap*, const struct __name__SetStandbyAfterFinish *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__SetStandbyAfterFinish(struct soap*, const char*, int, const struct __name__SetStandbyAfterFinish *, const char*);
SOAP_FMAC3 struct __name__SetStandbyAfterFinish * SOAP_FMAC4 soap_in___name__SetStandbyAfterFinish(struct soap*, const char*, struct __name__SetStandbyAfterFinish *, const char*);
SOAP_FMAC1 struct __name__SetStandbyAfterFinish * SOAP_FMAC2 soap_instantiate___name__SetStandbyAfterFinish(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__SetStandbyAfterFinish * soap_new___name__SetStandbyAfterFinish(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__SetStandbyAfterFinish(soap, n, NULL, NULL, NULL);
}

inline struct __name__SetStandbyAfterFinish * soap_new_req___name__SetStandbyAfterFinish(
	struct soap *soap)
{
	struct __name__SetStandbyAfterFinish *_p = ::soap_new___name__SetStandbyAfterFinish(soap);
	if (_p)
	{	::soap_default___name__SetStandbyAfterFinish(soap, _p);
	}
	return _p;
}

inline struct __name__SetStandbyAfterFinish * soap_new_set___name__SetStandbyAfterFinish(
	struct soap *soap,
	_tempuri__SetStandbyAfterFinish *tempuri__SetStandbyAfterFinish)
{
	struct __name__SetStandbyAfterFinish *_p = ::soap_new___name__SetStandbyAfterFinish(soap);
	if (_p)
	{	::soap_default___name__SetStandbyAfterFinish(soap, _p);
		_p->tempuri__SetStandbyAfterFinish = tempuri__SetStandbyAfterFinish;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__SetStandbyAfterFinish(struct soap*, const struct __name__SetStandbyAfterFinish *, const char*, const char*);

inline int soap_write___name__SetStandbyAfterFinish(struct soap *soap, struct __name__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__SetStandbyAfterFinish(soap, p), 0) || ::soap_put___name__SetStandbyAfterFinish(soap, p, "-name:SetStandbyAfterFinish", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__SetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SetStandbyAfterFinish(soap, p), 0) || ::soap_put___name__SetStandbyAfterFinish(soap, p, "-name:SetStandbyAfterFinish", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__SetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SetStandbyAfterFinish(soap, p), 0) || ::soap_put___name__SetStandbyAfterFinish(soap, p, "-name:SetStandbyAfterFinish", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__SetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name__SetStandbyAfterFinish const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SetStandbyAfterFinish(soap, p), 0) || ::soap_put___name__SetStandbyAfterFinish(soap, p, "-name:SetStandbyAfterFinish", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__SetStandbyAfterFinish * SOAP_FMAC4 soap_get___name__SetStandbyAfterFinish(struct soap*, struct __name__SetStandbyAfterFinish *, const char*, const char*);

inline int soap_read___name__SetStandbyAfterFinish(struct soap *soap, struct __name__SetStandbyAfterFinish *p)
{
	if (p)
	{	::soap_default___name__SetStandbyAfterFinish(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__SetStandbyAfterFinish(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__SetStandbyAfterFinish(struct soap *soap, const char *URL, struct __name__SetStandbyAfterFinish *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__SetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__SetStandbyAfterFinish(struct soap *soap, struct __name__SetStandbyAfterFinish *p)
{
	if (::soap_read___name__SetStandbyAfterFinish(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__LeaveStandby_DEFINED
#define SOAP_TYPE___name__LeaveStandby_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__LeaveStandby(struct soap*, struct __name__LeaveStandby *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__LeaveStandby(struct soap*, const struct __name__LeaveStandby *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__LeaveStandby(struct soap*, const char*, int, const struct __name__LeaveStandby *, const char*);
SOAP_FMAC3 struct __name__LeaveStandby * SOAP_FMAC4 soap_in___name__LeaveStandby(struct soap*, const char*, struct __name__LeaveStandby *, const char*);
SOAP_FMAC1 struct __name__LeaveStandby * SOAP_FMAC2 soap_instantiate___name__LeaveStandby(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__LeaveStandby * soap_new___name__LeaveStandby(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__LeaveStandby(soap, n, NULL, NULL, NULL);
}

inline struct __name__LeaveStandby * soap_new_req___name__LeaveStandby(
	struct soap *soap)
{
	struct __name__LeaveStandby *_p = ::soap_new___name__LeaveStandby(soap);
	if (_p)
	{	::soap_default___name__LeaveStandby(soap, _p);
	}
	return _p;
}

inline struct __name__LeaveStandby * soap_new_set___name__LeaveStandby(
	struct soap *soap,
	_tempuri__LeaveStandby *tempuri__LeaveStandby)
{
	struct __name__LeaveStandby *_p = ::soap_new___name__LeaveStandby(soap);
	if (_p)
	{	::soap_default___name__LeaveStandby(soap, _p);
		_p->tempuri__LeaveStandby = tempuri__LeaveStandby;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__LeaveStandby(struct soap*, const struct __name__LeaveStandby *, const char*, const char*);

inline int soap_write___name__LeaveStandby(struct soap *soap, struct __name__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__LeaveStandby(soap, p), 0) || ::soap_put___name__LeaveStandby(soap, p, "-name:LeaveStandby", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__LeaveStandby(struct soap *soap, const char *URL, struct __name__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__LeaveStandby(soap, p), 0) || ::soap_put___name__LeaveStandby(soap, p, "-name:LeaveStandby", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__LeaveStandby(struct soap *soap, const char *URL, struct __name__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__LeaveStandby(soap, p), 0) || ::soap_put___name__LeaveStandby(soap, p, "-name:LeaveStandby", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__LeaveStandby(struct soap *soap, const char *URL, struct __name__LeaveStandby const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__LeaveStandby(soap, p), 0) || ::soap_put___name__LeaveStandby(soap, p, "-name:LeaveStandby", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__LeaveStandby * SOAP_FMAC4 soap_get___name__LeaveStandby(struct soap*, struct __name__LeaveStandby *, const char*, const char*);

inline int soap_read___name__LeaveStandby(struct soap *soap, struct __name__LeaveStandby *p)
{
	if (p)
	{	::soap_default___name__LeaveStandby(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__LeaveStandby(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__LeaveStandby(struct soap *soap, const char *URL, struct __name__LeaveStandby *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__LeaveStandby(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__LeaveStandby(struct soap *soap, struct __name__LeaveStandby *p)
{
	if (::soap_read___name__LeaveStandby(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__AbortScript_DEFINED
#define SOAP_TYPE___name__AbortScript_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__AbortScript(struct soap*, struct __name__AbortScript *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__AbortScript(struct soap*, const struct __name__AbortScript *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__AbortScript(struct soap*, const char*, int, const struct __name__AbortScript *, const char*);
SOAP_FMAC3 struct __name__AbortScript * SOAP_FMAC4 soap_in___name__AbortScript(struct soap*, const char*, struct __name__AbortScript *, const char*);
SOAP_FMAC1 struct __name__AbortScript * SOAP_FMAC2 soap_instantiate___name__AbortScript(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__AbortScript * soap_new___name__AbortScript(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__AbortScript(soap, n, NULL, NULL, NULL);
}

inline struct __name__AbortScript * soap_new_req___name__AbortScript(
	struct soap *soap)
{
	struct __name__AbortScript *_p = ::soap_new___name__AbortScript(soap);
	if (_p)
	{	::soap_default___name__AbortScript(soap, _p);
	}
	return _p;
}

inline struct __name__AbortScript * soap_new_set___name__AbortScript(
	struct soap *soap,
	_tempuri__AbortScript *tempuri__AbortScript)
{
	struct __name__AbortScript *_p = ::soap_new___name__AbortScript(soap);
	if (_p)
	{	::soap_default___name__AbortScript(soap, _p);
		_p->tempuri__AbortScript = tempuri__AbortScript;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__AbortScript(struct soap*, const struct __name__AbortScript *, const char*, const char*);

inline int soap_write___name__AbortScript(struct soap *soap, struct __name__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__AbortScript(soap, p), 0) || ::soap_put___name__AbortScript(soap, p, "-name:AbortScript", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__AbortScript(struct soap *soap, const char *URL, struct __name__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__AbortScript(soap, p), 0) || ::soap_put___name__AbortScript(soap, p, "-name:AbortScript", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__AbortScript(struct soap *soap, const char *URL, struct __name__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__AbortScript(soap, p), 0) || ::soap_put___name__AbortScript(soap, p, "-name:AbortScript", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__AbortScript(struct soap *soap, const char *URL, struct __name__AbortScript const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__AbortScript(soap, p), 0) || ::soap_put___name__AbortScript(soap, p, "-name:AbortScript", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__AbortScript * SOAP_FMAC4 soap_get___name__AbortScript(struct soap*, struct __name__AbortScript *, const char*, const char*);

inline int soap_read___name__AbortScript(struct soap *soap, struct __name__AbortScript *p)
{
	if (p)
	{	::soap_default___name__AbortScript(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__AbortScript(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__AbortScript(struct soap *soap, const char *URL, struct __name__AbortScript *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__AbortScript(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__AbortScript(struct soap *soap, struct __name__AbortScript *p)
{
	if (::soap_read___name__AbortScript(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__ResetRunset_DEFINED
#define SOAP_TYPE___name__ResetRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__ResetRunset(struct soap*, struct __name__ResetRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__ResetRunset(struct soap*, const struct __name__ResetRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__ResetRunset(struct soap*, const char*, int, const struct __name__ResetRunset *, const char*);
SOAP_FMAC3 struct __name__ResetRunset * SOAP_FMAC4 soap_in___name__ResetRunset(struct soap*, const char*, struct __name__ResetRunset *, const char*);
SOAP_FMAC1 struct __name__ResetRunset * SOAP_FMAC2 soap_instantiate___name__ResetRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__ResetRunset * soap_new___name__ResetRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__ResetRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name__ResetRunset * soap_new_req___name__ResetRunset(
	struct soap *soap)
{
	struct __name__ResetRunset *_p = ::soap_new___name__ResetRunset(soap);
	if (_p)
	{	::soap_default___name__ResetRunset(soap, _p);
	}
	return _p;
}

inline struct __name__ResetRunset * soap_new_set___name__ResetRunset(
	struct soap *soap,
	_tempuri__ResetRunset *tempuri__ResetRunset)
{
	struct __name__ResetRunset *_p = ::soap_new___name__ResetRunset(soap);
	if (_p)
	{	::soap_default___name__ResetRunset(soap, _p);
		_p->tempuri__ResetRunset = tempuri__ResetRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__ResetRunset(struct soap*, const struct __name__ResetRunset *, const char*, const char*);

inline int soap_write___name__ResetRunset(struct soap *soap, struct __name__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__ResetRunset(soap, p), 0) || ::soap_put___name__ResetRunset(soap, p, "-name:ResetRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__ResetRunset(struct soap *soap, const char *URL, struct __name__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__ResetRunset(soap, p), 0) || ::soap_put___name__ResetRunset(soap, p, "-name:ResetRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__ResetRunset(struct soap *soap, const char *URL, struct __name__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__ResetRunset(soap, p), 0) || ::soap_put___name__ResetRunset(soap, p, "-name:ResetRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__ResetRunset(struct soap *soap, const char *URL, struct __name__ResetRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__ResetRunset(soap, p), 0) || ::soap_put___name__ResetRunset(soap, p, "-name:ResetRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__ResetRunset * SOAP_FMAC4 soap_get___name__ResetRunset(struct soap*, struct __name__ResetRunset *, const char*, const char*);

inline int soap_read___name__ResetRunset(struct soap *soap, struct __name__ResetRunset *p)
{
	if (p)
	{	::soap_default___name__ResetRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__ResetRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__ResetRunset(struct soap *soap, const char *URL, struct __name__ResetRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__ResetRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__ResetRunset(struct soap *soap, struct __name__ResetRunset *p)
{
	if (::soap_read___name__ResetRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__ResumeRunset_DEFINED
#define SOAP_TYPE___name__ResumeRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__ResumeRunset(struct soap*, struct __name__ResumeRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__ResumeRunset(struct soap*, const struct __name__ResumeRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__ResumeRunset(struct soap*, const char*, int, const struct __name__ResumeRunset *, const char*);
SOAP_FMAC3 struct __name__ResumeRunset * SOAP_FMAC4 soap_in___name__ResumeRunset(struct soap*, const char*, struct __name__ResumeRunset *, const char*);
SOAP_FMAC1 struct __name__ResumeRunset * SOAP_FMAC2 soap_instantiate___name__ResumeRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__ResumeRunset * soap_new___name__ResumeRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__ResumeRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name__ResumeRunset * soap_new_req___name__ResumeRunset(
	struct soap *soap)
{
	struct __name__ResumeRunset *_p = ::soap_new___name__ResumeRunset(soap);
	if (_p)
	{	::soap_default___name__ResumeRunset(soap, _p);
	}
	return _p;
}

inline struct __name__ResumeRunset * soap_new_set___name__ResumeRunset(
	struct soap *soap,
	_tempuri__ResumeRunset *tempuri__ResumeRunset)
{
	struct __name__ResumeRunset *_p = ::soap_new___name__ResumeRunset(soap);
	if (_p)
	{	::soap_default___name__ResumeRunset(soap, _p);
		_p->tempuri__ResumeRunset = tempuri__ResumeRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__ResumeRunset(struct soap*, const struct __name__ResumeRunset *, const char*, const char*);

inline int soap_write___name__ResumeRunset(struct soap *soap, struct __name__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__ResumeRunset(soap, p), 0) || ::soap_put___name__ResumeRunset(soap, p, "-name:ResumeRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__ResumeRunset(struct soap *soap, const char *URL, struct __name__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__ResumeRunset(soap, p), 0) || ::soap_put___name__ResumeRunset(soap, p, "-name:ResumeRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__ResumeRunset(struct soap *soap, const char *URL, struct __name__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__ResumeRunset(soap, p), 0) || ::soap_put___name__ResumeRunset(soap, p, "-name:ResumeRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__ResumeRunset(struct soap *soap, const char *URL, struct __name__ResumeRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__ResumeRunset(soap, p), 0) || ::soap_put___name__ResumeRunset(soap, p, "-name:ResumeRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__ResumeRunset * SOAP_FMAC4 soap_get___name__ResumeRunset(struct soap*, struct __name__ResumeRunset *, const char*, const char*);

inline int soap_read___name__ResumeRunset(struct soap *soap, struct __name__ResumeRunset *p)
{
	if (p)
	{	::soap_default___name__ResumeRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__ResumeRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__ResumeRunset(struct soap *soap, const char *URL, struct __name__ResumeRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__ResumeRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__ResumeRunset(struct soap *soap, struct __name__ResumeRunset *p)
{
	if (::soap_read___name__ResumeRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__PauseRunsetAfter_DEFINED
#define SOAP_TYPE___name__PauseRunsetAfter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__PauseRunsetAfter(struct soap*, struct __name__PauseRunsetAfter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__PauseRunsetAfter(struct soap*, const struct __name__PauseRunsetAfter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__PauseRunsetAfter(struct soap*, const char*, int, const struct __name__PauseRunsetAfter *, const char*);
SOAP_FMAC3 struct __name__PauseRunsetAfter * SOAP_FMAC4 soap_in___name__PauseRunsetAfter(struct soap*, const char*, struct __name__PauseRunsetAfter *, const char*);
SOAP_FMAC1 struct __name__PauseRunsetAfter * SOAP_FMAC2 soap_instantiate___name__PauseRunsetAfter(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__PauseRunsetAfter * soap_new___name__PauseRunsetAfter(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__PauseRunsetAfter(soap, n, NULL, NULL, NULL);
}

inline struct __name__PauseRunsetAfter * soap_new_req___name__PauseRunsetAfter(
	struct soap *soap)
{
	struct __name__PauseRunsetAfter *_p = ::soap_new___name__PauseRunsetAfter(soap);
	if (_p)
	{	::soap_default___name__PauseRunsetAfter(soap, _p);
	}
	return _p;
}

inline struct __name__PauseRunsetAfter * soap_new_set___name__PauseRunsetAfter(
	struct soap *soap,
	_tempuri__PauseRunsetAfter *tempuri__PauseRunsetAfter)
{
	struct __name__PauseRunsetAfter *_p = ::soap_new___name__PauseRunsetAfter(soap);
	if (_p)
	{	::soap_default___name__PauseRunsetAfter(soap, _p);
		_p->tempuri__PauseRunsetAfter = tempuri__PauseRunsetAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__PauseRunsetAfter(struct soap*, const struct __name__PauseRunsetAfter *, const char*, const char*);

inline int soap_write___name__PauseRunsetAfter(struct soap *soap, struct __name__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__PauseRunsetAfter(soap, p), 0) || ::soap_put___name__PauseRunsetAfter(soap, p, "-name:PauseRunsetAfter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__PauseRunsetAfter(struct soap *soap, const char *URL, struct __name__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__PauseRunsetAfter(soap, p), 0) || ::soap_put___name__PauseRunsetAfter(soap, p, "-name:PauseRunsetAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__PauseRunsetAfter(struct soap *soap, const char *URL, struct __name__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__PauseRunsetAfter(soap, p), 0) || ::soap_put___name__PauseRunsetAfter(soap, p, "-name:PauseRunsetAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__PauseRunsetAfter(struct soap *soap, const char *URL, struct __name__PauseRunsetAfter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__PauseRunsetAfter(soap, p), 0) || ::soap_put___name__PauseRunsetAfter(soap, p, "-name:PauseRunsetAfter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__PauseRunsetAfter * SOAP_FMAC4 soap_get___name__PauseRunsetAfter(struct soap*, struct __name__PauseRunsetAfter *, const char*, const char*);

inline int soap_read___name__PauseRunsetAfter(struct soap *soap, struct __name__PauseRunsetAfter *p)
{
	if (p)
	{	::soap_default___name__PauseRunsetAfter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__PauseRunsetAfter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__PauseRunsetAfter(struct soap *soap, const char *URL, struct __name__PauseRunsetAfter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__PauseRunsetAfter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__PauseRunsetAfter(struct soap *soap, struct __name__PauseRunsetAfter *p)
{
	if (::soap_read___name__PauseRunsetAfter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__StartSelectedRunsetFrom_DEFINED
#define SOAP_TYPE___name__StartSelectedRunsetFrom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__StartSelectedRunsetFrom(struct soap*, struct __name__StartSelectedRunsetFrom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__StartSelectedRunsetFrom(struct soap*, const struct __name__StartSelectedRunsetFrom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__StartSelectedRunsetFrom(struct soap*, const char*, int, const struct __name__StartSelectedRunsetFrom *, const char*);
SOAP_FMAC3 struct __name__StartSelectedRunsetFrom * SOAP_FMAC4 soap_in___name__StartSelectedRunsetFrom(struct soap*, const char*, struct __name__StartSelectedRunsetFrom *, const char*);
SOAP_FMAC1 struct __name__StartSelectedRunsetFrom * SOAP_FMAC2 soap_instantiate___name__StartSelectedRunsetFrom(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__StartSelectedRunsetFrom * soap_new___name__StartSelectedRunsetFrom(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__StartSelectedRunsetFrom(soap, n, NULL, NULL, NULL);
}

inline struct __name__StartSelectedRunsetFrom * soap_new_req___name__StartSelectedRunsetFrom(
	struct soap *soap)
{
	struct __name__StartSelectedRunsetFrom *_p = ::soap_new___name__StartSelectedRunsetFrom(soap);
	if (_p)
	{	::soap_default___name__StartSelectedRunsetFrom(soap, _p);
	}
	return _p;
}

inline struct __name__StartSelectedRunsetFrom * soap_new_set___name__StartSelectedRunsetFrom(
	struct soap *soap,
	_tempuri__StartSelectedRunsetFrom *tempuri__StartSelectedRunsetFrom)
{
	struct __name__StartSelectedRunsetFrom *_p = ::soap_new___name__StartSelectedRunsetFrom(soap);
	if (_p)
	{	::soap_default___name__StartSelectedRunsetFrom(soap, _p);
		_p->tempuri__StartSelectedRunsetFrom = tempuri__StartSelectedRunsetFrom;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__StartSelectedRunsetFrom(struct soap*, const struct __name__StartSelectedRunsetFrom *, const char*, const char*);

inline int soap_write___name__StartSelectedRunsetFrom(struct soap *soap, struct __name__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__StartSelectedRunsetFrom(soap, p), 0) || ::soap_put___name__StartSelectedRunsetFrom(soap, p, "-name:StartSelectedRunsetFrom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__StartSelectedRunsetFrom(struct soap *soap, const char *URL, struct __name__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__StartSelectedRunsetFrom(soap, p), 0) || ::soap_put___name__StartSelectedRunsetFrom(soap, p, "-name:StartSelectedRunsetFrom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__StartSelectedRunsetFrom(struct soap *soap, const char *URL, struct __name__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__StartSelectedRunsetFrom(soap, p), 0) || ::soap_put___name__StartSelectedRunsetFrom(soap, p, "-name:StartSelectedRunsetFrom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__StartSelectedRunsetFrom(struct soap *soap, const char *URL, struct __name__StartSelectedRunsetFrom const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__StartSelectedRunsetFrom(soap, p), 0) || ::soap_put___name__StartSelectedRunsetFrom(soap, p, "-name:StartSelectedRunsetFrom", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__StartSelectedRunsetFrom * SOAP_FMAC4 soap_get___name__StartSelectedRunsetFrom(struct soap*, struct __name__StartSelectedRunsetFrom *, const char*, const char*);

inline int soap_read___name__StartSelectedRunsetFrom(struct soap *soap, struct __name__StartSelectedRunsetFrom *p)
{
	if (p)
	{	::soap_default___name__StartSelectedRunsetFrom(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__StartSelectedRunsetFrom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__StartSelectedRunsetFrom(struct soap *soap, const char *URL, struct __name__StartSelectedRunsetFrom *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__StartSelectedRunsetFrom(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__StartSelectedRunsetFrom(struct soap *soap, struct __name__StartSelectedRunsetFrom *p)
{
	if (::soap_read___name__StartSelectedRunsetFrom(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__StartSelectedRunset_DEFINED
#define SOAP_TYPE___name__StartSelectedRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__StartSelectedRunset(struct soap*, struct __name__StartSelectedRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__StartSelectedRunset(struct soap*, const struct __name__StartSelectedRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__StartSelectedRunset(struct soap*, const char*, int, const struct __name__StartSelectedRunset *, const char*);
SOAP_FMAC3 struct __name__StartSelectedRunset * SOAP_FMAC4 soap_in___name__StartSelectedRunset(struct soap*, const char*, struct __name__StartSelectedRunset *, const char*);
SOAP_FMAC1 struct __name__StartSelectedRunset * SOAP_FMAC2 soap_instantiate___name__StartSelectedRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__StartSelectedRunset * soap_new___name__StartSelectedRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__StartSelectedRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name__StartSelectedRunset * soap_new_req___name__StartSelectedRunset(
	struct soap *soap)
{
	struct __name__StartSelectedRunset *_p = ::soap_new___name__StartSelectedRunset(soap);
	if (_p)
	{	::soap_default___name__StartSelectedRunset(soap, _p);
	}
	return _p;
}

inline struct __name__StartSelectedRunset * soap_new_set___name__StartSelectedRunset(
	struct soap *soap,
	_tempuri__StartSelectedRunset *tempuri__StartSelectedRunset)
{
	struct __name__StartSelectedRunset *_p = ::soap_new___name__StartSelectedRunset(soap);
	if (_p)
	{	::soap_default___name__StartSelectedRunset(soap, _p);
		_p->tempuri__StartSelectedRunset = tempuri__StartSelectedRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__StartSelectedRunset(struct soap*, const struct __name__StartSelectedRunset *, const char*, const char*);

inline int soap_write___name__StartSelectedRunset(struct soap *soap, struct __name__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__StartSelectedRunset(soap, p), 0) || ::soap_put___name__StartSelectedRunset(soap, p, "-name:StartSelectedRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__StartSelectedRunset(struct soap *soap, const char *URL, struct __name__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__StartSelectedRunset(soap, p), 0) || ::soap_put___name__StartSelectedRunset(soap, p, "-name:StartSelectedRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__StartSelectedRunset(struct soap *soap, const char *URL, struct __name__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__StartSelectedRunset(soap, p), 0) || ::soap_put___name__StartSelectedRunset(soap, p, "-name:StartSelectedRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__StartSelectedRunset(struct soap *soap, const char *URL, struct __name__StartSelectedRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__StartSelectedRunset(soap, p), 0) || ::soap_put___name__StartSelectedRunset(soap, p, "-name:StartSelectedRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__StartSelectedRunset * SOAP_FMAC4 soap_get___name__StartSelectedRunset(struct soap*, struct __name__StartSelectedRunset *, const char*, const char*);

inline int soap_read___name__StartSelectedRunset(struct soap *soap, struct __name__StartSelectedRunset *p)
{
	if (p)
	{	::soap_default___name__StartSelectedRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__StartSelectedRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__StartSelectedRunset(struct soap *soap, const char *URL, struct __name__StartSelectedRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__StartSelectedRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__StartSelectedRunset(struct soap *soap, struct __name__StartSelectedRunset *p)
{
	if (::soap_read___name__StartSelectedRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__MoveSamplePlateTrayIn_DEFINED
#define SOAP_TYPE___name__MoveSamplePlateTrayIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__MoveSamplePlateTrayIn(struct soap*, struct __name__MoveSamplePlateTrayIn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__MoveSamplePlateTrayIn(struct soap*, const struct __name__MoveSamplePlateTrayIn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__MoveSamplePlateTrayIn(struct soap*, const char*, int, const struct __name__MoveSamplePlateTrayIn *, const char*);
SOAP_FMAC3 struct __name__MoveSamplePlateTrayIn * SOAP_FMAC4 soap_in___name__MoveSamplePlateTrayIn(struct soap*, const char*, struct __name__MoveSamplePlateTrayIn *, const char*);
SOAP_FMAC1 struct __name__MoveSamplePlateTrayIn * SOAP_FMAC2 soap_instantiate___name__MoveSamplePlateTrayIn(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__MoveSamplePlateTrayIn * soap_new___name__MoveSamplePlateTrayIn(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__MoveSamplePlateTrayIn(soap, n, NULL, NULL, NULL);
}

inline struct __name__MoveSamplePlateTrayIn * soap_new_req___name__MoveSamplePlateTrayIn(
	struct soap *soap)
{
	struct __name__MoveSamplePlateTrayIn *_p = ::soap_new___name__MoveSamplePlateTrayIn(soap);
	if (_p)
	{	::soap_default___name__MoveSamplePlateTrayIn(soap, _p);
	}
	return _p;
}

inline struct __name__MoveSamplePlateTrayIn * soap_new_set___name__MoveSamplePlateTrayIn(
	struct soap *soap,
	_tempuri__MoveSamplePlateTrayIn *tempuri__MoveSamplePlateTrayIn)
{
	struct __name__MoveSamplePlateTrayIn *_p = ::soap_new___name__MoveSamplePlateTrayIn(soap);
	if (_p)
	{	::soap_default___name__MoveSamplePlateTrayIn(soap, _p);
		_p->tempuri__MoveSamplePlateTrayIn = tempuri__MoveSamplePlateTrayIn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__MoveSamplePlateTrayIn(struct soap*, const struct __name__MoveSamplePlateTrayIn *, const char*, const char*);

inline int soap_write___name__MoveSamplePlateTrayIn(struct soap *soap, struct __name__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__MoveSamplePlateTrayIn(soap, p), 0) || ::soap_put___name__MoveSamplePlateTrayIn(soap, p, "-name:MoveSamplePlateTrayIn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__MoveSamplePlateTrayIn(soap, p), 0) || ::soap_put___name__MoveSamplePlateTrayIn(soap, p, "-name:MoveSamplePlateTrayIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__MoveSamplePlateTrayIn(soap, p), 0) || ::soap_put___name__MoveSamplePlateTrayIn(soap, p, "-name:MoveSamplePlateTrayIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name__MoveSamplePlateTrayIn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__MoveSamplePlateTrayIn(soap, p), 0) || ::soap_put___name__MoveSamplePlateTrayIn(soap, p, "-name:MoveSamplePlateTrayIn", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__MoveSamplePlateTrayIn * SOAP_FMAC4 soap_get___name__MoveSamplePlateTrayIn(struct soap*, struct __name__MoveSamplePlateTrayIn *, const char*, const char*);

inline int soap_read___name__MoveSamplePlateTrayIn(struct soap *soap, struct __name__MoveSamplePlateTrayIn *p)
{
	if (p)
	{	::soap_default___name__MoveSamplePlateTrayIn(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__MoveSamplePlateTrayIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__MoveSamplePlateTrayIn(struct soap *soap, const char *URL, struct __name__MoveSamplePlateTrayIn *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__MoveSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__MoveSamplePlateTrayIn(struct soap *soap, struct __name__MoveSamplePlateTrayIn *p)
{
	if (::soap_read___name__MoveSamplePlateTrayIn(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__MoveSamplePlateTrayOut_DEFINED
#define SOAP_TYPE___name__MoveSamplePlateTrayOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__MoveSamplePlateTrayOut(struct soap*, struct __name__MoveSamplePlateTrayOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__MoveSamplePlateTrayOut(struct soap*, const struct __name__MoveSamplePlateTrayOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__MoveSamplePlateTrayOut(struct soap*, const char*, int, const struct __name__MoveSamplePlateTrayOut *, const char*);
SOAP_FMAC3 struct __name__MoveSamplePlateTrayOut * SOAP_FMAC4 soap_in___name__MoveSamplePlateTrayOut(struct soap*, const char*, struct __name__MoveSamplePlateTrayOut *, const char*);
SOAP_FMAC1 struct __name__MoveSamplePlateTrayOut * SOAP_FMAC2 soap_instantiate___name__MoveSamplePlateTrayOut(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__MoveSamplePlateTrayOut * soap_new___name__MoveSamplePlateTrayOut(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__MoveSamplePlateTrayOut(soap, n, NULL, NULL, NULL);
}

inline struct __name__MoveSamplePlateTrayOut * soap_new_req___name__MoveSamplePlateTrayOut(
	struct soap *soap)
{
	struct __name__MoveSamplePlateTrayOut *_p = ::soap_new___name__MoveSamplePlateTrayOut(soap);
	if (_p)
	{	::soap_default___name__MoveSamplePlateTrayOut(soap, _p);
	}
	return _p;
}

inline struct __name__MoveSamplePlateTrayOut * soap_new_set___name__MoveSamplePlateTrayOut(
	struct soap *soap,
	_tempuri__MoveSamplePlateTrayOut *tempuri__MoveSamplePlateTrayOut)
{
	struct __name__MoveSamplePlateTrayOut *_p = ::soap_new___name__MoveSamplePlateTrayOut(soap);
	if (_p)
	{	::soap_default___name__MoveSamplePlateTrayOut(soap, _p);
		_p->tempuri__MoveSamplePlateTrayOut = tempuri__MoveSamplePlateTrayOut;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__MoveSamplePlateTrayOut(struct soap*, const struct __name__MoveSamplePlateTrayOut *, const char*, const char*);

inline int soap_write___name__MoveSamplePlateTrayOut(struct soap *soap, struct __name__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__MoveSamplePlateTrayOut(soap, p), 0) || ::soap_put___name__MoveSamplePlateTrayOut(soap, p, "-name:MoveSamplePlateTrayOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, struct __name__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__MoveSamplePlateTrayOut(soap, p), 0) || ::soap_put___name__MoveSamplePlateTrayOut(soap, p, "-name:MoveSamplePlateTrayOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, struct __name__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__MoveSamplePlateTrayOut(soap, p), 0) || ::soap_put___name__MoveSamplePlateTrayOut(soap, p, "-name:MoveSamplePlateTrayOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, struct __name__MoveSamplePlateTrayOut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__MoveSamplePlateTrayOut(soap, p), 0) || ::soap_put___name__MoveSamplePlateTrayOut(soap, p, "-name:MoveSamplePlateTrayOut", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__MoveSamplePlateTrayOut * SOAP_FMAC4 soap_get___name__MoveSamplePlateTrayOut(struct soap*, struct __name__MoveSamplePlateTrayOut *, const char*, const char*);

inline int soap_read___name__MoveSamplePlateTrayOut(struct soap *soap, struct __name__MoveSamplePlateTrayOut *p)
{
	if (p)
	{	::soap_default___name__MoveSamplePlateTrayOut(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__MoveSamplePlateTrayOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__MoveSamplePlateTrayOut(struct soap *soap, const char *URL, struct __name__MoveSamplePlateTrayOut *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__MoveSamplePlateTrayOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__MoveSamplePlateTrayOut(struct soap *soap, struct __name__MoveSamplePlateTrayOut *p)
{
	if (::soap_read___name__MoveSamplePlateTrayOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetCurrentSamplePlateId_DEFINED
#define SOAP_TYPE___name__GetCurrentSamplePlateId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetCurrentSamplePlateId(struct soap*, struct __name__GetCurrentSamplePlateId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetCurrentSamplePlateId(struct soap*, const struct __name__GetCurrentSamplePlateId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetCurrentSamplePlateId(struct soap*, const char*, int, const struct __name__GetCurrentSamplePlateId *, const char*);
SOAP_FMAC3 struct __name__GetCurrentSamplePlateId * SOAP_FMAC4 soap_in___name__GetCurrentSamplePlateId(struct soap*, const char*, struct __name__GetCurrentSamplePlateId *, const char*);
SOAP_FMAC1 struct __name__GetCurrentSamplePlateId * SOAP_FMAC2 soap_instantiate___name__GetCurrentSamplePlateId(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetCurrentSamplePlateId * soap_new___name__GetCurrentSamplePlateId(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetCurrentSamplePlateId(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetCurrentSamplePlateId * soap_new_req___name__GetCurrentSamplePlateId(
	struct soap *soap)
{
	struct __name__GetCurrentSamplePlateId *_p = ::soap_new___name__GetCurrentSamplePlateId(soap);
	if (_p)
	{	::soap_default___name__GetCurrentSamplePlateId(soap, _p);
	}
	return _p;
}

inline struct __name__GetCurrentSamplePlateId * soap_new_set___name__GetCurrentSamplePlateId(
	struct soap *soap,
	_tempuri__GetCurrentSamplePlateId *tempuri__GetCurrentSamplePlateId)
{
	struct __name__GetCurrentSamplePlateId *_p = ::soap_new___name__GetCurrentSamplePlateId(soap);
	if (_p)
	{	::soap_default___name__GetCurrentSamplePlateId(soap, _p);
		_p->tempuri__GetCurrentSamplePlateId = tempuri__GetCurrentSamplePlateId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetCurrentSamplePlateId(struct soap*, const struct __name__GetCurrentSamplePlateId *, const char*, const char*);

inline int soap_write___name__GetCurrentSamplePlateId(struct soap *soap, struct __name__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetCurrentSamplePlateId(soap, p), 0) || ::soap_put___name__GetCurrentSamplePlateId(soap, p, "-name:GetCurrentSamplePlateId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetCurrentSamplePlateId(struct soap *soap, const char *URL, struct __name__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetCurrentSamplePlateId(soap, p), 0) || ::soap_put___name__GetCurrentSamplePlateId(soap, p, "-name:GetCurrentSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetCurrentSamplePlateId(struct soap *soap, const char *URL, struct __name__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetCurrentSamplePlateId(soap, p), 0) || ::soap_put___name__GetCurrentSamplePlateId(soap, p, "-name:GetCurrentSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetCurrentSamplePlateId(struct soap *soap, const char *URL, struct __name__GetCurrentSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetCurrentSamplePlateId(soap, p), 0) || ::soap_put___name__GetCurrentSamplePlateId(soap, p, "-name:GetCurrentSamplePlateId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetCurrentSamplePlateId * SOAP_FMAC4 soap_get___name__GetCurrentSamplePlateId(struct soap*, struct __name__GetCurrentSamplePlateId *, const char*, const char*);

inline int soap_read___name__GetCurrentSamplePlateId(struct soap *soap, struct __name__GetCurrentSamplePlateId *p)
{
	if (p)
	{	::soap_default___name__GetCurrentSamplePlateId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetCurrentSamplePlateId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetCurrentSamplePlateId(struct soap *soap, const char *URL, struct __name__GetCurrentSamplePlateId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetCurrentSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetCurrentSamplePlateId(struct soap *soap, struct __name__GetCurrentSamplePlateId *p)
{
	if (::soap_read___name__GetCurrentSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetSamplePlateId_DEFINED
#define SOAP_TYPE___name__GetSamplePlateId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetSamplePlateId(struct soap*, struct __name__GetSamplePlateId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetSamplePlateId(struct soap*, const struct __name__GetSamplePlateId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetSamplePlateId(struct soap*, const char*, int, const struct __name__GetSamplePlateId *, const char*);
SOAP_FMAC3 struct __name__GetSamplePlateId * SOAP_FMAC4 soap_in___name__GetSamplePlateId(struct soap*, const char*, struct __name__GetSamplePlateId *, const char*);
SOAP_FMAC1 struct __name__GetSamplePlateId * SOAP_FMAC2 soap_instantiate___name__GetSamplePlateId(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetSamplePlateId * soap_new___name__GetSamplePlateId(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetSamplePlateId(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetSamplePlateId * soap_new_req___name__GetSamplePlateId(
	struct soap *soap)
{
	struct __name__GetSamplePlateId *_p = ::soap_new___name__GetSamplePlateId(soap);
	if (_p)
	{	::soap_default___name__GetSamplePlateId(soap, _p);
	}
	return _p;
}

inline struct __name__GetSamplePlateId * soap_new_set___name__GetSamplePlateId(
	struct soap *soap,
	_tempuri__GetSamplePlateId *tempuri__GetSamplePlateId)
{
	struct __name__GetSamplePlateId *_p = ::soap_new___name__GetSamplePlateId(soap);
	if (_p)
	{	::soap_default___name__GetSamplePlateId(soap, _p);
		_p->tempuri__GetSamplePlateId = tempuri__GetSamplePlateId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetSamplePlateId(struct soap*, const struct __name__GetSamplePlateId *, const char*, const char*);

inline int soap_write___name__GetSamplePlateId(struct soap *soap, struct __name__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetSamplePlateId(soap, p), 0) || ::soap_put___name__GetSamplePlateId(soap, p, "-name:GetSamplePlateId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetSamplePlateId(struct soap *soap, const char *URL, struct __name__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetSamplePlateId(soap, p), 0) || ::soap_put___name__GetSamplePlateId(soap, p, "-name:GetSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetSamplePlateId(struct soap *soap, const char *URL, struct __name__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetSamplePlateId(soap, p), 0) || ::soap_put___name__GetSamplePlateId(soap, p, "-name:GetSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetSamplePlateId(struct soap *soap, const char *URL, struct __name__GetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetSamplePlateId(soap, p), 0) || ::soap_put___name__GetSamplePlateId(soap, p, "-name:GetSamplePlateId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetSamplePlateId * SOAP_FMAC4 soap_get___name__GetSamplePlateId(struct soap*, struct __name__GetSamplePlateId *, const char*, const char*);

inline int soap_read___name__GetSamplePlateId(struct soap *soap, struct __name__GetSamplePlateId *p)
{
	if (p)
	{	::soap_default___name__GetSamplePlateId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetSamplePlateId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetSamplePlateId(struct soap *soap, const char *URL, struct __name__GetSamplePlateId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetSamplePlateId(struct soap *soap, struct __name__GetSamplePlateId *p)
{
	if (::soap_read___name__GetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__SetSamplePlateId_DEFINED
#define SOAP_TYPE___name__SetSamplePlateId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__SetSamplePlateId(struct soap*, struct __name__SetSamplePlateId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__SetSamplePlateId(struct soap*, const struct __name__SetSamplePlateId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__SetSamplePlateId(struct soap*, const char*, int, const struct __name__SetSamplePlateId *, const char*);
SOAP_FMAC3 struct __name__SetSamplePlateId * SOAP_FMAC4 soap_in___name__SetSamplePlateId(struct soap*, const char*, struct __name__SetSamplePlateId *, const char*);
SOAP_FMAC1 struct __name__SetSamplePlateId * SOAP_FMAC2 soap_instantiate___name__SetSamplePlateId(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__SetSamplePlateId * soap_new___name__SetSamplePlateId(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__SetSamplePlateId(soap, n, NULL, NULL, NULL);
}

inline struct __name__SetSamplePlateId * soap_new_req___name__SetSamplePlateId(
	struct soap *soap)
{
	struct __name__SetSamplePlateId *_p = ::soap_new___name__SetSamplePlateId(soap);
	if (_p)
	{	::soap_default___name__SetSamplePlateId(soap, _p);
	}
	return _p;
}

inline struct __name__SetSamplePlateId * soap_new_set___name__SetSamplePlateId(
	struct soap *soap,
	_tempuri__SetSamplePlateId *tempuri__SetSamplePlateId)
{
	struct __name__SetSamplePlateId *_p = ::soap_new___name__SetSamplePlateId(soap);
	if (_p)
	{	::soap_default___name__SetSamplePlateId(soap, _p);
		_p->tempuri__SetSamplePlateId = tempuri__SetSamplePlateId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__SetSamplePlateId(struct soap*, const struct __name__SetSamplePlateId *, const char*, const char*);

inline int soap_write___name__SetSamplePlateId(struct soap *soap, struct __name__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__SetSamplePlateId(soap, p), 0) || ::soap_put___name__SetSamplePlateId(soap, p, "-name:SetSamplePlateId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__SetSamplePlateId(struct soap *soap, const char *URL, struct __name__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SetSamplePlateId(soap, p), 0) || ::soap_put___name__SetSamplePlateId(soap, p, "-name:SetSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__SetSamplePlateId(struct soap *soap, const char *URL, struct __name__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SetSamplePlateId(soap, p), 0) || ::soap_put___name__SetSamplePlateId(soap, p, "-name:SetSamplePlateId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__SetSamplePlateId(struct soap *soap, const char *URL, struct __name__SetSamplePlateId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SetSamplePlateId(soap, p), 0) || ::soap_put___name__SetSamplePlateId(soap, p, "-name:SetSamplePlateId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__SetSamplePlateId * SOAP_FMAC4 soap_get___name__SetSamplePlateId(struct soap*, struct __name__SetSamplePlateId *, const char*, const char*);

inline int soap_read___name__SetSamplePlateId(struct soap *soap, struct __name__SetSamplePlateId *p)
{
	if (p)
	{	::soap_default___name__SetSamplePlateId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__SetSamplePlateId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__SetSamplePlateId(struct soap *soap, const char *URL, struct __name__SetSamplePlateId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__SetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__SetSamplePlateId(struct soap *soap, struct __name__SetSamplePlateId *p)
{
	if (::soap_read___name__SetSamplePlateId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__CreateRunset_DEFINED
#define SOAP_TYPE___name__CreateRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__CreateRunset(struct soap*, struct __name__CreateRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__CreateRunset(struct soap*, const struct __name__CreateRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__CreateRunset(struct soap*, const char*, int, const struct __name__CreateRunset *, const char*);
SOAP_FMAC3 struct __name__CreateRunset * SOAP_FMAC4 soap_in___name__CreateRunset(struct soap*, const char*, struct __name__CreateRunset *, const char*);
SOAP_FMAC1 struct __name__CreateRunset * SOAP_FMAC2 soap_instantiate___name__CreateRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__CreateRunset * soap_new___name__CreateRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__CreateRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name__CreateRunset * soap_new_req___name__CreateRunset(
	struct soap *soap)
{
	struct __name__CreateRunset *_p = ::soap_new___name__CreateRunset(soap);
	if (_p)
	{	::soap_default___name__CreateRunset(soap, _p);
	}
	return _p;
}

inline struct __name__CreateRunset * soap_new_set___name__CreateRunset(
	struct soap *soap,
	_tempuri__CreateRunset *tempuri__CreateRunset)
{
	struct __name__CreateRunset *_p = ::soap_new___name__CreateRunset(soap);
	if (_p)
	{	::soap_default___name__CreateRunset(soap, _p);
		_p->tempuri__CreateRunset = tempuri__CreateRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__CreateRunset(struct soap*, const struct __name__CreateRunset *, const char*, const char*);

inline int soap_write___name__CreateRunset(struct soap *soap, struct __name__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__CreateRunset(soap, p), 0) || ::soap_put___name__CreateRunset(soap, p, "-name:CreateRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__CreateRunset(struct soap *soap, const char *URL, struct __name__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__CreateRunset(soap, p), 0) || ::soap_put___name__CreateRunset(soap, p, "-name:CreateRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__CreateRunset(struct soap *soap, const char *URL, struct __name__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__CreateRunset(soap, p), 0) || ::soap_put___name__CreateRunset(soap, p, "-name:CreateRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__CreateRunset(struct soap *soap, const char *URL, struct __name__CreateRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__CreateRunset(soap, p), 0) || ::soap_put___name__CreateRunset(soap, p, "-name:CreateRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__CreateRunset * SOAP_FMAC4 soap_get___name__CreateRunset(struct soap*, struct __name__CreateRunset *, const char*, const char*);

inline int soap_read___name__CreateRunset(struct soap *soap, struct __name__CreateRunset *p)
{
	if (p)
	{	::soap_default___name__CreateRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__CreateRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__CreateRunset(struct soap *soap, const char *URL, struct __name__CreateRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__CreateRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__CreateRunset(struct soap *soap, struct __name__CreateRunset *p)
{
	if (::soap_read___name__CreateRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__SelectRunset_DEFINED
#define SOAP_TYPE___name__SelectRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__SelectRunset(struct soap*, struct __name__SelectRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__SelectRunset(struct soap*, const struct __name__SelectRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__SelectRunset(struct soap*, const char*, int, const struct __name__SelectRunset *, const char*);
SOAP_FMAC3 struct __name__SelectRunset * SOAP_FMAC4 soap_in___name__SelectRunset(struct soap*, const char*, struct __name__SelectRunset *, const char*);
SOAP_FMAC1 struct __name__SelectRunset * SOAP_FMAC2 soap_instantiate___name__SelectRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__SelectRunset * soap_new___name__SelectRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__SelectRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name__SelectRunset * soap_new_req___name__SelectRunset(
	struct soap *soap)
{
	struct __name__SelectRunset *_p = ::soap_new___name__SelectRunset(soap);
	if (_p)
	{	::soap_default___name__SelectRunset(soap, _p);
	}
	return _p;
}

inline struct __name__SelectRunset * soap_new_set___name__SelectRunset(
	struct soap *soap,
	_tempuri__SelectRunset *tempuri__SelectRunset)
{
	struct __name__SelectRunset *_p = ::soap_new___name__SelectRunset(soap);
	if (_p)
	{	::soap_default___name__SelectRunset(soap, _p);
		_p->tempuri__SelectRunset = tempuri__SelectRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__SelectRunset(struct soap*, const struct __name__SelectRunset *, const char*, const char*);

inline int soap_write___name__SelectRunset(struct soap *soap, struct __name__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__SelectRunset(soap, p), 0) || ::soap_put___name__SelectRunset(soap, p, "-name:SelectRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__SelectRunset(struct soap *soap, const char *URL, struct __name__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SelectRunset(soap, p), 0) || ::soap_put___name__SelectRunset(soap, p, "-name:SelectRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__SelectRunset(struct soap *soap, const char *URL, struct __name__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SelectRunset(soap, p), 0) || ::soap_put___name__SelectRunset(soap, p, "-name:SelectRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__SelectRunset(struct soap *soap, const char *URL, struct __name__SelectRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SelectRunset(soap, p), 0) || ::soap_put___name__SelectRunset(soap, p, "-name:SelectRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__SelectRunset * SOAP_FMAC4 soap_get___name__SelectRunset(struct soap*, struct __name__SelectRunset *, const char*, const char*);

inline int soap_read___name__SelectRunset(struct soap *soap, struct __name__SelectRunset *p)
{
	if (p)
	{	::soap_default___name__SelectRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__SelectRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__SelectRunset(struct soap *soap, const char *URL, struct __name__SelectRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__SelectRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__SelectRunset(struct soap *soap, struct __name__SelectRunset *p)
{
	if (::soap_read___name__SelectRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__SelectMethod_DEFINED
#define SOAP_TYPE___name__SelectMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__SelectMethod(struct soap*, struct __name__SelectMethod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__SelectMethod(struct soap*, const struct __name__SelectMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__SelectMethod(struct soap*, const char*, int, const struct __name__SelectMethod *, const char*);
SOAP_FMAC3 struct __name__SelectMethod * SOAP_FMAC4 soap_in___name__SelectMethod(struct soap*, const char*, struct __name__SelectMethod *, const char*);
SOAP_FMAC1 struct __name__SelectMethod * SOAP_FMAC2 soap_instantiate___name__SelectMethod(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__SelectMethod * soap_new___name__SelectMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__SelectMethod(soap, n, NULL, NULL, NULL);
}

inline struct __name__SelectMethod * soap_new_req___name__SelectMethod(
	struct soap *soap)
{
	struct __name__SelectMethod *_p = ::soap_new___name__SelectMethod(soap);
	if (_p)
	{	::soap_default___name__SelectMethod(soap, _p);
	}
	return _p;
}

inline struct __name__SelectMethod * soap_new_set___name__SelectMethod(
	struct soap *soap,
	_tempuri__SelectMethod *tempuri__SelectMethod)
{
	struct __name__SelectMethod *_p = ::soap_new___name__SelectMethod(soap);
	if (_p)
	{	::soap_default___name__SelectMethod(soap, _p);
		_p->tempuri__SelectMethod = tempuri__SelectMethod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__SelectMethod(struct soap*, const struct __name__SelectMethod *, const char*, const char*);

inline int soap_write___name__SelectMethod(struct soap *soap, struct __name__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__SelectMethod(soap, p), 0) || ::soap_put___name__SelectMethod(soap, p, "-name:SelectMethod", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__SelectMethod(struct soap *soap, const char *URL, struct __name__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SelectMethod(soap, p), 0) || ::soap_put___name__SelectMethod(soap, p, "-name:SelectMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__SelectMethod(struct soap *soap, const char *URL, struct __name__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SelectMethod(soap, p), 0) || ::soap_put___name__SelectMethod(soap, p, "-name:SelectMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__SelectMethod(struct soap *soap, const char *URL, struct __name__SelectMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__SelectMethod(soap, p), 0) || ::soap_put___name__SelectMethod(soap, p, "-name:SelectMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__SelectMethod * SOAP_FMAC4 soap_get___name__SelectMethod(struct soap*, struct __name__SelectMethod *, const char*, const char*);

inline int soap_read___name__SelectMethod(struct soap *soap, struct __name__SelectMethod *p)
{
	if (p)
	{	::soap_default___name__SelectMethod(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__SelectMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__SelectMethod(struct soap *soap, const char *URL, struct __name__SelectMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__SelectMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__SelectMethod(struct soap *soap, struct __name__SelectMethod *p)
{
	if (::soap_read___name__SelectMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetMethodNamesOfRunset_DEFINED
#define SOAP_TYPE___name__GetMethodNamesOfRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetMethodNamesOfRunset(struct soap*, struct __name__GetMethodNamesOfRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetMethodNamesOfRunset(struct soap*, const struct __name__GetMethodNamesOfRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetMethodNamesOfRunset(struct soap*, const char*, int, const struct __name__GetMethodNamesOfRunset *, const char*);
SOAP_FMAC3 struct __name__GetMethodNamesOfRunset * SOAP_FMAC4 soap_in___name__GetMethodNamesOfRunset(struct soap*, const char*, struct __name__GetMethodNamesOfRunset *, const char*);
SOAP_FMAC1 struct __name__GetMethodNamesOfRunset * SOAP_FMAC2 soap_instantiate___name__GetMethodNamesOfRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetMethodNamesOfRunset * soap_new___name__GetMethodNamesOfRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetMethodNamesOfRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetMethodNamesOfRunset * soap_new_req___name__GetMethodNamesOfRunset(
	struct soap *soap)
{
	struct __name__GetMethodNamesOfRunset *_p = ::soap_new___name__GetMethodNamesOfRunset(soap);
	if (_p)
	{	::soap_default___name__GetMethodNamesOfRunset(soap, _p);
	}
	return _p;
}

inline struct __name__GetMethodNamesOfRunset * soap_new_set___name__GetMethodNamesOfRunset(
	struct soap *soap,
	_tempuri__GetMethodNamesOfRunset *tempuri__GetMethodNamesOfRunset)
{
	struct __name__GetMethodNamesOfRunset *_p = ::soap_new___name__GetMethodNamesOfRunset(soap);
	if (_p)
	{	::soap_default___name__GetMethodNamesOfRunset(soap, _p);
		_p->tempuri__GetMethodNamesOfRunset = tempuri__GetMethodNamesOfRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetMethodNamesOfRunset(struct soap*, const struct __name__GetMethodNamesOfRunset *, const char*, const char*);

inline int soap_write___name__GetMethodNamesOfRunset(struct soap *soap, struct __name__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetMethodNamesOfRunset(soap, p), 0) || ::soap_put___name__GetMethodNamesOfRunset(soap, p, "-name:GetMethodNamesOfRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetMethodNamesOfRunset(struct soap *soap, const char *URL, struct __name__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetMethodNamesOfRunset(soap, p), 0) || ::soap_put___name__GetMethodNamesOfRunset(soap, p, "-name:GetMethodNamesOfRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetMethodNamesOfRunset(struct soap *soap, const char *URL, struct __name__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetMethodNamesOfRunset(soap, p), 0) || ::soap_put___name__GetMethodNamesOfRunset(soap, p, "-name:GetMethodNamesOfRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetMethodNamesOfRunset(struct soap *soap, const char *URL, struct __name__GetMethodNamesOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetMethodNamesOfRunset(soap, p), 0) || ::soap_put___name__GetMethodNamesOfRunset(soap, p, "-name:GetMethodNamesOfRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetMethodNamesOfRunset * SOAP_FMAC4 soap_get___name__GetMethodNamesOfRunset(struct soap*, struct __name__GetMethodNamesOfRunset *, const char*, const char*);

inline int soap_read___name__GetMethodNamesOfRunset(struct soap *soap, struct __name__GetMethodNamesOfRunset *p)
{
	if (p)
	{	::soap_default___name__GetMethodNamesOfRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetMethodNamesOfRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetMethodNamesOfRunset(struct soap *soap, const char *URL, struct __name__GetMethodNamesOfRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetMethodNamesOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetMethodNamesOfRunset(struct soap *soap, struct __name__GetMethodNamesOfRunset *p)
{
	if (::soap_read___name__GetMethodNamesOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetAssayTypeOfRunset_DEFINED
#define SOAP_TYPE___name__GetAssayTypeOfRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetAssayTypeOfRunset(struct soap*, struct __name__GetAssayTypeOfRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetAssayTypeOfRunset(struct soap*, const struct __name__GetAssayTypeOfRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetAssayTypeOfRunset(struct soap*, const char*, int, const struct __name__GetAssayTypeOfRunset *, const char*);
SOAP_FMAC3 struct __name__GetAssayTypeOfRunset * SOAP_FMAC4 soap_in___name__GetAssayTypeOfRunset(struct soap*, const char*, struct __name__GetAssayTypeOfRunset *, const char*);
SOAP_FMAC1 struct __name__GetAssayTypeOfRunset * SOAP_FMAC2 soap_instantiate___name__GetAssayTypeOfRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetAssayTypeOfRunset * soap_new___name__GetAssayTypeOfRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetAssayTypeOfRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetAssayTypeOfRunset * soap_new_req___name__GetAssayTypeOfRunset(
	struct soap *soap)
{
	struct __name__GetAssayTypeOfRunset *_p = ::soap_new___name__GetAssayTypeOfRunset(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypeOfRunset(soap, _p);
	}
	return _p;
}

inline struct __name__GetAssayTypeOfRunset * soap_new_set___name__GetAssayTypeOfRunset(
	struct soap *soap,
	_tempuri__GetAssayTypeOfRunset *tempuri__GetAssayTypeOfRunset)
{
	struct __name__GetAssayTypeOfRunset *_p = ::soap_new___name__GetAssayTypeOfRunset(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypeOfRunset(soap, _p);
		_p->tempuri__GetAssayTypeOfRunset = tempuri__GetAssayTypeOfRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetAssayTypeOfRunset(struct soap*, const struct __name__GetAssayTypeOfRunset *, const char*, const char*);

inline int soap_write___name__GetAssayTypeOfRunset(struct soap *soap, struct __name__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetAssayTypeOfRunset(soap, p), 0) || ::soap_put___name__GetAssayTypeOfRunset(soap, p, "-name:GetAssayTypeOfRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetAssayTypeOfRunset(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfRunset(soap, p), 0) || ::soap_put___name__GetAssayTypeOfRunset(soap, p, "-name:GetAssayTypeOfRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetAssayTypeOfRunset(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfRunset(soap, p), 0) || ::soap_put___name__GetAssayTypeOfRunset(soap, p, "-name:GetAssayTypeOfRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetAssayTypeOfRunset(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfRunset(soap, p), 0) || ::soap_put___name__GetAssayTypeOfRunset(soap, p, "-name:GetAssayTypeOfRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetAssayTypeOfRunset * SOAP_FMAC4 soap_get___name__GetAssayTypeOfRunset(struct soap*, struct __name__GetAssayTypeOfRunset *, const char*, const char*);

inline int soap_read___name__GetAssayTypeOfRunset(struct soap *soap, struct __name__GetAssayTypeOfRunset *p)
{
	if (p)
	{	::soap_default___name__GetAssayTypeOfRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetAssayTypeOfRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetAssayTypeOfRunset(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetAssayTypeOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetAssayTypeOfRunset(struct soap *soap, struct __name__GetAssayTypeOfRunset *p)
{
	if (::soap_read___name__GetAssayTypeOfRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetAssayTypeOfCurrentRunset_DEFINED
#define SOAP_TYPE___name__GetAssayTypeOfCurrentRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetAssayTypeOfCurrentRunset(struct soap*, struct __name__GetAssayTypeOfCurrentRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetAssayTypeOfCurrentRunset(struct soap*, const struct __name__GetAssayTypeOfCurrentRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetAssayTypeOfCurrentRunset(struct soap*, const char*, int, const struct __name__GetAssayTypeOfCurrentRunset *, const char*);
SOAP_FMAC3 struct __name__GetAssayTypeOfCurrentRunset * SOAP_FMAC4 soap_in___name__GetAssayTypeOfCurrentRunset(struct soap*, const char*, struct __name__GetAssayTypeOfCurrentRunset *, const char*);
SOAP_FMAC1 struct __name__GetAssayTypeOfCurrentRunset * SOAP_FMAC2 soap_instantiate___name__GetAssayTypeOfCurrentRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetAssayTypeOfCurrentRunset * soap_new___name__GetAssayTypeOfCurrentRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetAssayTypeOfCurrentRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetAssayTypeOfCurrentRunset * soap_new_req___name__GetAssayTypeOfCurrentRunset(
	struct soap *soap)
{
	struct __name__GetAssayTypeOfCurrentRunset *_p = ::soap_new___name__GetAssayTypeOfCurrentRunset(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypeOfCurrentRunset(soap, _p);
	}
	return _p;
}

inline struct __name__GetAssayTypeOfCurrentRunset * soap_new_set___name__GetAssayTypeOfCurrentRunset(
	struct soap *soap,
	_tempuri__GetAssayTypeOfCurrentRunset *tempuri__GetAssayTypeOfCurrentRunset)
{
	struct __name__GetAssayTypeOfCurrentRunset *_p = ::soap_new___name__GetAssayTypeOfCurrentRunset(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypeOfCurrentRunset(soap, _p);
		_p->tempuri__GetAssayTypeOfCurrentRunset = tempuri__GetAssayTypeOfCurrentRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetAssayTypeOfCurrentRunset(struct soap*, const struct __name__GetAssayTypeOfCurrentRunset *, const char*, const char*);

inline int soap_write___name__GetAssayTypeOfCurrentRunset(struct soap *soap, struct __name__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetAssayTypeOfCurrentRunset(soap, p), 0) || ::soap_put___name__GetAssayTypeOfCurrentRunset(soap, p, "-name:GetAssayTypeOfCurrentRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfCurrentRunset(soap, p), 0) || ::soap_put___name__GetAssayTypeOfCurrentRunset(soap, p, "-name:GetAssayTypeOfCurrentRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfCurrentRunset(soap, p), 0) || ::soap_put___name__GetAssayTypeOfCurrentRunset(soap, p, "-name:GetAssayTypeOfCurrentRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfCurrentRunset(soap, p), 0) || ::soap_put___name__GetAssayTypeOfCurrentRunset(soap, p, "-name:GetAssayTypeOfCurrentRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetAssayTypeOfCurrentRunset * SOAP_FMAC4 soap_get___name__GetAssayTypeOfCurrentRunset(struct soap*, struct __name__GetAssayTypeOfCurrentRunset *, const char*, const char*);

inline int soap_read___name__GetAssayTypeOfCurrentRunset(struct soap *soap, struct __name__GetAssayTypeOfCurrentRunset *p)
{
	if (p)
	{	::soap_default___name__GetAssayTypeOfCurrentRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetAssayTypeOfCurrentRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetAssayTypeOfCurrentRunset(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfCurrentRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetAssayTypeOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetAssayTypeOfCurrentRunset(struct soap *soap, struct __name__GetAssayTypeOfCurrentRunset *p)
{
	if (::soap_read___name__GetAssayTypeOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetNameOfCurrentRunset_DEFINED
#define SOAP_TYPE___name__GetNameOfCurrentRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetNameOfCurrentRunset(struct soap*, struct __name__GetNameOfCurrentRunset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetNameOfCurrentRunset(struct soap*, const struct __name__GetNameOfCurrentRunset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetNameOfCurrentRunset(struct soap*, const char*, int, const struct __name__GetNameOfCurrentRunset *, const char*);
SOAP_FMAC3 struct __name__GetNameOfCurrentRunset * SOAP_FMAC4 soap_in___name__GetNameOfCurrentRunset(struct soap*, const char*, struct __name__GetNameOfCurrentRunset *, const char*);
SOAP_FMAC1 struct __name__GetNameOfCurrentRunset * SOAP_FMAC2 soap_instantiate___name__GetNameOfCurrentRunset(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetNameOfCurrentRunset * soap_new___name__GetNameOfCurrentRunset(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetNameOfCurrentRunset(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetNameOfCurrentRunset * soap_new_req___name__GetNameOfCurrentRunset(
	struct soap *soap)
{
	struct __name__GetNameOfCurrentRunset *_p = ::soap_new___name__GetNameOfCurrentRunset(soap);
	if (_p)
	{	::soap_default___name__GetNameOfCurrentRunset(soap, _p);
	}
	return _p;
}

inline struct __name__GetNameOfCurrentRunset * soap_new_set___name__GetNameOfCurrentRunset(
	struct soap *soap,
	_tempuri__GetNameOfCurrentRunset *tempuri__GetNameOfCurrentRunset)
{
	struct __name__GetNameOfCurrentRunset *_p = ::soap_new___name__GetNameOfCurrentRunset(soap);
	if (_p)
	{	::soap_default___name__GetNameOfCurrentRunset(soap, _p);
		_p->tempuri__GetNameOfCurrentRunset = tempuri__GetNameOfCurrentRunset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetNameOfCurrentRunset(struct soap*, const struct __name__GetNameOfCurrentRunset *, const char*, const char*);

inline int soap_write___name__GetNameOfCurrentRunset(struct soap *soap, struct __name__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetNameOfCurrentRunset(soap, p), 0) || ::soap_put___name__GetNameOfCurrentRunset(soap, p, "-name:GetNameOfCurrentRunset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetNameOfCurrentRunset(struct soap *soap, const char *URL, struct __name__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNameOfCurrentRunset(soap, p), 0) || ::soap_put___name__GetNameOfCurrentRunset(soap, p, "-name:GetNameOfCurrentRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetNameOfCurrentRunset(struct soap *soap, const char *URL, struct __name__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNameOfCurrentRunset(soap, p), 0) || ::soap_put___name__GetNameOfCurrentRunset(soap, p, "-name:GetNameOfCurrentRunset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetNameOfCurrentRunset(struct soap *soap, const char *URL, struct __name__GetNameOfCurrentRunset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNameOfCurrentRunset(soap, p), 0) || ::soap_put___name__GetNameOfCurrentRunset(soap, p, "-name:GetNameOfCurrentRunset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetNameOfCurrentRunset * SOAP_FMAC4 soap_get___name__GetNameOfCurrentRunset(struct soap*, struct __name__GetNameOfCurrentRunset *, const char*, const char*);

inline int soap_read___name__GetNameOfCurrentRunset(struct soap *soap, struct __name__GetNameOfCurrentRunset *p)
{
	if (p)
	{	::soap_default___name__GetNameOfCurrentRunset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetNameOfCurrentRunset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetNameOfCurrentRunset(struct soap *soap, const char *URL, struct __name__GetNameOfCurrentRunset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetNameOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetNameOfCurrentRunset(struct soap *soap, struct __name__GetNameOfCurrentRunset *p)
{
	if (::soap_read___name__GetNameOfCurrentRunset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetAssayTypesOfAllRunsets_DEFINED
#define SOAP_TYPE___name__GetAssayTypesOfAllRunsets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetAssayTypesOfAllRunsets(struct soap*, struct __name__GetAssayTypesOfAllRunsets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetAssayTypesOfAllRunsets(struct soap*, const struct __name__GetAssayTypesOfAllRunsets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetAssayTypesOfAllRunsets(struct soap*, const char*, int, const struct __name__GetAssayTypesOfAllRunsets *, const char*);
SOAP_FMAC3 struct __name__GetAssayTypesOfAllRunsets * SOAP_FMAC4 soap_in___name__GetAssayTypesOfAllRunsets(struct soap*, const char*, struct __name__GetAssayTypesOfAllRunsets *, const char*);
SOAP_FMAC1 struct __name__GetAssayTypesOfAllRunsets * SOAP_FMAC2 soap_instantiate___name__GetAssayTypesOfAllRunsets(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetAssayTypesOfAllRunsets * soap_new___name__GetAssayTypesOfAllRunsets(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetAssayTypesOfAllRunsets(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetAssayTypesOfAllRunsets * soap_new_req___name__GetAssayTypesOfAllRunsets(
	struct soap *soap)
{
	struct __name__GetAssayTypesOfAllRunsets *_p = ::soap_new___name__GetAssayTypesOfAllRunsets(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypesOfAllRunsets(soap, _p);
	}
	return _p;
}

inline struct __name__GetAssayTypesOfAllRunsets * soap_new_set___name__GetAssayTypesOfAllRunsets(
	struct soap *soap,
	_tempuri__GetAssayTypesOfAllRunsets *tempuri__GetAssayTypesOfAllRunsets)
{
	struct __name__GetAssayTypesOfAllRunsets *_p = ::soap_new___name__GetAssayTypesOfAllRunsets(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypesOfAllRunsets(soap, _p);
		_p->tempuri__GetAssayTypesOfAllRunsets = tempuri__GetAssayTypesOfAllRunsets;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetAssayTypesOfAllRunsets(struct soap*, const struct __name__GetAssayTypesOfAllRunsets *, const char*, const char*);

inline int soap_write___name__GetAssayTypesOfAllRunsets(struct soap *soap, struct __name__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetAssayTypesOfAllRunsets(soap, p), 0) || ::soap_put___name__GetAssayTypesOfAllRunsets(soap, p, "-name:GetAssayTypesOfAllRunsets", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, struct __name__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypesOfAllRunsets(soap, p), 0) || ::soap_put___name__GetAssayTypesOfAllRunsets(soap, p, "-name:GetAssayTypesOfAllRunsets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, struct __name__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypesOfAllRunsets(soap, p), 0) || ::soap_put___name__GetAssayTypesOfAllRunsets(soap, p, "-name:GetAssayTypesOfAllRunsets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, struct __name__GetAssayTypesOfAllRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypesOfAllRunsets(soap, p), 0) || ::soap_put___name__GetAssayTypesOfAllRunsets(soap, p, "-name:GetAssayTypesOfAllRunsets", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetAssayTypesOfAllRunsets * SOAP_FMAC4 soap_get___name__GetAssayTypesOfAllRunsets(struct soap*, struct __name__GetAssayTypesOfAllRunsets *, const char*, const char*);

inline int soap_read___name__GetAssayTypesOfAllRunsets(struct soap *soap, struct __name__GetAssayTypesOfAllRunsets *p)
{
	if (p)
	{	::soap_default___name__GetAssayTypesOfAllRunsets(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetAssayTypesOfAllRunsets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetAssayTypesOfAllRunsets(struct soap *soap, const char *URL, struct __name__GetAssayTypesOfAllRunsets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetAssayTypesOfAllRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetAssayTypesOfAllRunsets(struct soap *soap, struct __name__GetAssayTypesOfAllRunsets *p)
{
	if (::soap_read___name__GetAssayTypesOfAllRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetNamesOfRunsetsOfAssayType_DEFINED
#define SOAP_TYPE___name__GetNamesOfRunsetsOfAssayType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetNamesOfRunsetsOfAssayType(struct soap*, struct __name__GetNamesOfRunsetsOfAssayType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetNamesOfRunsetsOfAssayType(struct soap*, const struct __name__GetNamesOfRunsetsOfAssayType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetNamesOfRunsetsOfAssayType(struct soap*, const char*, int, const struct __name__GetNamesOfRunsetsOfAssayType *, const char*);
SOAP_FMAC3 struct __name__GetNamesOfRunsetsOfAssayType * SOAP_FMAC4 soap_in___name__GetNamesOfRunsetsOfAssayType(struct soap*, const char*, struct __name__GetNamesOfRunsetsOfAssayType *, const char*);
SOAP_FMAC1 struct __name__GetNamesOfRunsetsOfAssayType * SOAP_FMAC2 soap_instantiate___name__GetNamesOfRunsetsOfAssayType(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetNamesOfRunsetsOfAssayType * soap_new___name__GetNamesOfRunsetsOfAssayType(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetNamesOfRunsetsOfAssayType(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetNamesOfRunsetsOfAssayType * soap_new_req___name__GetNamesOfRunsetsOfAssayType(
	struct soap *soap)
{
	struct __name__GetNamesOfRunsetsOfAssayType *_p = ::soap_new___name__GetNamesOfRunsetsOfAssayType(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfRunsetsOfAssayType(soap, _p);
	}
	return _p;
}

inline struct __name__GetNamesOfRunsetsOfAssayType * soap_new_set___name__GetNamesOfRunsetsOfAssayType(
	struct soap *soap,
	_tempuri__GetNamesOfRunsetsOfAssayType *tempuri__GetNamesOfRunsetsOfAssayType)
{
	struct __name__GetNamesOfRunsetsOfAssayType *_p = ::soap_new___name__GetNamesOfRunsetsOfAssayType(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfRunsetsOfAssayType(soap, _p);
		_p->tempuri__GetNamesOfRunsetsOfAssayType = tempuri__GetNamesOfRunsetsOfAssayType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetNamesOfRunsetsOfAssayType(struct soap*, const struct __name__GetNamesOfRunsetsOfAssayType *, const char*, const char*);

inline int soap_write___name__GetNamesOfRunsetsOfAssayType(struct soap *soap, struct __name__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetNamesOfRunsetsOfAssayType(soap, p), 0) || ::soap_put___name__GetNamesOfRunsetsOfAssayType(soap, p, "-name:GetNamesOfRunsetsOfAssayType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, struct __name__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfRunsetsOfAssayType(soap, p), 0) || ::soap_put___name__GetNamesOfRunsetsOfAssayType(soap, p, "-name:GetNamesOfRunsetsOfAssayType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, struct __name__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfRunsetsOfAssayType(soap, p), 0) || ::soap_put___name__GetNamesOfRunsetsOfAssayType(soap, p, "-name:GetNamesOfRunsetsOfAssayType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, struct __name__GetNamesOfRunsetsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfRunsetsOfAssayType(soap, p), 0) || ::soap_put___name__GetNamesOfRunsetsOfAssayType(soap, p, "-name:GetNamesOfRunsetsOfAssayType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetNamesOfRunsetsOfAssayType * SOAP_FMAC4 soap_get___name__GetNamesOfRunsetsOfAssayType(struct soap*, struct __name__GetNamesOfRunsetsOfAssayType *, const char*, const char*);

inline int soap_read___name__GetNamesOfRunsetsOfAssayType(struct soap *soap, struct __name__GetNamesOfRunsetsOfAssayType *p)
{
	if (p)
	{	::soap_default___name__GetNamesOfRunsetsOfAssayType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetNamesOfRunsetsOfAssayType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetNamesOfRunsetsOfAssayType(struct soap *soap, const char *URL, struct __name__GetNamesOfRunsetsOfAssayType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetNamesOfRunsetsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetNamesOfRunsetsOfAssayType(struct soap *soap, struct __name__GetNamesOfRunsetsOfAssayType *p)
{
	if (::soap_read___name__GetNamesOfRunsetsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetNamesOfRunsets_DEFINED
#define SOAP_TYPE___name__GetNamesOfRunsets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetNamesOfRunsets(struct soap*, struct __name__GetNamesOfRunsets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetNamesOfRunsets(struct soap*, const struct __name__GetNamesOfRunsets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetNamesOfRunsets(struct soap*, const char*, int, const struct __name__GetNamesOfRunsets *, const char*);
SOAP_FMAC3 struct __name__GetNamesOfRunsets * SOAP_FMAC4 soap_in___name__GetNamesOfRunsets(struct soap*, const char*, struct __name__GetNamesOfRunsets *, const char*);
SOAP_FMAC1 struct __name__GetNamesOfRunsets * SOAP_FMAC2 soap_instantiate___name__GetNamesOfRunsets(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetNamesOfRunsets * soap_new___name__GetNamesOfRunsets(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetNamesOfRunsets(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetNamesOfRunsets * soap_new_req___name__GetNamesOfRunsets(
	struct soap *soap)
{
	struct __name__GetNamesOfRunsets *_p = ::soap_new___name__GetNamesOfRunsets(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfRunsets(soap, _p);
	}
	return _p;
}

inline struct __name__GetNamesOfRunsets * soap_new_set___name__GetNamesOfRunsets(
	struct soap *soap,
	_tempuri__GetNamesOfRunsets *tempuri__GetNamesOfRunsets)
{
	struct __name__GetNamesOfRunsets *_p = ::soap_new___name__GetNamesOfRunsets(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfRunsets(soap, _p);
		_p->tempuri__GetNamesOfRunsets = tempuri__GetNamesOfRunsets;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetNamesOfRunsets(struct soap*, const struct __name__GetNamesOfRunsets *, const char*, const char*);

inline int soap_write___name__GetNamesOfRunsets(struct soap *soap, struct __name__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetNamesOfRunsets(soap, p), 0) || ::soap_put___name__GetNamesOfRunsets(soap, p, "-name:GetNamesOfRunsets", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetNamesOfRunsets(struct soap *soap, const char *URL, struct __name__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfRunsets(soap, p), 0) || ::soap_put___name__GetNamesOfRunsets(soap, p, "-name:GetNamesOfRunsets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetNamesOfRunsets(struct soap *soap, const char *URL, struct __name__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfRunsets(soap, p), 0) || ::soap_put___name__GetNamesOfRunsets(soap, p, "-name:GetNamesOfRunsets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetNamesOfRunsets(struct soap *soap, const char *URL, struct __name__GetNamesOfRunsets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfRunsets(soap, p), 0) || ::soap_put___name__GetNamesOfRunsets(soap, p, "-name:GetNamesOfRunsets", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetNamesOfRunsets * SOAP_FMAC4 soap_get___name__GetNamesOfRunsets(struct soap*, struct __name__GetNamesOfRunsets *, const char*, const char*);

inline int soap_read___name__GetNamesOfRunsets(struct soap *soap, struct __name__GetNamesOfRunsets *p)
{
	if (p)
	{	::soap_default___name__GetNamesOfRunsets(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetNamesOfRunsets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetNamesOfRunsets(struct soap *soap, const char *URL, struct __name__GetNamesOfRunsets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetNamesOfRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetNamesOfRunsets(struct soap *soap, struct __name__GetNamesOfRunsets *p)
{
	if (::soap_read___name__GetNamesOfRunsets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetAssayTypeOfMethod_DEFINED
#define SOAP_TYPE___name__GetAssayTypeOfMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetAssayTypeOfMethod(struct soap*, struct __name__GetAssayTypeOfMethod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetAssayTypeOfMethod(struct soap*, const struct __name__GetAssayTypeOfMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetAssayTypeOfMethod(struct soap*, const char*, int, const struct __name__GetAssayTypeOfMethod *, const char*);
SOAP_FMAC3 struct __name__GetAssayTypeOfMethod * SOAP_FMAC4 soap_in___name__GetAssayTypeOfMethod(struct soap*, const char*, struct __name__GetAssayTypeOfMethod *, const char*);
SOAP_FMAC1 struct __name__GetAssayTypeOfMethod * SOAP_FMAC2 soap_instantiate___name__GetAssayTypeOfMethod(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetAssayTypeOfMethod * soap_new___name__GetAssayTypeOfMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetAssayTypeOfMethod(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetAssayTypeOfMethod * soap_new_req___name__GetAssayTypeOfMethod(
	struct soap *soap)
{
	struct __name__GetAssayTypeOfMethod *_p = ::soap_new___name__GetAssayTypeOfMethod(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypeOfMethod(soap, _p);
	}
	return _p;
}

inline struct __name__GetAssayTypeOfMethod * soap_new_set___name__GetAssayTypeOfMethod(
	struct soap *soap,
	_tempuri__GetAssayTypeOfMethod *tempuri__GetAssayTypeOfMethod)
{
	struct __name__GetAssayTypeOfMethod *_p = ::soap_new___name__GetAssayTypeOfMethod(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypeOfMethod(soap, _p);
		_p->tempuri__GetAssayTypeOfMethod = tempuri__GetAssayTypeOfMethod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetAssayTypeOfMethod(struct soap*, const struct __name__GetAssayTypeOfMethod *, const char*, const char*);

inline int soap_write___name__GetAssayTypeOfMethod(struct soap *soap, struct __name__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetAssayTypeOfMethod(soap, p), 0) || ::soap_put___name__GetAssayTypeOfMethod(soap, p, "-name:GetAssayTypeOfMethod", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetAssayTypeOfMethod(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfMethod(soap, p), 0) || ::soap_put___name__GetAssayTypeOfMethod(soap, p, "-name:GetAssayTypeOfMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetAssayTypeOfMethod(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfMethod(soap, p), 0) || ::soap_put___name__GetAssayTypeOfMethod(soap, p, "-name:GetAssayTypeOfMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetAssayTypeOfMethod(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfMethod(soap, p), 0) || ::soap_put___name__GetAssayTypeOfMethod(soap, p, "-name:GetAssayTypeOfMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetAssayTypeOfMethod * SOAP_FMAC4 soap_get___name__GetAssayTypeOfMethod(struct soap*, struct __name__GetAssayTypeOfMethod *, const char*, const char*);

inline int soap_read___name__GetAssayTypeOfMethod(struct soap *soap, struct __name__GetAssayTypeOfMethod *p)
{
	if (p)
	{	::soap_default___name__GetAssayTypeOfMethod(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetAssayTypeOfMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetAssayTypeOfMethod(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetAssayTypeOfMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetAssayTypeOfMethod(struct soap *soap, struct __name__GetAssayTypeOfMethod *p)
{
	if (::soap_read___name__GetAssayTypeOfMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetAssayTypeOfCurrentMethod_DEFINED
#define SOAP_TYPE___name__GetAssayTypeOfCurrentMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetAssayTypeOfCurrentMethod(struct soap*, struct __name__GetAssayTypeOfCurrentMethod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetAssayTypeOfCurrentMethod(struct soap*, const struct __name__GetAssayTypeOfCurrentMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetAssayTypeOfCurrentMethod(struct soap*, const char*, int, const struct __name__GetAssayTypeOfCurrentMethod *, const char*);
SOAP_FMAC3 struct __name__GetAssayTypeOfCurrentMethod * SOAP_FMAC4 soap_in___name__GetAssayTypeOfCurrentMethod(struct soap*, const char*, struct __name__GetAssayTypeOfCurrentMethod *, const char*);
SOAP_FMAC1 struct __name__GetAssayTypeOfCurrentMethod * SOAP_FMAC2 soap_instantiate___name__GetAssayTypeOfCurrentMethod(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetAssayTypeOfCurrentMethod * soap_new___name__GetAssayTypeOfCurrentMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetAssayTypeOfCurrentMethod(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetAssayTypeOfCurrentMethod * soap_new_req___name__GetAssayTypeOfCurrentMethod(
	struct soap *soap)
{
	struct __name__GetAssayTypeOfCurrentMethod *_p = ::soap_new___name__GetAssayTypeOfCurrentMethod(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypeOfCurrentMethod(soap, _p);
	}
	return _p;
}

inline struct __name__GetAssayTypeOfCurrentMethod * soap_new_set___name__GetAssayTypeOfCurrentMethod(
	struct soap *soap,
	_tempuri__GetAssayTypeOfCurrentMethod *tempuri__GetAssayTypeOfCurrentMethod)
{
	struct __name__GetAssayTypeOfCurrentMethod *_p = ::soap_new___name__GetAssayTypeOfCurrentMethod(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypeOfCurrentMethod(soap, _p);
		_p->tempuri__GetAssayTypeOfCurrentMethod = tempuri__GetAssayTypeOfCurrentMethod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetAssayTypeOfCurrentMethod(struct soap*, const struct __name__GetAssayTypeOfCurrentMethod *, const char*, const char*);

inline int soap_write___name__GetAssayTypeOfCurrentMethod(struct soap *soap, struct __name__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetAssayTypeOfCurrentMethod(soap, p), 0) || ::soap_put___name__GetAssayTypeOfCurrentMethod(soap, p, "-name:GetAssayTypeOfCurrentMethod", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfCurrentMethod(soap, p), 0) || ::soap_put___name__GetAssayTypeOfCurrentMethod(soap, p, "-name:GetAssayTypeOfCurrentMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfCurrentMethod(soap, p), 0) || ::soap_put___name__GetAssayTypeOfCurrentMethod(soap, p, "-name:GetAssayTypeOfCurrentMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypeOfCurrentMethod(soap, p), 0) || ::soap_put___name__GetAssayTypeOfCurrentMethod(soap, p, "-name:GetAssayTypeOfCurrentMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetAssayTypeOfCurrentMethod * SOAP_FMAC4 soap_get___name__GetAssayTypeOfCurrentMethod(struct soap*, struct __name__GetAssayTypeOfCurrentMethod *, const char*, const char*);

inline int soap_read___name__GetAssayTypeOfCurrentMethod(struct soap *soap, struct __name__GetAssayTypeOfCurrentMethod *p)
{
	if (p)
	{	::soap_default___name__GetAssayTypeOfCurrentMethod(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetAssayTypeOfCurrentMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetAssayTypeOfCurrentMethod(struct soap *soap, const char *URL, struct __name__GetAssayTypeOfCurrentMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetAssayTypeOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetAssayTypeOfCurrentMethod(struct soap *soap, struct __name__GetAssayTypeOfCurrentMethod *p)
{
	if (::soap_read___name__GetAssayTypeOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetNameOfCurrentMethod_DEFINED
#define SOAP_TYPE___name__GetNameOfCurrentMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetNameOfCurrentMethod(struct soap*, struct __name__GetNameOfCurrentMethod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetNameOfCurrentMethod(struct soap*, const struct __name__GetNameOfCurrentMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetNameOfCurrentMethod(struct soap*, const char*, int, const struct __name__GetNameOfCurrentMethod *, const char*);
SOAP_FMAC3 struct __name__GetNameOfCurrentMethod * SOAP_FMAC4 soap_in___name__GetNameOfCurrentMethod(struct soap*, const char*, struct __name__GetNameOfCurrentMethod *, const char*);
SOAP_FMAC1 struct __name__GetNameOfCurrentMethod * SOAP_FMAC2 soap_instantiate___name__GetNameOfCurrentMethod(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetNameOfCurrentMethod * soap_new___name__GetNameOfCurrentMethod(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetNameOfCurrentMethod(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetNameOfCurrentMethod * soap_new_req___name__GetNameOfCurrentMethod(
	struct soap *soap)
{
	struct __name__GetNameOfCurrentMethod *_p = ::soap_new___name__GetNameOfCurrentMethod(soap);
	if (_p)
	{	::soap_default___name__GetNameOfCurrentMethod(soap, _p);
	}
	return _p;
}

inline struct __name__GetNameOfCurrentMethod * soap_new_set___name__GetNameOfCurrentMethod(
	struct soap *soap,
	_tempuri__GetNameOfCurrentMethod *tempuri__GetNameOfCurrentMethod)
{
	struct __name__GetNameOfCurrentMethod *_p = ::soap_new___name__GetNameOfCurrentMethod(soap);
	if (_p)
	{	::soap_default___name__GetNameOfCurrentMethod(soap, _p);
		_p->tempuri__GetNameOfCurrentMethod = tempuri__GetNameOfCurrentMethod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetNameOfCurrentMethod(struct soap*, const struct __name__GetNameOfCurrentMethod *, const char*, const char*);

inline int soap_write___name__GetNameOfCurrentMethod(struct soap *soap, struct __name__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetNameOfCurrentMethod(soap, p), 0) || ::soap_put___name__GetNameOfCurrentMethod(soap, p, "-name:GetNameOfCurrentMethod", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetNameOfCurrentMethod(struct soap *soap, const char *URL, struct __name__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNameOfCurrentMethod(soap, p), 0) || ::soap_put___name__GetNameOfCurrentMethod(soap, p, "-name:GetNameOfCurrentMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetNameOfCurrentMethod(struct soap *soap, const char *URL, struct __name__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNameOfCurrentMethod(soap, p), 0) || ::soap_put___name__GetNameOfCurrentMethod(soap, p, "-name:GetNameOfCurrentMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetNameOfCurrentMethod(struct soap *soap, const char *URL, struct __name__GetNameOfCurrentMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNameOfCurrentMethod(soap, p), 0) || ::soap_put___name__GetNameOfCurrentMethod(soap, p, "-name:GetNameOfCurrentMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetNameOfCurrentMethod * SOAP_FMAC4 soap_get___name__GetNameOfCurrentMethod(struct soap*, struct __name__GetNameOfCurrentMethod *, const char*, const char*);

inline int soap_read___name__GetNameOfCurrentMethod(struct soap *soap, struct __name__GetNameOfCurrentMethod *p)
{
	if (p)
	{	::soap_default___name__GetNameOfCurrentMethod(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetNameOfCurrentMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetNameOfCurrentMethod(struct soap *soap, const char *URL, struct __name__GetNameOfCurrentMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetNameOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetNameOfCurrentMethod(struct soap *soap, struct __name__GetNameOfCurrentMethod *p)
{
	if (::soap_read___name__GetNameOfCurrentMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetAssayTypesOfAllMethods_DEFINED
#define SOAP_TYPE___name__GetAssayTypesOfAllMethods_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetAssayTypesOfAllMethods(struct soap*, struct __name__GetAssayTypesOfAllMethods *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetAssayTypesOfAllMethods(struct soap*, const struct __name__GetAssayTypesOfAllMethods *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetAssayTypesOfAllMethods(struct soap*, const char*, int, const struct __name__GetAssayTypesOfAllMethods *, const char*);
SOAP_FMAC3 struct __name__GetAssayTypesOfAllMethods * SOAP_FMAC4 soap_in___name__GetAssayTypesOfAllMethods(struct soap*, const char*, struct __name__GetAssayTypesOfAllMethods *, const char*);
SOAP_FMAC1 struct __name__GetAssayTypesOfAllMethods * SOAP_FMAC2 soap_instantiate___name__GetAssayTypesOfAllMethods(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetAssayTypesOfAllMethods * soap_new___name__GetAssayTypesOfAllMethods(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetAssayTypesOfAllMethods(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetAssayTypesOfAllMethods * soap_new_req___name__GetAssayTypesOfAllMethods(
	struct soap *soap)
{
	struct __name__GetAssayTypesOfAllMethods *_p = ::soap_new___name__GetAssayTypesOfAllMethods(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypesOfAllMethods(soap, _p);
	}
	return _p;
}

inline struct __name__GetAssayTypesOfAllMethods * soap_new_set___name__GetAssayTypesOfAllMethods(
	struct soap *soap,
	_tempuri__GetAssayTypesOfAllMethods *tempuri__GetAssayTypesOfAllMethods)
{
	struct __name__GetAssayTypesOfAllMethods *_p = ::soap_new___name__GetAssayTypesOfAllMethods(soap);
	if (_p)
	{	::soap_default___name__GetAssayTypesOfAllMethods(soap, _p);
		_p->tempuri__GetAssayTypesOfAllMethods = tempuri__GetAssayTypesOfAllMethods;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetAssayTypesOfAllMethods(struct soap*, const struct __name__GetAssayTypesOfAllMethods *, const char*, const char*);

inline int soap_write___name__GetAssayTypesOfAllMethods(struct soap *soap, struct __name__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetAssayTypesOfAllMethods(soap, p), 0) || ::soap_put___name__GetAssayTypesOfAllMethods(soap, p, "-name:GetAssayTypesOfAllMethods", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, struct __name__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypesOfAllMethods(soap, p), 0) || ::soap_put___name__GetAssayTypesOfAllMethods(soap, p, "-name:GetAssayTypesOfAllMethods", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, struct __name__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypesOfAllMethods(soap, p), 0) || ::soap_put___name__GetAssayTypesOfAllMethods(soap, p, "-name:GetAssayTypesOfAllMethods", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, struct __name__GetAssayTypesOfAllMethods const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetAssayTypesOfAllMethods(soap, p), 0) || ::soap_put___name__GetAssayTypesOfAllMethods(soap, p, "-name:GetAssayTypesOfAllMethods", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetAssayTypesOfAllMethods * SOAP_FMAC4 soap_get___name__GetAssayTypesOfAllMethods(struct soap*, struct __name__GetAssayTypesOfAllMethods *, const char*, const char*);

inline int soap_read___name__GetAssayTypesOfAllMethods(struct soap *soap, struct __name__GetAssayTypesOfAllMethods *p)
{
	if (p)
	{	::soap_default___name__GetAssayTypesOfAllMethods(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetAssayTypesOfAllMethods(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetAssayTypesOfAllMethods(struct soap *soap, const char *URL, struct __name__GetAssayTypesOfAllMethods *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetAssayTypesOfAllMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetAssayTypesOfAllMethods(struct soap *soap, struct __name__GetAssayTypesOfAllMethods *p)
{
	if (::soap_read___name__GetAssayTypesOfAllMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetNamesOfMethodsOfAssayType_DEFINED
#define SOAP_TYPE___name__GetNamesOfMethodsOfAssayType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetNamesOfMethodsOfAssayType(struct soap*, struct __name__GetNamesOfMethodsOfAssayType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetNamesOfMethodsOfAssayType(struct soap*, const struct __name__GetNamesOfMethodsOfAssayType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetNamesOfMethodsOfAssayType(struct soap*, const char*, int, const struct __name__GetNamesOfMethodsOfAssayType *, const char*);
SOAP_FMAC3 struct __name__GetNamesOfMethodsOfAssayType * SOAP_FMAC4 soap_in___name__GetNamesOfMethodsOfAssayType(struct soap*, const char*, struct __name__GetNamesOfMethodsOfAssayType *, const char*);
SOAP_FMAC1 struct __name__GetNamesOfMethodsOfAssayType * SOAP_FMAC2 soap_instantiate___name__GetNamesOfMethodsOfAssayType(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetNamesOfMethodsOfAssayType * soap_new___name__GetNamesOfMethodsOfAssayType(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetNamesOfMethodsOfAssayType(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetNamesOfMethodsOfAssayType * soap_new_req___name__GetNamesOfMethodsOfAssayType(
	struct soap *soap)
{
	struct __name__GetNamesOfMethodsOfAssayType *_p = ::soap_new___name__GetNamesOfMethodsOfAssayType(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfMethodsOfAssayType(soap, _p);
	}
	return _p;
}

inline struct __name__GetNamesOfMethodsOfAssayType * soap_new_set___name__GetNamesOfMethodsOfAssayType(
	struct soap *soap,
	_tempuri__GetNamesOfMethodsOfAssayType *tempuri__GetNamesOfMethodsOfAssayType)
{
	struct __name__GetNamesOfMethodsOfAssayType *_p = ::soap_new___name__GetNamesOfMethodsOfAssayType(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfMethodsOfAssayType(soap, _p);
		_p->tempuri__GetNamesOfMethodsOfAssayType = tempuri__GetNamesOfMethodsOfAssayType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetNamesOfMethodsOfAssayType(struct soap*, const struct __name__GetNamesOfMethodsOfAssayType *, const char*, const char*);

inline int soap_write___name__GetNamesOfMethodsOfAssayType(struct soap *soap, struct __name__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetNamesOfMethodsOfAssayType(soap, p), 0) || ::soap_put___name__GetNamesOfMethodsOfAssayType(soap, p, "-name:GetNamesOfMethodsOfAssayType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, struct __name__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfMethodsOfAssayType(soap, p), 0) || ::soap_put___name__GetNamesOfMethodsOfAssayType(soap, p, "-name:GetNamesOfMethodsOfAssayType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, struct __name__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfMethodsOfAssayType(soap, p), 0) || ::soap_put___name__GetNamesOfMethodsOfAssayType(soap, p, "-name:GetNamesOfMethodsOfAssayType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, struct __name__GetNamesOfMethodsOfAssayType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfMethodsOfAssayType(soap, p), 0) || ::soap_put___name__GetNamesOfMethodsOfAssayType(soap, p, "-name:GetNamesOfMethodsOfAssayType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetNamesOfMethodsOfAssayType * SOAP_FMAC4 soap_get___name__GetNamesOfMethodsOfAssayType(struct soap*, struct __name__GetNamesOfMethodsOfAssayType *, const char*, const char*);

inline int soap_read___name__GetNamesOfMethodsOfAssayType(struct soap *soap, struct __name__GetNamesOfMethodsOfAssayType *p)
{
	if (p)
	{	::soap_default___name__GetNamesOfMethodsOfAssayType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetNamesOfMethodsOfAssayType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetNamesOfMethodsOfAssayType(struct soap *soap, const char *URL, struct __name__GetNamesOfMethodsOfAssayType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetNamesOfMethodsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetNamesOfMethodsOfAssayType(struct soap *soap, struct __name__GetNamesOfMethodsOfAssayType *p)
{
	if (::soap_read___name__GetNamesOfMethodsOfAssayType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___name__GetNamesOfMethods_DEFINED
#define SOAP_TYPE___name__GetNamesOfMethods_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___name__GetNamesOfMethods(struct soap*, struct __name__GetNamesOfMethods *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___name__GetNamesOfMethods(struct soap*, const struct __name__GetNamesOfMethods *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___name__GetNamesOfMethods(struct soap*, const char*, int, const struct __name__GetNamesOfMethods *, const char*);
SOAP_FMAC3 struct __name__GetNamesOfMethods * SOAP_FMAC4 soap_in___name__GetNamesOfMethods(struct soap*, const char*, struct __name__GetNamesOfMethods *, const char*);
SOAP_FMAC1 struct __name__GetNamesOfMethods * SOAP_FMAC2 soap_instantiate___name__GetNamesOfMethods(struct soap*, int, const char*, const char*, size_t*);

inline struct __name__GetNamesOfMethods * soap_new___name__GetNamesOfMethods(struct soap *soap, int n = -1)
{
	return soap_instantiate___name__GetNamesOfMethods(soap, n, NULL, NULL, NULL);
}

inline struct __name__GetNamesOfMethods * soap_new_req___name__GetNamesOfMethods(
	struct soap *soap)
{
	struct __name__GetNamesOfMethods *_p = ::soap_new___name__GetNamesOfMethods(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfMethods(soap, _p);
	}
	return _p;
}

inline struct __name__GetNamesOfMethods * soap_new_set___name__GetNamesOfMethods(
	struct soap *soap,
	_tempuri__GetNamesOfMethods *tempuri__GetNamesOfMethods)
{
	struct __name__GetNamesOfMethods *_p = ::soap_new___name__GetNamesOfMethods(soap);
	if (_p)
	{	::soap_default___name__GetNamesOfMethods(soap, _p);
		_p->tempuri__GetNamesOfMethods = tempuri__GetNamesOfMethods;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___name__GetNamesOfMethods(struct soap*, const struct __name__GetNamesOfMethods *, const char*, const char*);

inline int soap_write___name__GetNamesOfMethods(struct soap *soap, struct __name__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___name__GetNamesOfMethods(soap, p), 0) || ::soap_put___name__GetNamesOfMethods(soap, p, "-name:GetNamesOfMethods", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___name__GetNamesOfMethods(struct soap *soap, const char *URL, struct __name__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfMethods(soap, p), 0) || ::soap_put___name__GetNamesOfMethods(soap, p, "-name:GetNamesOfMethods", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___name__GetNamesOfMethods(struct soap *soap, const char *URL, struct __name__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfMethods(soap, p), 0) || ::soap_put___name__GetNamesOfMethods(soap, p, "-name:GetNamesOfMethods", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___name__GetNamesOfMethods(struct soap *soap, const char *URL, struct __name__GetNamesOfMethods const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___name__GetNamesOfMethods(soap, p), 0) || ::soap_put___name__GetNamesOfMethods(soap, p, "-name:GetNamesOfMethods", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __name__GetNamesOfMethods * SOAP_FMAC4 soap_get___name__GetNamesOfMethods(struct soap*, struct __name__GetNamesOfMethods *, const char*, const char*);

inline int soap_read___name__GetNamesOfMethods(struct soap *soap, struct __name__GetNamesOfMethods *p)
{
	if (p)
	{	::soap_default___name__GetNamesOfMethods(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___name__GetNamesOfMethods(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___name__GetNamesOfMethods(struct soap *soap, const char *URL, struct __name__GetNamesOfMethods *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___name__GetNamesOfMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___name__GetNamesOfMethods(struct soap *soap, struct __name__GetNamesOfMethods *p)
{
	if (::soap_read___name__GetNamesOfMethods(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsc__union_DerivedKeyTokenType_DEFINED
#define SOAP_TYPE__wsc__union_DerivedKeyTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 union _wsc__union_DerivedKeyTokenType * SOAP_FMAC4 soap_in__wsc__union_DerivedKeyTokenType(struct soap*, int*, union _wsc__union_DerivedKeyTokenType *);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__TerminateSequenceResponseType_DEFINED
#define SOAP_TYPE_PointerTowsrm__TerminateSequenceResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__TerminateSequenceResponseType(struct soap*, struct wsrm__TerminateSequenceResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__TerminateSequenceResponseType(struct soap*, const char *, int, struct wsrm__TerminateSequenceResponseType *const*, const char *);
SOAP_FMAC3 struct wsrm__TerminateSequenceResponseType ** SOAP_FMAC4 soap_in_PointerTowsrm__TerminateSequenceResponseType(struct soap*, const char*, struct wsrm__TerminateSequenceResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__TerminateSequenceResponseType(struct soap*, struct wsrm__TerminateSequenceResponseType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__TerminateSequenceResponseType ** SOAP_FMAC4 soap_get_PointerTowsrm__TerminateSequenceResponseType(struct soap*, struct wsrm__TerminateSequenceResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__TerminateSequenceType_DEFINED
#define SOAP_TYPE_PointerTowsrm__TerminateSequenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__TerminateSequenceType(struct soap*, struct wsrm__TerminateSequenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__TerminateSequenceType(struct soap*, const char *, int, struct wsrm__TerminateSequenceType *const*, const char *);
SOAP_FMAC3 struct wsrm__TerminateSequenceType ** SOAP_FMAC4 soap_in_PointerTowsrm__TerminateSequenceType(struct soap*, const char*, struct wsrm__TerminateSequenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__TerminateSequenceType(struct soap*, struct wsrm__TerminateSequenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__TerminateSequenceType ** SOAP_FMAC4 soap_get_PointerTowsrm__TerminateSequenceType(struct soap*, struct wsrm__TerminateSequenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__CloseSequenceResponseType_DEFINED
#define SOAP_TYPE_PointerTowsrm__CloseSequenceResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__CloseSequenceResponseType(struct soap*, struct wsrm__CloseSequenceResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__CloseSequenceResponseType(struct soap*, const char *, int, struct wsrm__CloseSequenceResponseType *const*, const char *);
SOAP_FMAC3 struct wsrm__CloseSequenceResponseType ** SOAP_FMAC4 soap_in_PointerTowsrm__CloseSequenceResponseType(struct soap*, const char*, struct wsrm__CloseSequenceResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__CloseSequenceResponseType(struct soap*, struct wsrm__CloseSequenceResponseType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__CloseSequenceResponseType ** SOAP_FMAC4 soap_get_PointerTowsrm__CloseSequenceResponseType(struct soap*, struct wsrm__CloseSequenceResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__CloseSequenceType_DEFINED
#define SOAP_TYPE_PointerTowsrm__CloseSequenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__CloseSequenceType(struct soap*, struct wsrm__CloseSequenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__CloseSequenceType(struct soap*, const char *, int, struct wsrm__CloseSequenceType *const*, const char *);
SOAP_FMAC3 struct wsrm__CloseSequenceType ** SOAP_FMAC4 soap_in_PointerTowsrm__CloseSequenceType(struct soap*, const char*, struct wsrm__CloseSequenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__CloseSequenceType(struct soap*, struct wsrm__CloseSequenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__CloseSequenceType ** SOAP_FMAC4 soap_get_PointerTowsrm__CloseSequenceType(struct soap*, struct wsrm__CloseSequenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__CreateSequenceResponseType_DEFINED
#define SOAP_TYPE_PointerTowsrm__CreateSequenceResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__CreateSequenceResponseType(struct soap*, struct wsrm__CreateSequenceResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__CreateSequenceResponseType(struct soap*, const char *, int, struct wsrm__CreateSequenceResponseType *const*, const char *);
SOAP_FMAC3 struct wsrm__CreateSequenceResponseType ** SOAP_FMAC4 soap_in_PointerTowsrm__CreateSequenceResponseType(struct soap*, const char*, struct wsrm__CreateSequenceResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__CreateSequenceResponseType(struct soap*, struct wsrm__CreateSequenceResponseType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__CreateSequenceResponseType ** SOAP_FMAC4 soap_get_PointerTowsrm__CreateSequenceResponseType(struct soap*, struct wsrm__CreateSequenceResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__CreateSequenceType_DEFINED
#define SOAP_TYPE_PointerTowsrm__CreateSequenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__CreateSequenceType(struct soap*, struct wsrm__CreateSequenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__CreateSequenceType(struct soap*, const char *, int, struct wsrm__CreateSequenceType *const*, const char *);
SOAP_FMAC3 struct wsrm__CreateSequenceType ** SOAP_FMAC4 soap_in_PointerTowsrm__CreateSequenceType(struct soap*, const char*, struct wsrm__CreateSequenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__CreateSequenceType(struct soap*, struct wsrm__CreateSequenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__CreateSequenceType ** SOAP_FMAC4 soap_get_PointerTowsrm__CreateSequenceType(struct soap*, struct wsrm__CreateSequenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__SequenceFaultType_DEFINED
#define SOAP_TYPE_PointerTowsrm__SequenceFaultType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__SequenceFaultType(struct soap*, struct wsrm__SequenceFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__SequenceFaultType(struct soap*, const char *, int, struct wsrm__SequenceFaultType *const*, const char *);
SOAP_FMAC3 struct wsrm__SequenceFaultType ** SOAP_FMAC4 soap_in_PointerTowsrm__SequenceFaultType(struct soap*, const char*, struct wsrm__SequenceFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__SequenceFaultType(struct soap*, struct wsrm__SequenceFaultType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__SequenceFaultType ** SOAP_FMAC4 soap_get_PointerTowsrm__SequenceFaultType(struct soap*, struct wsrm__SequenceFaultType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsrm__SequenceAcknowledgement_DEFINED
#define SOAP_TYPE_PointerTo_wsrm__SequenceAcknowledgement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrm__SequenceAcknowledgement(struct soap*, struct _wsrm__SequenceAcknowledgement *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrm__SequenceAcknowledgement(struct soap*, const char *, int, struct _wsrm__SequenceAcknowledgement *const*, const char *);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement ** SOAP_FMAC4 soap_in_PointerTo_wsrm__SequenceAcknowledgement(struct soap*, const char*, struct _wsrm__SequenceAcknowledgement **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrm__SequenceAcknowledgement(struct soap*, struct _wsrm__SequenceAcknowledgement *const*, const char*, const char*);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement ** SOAP_FMAC4 soap_get_PointerTo_wsrm__SequenceAcknowledgement(struct soap*, struct _wsrm__SequenceAcknowledgement **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__AckRequestedType_DEFINED
#define SOAP_TYPE_PointerTowsrm__AckRequestedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__AckRequestedType(struct soap*, struct wsrm__AckRequestedType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__AckRequestedType(struct soap*, const char *, int, struct wsrm__AckRequestedType *const*, const char *);
SOAP_FMAC3 struct wsrm__AckRequestedType ** SOAP_FMAC4 soap_in_PointerTowsrm__AckRequestedType(struct soap*, const char*, struct wsrm__AckRequestedType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__AckRequestedType(struct soap*, struct wsrm__AckRequestedType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__AckRequestedType ** SOAP_FMAC4 soap_get_PointerTowsrm__AckRequestedType(struct soap*, struct wsrm__AckRequestedType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__SequenceType_DEFINED
#define SOAP_TYPE_PointerTowsrm__SequenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__SequenceType(struct soap*, struct wsrm__SequenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__SequenceType(struct soap*, const char *, int, struct wsrm__SequenceType *const*, const char *);
SOAP_FMAC3 struct wsrm__SequenceType ** SOAP_FMAC4 soap_in_PointerTowsrm__SequenceType(struct soap*, const char*, struct wsrm__SequenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__SequenceType(struct soap*, struct wsrm__SequenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__SequenceType ** SOAP_FMAC4 soap_get_PointerTowsrm__SequenceType(struct soap*, struct wsrm__SequenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsrm__SequenceAcknowledgement_None_DEFINED
#define SOAP_TYPE_PointerTo_wsrm__SequenceAcknowledgement_None_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrm__SequenceAcknowledgement_None(struct soap*, struct _wsrm__SequenceAcknowledgement_None *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrm__SequenceAcknowledgement_None(struct soap*, const char *, int, struct _wsrm__SequenceAcknowledgement_None *const*, const char *);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_None ** SOAP_FMAC4 soap_in_PointerTo_wsrm__SequenceAcknowledgement_None(struct soap*, const char*, struct _wsrm__SequenceAcknowledgement_None **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrm__SequenceAcknowledgement_None(struct soap*, struct _wsrm__SequenceAcknowledgement_None *const*, const char*, const char*);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_None ** SOAP_FMAC4 soap_get_PointerTo_wsrm__SequenceAcknowledgement_None(struct soap*, struct _wsrm__SequenceAcknowledgement_None **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsrm__SequenceAcknowledgement_AcknowledgementRange_DEFINED
#define SOAP_TYPE_PointerTo_wsrm__SequenceAcknowledgement_AcknowledgementRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, const char *, int, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *const*, const char *);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_AcknowledgementRange ** SOAP_FMAC4 soap_in_PointerTo_wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, const char*, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange *const*, const char*, const char*);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_AcknowledgementRange ** SOAP_FMAC4 soap_get_PointerTo_wsrm__SequenceAcknowledgement_AcknowledgementRange(struct soap*, struct _wsrm__SequenceAcknowledgement_AcknowledgementRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsrm__SequenceAcknowledgement_Final_DEFINED
#define SOAP_TYPE_PointerTo_wsrm__SequenceAcknowledgement_Final_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrm__SequenceAcknowledgement_Final(struct soap*, struct _wsrm__SequenceAcknowledgement_Final *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrm__SequenceAcknowledgement_Final(struct soap*, const char *, int, struct _wsrm__SequenceAcknowledgement_Final *const*, const char *);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_Final ** SOAP_FMAC4 soap_in_PointerTo_wsrm__SequenceAcknowledgement_Final(struct soap*, const char*, struct _wsrm__SequenceAcknowledgement_Final **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrm__SequenceAcknowledgement_Final(struct soap*, struct _wsrm__SequenceAcknowledgement_Final *const*, const char*, const char*);
SOAP_FMAC3 struct _wsrm__SequenceAcknowledgement_Final ** SOAP_FMAC4 soap_get_PointerTo_wsrm__SequenceAcknowledgement_Final(struct soap*, struct _wsrm__SequenceAcknowledgement_Final **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__AcceptType_DEFINED
#define SOAP_TYPE_PointerTowsrm__AcceptType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__AcceptType(struct soap*, struct wsrm__AcceptType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__AcceptType(struct soap*, const char *, int, struct wsrm__AcceptType *const*, const char *);
SOAP_FMAC3 struct wsrm__AcceptType ** SOAP_FMAC4 soap_in_PointerTowsrm__AcceptType(struct soap*, const char*, struct wsrm__AcceptType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__AcceptType(struct soap*, struct wsrm__AcceptType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__AcceptType ** SOAP_FMAC4 soap_get_PointerTowsrm__AcceptType(struct soap*, struct wsrm__AcceptType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__IncompleteSequenceBehaviorType_DEFINED
#define SOAP_TYPE_PointerTowsrm__IncompleteSequenceBehaviorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__IncompleteSequenceBehaviorType(struct soap*, enum wsrm__IncompleteSequenceBehaviorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__IncompleteSequenceBehaviorType(struct soap*, const char *, int, enum wsrm__IncompleteSequenceBehaviorType *const*, const char *);
SOAP_FMAC3 enum wsrm__IncompleteSequenceBehaviorType ** SOAP_FMAC4 soap_in_PointerTowsrm__IncompleteSequenceBehaviorType(struct soap*, const char*, enum wsrm__IncompleteSequenceBehaviorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__IncompleteSequenceBehaviorType(struct soap*, enum wsrm__IncompleteSequenceBehaviorType *const*, const char*, const char*);
SOAP_FMAC3 enum wsrm__IncompleteSequenceBehaviorType ** SOAP_FMAC4 soap_get_PointerTowsrm__IncompleteSequenceBehaviorType(struct soap*, enum wsrm__IncompleteSequenceBehaviorType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsrm__OfferType_DEFINED
#define SOAP_TYPE_PointerTowsrm__OfferType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrm__OfferType(struct soap*, struct wsrm__OfferType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrm__OfferType(struct soap*, const char *, int, struct wsrm__OfferType *const*, const char *);
SOAP_FMAC3 struct wsrm__OfferType ** SOAP_FMAC4 soap_in_PointerTowsrm__OfferType(struct soap*, const char*, struct wsrm__OfferType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrm__OfferType(struct soap*, struct wsrm__OfferType *const*, const char*, const char*);
SOAP_FMAC3 struct wsrm__OfferType ** SOAP_FMAC4 soap_get_PointerTowsrm__OfferType(struct soap*, struct wsrm__OfferType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__duration_DEFINED
#define SOAP_TYPE_PointerToxsd__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, LONG64 *const*, const char*, const char*);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, LONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsrm__UsesSequenceSSL_DEFINED
#define SOAP_TYPE_PointerTo_wsrm__UsesSequenceSSL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrm__UsesSequenceSSL(struct soap*, struct _wsrm__UsesSequenceSSL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrm__UsesSequenceSSL(struct soap*, const char *, int, struct _wsrm__UsesSequenceSSL *const*, const char *);
SOAP_FMAC3 struct _wsrm__UsesSequenceSSL ** SOAP_FMAC4 soap_in_PointerTo_wsrm__UsesSequenceSSL(struct soap*, const char*, struct _wsrm__UsesSequenceSSL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrm__UsesSequenceSSL(struct soap*, struct _wsrm__UsesSequenceSSL *const*, const char*, const char*);
SOAP_FMAC3 struct _wsrm__UsesSequenceSSL ** SOAP_FMAC4 soap_get_PointerTo_wsrm__UsesSequenceSSL(struct soap*, struct _wsrm__UsesSequenceSSL **, const char*, const char*);
#endif
/* _wsrm__Identifier is a typedef synonym of string */

#ifndef SOAP_TYPE__wsrm__Identifier_DEFINED
#define SOAP_TYPE__wsrm__Identifier_DEFINED

#define soap_default__wsrm__Identifier soap_default_string


#define soap_serialize__wsrm__Identifier soap_serialize_string


#define soap__wsrm__Identifier2s(soap, a) (a)

#define soap_out__wsrm__Identifier soap_out_string


#define soap_s2_wsrm__Identifier(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsrm__Identifier soap_in_string


#define soap_instantiate__wsrm__Identifier soap_instantiate_string


#define soap_new__wsrm__Identifier soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsrm__Identifier(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsrm__Identifier(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsrm__Identifier(soap, p, "wsrm:Identifier", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsrm__Identifier(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsrm__Identifier(soap, p, "wsrm:Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsrm__Identifier(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsrm__Identifier(soap, p, "wsrm:Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsrm__Identifier(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsrm__Identifier(soap, p, "wsrm:Identifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsrm__Identifier soap_get_string


#define soap_read__wsrm__Identifier soap_read_string


#define soap_GET__wsrm__Identifier soap_GET_string


#define soap_POST_recv__wsrm__Identifier soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTowst__RequestSecurityTokenCollectionType_DEFINED
#define SOAP_TYPE_PointerTowst__RequestSecurityTokenCollectionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__RequestSecurityTokenCollectionType(struct soap*, struct wst__RequestSecurityTokenCollectionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__RequestSecurityTokenCollectionType(struct soap*, const char *, int, struct wst__RequestSecurityTokenCollectionType *const*, const char *);
SOAP_FMAC3 struct wst__RequestSecurityTokenCollectionType ** SOAP_FMAC4 soap_in_PointerTowst__RequestSecurityTokenCollectionType(struct soap*, const char*, struct wst__RequestSecurityTokenCollectionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__RequestSecurityTokenCollectionType(struct soap*, struct wst__RequestSecurityTokenCollectionType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__RequestSecurityTokenCollectionType ** SOAP_FMAC4 soap_get_PointerTowst__RequestSecurityTokenCollectionType(struct soap*, struct wst__RequestSecurityTokenCollectionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__RequestSecurityTokenResponseCollectionType_DEFINED
#define SOAP_TYPE_PointerTowst__RequestSecurityTokenResponseCollectionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__RequestSecurityTokenResponseCollectionType(struct soap*, struct wst__RequestSecurityTokenResponseCollectionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__RequestSecurityTokenResponseCollectionType(struct soap*, const char *, int, struct wst__RequestSecurityTokenResponseCollectionType *const*, const char *);
SOAP_FMAC3 struct wst__RequestSecurityTokenResponseCollectionType ** SOAP_FMAC4 soap_in_PointerTowst__RequestSecurityTokenResponseCollectionType(struct soap*, const char*, struct wst__RequestSecurityTokenResponseCollectionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__RequestSecurityTokenResponseCollectionType(struct soap*, struct wst__RequestSecurityTokenResponseCollectionType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__RequestSecurityTokenResponseCollectionType ** SOAP_FMAC4 soap_get_PointerTowst__RequestSecurityTokenResponseCollectionType(struct soap*, struct wst__RequestSecurityTokenResponseCollectionType **, const char*, const char*);
#endif
/* _wst__Delegatable is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__Delegatable_DEFINED
#define SOAP_TYPE__wst__Delegatable_DEFINED

#define soap_default__wst__Delegatable soap_default_string


#define soap_serialize__wst__Delegatable soap_serialize_string


#define soap__wst__Delegatable2s(soap, a) (a)

#define soap_out__wst__Delegatable soap_out_string


#define soap_s2_wst__Delegatable(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__Delegatable soap_in_string


#define soap_instantiate__wst__Delegatable soap_instantiate_string


#define soap_new__wst__Delegatable soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Delegatable(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__Delegatable(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__Delegatable(soap, p, "wst:Delegatable", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__Delegatable(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__Delegatable(soap, p, "wst:Delegatable", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Delegatable(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__Delegatable(soap, p, "wst:Delegatable", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Delegatable(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__Delegatable(soap, p, "wst:Delegatable", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Delegatable soap_get_string


#define soap_read__wst__Delegatable soap_read_string


#define soap_GET__wst__Delegatable soap_GET_string


#define soap_POST_recv__wst__Delegatable soap_POST_recv_string

#endif
/* _wst__Forwardable is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__Forwardable_DEFINED
#define SOAP_TYPE__wst__Forwardable_DEFINED

#define soap_default__wst__Forwardable soap_default_string


#define soap_serialize__wst__Forwardable soap_serialize_string


#define soap__wst__Forwardable2s(soap, a) (a)

#define soap_out__wst__Forwardable soap_out_string


#define soap_s2_wst__Forwardable(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__Forwardable soap_in_string


#define soap_instantiate__wst__Forwardable soap_instantiate_string


#define soap_new__wst__Forwardable soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Forwardable(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__Forwardable(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__Forwardable(soap, p, "wst:Forwardable", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__Forwardable(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__Forwardable(soap, p, "wst:Forwardable", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Forwardable(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__Forwardable(soap, p, "wst:Forwardable", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Forwardable(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__Forwardable(soap, p, "wst:Forwardable", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Forwardable soap_get_string


#define soap_read__wst__Forwardable soap_read_string


#define soap_GET__wst__Forwardable soap_GET_string


#define soap_POST_recv__wst__Forwardable soap_POST_recv_string

#endif
/* _wst__EncryptWith is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__EncryptWith_DEFINED
#define SOAP_TYPE__wst__EncryptWith_DEFINED

#define soap_default__wst__EncryptWith soap_default_string


#define soap_serialize__wst__EncryptWith soap_serialize_string


#define soap__wst__EncryptWith2s(soap, a) (a)

#define soap_out__wst__EncryptWith soap_out_string


#define soap_s2_wst__EncryptWith(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__EncryptWith soap_in_string


#define soap_instantiate__wst__EncryptWith soap_instantiate_string


#define soap_new__wst__EncryptWith soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__EncryptWith(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__EncryptWith(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__EncryptWith(soap, p, "wst:EncryptWith", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__EncryptWith(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__EncryptWith(soap, p, "wst:EncryptWith", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__EncryptWith(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__EncryptWith(soap, p, "wst:EncryptWith", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__EncryptWith(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__EncryptWith(soap, p, "wst:EncryptWith", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__EncryptWith soap_get_string


#define soap_read__wst__EncryptWith soap_read_string


#define soap_GET__wst__EncryptWith soap_GET_string


#define soap_POST_recv__wst__EncryptWith soap_POST_recv_string

#endif
/* _wst__SignWith is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__SignWith_DEFINED
#define SOAP_TYPE__wst__SignWith_DEFINED

#define soap_default__wst__SignWith soap_default_string


#define soap_serialize__wst__SignWith soap_serialize_string


#define soap__wst__SignWith2s(soap, a) (a)

#define soap_out__wst__SignWith soap_out_string


#define soap_s2_wst__SignWith(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__SignWith soap_in_string


#define soap_instantiate__wst__SignWith soap_instantiate_string


#define soap_new__wst__SignWith soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__SignWith(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__SignWith(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__SignWith(soap, p, "wst:SignWith", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__SignWith(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__SignWith(soap, p, "wst:SignWith", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__SignWith(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__SignWith(soap, p, "wst:SignWith", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__SignWith(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__SignWith(soap, p, "wst:SignWith", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__SignWith soap_get_string


#define soap_read__wst__SignWith soap_read_string


#define soap_GET__wst__SignWith soap_GET_string


#define soap_POST_recv__wst__SignWith soap_POST_recv_string

#endif
/* _wst__KeyWrapAlgorithm is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__KeyWrapAlgorithm_DEFINED
#define SOAP_TYPE__wst__KeyWrapAlgorithm_DEFINED

#define soap_default__wst__KeyWrapAlgorithm soap_default_string


#define soap_serialize__wst__KeyWrapAlgorithm soap_serialize_string


#define soap__wst__KeyWrapAlgorithm2s(soap, a) (a)

#define soap_out__wst__KeyWrapAlgorithm soap_out_string


#define soap_s2_wst__KeyWrapAlgorithm(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__KeyWrapAlgorithm soap_in_string


#define soap_instantiate__wst__KeyWrapAlgorithm soap_instantiate_string


#define soap_new__wst__KeyWrapAlgorithm soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__KeyWrapAlgorithm(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__KeyWrapAlgorithm(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__KeyWrapAlgorithm(soap, p, "wst:KeyWrapAlgorithm", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__KeyWrapAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__KeyWrapAlgorithm(soap, p, "wst:KeyWrapAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__KeyWrapAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__KeyWrapAlgorithm(soap, p, "wst:KeyWrapAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__KeyWrapAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__KeyWrapAlgorithm(soap, p, "wst:KeyWrapAlgorithm", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__KeyWrapAlgorithm soap_get_string


#define soap_read__wst__KeyWrapAlgorithm soap_read_string


#define soap_GET__wst__KeyWrapAlgorithm soap_GET_string


#define soap_POST_recv__wst__KeyWrapAlgorithm soap_POST_recv_string

#endif
/* _wst__ComputedKeyAlgorithm is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__ComputedKeyAlgorithm_DEFINED
#define SOAP_TYPE__wst__ComputedKeyAlgorithm_DEFINED

#define soap_default__wst__ComputedKeyAlgorithm soap_default_string


#define soap_serialize__wst__ComputedKeyAlgorithm soap_serialize_string


#define soap__wst__ComputedKeyAlgorithm2s(soap, a) (a)

#define soap_out__wst__ComputedKeyAlgorithm soap_out_string


#define soap_s2_wst__ComputedKeyAlgorithm(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__ComputedKeyAlgorithm soap_in_string


#define soap_instantiate__wst__ComputedKeyAlgorithm soap_instantiate_string


#define soap_new__wst__ComputedKeyAlgorithm soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__ComputedKeyAlgorithm(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__ComputedKeyAlgorithm(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__ComputedKeyAlgorithm(soap, p, "wst:ComputedKeyAlgorithm", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__ComputedKeyAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__ComputedKeyAlgorithm(soap, p, "wst:ComputedKeyAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__ComputedKeyAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__ComputedKeyAlgorithm(soap, p, "wst:ComputedKeyAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__ComputedKeyAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__ComputedKeyAlgorithm(soap, p, "wst:ComputedKeyAlgorithm", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__ComputedKeyAlgorithm soap_get_string


#define soap_read__wst__ComputedKeyAlgorithm soap_read_string


#define soap_GET__wst__ComputedKeyAlgorithm soap_GET_string


#define soap_POST_recv__wst__ComputedKeyAlgorithm soap_POST_recv_string

#endif
/* _wst__CanonicalizationAlgorithm is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__CanonicalizationAlgorithm_DEFINED
#define SOAP_TYPE__wst__CanonicalizationAlgorithm_DEFINED

#define soap_default__wst__CanonicalizationAlgorithm soap_default_string


#define soap_serialize__wst__CanonicalizationAlgorithm soap_serialize_string


#define soap__wst__CanonicalizationAlgorithm2s(soap, a) (a)

#define soap_out__wst__CanonicalizationAlgorithm soap_out_string


#define soap_s2_wst__CanonicalizationAlgorithm(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__CanonicalizationAlgorithm soap_in_string


#define soap_instantiate__wst__CanonicalizationAlgorithm soap_instantiate_string


#define soap_new__wst__CanonicalizationAlgorithm soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__CanonicalizationAlgorithm(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__CanonicalizationAlgorithm(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__CanonicalizationAlgorithm(soap, p, "wst:CanonicalizationAlgorithm", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__CanonicalizationAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__CanonicalizationAlgorithm(soap, p, "wst:CanonicalizationAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__CanonicalizationAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__CanonicalizationAlgorithm(soap, p, "wst:CanonicalizationAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__CanonicalizationAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__CanonicalizationAlgorithm(soap, p, "wst:CanonicalizationAlgorithm", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__CanonicalizationAlgorithm soap_get_string


#define soap_read__wst__CanonicalizationAlgorithm soap_read_string


#define soap_GET__wst__CanonicalizationAlgorithm soap_GET_string


#define soap_POST_recv__wst__CanonicalizationAlgorithm soap_POST_recv_string

#endif
/* _wst__EncryptionAlgorithm is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__EncryptionAlgorithm_DEFINED
#define SOAP_TYPE__wst__EncryptionAlgorithm_DEFINED

#define soap_default__wst__EncryptionAlgorithm soap_default_string


#define soap_serialize__wst__EncryptionAlgorithm soap_serialize_string


#define soap__wst__EncryptionAlgorithm2s(soap, a) (a)

#define soap_out__wst__EncryptionAlgorithm soap_out_string


#define soap_s2_wst__EncryptionAlgorithm(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__EncryptionAlgorithm soap_in_string


#define soap_instantiate__wst__EncryptionAlgorithm soap_instantiate_string


#define soap_new__wst__EncryptionAlgorithm soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__EncryptionAlgorithm(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__EncryptionAlgorithm(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__EncryptionAlgorithm(soap, p, "wst:EncryptionAlgorithm", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__EncryptionAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__EncryptionAlgorithm(soap, p, "wst:EncryptionAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__EncryptionAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__EncryptionAlgorithm(soap, p, "wst:EncryptionAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__EncryptionAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__EncryptionAlgorithm(soap, p, "wst:EncryptionAlgorithm", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__EncryptionAlgorithm soap_get_string


#define soap_read__wst__EncryptionAlgorithm soap_read_string


#define soap_GET__wst__EncryptionAlgorithm soap_GET_string


#define soap_POST_recv__wst__EncryptionAlgorithm soap_POST_recv_string

#endif
/* _wst__SignatureAlgorithm is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__SignatureAlgorithm_DEFINED
#define SOAP_TYPE__wst__SignatureAlgorithm_DEFINED

#define soap_default__wst__SignatureAlgorithm soap_default_string


#define soap_serialize__wst__SignatureAlgorithm soap_serialize_string


#define soap__wst__SignatureAlgorithm2s(soap, a) (a)

#define soap_out__wst__SignatureAlgorithm soap_out_string


#define soap_s2_wst__SignatureAlgorithm(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__SignatureAlgorithm soap_in_string


#define soap_instantiate__wst__SignatureAlgorithm soap_instantiate_string


#define soap_new__wst__SignatureAlgorithm soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__SignatureAlgorithm(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__SignatureAlgorithm(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__SignatureAlgorithm(soap, p, "wst:SignatureAlgorithm", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__SignatureAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__SignatureAlgorithm(soap, p, "wst:SignatureAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__SignatureAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__SignatureAlgorithm(soap, p, "wst:SignatureAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__SignatureAlgorithm(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__SignatureAlgorithm(soap, p, "wst:SignatureAlgorithm", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__SignatureAlgorithm soap_get_string


#define soap_read__wst__SignatureAlgorithm soap_read_string


#define soap_GET__wst__SignatureAlgorithm soap_GET_string


#define soap_POST_recv__wst__SignatureAlgorithm soap_POST_recv_string

#endif
/* _wst__KeyType is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__KeyType_DEFINED
#define SOAP_TYPE__wst__KeyType_DEFINED

#define soap_default__wst__KeyType soap_default_string


#define soap_serialize__wst__KeyType soap_serialize_string


#define soap__wst__KeyType2s(soap, a) (a)

#define soap_out__wst__KeyType soap_out_string


#define soap_s2_wst__KeyType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__KeyType soap_in_string


#define soap_instantiate__wst__KeyType soap_instantiate_string


#define soap_new__wst__KeyType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__KeyType(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__KeyType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__KeyType(soap, p, "wst:KeyType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__KeyType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__KeyType(soap, p, "wst:KeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__KeyType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__KeyType(soap, p, "wst:KeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__KeyType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__KeyType(soap, p, "wst:KeyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__KeyType soap_get_string


#define soap_read__wst__KeyType soap_read_string


#define soap_GET__wst__KeyType soap_GET_string


#define soap_POST_recv__wst__KeyType soap_POST_recv_string

#endif
/* _wst__AuthenticationType is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__AuthenticationType_DEFINED
#define SOAP_TYPE__wst__AuthenticationType_DEFINED

#define soap_default__wst__AuthenticationType soap_default_string


#define soap_serialize__wst__AuthenticationType soap_serialize_string


#define soap__wst__AuthenticationType2s(soap, a) (a)

#define soap_out__wst__AuthenticationType soap_out_string


#define soap_s2_wst__AuthenticationType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__AuthenticationType soap_in_string


#define soap_instantiate__wst__AuthenticationType soap_instantiate_string


#define soap_new__wst__AuthenticationType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__AuthenticationType(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__AuthenticationType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__AuthenticationType(soap, p, "wst:AuthenticationType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__AuthenticationType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__AuthenticationType(soap, p, "wst:AuthenticationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__AuthenticationType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__AuthenticationType(soap, p, "wst:AuthenticationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__AuthenticationType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__AuthenticationType(soap, p, "wst:AuthenticationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__AuthenticationType soap_get_string


#define soap_read__wst__AuthenticationType soap_read_string


#define soap_GET__wst__AuthenticationType soap_GET_string


#define soap_POST_recv__wst__AuthenticationType soap_POST_recv_string

#endif
/* _wst__CombinedHash is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__CombinedHash_DEFINED
#define SOAP_TYPE__wst__CombinedHash_DEFINED

#define soap_default__wst__CombinedHash soap_default_string


#define soap_serialize__wst__CombinedHash soap_serialize_string


#define soap__wst__CombinedHash2s(soap, a) (a)

#define soap_out__wst__CombinedHash soap_out_string


#define soap_s2_wst__CombinedHash(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__CombinedHash soap_in_string


#define soap_instantiate__wst__CombinedHash soap_instantiate_string


#define soap_new__wst__CombinedHash soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__CombinedHash(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__CombinedHash(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__CombinedHash(soap, p, "wst:CombinedHash", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__CombinedHash(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__CombinedHash(soap, p, "wst:CombinedHash", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__CombinedHash(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__CombinedHash(soap, p, "wst:CombinedHash", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__CombinedHash(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__CombinedHash(soap, p, "wst:CombinedHash", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__CombinedHash soap_get_string


#define soap_read__wst__CombinedHash soap_read_string


#define soap_GET__wst__CombinedHash soap_GET_string


#define soap_POST_recv__wst__CombinedHash soap_POST_recv_string

#endif
/* _wst__Challenge is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__Challenge_DEFINED
#define SOAP_TYPE__wst__Challenge_DEFINED

#define soap_default__wst__Challenge soap_default_string


#define soap_serialize__wst__Challenge soap_serialize_string


#define soap__wst__Challenge2s(soap, a) (a)

#define soap_out__wst__Challenge soap_out_string


#define soap_s2_wst__Challenge(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__Challenge soap_in_string


#define soap_instantiate__wst__Challenge soap_instantiate_string


#define soap_new__wst__Challenge soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__Challenge(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__Challenge(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__Challenge(soap, p, "wst:Challenge", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__Challenge(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__Challenge(soap, p, "wst:Challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__Challenge(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__Challenge(soap, p, "wst:Challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__Challenge(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__Challenge(soap, p, "wst:Challenge", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__Challenge soap_get_string


#define soap_read__wst__Challenge soap_read_string


#define soap_GET__wst__Challenge soap_GET_string


#define soap_POST_recv__wst__Challenge soap_POST_recv_string

#endif
/* _wst__ComputedKey is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__ComputedKey_DEFINED
#define SOAP_TYPE__wst__ComputedKey_DEFINED

#define soap_default__wst__ComputedKey soap_default_string


#define soap_serialize__wst__ComputedKey soap_serialize_string


#define soap__wst__ComputedKey2s(soap, a) (a)

#define soap_out__wst__ComputedKey soap_out_string


#define soap_s2_wst__ComputedKey(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__ComputedKey soap_in_string


#define soap_instantiate__wst__ComputedKey soap_instantiate_string


#define soap_new__wst__ComputedKey soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__ComputedKey(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__ComputedKey(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__ComputedKey(soap, p, "wst:ComputedKey", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__ComputedKey(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__ComputedKey(soap, p, "wst:ComputedKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__ComputedKey(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__ComputedKey(soap, p, "wst:ComputedKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__ComputedKey(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__ComputedKey(soap, p, "wst:ComputedKey", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__ComputedKey soap_get_string


#define soap_read__wst__ComputedKey soap_read_string


#define soap_GET__wst__ComputedKey soap_GET_string


#define soap_POST_recv__wst__ComputedKey soap_POST_recv_string

#endif
/* _wst__RequestType is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__RequestType_DEFINED
#define SOAP_TYPE__wst__RequestType_DEFINED

#define soap_default__wst__RequestType soap_default_string


#define soap_serialize__wst__RequestType soap_serialize_string


#define soap__wst__RequestType2s(soap, a) (a)

#define soap_out__wst__RequestType soap_out_string


#define soap_s2_wst__RequestType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__RequestType soap_in_string


#define soap_instantiate__wst__RequestType soap_instantiate_string


#define soap_new__wst__RequestType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__RequestType(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__RequestType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__RequestType(soap, p, "wst:RequestType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__RequestType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__RequestType(soap, p, "wst:RequestType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__RequestType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__RequestType(soap, p, "wst:RequestType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__RequestType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__RequestType(soap, p, "wst:RequestType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__RequestType soap_get_string


#define soap_read__wst__RequestType soap_read_string


#define soap_GET__wst__RequestType soap_GET_string


#define soap_POST_recv__wst__RequestType soap_POST_recv_string

#endif
/* _wst__TokenType is a typedef synonym of string */

#ifndef SOAP_TYPE__wst__TokenType_DEFINED
#define SOAP_TYPE__wst__TokenType_DEFINED

#define soap_default__wst__TokenType soap_default_string


#define soap_serialize__wst__TokenType soap_serialize_string


#define soap__wst__TokenType2s(soap, a) (a)

#define soap_out__wst__TokenType soap_out_string


#define soap_s2_wst__TokenType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wst__TokenType soap_in_string


#define soap_instantiate__wst__TokenType soap_instantiate_string


#define soap_new__wst__TokenType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wst__TokenType(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wst__TokenType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wst__TokenType(soap, p, "wst:TokenType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wst__TokenType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__TokenType(soap, p, "wst:TokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wst__TokenType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__TokenType(soap, p, "wst:TokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wst__TokenType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wst__TokenType(soap, p, "wst:TokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wst__TokenType soap_get_string


#define soap_read__wst__TokenType soap_read_string


#define soap_GET__wst__TokenType soap_GET_string


#define soap_POST_recv__wst__TokenType soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTowst__ParticipantType_DEFINED
#define SOAP_TYPE_PointerTowst__ParticipantType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__ParticipantType(struct soap*, struct wst__ParticipantType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__ParticipantType(struct soap*, const char *, int, struct wst__ParticipantType *const*, const char *);
SOAP_FMAC3 struct wst__ParticipantType ** SOAP_FMAC4 soap_in_PointerTowst__ParticipantType(struct soap*, const char*, struct wst__ParticipantType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__ParticipantType(struct soap*, struct wst__ParticipantType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__ParticipantType ** SOAP_FMAC4 soap_get_PointerTowst__ParticipantType(struct soap*, struct wst__ParticipantType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__RequestSecurityTokenResponseType_DEFINED
#define SOAP_TYPE_PointerTowst__RequestSecurityTokenResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__RequestSecurityTokenResponseType(struct soap*, struct wst__RequestSecurityTokenResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__RequestSecurityTokenResponseType(struct soap*, const char *, int, struct wst__RequestSecurityTokenResponseType *const*, const char *);
SOAP_FMAC3 struct wst__RequestSecurityTokenResponseType ** SOAP_FMAC4 soap_in_PointerTowst__RequestSecurityTokenResponseType(struct soap*, const char*, struct wst__RequestSecurityTokenResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__RequestSecurityTokenResponseType(struct soap*, struct wst__RequestSecurityTokenResponseType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__RequestSecurityTokenResponseType ** SOAP_FMAC4 soap_get_PointerTowst__RequestSecurityTokenResponseType(struct soap*, struct wst__RequestSecurityTokenResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__RequestSecurityTokenType_DEFINED
#define SOAP_TYPE_PointerTowst__RequestSecurityTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__RequestSecurityTokenType(struct soap*, struct wst__RequestSecurityTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__RequestSecurityTokenType(struct soap*, const char *, int, struct wst__RequestSecurityTokenType *const*, const char *);
SOAP_FMAC3 struct wst__RequestSecurityTokenType ** SOAP_FMAC4 soap_in_PointerTowst__RequestSecurityTokenType(struct soap*, const char*, struct wst__RequestSecurityTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__RequestSecurityTokenType(struct soap*, struct wst__RequestSecurityTokenType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__RequestSecurityTokenType ** SOAP_FMAC4 soap_get_PointerTowst__RequestSecurityTokenType(struct soap*, struct wst__RequestSecurityTokenType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__LifetimeType_DEFINED
#define SOAP_TYPE_PointerTowst__LifetimeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__LifetimeType(struct soap*, struct wst__LifetimeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__LifetimeType(struct soap*, const char *, int, struct wst__LifetimeType *const*, const char *);
SOAP_FMAC3 struct wst__LifetimeType ** SOAP_FMAC4 soap_in_PointerTowst__LifetimeType(struct soap*, const char*, struct wst__LifetimeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__LifetimeType(struct soap*, struct wst__LifetimeType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__LifetimeType ** SOAP_FMAC4 soap_get_PointerTowst__LifetimeType(struct soap*, struct wst__LifetimeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__RequestedProofTokenType_DEFINED
#define SOAP_TYPE_PointerTowst__RequestedProofTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__RequestedProofTokenType(struct soap*, struct wst__RequestedProofTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__RequestedProofTokenType(struct soap*, const char *, int, struct wst__RequestedProofTokenType *const*, const char *);
SOAP_FMAC3 struct wst__RequestedProofTokenType ** SOAP_FMAC4 soap_in_PointerTowst__RequestedProofTokenType(struct soap*, const char*, struct wst__RequestedProofTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__RequestedProofTokenType(struct soap*, struct wst__RequestedProofTokenType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__RequestedProofTokenType ** SOAP_FMAC4 soap_get_PointerTowst__RequestedProofTokenType(struct soap*, struct wst__RequestedProofTokenType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__RequestedReferenceType_DEFINED
#define SOAP_TYPE_PointerTowst__RequestedReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__RequestedReferenceType(struct soap*, struct wst__RequestedReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__RequestedReferenceType(struct soap*, const char *, int, struct wst__RequestedReferenceType *const*, const char *);
SOAP_FMAC3 struct wst__RequestedReferenceType ** SOAP_FMAC4 soap_in_PointerTowst__RequestedReferenceType(struct soap*, const char*, struct wst__RequestedReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__RequestedReferenceType(struct soap*, struct wst__RequestedReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__RequestedReferenceType ** SOAP_FMAC4 soap_get_PointerTowst__RequestedReferenceType(struct soap*, struct wst__RequestedReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__RequestedSecurityTokenType_DEFINED
#define SOAP_TYPE_PointerTowst__RequestedSecurityTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__RequestedSecurityTokenType(struct soap*, struct wst__RequestedSecurityTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__RequestedSecurityTokenType(struct soap*, const char *, int, struct wst__RequestedSecurityTokenType *const*, const char *);
SOAP_FMAC3 struct wst__RequestedSecurityTokenType ** SOAP_FMAC4 soap_in_PointerTowst__RequestedSecurityTokenType(struct soap*, const char*, struct wst__RequestedSecurityTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__RequestedSecurityTokenType(struct soap*, struct wst__RequestedSecurityTokenType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__RequestedSecurityTokenType ** SOAP_FMAC4 soap_get_PointerTowst__RequestedSecurityTokenType(struct soap*, struct wst__RequestedSecurityTokenType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__AuthenticatorType_DEFINED
#define SOAP_TYPE_PointerTowst__AuthenticatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__AuthenticatorType(struct soap*, struct wst__AuthenticatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__AuthenticatorType(struct soap*, const char *, int, struct wst__AuthenticatorType *const*, const char *);
SOAP_FMAC3 struct wst__AuthenticatorType ** SOAP_FMAC4 soap_in_PointerTowst__AuthenticatorType(struct soap*, const char*, struct wst__AuthenticatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__AuthenticatorType(struct soap*, struct wst__AuthenticatorType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__AuthenticatorType ** SOAP_FMAC4 soap_get_PointerTowst__AuthenticatorType(struct soap*, struct wst__AuthenticatorType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__BinaryExchangeType_DEFINED
#define SOAP_TYPE_PointerTowst__BinaryExchangeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__BinaryExchangeType(struct soap*, struct wst__BinaryExchangeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__BinaryExchangeType(struct soap*, const char *, int, struct wst__BinaryExchangeType *const*, const char *);
SOAP_FMAC3 struct wst__BinaryExchangeType ** SOAP_FMAC4 soap_in_PointerTowst__BinaryExchangeType(struct soap*, const char*, struct wst__BinaryExchangeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__BinaryExchangeType(struct soap*, struct wst__BinaryExchangeType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__BinaryExchangeType ** SOAP_FMAC4 soap_get_PointerTowst__BinaryExchangeType(struct soap*, struct wst__BinaryExchangeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedInt_DEFINED
#define SOAP_TYPE_PointerTounsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap*, unsigned int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap*, const char *, int, unsigned int *const*, const char *);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap*, const char*, unsigned int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap*, unsigned int *const*, const char*, const char*);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap*, unsigned int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__EntropyType_DEFINED
#define SOAP_TYPE_PointerTowst__EntropyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__EntropyType(struct soap*, struct wst__EntropyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__EntropyType(struct soap*, const char *, int, struct wst__EntropyType *const*, const char *);
SOAP_FMAC3 struct wst__EntropyType ** SOAP_FMAC4 soap_in_PointerTowst__EntropyType(struct soap*, const char*, struct wst__EntropyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__EntropyType(struct soap*, struct wst__EntropyType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__EntropyType ** SOAP_FMAC4 soap_get_PointerTowst__EntropyType(struct soap*, struct wst__EntropyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsp__AppliesTo__DEFINED
#define SOAP_TYPE_PointerTo_wsp__AppliesTo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsp__AppliesTo_(struct soap*, struct _wsp__AppliesTo_ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsp__AppliesTo_(struct soap*, const char *, int, struct _wsp__AppliesTo_ *const*, const char *);
SOAP_FMAC3 struct _wsp__AppliesTo_ ** SOAP_FMAC4 soap_in_PointerTo_wsp__AppliesTo_(struct soap*, const char*, struct _wsp__AppliesTo_ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsp__AppliesTo_(struct soap*, struct _wsp__AppliesTo_ *const*, const char*, const char*);
SOAP_FMAC3 struct _wsp__AppliesTo_ ** SOAP_FMAC4 soap_get_PointerTo_wsp__AppliesTo_(struct soap*, struct _wsp__AppliesTo_ **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowst__BinarySecretType_DEFINED
#define SOAP_TYPE_PointerTowst__BinarySecretType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__BinarySecretType(struct soap*, struct wst__BinarySecretType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__BinarySecretType(struct soap*, const char *, int, struct wst__BinarySecretType *const*, const char *);
SOAP_FMAC3 struct wst__BinarySecretType ** SOAP_FMAC4 soap_in_PointerTowst__BinarySecretType(struct soap*, const char*, struct wst__BinarySecretType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__BinarySecretType(struct soap*, struct wst__BinarySecretType *const*, const char*, const char*);
SOAP_FMAC3 struct wst__BinarySecretType ** SOAP_FMAC4 soap_get_PointerTowst__BinarySecretType(struct soap*, struct wst__BinarySecretType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_PointerTowsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__EndpointReferenceType(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTowsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);
#endif
/* _wsa5__ProblemIRI is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI_DEFINED
#define SOAP_TYPE__wsa5__ProblemIRI_DEFINED

#define soap_default__wsa5__ProblemIRI soap_default_string


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap__wsa5__ProblemIRI2s(soap, a) (a)

#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_s2_wsa5__ProblemIRI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_instantiate__wsa5__ProblemIRI soap_instantiate_string


#define soap_new__wsa5__ProblemIRI soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemIRI(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__ProblemIRI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemIRI soap_get_string


#define soap_read__wsa5__ProblemIRI soap_read_string


#define soap_GET__wsa5__ProblemIRI soap_GET_string


#define soap_POST_recv__wsa5__ProblemIRI soap_POST_recv_string

#endif
/* _wsa5__ProblemHeaderQName is a typedef synonym of _QName */

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED
#define SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED

#define soap_default__wsa5__ProblemHeaderQName soap_default__QName


#define soap_serialize__wsa5__ProblemHeaderQName soap_serialize__QName


#define soap__wsa5__ProblemHeaderQName2s(soap, a) soap_QName2s(soap, (a))

#define soap_out__wsa5__ProblemHeaderQName soap_out__QName


#define soap_s2_wsa5__ProblemHeaderQName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in__wsa5__ProblemHeaderQName soap_in__QName


#define soap_instantiate__wsa5__ProblemHeaderQName soap_instantiate__QName


#define soap_new__wsa5__ProblemHeaderQName soap_new__QName


#define soap_put__wsa5__ProblemHeaderQName soap_put__QName


#define soap_write__wsa5__ProblemHeaderQName soap_write__QName


#define soap_PUT__wsa5__ProblemHeaderQName soap_PUT__QName


#define soap_PATCH__wsa5__ProblemHeaderQName soap_PATCH__QName


#define soap_POST_send__wsa5__ProblemHeaderQName soap_POST_send__QName


#define soap_get__wsa5__ProblemHeaderQName soap_get__QName


#define soap_read__wsa5__ProblemHeaderQName soap_read__QName


#define soap_GET__wsa5__ProblemHeaderQName soap_GET__QName


#define soap_POST_recv__wsa5__ProblemHeaderQName soap_POST_recv__QName

#endif
/* _wsa5__Action is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__Action_DEFINED
#define SOAP_TYPE__wsa5__Action_DEFINED

#define soap_default__wsa5__Action soap_default_string


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap__wsa5__Action2s(soap, a) (a)

#define soap_out__wsa5__Action soap_out_string


#define soap_s2_wsa5__Action(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__Action soap_in_string


#define soap_instantiate__wsa5__Action soap_instantiate_string


#define soap_new__wsa5__Action soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Action(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__Action(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Action soap_get_string


#define soap_read__wsa5__Action soap_read_string


#define soap_GET__wsa5__Action soap_GET_string


#define soap_POST_recv__wsa5__Action soap_POST_recv_string

#endif
/* _wsa5__To is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__To_DEFINED
#define SOAP_TYPE__wsa5__To_DEFINED

#define soap_default__wsa5__To soap_default_string


#define soap_serialize__wsa5__To soap_serialize_string


#define soap__wsa5__To2s(soap, a) (a)

#define soap_out__wsa5__To soap_out_string


#define soap_s2_wsa5__To(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__To soap_in_string


#define soap_instantiate__wsa5__To soap_instantiate_string


#define soap_new__wsa5__To soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__To(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__To(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__To soap_get_string


#define soap_read__wsa5__To soap_read_string


#define soap_GET__wsa5__To soap_GET_string


#define soap_POST_recv__wsa5__To soap_POST_recv_string

#endif
/* _wsa5__MessageID is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__MessageID_DEFINED
#define SOAP_TYPE__wsa5__MessageID_DEFINED

#define soap_default__wsa5__MessageID soap_default_string


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap__wsa5__MessageID2s(soap, a) (a)

#define soap_out__wsa5__MessageID soap_out_string


#define soap_s2_wsa5__MessageID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__MessageID soap_in_string


#define soap_instantiate__wsa5__MessageID soap_instantiate_string


#define soap_new__wsa5__MessageID soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__MessageID(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__MessageID(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__MessageID soap_get_string


#define soap_read__wsa5__MessageID soap_read_string


#define soap_GET__wsa5__MessageID soap_GET_string


#define soap_POST_recv__wsa5__MessageID soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
#define SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED

inline void soap_default_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType
	*a = SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);

#define soap_wsa5__FaultCodesOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__FaultCodesOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__FaultCodesOpenEnumType soap_instantiate_string


#define soap_new_wsa5__FaultCodesOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED

inline void soap_default_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum
	*a = SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);

#define soap_wsa5__RelationshipTypeOpenEnum2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__RelationshipTypeOpenEnum(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__RelationshipTypeOpenEnum soap_instantiate_string


#define soap_new_wsa5__RelationshipTypeOpenEnum soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Security_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Security_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Security(struct soap*, const char *, int, struct _wsse__Security *const*, const char *);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_in_PointerTo_wsse__Security(struct soap*, const char*, struct _wsse__Security **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_get_PointerTo_wsse__Security(struct soap*, struct _wsse__Security **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignatureType_DEFINED
#define SOAP_TYPE_PointerTods__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureType(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTods__SignatureType(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTods__SignatureType(struct soap*, struct ds__SignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsc__SecurityContextTokenType_DEFINED
#define SOAP_TYPE_PointerTowsc__SecurityContextTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__SecurityContextTokenType(struct soap*, const char *, int, struct wsc__SecurityContextTokenType *const*, const char *);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_in_PointerTowsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*, const char*, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_get_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__BinarySecurityToken_DEFINED
#define SOAP_TYPE_PointerTo_wsse__BinarySecurityToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__BinarySecurityToken(struct soap*, const char *, int, struct _wsse__BinarySecurityToken *const*, const char *);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__UsernameToken_DEFINED
#define SOAP_TYPE_PointerTo_wsse__UsernameToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__UsernameToken(struct soap*, const char *, int, struct _wsse__UsernameToken *const*, const char *);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsu__Timestamp_DEFINED
#define SOAP_TYPE_PointerTo_wsu__Timestamp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsu__Timestamp(struct soap*, const char *, int, struct _wsu__Timestamp *const*, const char *);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_in_PointerTo_wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*, const char*, const char*);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_get_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp **, const char*, const char*);
#endif
/* _saml2__AttributeValue is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml2__AttributeValue_DEFINED
#define SOAP_TYPE__saml2__AttributeValue_DEFINED
#endif
/* _saml2__AuthenticatingAuthority is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AuthenticatingAuthority_DEFINED
#define SOAP_TYPE__saml2__AuthenticatingAuthority_DEFINED

#define soap_default__saml2__AuthenticatingAuthority soap_default_string


#define soap_serialize__saml2__AuthenticatingAuthority soap_serialize_string


#define soap__saml2__AuthenticatingAuthority2s(soap, a) (a)

#define soap_out__saml2__AuthenticatingAuthority soap_out_string


#define soap_s2_saml2__AuthenticatingAuthority(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AuthenticatingAuthority soap_in_string


#define soap_instantiate__saml2__AuthenticatingAuthority soap_instantiate_string


#define soap_new__saml2__AuthenticatingAuthority soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthenticatingAuthority(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AuthenticatingAuthority(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthenticatingAuthority(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthenticatingAuthority(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthenticatingAuthority(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthenticatingAuthority soap_get_string


#define soap_read__saml2__AuthenticatingAuthority soap_read_string


#define soap_GET__saml2__AuthenticatingAuthority soap_GET_string


#define soap_POST_recv__saml2__AuthenticatingAuthority soap_POST_recv_string

#endif
/* _saml2__AuthnContextDecl is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml2__AuthnContextDecl_DEFINED
#define SOAP_TYPE__saml2__AuthnContextDecl_DEFINED
#endif
/* _saml2__AuthnContextDeclRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AuthnContextDeclRef_DEFINED
#define SOAP_TYPE__saml2__AuthnContextDeclRef_DEFINED

#define soap_default__saml2__AuthnContextDeclRef soap_default_string


#define soap_serialize__saml2__AuthnContextDeclRef soap_serialize_string


#define soap__saml2__AuthnContextDeclRef2s(soap, a) (a)

#define soap_out__saml2__AuthnContextDeclRef soap_out_string


#define soap_s2_saml2__AuthnContextDeclRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AuthnContextDeclRef soap_in_string


#define soap_instantiate__saml2__AuthnContextDeclRef soap_instantiate_string


#define soap_new__saml2__AuthnContextDeclRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContextDeclRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AuthnContextDeclRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnContextDeclRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnContextDeclRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnContextDeclRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnContextDeclRef soap_get_string


#define soap_read__saml2__AuthnContextDeclRef soap_read_string


#define soap_GET__saml2__AuthnContextDeclRef soap_GET_string


#define soap_POST_recv__saml2__AuthnContextDeclRef soap_POST_recv_string

#endif
/* _saml2__AuthnContextClassRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AuthnContextClassRef_DEFINED
#define SOAP_TYPE__saml2__AuthnContextClassRef_DEFINED

#define soap_default__saml2__AuthnContextClassRef soap_default_string


#define soap_serialize__saml2__AuthnContextClassRef soap_serialize_string


#define soap__saml2__AuthnContextClassRef2s(soap, a) (a)

#define soap_out__saml2__AuthnContextClassRef soap_out_string


#define soap_s2_saml2__AuthnContextClassRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AuthnContextClassRef soap_in_string


#define soap_instantiate__saml2__AuthnContextClassRef soap_instantiate_string


#define soap_new__saml2__AuthnContextClassRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContextClassRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AuthnContextClassRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnContextClassRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnContextClassRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnContextClassRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnContextClassRef soap_get_string


#define soap_read__saml2__AuthnContextClassRef soap_read_string


#define soap_GET__saml2__AuthnContextClassRef soap_GET_string


#define soap_POST_recv__saml2__AuthnContextClassRef soap_POST_recv_string

#endif
/* _saml2__Audience is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__Audience_DEFINED
#define SOAP_TYPE__saml2__Audience_DEFINED

#define soap_default__saml2__Audience soap_default_string


#define soap_serialize__saml2__Audience soap_serialize_string


#define soap__saml2__Audience2s(soap, a) (a)

#define soap_out__saml2__Audience soap_out_string


#define soap_s2_saml2__Audience(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__Audience soap_in_string


#define soap_instantiate__saml2__Audience soap_instantiate_string


#define soap_new__saml2__Audience soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Audience(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__Audience(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Audience soap_get_string


#define soap_read__saml2__Audience soap_read_string


#define soap_GET__saml2__Audience soap_GET_string


#define soap_POST_recv__saml2__Audience soap_POST_recv_string

#endif
/* _saml2__AssertionURIRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AssertionURIRef_DEFINED
#define SOAP_TYPE__saml2__AssertionURIRef_DEFINED

#define soap_default__saml2__AssertionURIRef soap_default_string


#define soap_serialize__saml2__AssertionURIRef soap_serialize_string


#define soap__saml2__AssertionURIRef2s(soap, a) (a)

#define soap_out__saml2__AssertionURIRef soap_out_string


#define soap_s2_saml2__AssertionURIRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AssertionURIRef soap_in_string


#define soap_instantiate__saml2__AssertionURIRef soap_instantiate_string


#define soap_new__saml2__AssertionURIRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AssertionURIRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AssertionURIRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AssertionURIRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AssertionURIRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AssertionURIRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AssertionURIRef soap_get_string


#define soap_read__saml2__AssertionURIRef soap_read_string


#define soap_GET__saml2__AssertionURIRef soap_GET_string


#define soap_POST_recv__saml2__AssertionURIRef soap_POST_recv_string

#endif
/* _saml2__AssertionIDRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AssertionIDRef_DEFINED
#define SOAP_TYPE__saml2__AssertionIDRef_DEFINED

#define soap_default__saml2__AssertionIDRef soap_default_string


#define soap_serialize__saml2__AssertionIDRef soap_serialize_string


#define soap__saml2__AssertionIDRef2s(soap, a) (a)

#define soap_out__saml2__AssertionIDRef soap_out_string


#define soap_s2_saml2__AssertionIDRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AssertionIDRef soap_in_string


#define soap_instantiate__saml2__AssertionIDRef soap_instantiate_string


#define soap_new__saml2__AssertionIDRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AssertionIDRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AssertionIDRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AssertionIDRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AssertionIDRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AssertionIDRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AssertionIDRef soap_get_string


#define soap_read__saml2__AssertionIDRef soap_read_string


#define soap_GET__saml2__AssertionIDRef soap_GET_string


#define soap_POST_recv__saml2__AssertionIDRef soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ds__KeyInfo_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ds__KeyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType **const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_in_PointerToPointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_get_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AttributeStatementType(struct soap*, const char *, int, struct __saml2__union_AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AttributeStatementType(struct soap*, const char*, struct __saml2__union_AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AttributeType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeType(struct soap*, const char *, int, struct saml2__AttributeType *const*, const char *);
SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeType(struct soap*, const char*, struct saml2__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__EvidenceType_DEFINED
#define SOAP_TYPE_PointerTosaml2__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EvidenceType(struct soap*, const char *, int, struct saml2__EvidenceType *const*, const char *);
SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml2__EvidenceType(struct soap*, const char*, struct saml2__EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ActionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ActionType(struct soap*, const char *, int, struct saml2__ActionType *const*, const char *);
SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ActionType(struct soap*, const char*, struct saml2__ActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthnContextType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthnContextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnContextType(struct soap*, const char *, int, struct saml2__AuthnContextType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnContextType(struct soap*, const char*, struct saml2__AuthnContextType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectLocalityType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectLocalityType(struct soap*, const char *, int, struct saml2__SubjectLocalityType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectLocalityType(struct soap*, const char*, struct saml2__SubjectLocalityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_EvidenceType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_EvidenceType(struct soap*, const char *, int, struct __saml2__union_EvidenceType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_EvidenceType(struct soap*, const char*, struct __saml2__union_EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AdviceType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AdviceType(struct soap*, const char *, int, struct __saml2__union_AdviceType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AdviceType(struct soap*, const char*, struct __saml2__union_AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AssertionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AssertionType(struct soap*, const char *, int, struct saml2__AssertionType *const*, const char *);
SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AssertionType(struct soap*, const char*, struct saml2__AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_ConditionsType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_ConditionsType(struct soap*, const char *, int, struct __saml2__union_ConditionsType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_ConditionsType(struct soap*, const char*, struct __saml2__union_ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ProxyRestrictionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ProxyRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ProxyRestrictionType(struct soap*, const char *, int, struct saml2__ProxyRestrictionType *const*, const char *);
SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ProxyRestrictionType(struct soap*, const char*, struct saml2__ProxyRestrictionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__OneTimeUseType_DEFINED
#define SOAP_TYPE_PointerTosaml2__OneTimeUseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__OneTimeUseType(struct soap*, const char *, int, struct saml2__OneTimeUseType *const*, const char *);
SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_in_PointerTosaml2__OneTimeUseType(struct soap*, const char*, struct saml2__OneTimeUseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_get_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AudienceRestrictionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AudienceRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AudienceRestrictionType(struct soap*, const char *, int, struct saml2__AudienceRestrictionType *const*, const char *);
SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AudienceRestrictionType(struct soap*, const char*, struct saml2__AudienceRestrictionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ConditionAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionAbstractType(struct soap*, const char *, int, struct saml2__ConditionAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionAbstractType(struct soap*, const char*, struct saml2__ConditionAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationDataType(struct soap*, const char *, int, struct saml2__SubjectConfirmationDataType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationDataType(struct soap*, const char*, struct saml2__SubjectConfirmationDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationType(struct soap*, const char *, int, struct saml2__SubjectConfirmationType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationType(struct soap*, const char*, struct saml2__SubjectConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__EncryptedElementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__EncryptedElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EncryptedElementType(struct soap*, const char *, int, struct saml2__EncryptedElementType *const*, const char *);
SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_in_PointerTosaml2__EncryptedElementType(struct soap*, const char*, struct saml2__EncryptedElementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_get_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__BaseIDAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__BaseIDAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__BaseIDAbstractType(struct soap*, const char *, int, struct saml2__BaseIDAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__BaseIDAbstractType(struct soap*, const char*, struct saml2__BaseIDAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AssertionType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AssertionType(struct soap*, const char *, int, struct __saml2__union_AssertionType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AssertionType(struct soap*, const char*, struct __saml2__union_AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeStatementType(struct soap*, const char *, int, struct saml2__AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeStatementType(struct soap*, const char*, struct saml2__AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthzDecisionStatementType(struct soap*, const char *, int, struct saml2__AuthzDecisionStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthzDecisionStatementType(struct soap*, const char*, struct saml2__AuthzDecisionStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthnStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthnStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnStatementType(struct soap*, const char *, int, struct saml2__AuthnStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnStatementType(struct soap*, const char*, struct saml2__AuthnStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__StatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__StatementAbstractType(struct soap*, const char *, int, struct saml2__StatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__StatementAbstractType(struct soap*, const char*, struct saml2__StatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AdviceType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AdviceType(struct soap*, const char *, int, struct saml2__AdviceType *const*, const char *);
SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml2__AdviceType(struct soap*, const char*, struct saml2__AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ConditionsType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionsType(struct soap*, const char *, int, struct saml2__ConditionsType *const*, const char *);
SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionsType(struct soap*, const char*, struct saml2__ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectType(struct soap*, const char *, int, struct saml2__SubjectType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectType(struct soap*, const char*, struct saml2__SubjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__NameIDType_DEFINED
#define SOAP_TYPE_PointerTosaml2__NameIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__NameIDType(struct soap*, const char *, int, struct saml2__NameIDType *const*, const char *);
SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_in_PointerTosaml2__NameIDType(struct soap*, const char*, struct saml2__NameIDType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_get_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType **const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_in_PointerToPointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_get_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **, const char*, const char*);
#endif
/* _saml1__AttributeValue is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml1__AttributeValue_DEFINED
#define SOAP_TYPE__saml1__AttributeValue_DEFINED
#endif
/* _saml1__ConfirmationMethod is a typedef synonym of string */

#ifndef SOAP_TYPE__saml1__ConfirmationMethod_DEFINED
#define SOAP_TYPE__saml1__ConfirmationMethod_DEFINED

#define soap_default__saml1__ConfirmationMethod soap_default_string


#define soap_serialize__saml1__ConfirmationMethod soap_serialize_string


#define soap__saml1__ConfirmationMethod2s(soap, a) (a)

#define soap_out__saml1__ConfirmationMethod soap_out_string


#define soap_s2_saml1__ConfirmationMethod(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml1__ConfirmationMethod soap_in_string


#define soap_instantiate__saml1__ConfirmationMethod soap_instantiate_string


#define soap_new__saml1__ConfirmationMethod soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__ConfirmationMethod(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml1__ConfirmationMethod(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml1__ConfirmationMethod(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__ConfirmationMethod(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__ConfirmationMethod(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__ConfirmationMethod soap_get_string


#define soap_read__saml1__ConfirmationMethod soap_read_string


#define soap_GET__saml1__ConfirmationMethod soap_GET_string


#define soap_POST_recv__saml1__ConfirmationMethod soap_POST_recv_string

#endif
/* _saml1__SubjectConfirmationData is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml1__SubjectConfirmationData_DEFINED
#define SOAP_TYPE__saml1__SubjectConfirmationData_DEFINED
#endif
/* _saml1__Audience is a typedef synonym of string */

#ifndef SOAP_TYPE__saml1__Audience_DEFINED
#define SOAP_TYPE__saml1__Audience_DEFINED

#define soap_default__saml1__Audience soap_default_string


#define soap_serialize__saml1__Audience soap_serialize_string


#define soap__saml1__Audience2s(soap, a) (a)

#define soap_out__saml1__Audience soap_out_string


#define soap_s2_saml1__Audience(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml1__Audience soap_in_string


#define soap_instantiate__saml1__Audience soap_instantiate_string


#define soap_new__saml1__Audience soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Audience(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml1__Audience(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml1__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Audience soap_get_string


#define soap_read__saml1__Audience soap_read_string


#define soap_GET__saml1__Audience soap_GET_string


#define soap_POST_recv__saml1__Audience soap_POST_recv_string

#endif
/* _saml1__AssertionIDReference is a typedef synonym of string */

#ifndef SOAP_TYPE__saml1__AssertionIDReference_DEFINED
#define SOAP_TYPE__saml1__AssertionIDReference_DEFINED

#define soap_default__saml1__AssertionIDReference soap_default_string


#define soap_serialize__saml1__AssertionIDReference soap_serialize_string


#define soap__saml1__AssertionIDReference2s(soap, a) (a)

#define soap_out__saml1__AssertionIDReference soap_out_string


#define soap_s2_saml1__AssertionIDReference(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml1__AssertionIDReference soap_in_string


#define soap_instantiate__saml1__AssertionIDReference soap_instantiate_string


#define soap_new__saml1__AssertionIDReference soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AssertionIDReference(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml1__AssertionIDReference(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml1__AssertionIDReference(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AssertionIDReference(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AssertionIDReference(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AssertionIDReference soap_get_string


#define soap_read__saml1__AssertionIDReference soap_read_string


#define soap_GET__saml1__AssertionIDReference soap_GET_string


#define soap_POST_recv__saml1__AssertionIDReference soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTosaml1__AttributeType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeType(struct soap*, const char *, int, struct saml1__AttributeType *const*, const char *);
SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeType(struct soap*, const char*, struct saml1__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__EvidenceType_DEFINED
#define SOAP_TYPE_PointerTosaml1__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__EvidenceType(struct soap*, const char *, int, struct saml1__EvidenceType *const*, const char *);
SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml1__EvidenceType(struct soap*, const char*, struct saml1__EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ActionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ActionType(struct soap*, const char *, int, struct saml1__ActionType *const*, const char *);
SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml1__ActionType(struct soap*, const char*, struct saml1__ActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthorityBindingType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthorityBindingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorityBindingType(struct soap*, const char *, int, struct saml1__AuthorityBindingType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorityBindingType(struct soap*, const char*, struct saml1__AuthorityBindingType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectLocalityType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectLocalityType(struct soap*, const char *, int, struct saml1__SubjectLocalityType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectLocalityType(struct soap*, const char*, struct saml1__SubjectLocalityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectType(struct soap*, const char *, int, struct saml1__SubjectType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectType(struct soap*, const char*, struct saml1__SubjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_EvidenceType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_EvidenceType(struct soap*, const char *, int, struct __saml1__union_EvidenceType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_EvidenceType(struct soap*, const char*, struct __saml1__union_EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectConfirmationType(struct soap*, const char *, int, struct saml1__SubjectConfirmationType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectConfirmationType(struct soap*, const char*, struct saml1__SubjectConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__NameIdentifierType_DEFINED
#define SOAP_TYPE_PointerTosaml1__NameIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__NameIdentifierType(struct soap*, const char *, int, struct saml1__NameIdentifierType *const*, const char *);
SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_in_PointerTosaml1__NameIdentifierType(struct soap*, const char*, struct saml1__NameIdentifierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_get_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_AdviceType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AdviceType(struct soap*, const char *, int, struct __saml1__union_AdviceType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AdviceType(struct soap*, const char*, struct __saml1__union_AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AssertionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AssertionType(struct soap*, const char *, int, struct saml1__AssertionType *const*, const char *);
SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AssertionType(struct soap*, const char*, struct saml1__AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_ConditionsType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_ConditionsType(struct soap*, const char *, int, struct __saml1__union_ConditionsType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_ConditionsType(struct soap*, const char*, struct __saml1__union_ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ConditionAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionAbstractType(struct soap*, const char *, int, struct saml1__ConditionAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionAbstractType(struct soap*, const char*, struct saml1__ConditionAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__DoNotCacheConditionType(struct soap*, const char *, int, struct saml1__DoNotCacheConditionType *const*, const char *);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__DoNotCacheConditionType(struct soap*, const char*, struct saml1__DoNotCacheConditionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, const char *, int, struct saml1__AudienceRestrictionConditionType *const*, const char *);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, const char*, struct saml1__AudienceRestrictionConditionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ds__Signature_DEFINED
#define SOAP_TYPE_PointerTo_ds__Signature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__Signature(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTo_ds__Signature(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_AssertionType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AssertionType(struct soap*, const char *, int, struct __saml1__union_AssertionType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AssertionType(struct soap*, const char*, struct __saml1__union_AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeStatementType(struct soap*, const char *, int, struct saml1__AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeStatementType(struct soap*, const char*, struct saml1__AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, const char *, int, struct saml1__AuthorizationDecisionStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, const char*, struct saml1__AuthorizationDecisionStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthenticationStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthenticationStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthenticationStatementType(struct soap*, const char *, int, struct saml1__AuthenticationStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthenticationStatementType(struct soap*, const char*, struct saml1__AuthenticationStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectStatementAbstractType(struct soap*, const char *, int, struct saml1__SubjectStatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectStatementAbstractType(struct soap*, const char*, struct saml1__SubjectStatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__StatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__StatementAbstractType(struct soap*, const char *, int, struct saml1__StatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__StatementAbstractType(struct soap*, const char*, struct saml1__StatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AdviceType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AdviceType(struct soap*, const char *, int, struct saml1__AdviceType *const*, const char *);
SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml1__AdviceType(struct soap*, const char*, struct saml1__AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ConditionsType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionsType(struct soap*, const char *, int, struct saml1__ConditionsType *const*, const char *);
SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionsType(struct soap*, const char*, struct saml1__ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence_DEFINED
#define SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char *, int, struct __wsc__DerivedKeyTokenType_sequence *const*, const char *);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_in_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*, const char*, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_get_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToULONG64_DEFINED
#define SOAP_TYPE_PointerToULONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToULONG64(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToULONG64(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerToULONG64(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToULONG64(struct soap*, ULONG64 *const*, const char*, const char*);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerToULONG64(struct soap*, ULONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsc__PropertiesType_DEFINED
#define SOAP_TYPE_PointerTowsc__PropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__PropertiesType(struct soap*, const char *, int, struct wsc__PropertiesType *const*, const char *);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_in_PointerTowsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*, const char*, const char*);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_get_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeOpenEnumType_DEFINED
#define SOAP_TYPE_wsc__FaultCodeOpenEnumType_DEFINED

inline void soap_default_wsc__FaultCodeOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsc__FaultCodeOpenEnumType
	*a = SOAP_DEFAULT_wsc__FaultCodeOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__FaultCodeOpenEnumType(struct soap*, char *const*);

#define soap_wsc__FaultCodeOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsc__FaultCodeOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsc__FaultCodeOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsc__FaultCodeOpenEnumType soap_instantiate_string


#define soap_new_wsc__FaultCodeOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsc__FaultCodeOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsc__FaultCodeOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsc__FaultCodeOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsc__FaultCodeOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__FaultCodeOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__FaultCodeOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsc__FaultCodeOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTo_xenc__ReferenceList_DEFINED
#define SOAP_TYPE_PointerTo_xenc__ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xenc__ReferenceList(struct soap*, const char *, int, struct _xenc__ReferenceList *const*, const char *);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_in_PointerTo_xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*, const char*, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_get_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__xenc__union_ReferenceList_DEFINED
#define SOAP_TYPE_PointerTo__xenc__union_ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__xenc__union_ReferenceList(struct soap*, const char *, int, struct __xenc__union_ReferenceList *const*, const char *);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_in_PointerTo__xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*, const char*, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_get_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__ReferenceType_DEFINED
#define SOAP_TYPE_PointerToxenc__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__ReferenceType(struct soap*, const char *, int, struct xenc__ReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertyType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertyType(struct soap*, const char *, int, struct xenc__EncryptionPropertyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__TransformsType_DEFINED
#define SOAP_TYPE_PointerToxenc__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__TransformsType(struct soap*, const char *, int, struct xenc__TransformsType *const*, const char *);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_in_PointerToxenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_get_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__CipherReferenceType_DEFINED
#define SOAP_TYPE_PointerToxenc__CipherReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherReferenceType(struct soap*, const char *, int, struct xenc__CipherReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertiesType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertiesType(struct soap*, const char *, int, struct xenc__EncryptionPropertiesType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__CipherDataType_DEFINED
#define SOAP_TYPE_PointerToxenc__CipherDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherDataType(struct soap*, const char *, int, struct xenc__CipherDataType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ds__KeyInfo_DEFINED
#define SOAP_TYPE_PointerTo_ds__KeyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionMethodType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionMethodType(struct soap*, const char *, int, struct xenc__EncryptionMethodType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__X509IssuerSerialType_DEFINED
#define SOAP_TYPE_PointerTods__X509IssuerSerialType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509IssuerSerialType(struct soap*, const char *, int, struct ds__X509IssuerSerialType *const*, const char *);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_in_PointerTods__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_get_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__RSAKeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__RSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RSAKeyValueType(struct soap*, const char *, int, struct ds__RSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__DSAKeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__DSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DSAKeyValueType(struct soap*, const char *, int, struct ds__DSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__TransformType_DEFINED
#define SOAP_TYPE_PointerTods__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformType(struct soap*, const char *, int, struct ds__TransformType *const*, const char *);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_in_PointerTods__TransformType(struct soap*, const char*, struct ds__TransformType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_get_PointerTods__TransformType(struct soap*, struct ds__TransformType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__DigestMethodType_DEFINED
#define SOAP_TYPE_PointerTods__DigestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DigestMethodType(struct soap*, const char *, int, struct ds__DigestMethodType *const*, const char *);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_in_PointerTods__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_get_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__TransformsType_DEFINED
#define SOAP_TYPE_PointerTods__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformsType(struct soap*, const char *, int, struct ds__TransformsType *const*, const char *);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_in_PointerTods__TransformsType(struct soap*, const char*, struct ds__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_get_PointerTods__TransformsType(struct soap*, struct ds__TransformsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTods__ReferenceType_DEFINED
#define SOAP_TYPE_PointerToPointerTods__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType **const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_in_PointerToPointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*, const char*, const char*);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_get_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__ReferenceType_DEFINED
#define SOAP_TYPE_PointerTods__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType *const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_in_PointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_get_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignatureMethodType_DEFINED
#define SOAP_TYPE_PointerTods__SignatureMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureMethodType(struct soap*, const char *, int, struct ds__SignatureMethodType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_in_PointerTods__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_get_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_PointerTods__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__CanonicalizationMethodType(struct soap*, const char *, int, struct ds__CanonicalizationMethodType *const*, const char *);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_in_PointerTods__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_get_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__SecurityTokenReference_DEFINED
#define SOAP_TYPE_PointerTo_wsse__SecurityTokenReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__SecurityTokenReference(struct soap*, const char *, int, struct _wsse__SecurityTokenReference *const*, const char *);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_in_PointerTo_wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_get_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__RetrievalMethodType_DEFINED
#define SOAP_TYPE_PointerTods__RetrievalMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RetrievalMethodType(struct soap*, const char *, int, struct ds__RetrievalMethodType *const*, const char *);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_in_PointerTods__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_get_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__KeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__KeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyValueType(struct soap*, const char *, int, struct ds__KeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_in_PointerTods__KeyValueType(struct soap*, const char*, struct ds__KeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_get_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces_DEFINED
#define SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char *, int, struct _c14n__InclusiveNamespaces *const*, const char *);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_in_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*, const char*, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_get_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__KeyInfoType_DEFINED
#define SOAP_TYPE_PointerTods__KeyInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyInfoType(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTods__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignedInfoType_DEFINED
#define SOAP_TYPE_PointerTods__SignedInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignedInfoType(struct soap*, const char *, int, struct ds__SignedInfoType *const*, const char *);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_in_PointerTods__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_get_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType **, const char*, const char*);
#endif
/* _ds__SignatureValue is a typedef synonym of string */

#ifndef SOAP_TYPE__ds__SignatureValue_DEFINED
#define SOAP_TYPE__ds__SignatureValue_DEFINED

#define soap_default__ds__SignatureValue soap_default_string


#define soap_serialize__ds__SignatureValue soap_serialize_string


#define soap__ds__SignatureValue2s(soap, a) (a)

#define soap_out__ds__SignatureValue soap_out_string


#define soap_s2_ds__SignatureValue(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__ds__SignatureValue soap_in_string


#define soap_instantiate__ds__SignatureValue soap_instantiate_string


#define soap_new__ds__SignatureValue soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__SignatureValue(struct soap*, char *const*, const char*, const char*);

inline int soap_write__ds__SignatureValue(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ds__SignatureValue(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__SignatureValue(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__SignatureValue(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__SignatureValue soap_get_string


#define soap_read__ds__SignatureValue soap_read_string


#define soap_GET__ds__SignatureValue soap_GET_string


#define soap_POST_recv__ds__SignatureValue soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTods__X509DataType_DEFINED
#define SOAP_TYPE_PointerTods__X509DataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509DataType(struct soap*, const char *, int, struct ds__X509DataType *const*, const char *);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_in_PointerTods__X509DataType(struct soap*, const char*, struct ds__X509DataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_get_PointerTods__X509DataType(struct soap*, struct ds__X509DataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Embedded_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Embedded_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Embedded(struct soap*, const char *, int, struct _wsse__Embedded *const*, const char *);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_in_PointerTo_wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_get_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__KeyIdentifier_DEFINED
#define SOAP_TYPE_PointerTo_wsse__KeyIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__KeyIdentifier(struct soap*, const char *, int, struct _wsse__KeyIdentifier *const*, const char *);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_in_PointerTo_wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_get_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Reference_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Reference(struct soap*, const char *, int, struct _wsse__Reference *const*, const char *);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_in_PointerTo_wsse__Reference(struct soap*, const char*, struct _wsse__Reference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_get_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsse__EncodedString_DEFINED
#define SOAP_TYPE_PointerTowsse__EncodedString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsse__EncodedString(struct soap*, const char *, int, struct wsse__EncodedString *const*, const char *);
SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_in_PointerTowsse__EncodedString(struct soap*, const char*, struct wsse__EncodedString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString *const*, const char*, const char*);
SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_get_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Password_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Password_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Password(struct soap*, const char *, int, struct _wsse__Password *const*, const char *);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_in_PointerTo_wsse__Password(struct soap*, const char*, struct _wsse__Password **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_get_PointerTo_wsse__Password(struct soap*, struct _wsse__Password **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetWarnings_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetWarnings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetWarnings(struct soap*, _tempuri__GetWarnings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetWarnings(struct soap*, const char *, int, _tempuri__GetWarnings *const*, const char *);
SOAP_FMAC3 _tempuri__GetWarnings ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetWarnings(struct soap*, const char*, _tempuri__GetWarnings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetWarnings(struct soap*, _tempuri__GetWarnings *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetWarnings ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetWarnings(struct soap*, _tempuri__GetWarnings **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__HasWarnings_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__HasWarnings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__HasWarnings(struct soap*, _tempuri__HasWarnings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__HasWarnings(struct soap*, const char *, int, _tempuri__HasWarnings *const*, const char *);
SOAP_FMAC3 _tempuri__HasWarnings ** SOAP_FMAC4 soap_in_PointerTo_tempuri__HasWarnings(struct soap*, const char*, _tempuri__HasWarnings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__HasWarnings(struct soap*, _tempuri__HasWarnings *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__HasWarnings ** SOAP_FMAC4 soap_get_PointerTo_tempuri__HasWarnings(struct soap*, _tempuri__HasWarnings **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetErrors_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetErrors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetErrors(struct soap*, _tempuri__GetErrors *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetErrors(struct soap*, const char *, int, _tempuri__GetErrors *const*, const char *);
SOAP_FMAC3 _tempuri__GetErrors ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetErrors(struct soap*, const char*, _tempuri__GetErrors **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetErrors(struct soap*, _tempuri__GetErrors *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetErrors ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetErrors(struct soap*, _tempuri__GetErrors **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__HasErrors_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__HasErrors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__HasErrors(struct soap*, _tempuri__HasErrors *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__HasErrors(struct soap*, const char *, int, _tempuri__HasErrors *const*, const char *);
SOAP_FMAC3 _tempuri__HasErrors ** SOAP_FMAC4 soap_in_PointerTo_tempuri__HasErrors(struct soap*, const char*, _tempuri__HasErrors **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__HasErrors(struct soap*, _tempuri__HasErrors *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__HasErrors ** SOAP_FMAC4 soap_get_PointerTo_tempuri__HasErrors(struct soap*, _tempuri__HasErrors **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetMessage_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetMessage(struct soap*, _tempuri__GetMessage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetMessage(struct soap*, const char *, int, _tempuri__GetMessage *const*, const char *);
SOAP_FMAC3 _tempuri__GetMessage ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetMessage(struct soap*, const char*, _tempuri__GetMessage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetMessage(struct soap*, _tempuri__GetMessage *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetMessage ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetMessage(struct soap*, _tempuri__GetMessage **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__HasMessage_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__HasMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__HasMessage(struct soap*, _tempuri__HasMessage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__HasMessage(struct soap*, const char *, int, _tempuri__HasMessage *const*, const char *);
SOAP_FMAC3 _tempuri__HasMessage ** SOAP_FMAC4 soap_in_PointerTo_tempuri__HasMessage(struct soap*, const char*, _tempuri__HasMessage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__HasMessage(struct soap*, _tempuri__HasMessage *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__HasMessage ** SOAP_FMAC4 soap_get_PointerTo_tempuri__HasMessage(struct soap*, _tempuri__HasMessage **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__IsSamplePlateTrayIn_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__IsSamplePlateTrayIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__IsSamplePlateTrayIn(struct soap*, _tempuri__IsSamplePlateTrayIn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__IsSamplePlateTrayIn(struct soap*, const char *, int, _tempuri__IsSamplePlateTrayIn *const*, const char *);
SOAP_FMAC3 _tempuri__IsSamplePlateTrayIn ** SOAP_FMAC4 soap_in_PointerTo_tempuri__IsSamplePlateTrayIn(struct soap*, const char*, _tempuri__IsSamplePlateTrayIn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__IsSamplePlateTrayIn(struct soap*, _tempuri__IsSamplePlateTrayIn *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__IsSamplePlateTrayIn ** SOAP_FMAC4 soap_get_PointerTo_tempuri__IsSamplePlateTrayIn(struct soap*, _tempuri__IsSamplePlateTrayIn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__IsChipDocked_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__IsChipDocked_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__IsChipDocked(struct soap*, _tempuri__IsChipDocked *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__IsChipDocked(struct soap*, const char *, int, _tempuri__IsChipDocked *const*, const char *);
SOAP_FMAC3 _tempuri__IsChipDocked ** SOAP_FMAC4 soap_in_PointerTo_tempuri__IsChipDocked(struct soap*, const char*, _tempuri__IsChipDocked **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__IsChipDocked(struct soap*, _tempuri__IsChipDocked *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__IsChipDocked ** SOAP_FMAC4 soap_get_PointerTo_tempuri__IsChipDocked(struct soap*, _tempuri__IsChipDocked **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetOperationMode_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetOperationMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetOperationMode(struct soap*, _tempuri__GetOperationMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetOperationMode(struct soap*, const char *, int, _tempuri__GetOperationMode *const*, const char *);
SOAP_FMAC3 _tempuri__GetOperationMode ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetOperationMode(struct soap*, const char*, _tempuri__GetOperationMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetOperationMode(struct soap*, _tempuri__GetOperationMode *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetOperationMode ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetOperationMode(struct soap*, _tempuri__GetOperationMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__RunMaintenanceProcedure_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__RunMaintenanceProcedure_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__RunMaintenanceProcedure(struct soap*, _tempuri__RunMaintenanceProcedure *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__RunMaintenanceProcedure(struct soap*, const char *, int, _tempuri__RunMaintenanceProcedure *const*, const char *);
SOAP_FMAC3 _tempuri__RunMaintenanceProcedure ** SOAP_FMAC4 soap_in_PointerTo_tempuri__RunMaintenanceProcedure(struct soap*, const char*, _tempuri__RunMaintenanceProcedure **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__RunMaintenanceProcedure(struct soap*, _tempuri__RunMaintenanceProcedure *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__RunMaintenanceProcedure ** SOAP_FMAC4 soap_get_PointerTo_tempuri__RunMaintenanceProcedure(struct soap*, _tempuri__RunMaintenanceProcedure **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetNamesOfMaintenanceProcedures_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetNamesOfMaintenanceProcedures_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetNamesOfMaintenanceProcedures(struct soap*, _tempuri__GetNamesOfMaintenanceProcedures *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetNamesOfMaintenanceProcedures(struct soap*, const char *, int, _tempuri__GetNamesOfMaintenanceProcedures *const*, const char *);
SOAP_FMAC3 _tempuri__GetNamesOfMaintenanceProcedures ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetNamesOfMaintenanceProcedures(struct soap*, const char*, _tempuri__GetNamesOfMaintenanceProcedures **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetNamesOfMaintenanceProcedures(struct soap*, _tempuri__GetNamesOfMaintenanceProcedures *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfMaintenanceProcedures ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetNamesOfMaintenanceProcedures(struct soap*, _tempuri__GetNamesOfMaintenanceProcedures **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetStandbyAfterFinish_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetStandbyAfterFinish_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetStandbyAfterFinish(struct soap*, _tempuri__GetStandbyAfterFinish *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetStandbyAfterFinish(struct soap*, const char *, int, _tempuri__GetStandbyAfterFinish *const*, const char *);
SOAP_FMAC3 _tempuri__GetStandbyAfterFinish ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetStandbyAfterFinish(struct soap*, const char*, _tempuri__GetStandbyAfterFinish **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetStandbyAfterFinish(struct soap*, _tempuri__GetStandbyAfterFinish *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetStandbyAfterFinish ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetStandbyAfterFinish(struct soap*, _tempuri__GetStandbyAfterFinish **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__SetStandbyAfterFinish_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__SetStandbyAfterFinish_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SetStandbyAfterFinish(struct soap*, _tempuri__SetStandbyAfterFinish *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SetStandbyAfterFinish(struct soap*, const char *, int, _tempuri__SetStandbyAfterFinish *const*, const char *);
SOAP_FMAC3 _tempuri__SetStandbyAfterFinish ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SetStandbyAfterFinish(struct soap*, const char*, _tempuri__SetStandbyAfterFinish **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SetStandbyAfterFinish(struct soap*, _tempuri__SetStandbyAfterFinish *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__SetStandbyAfterFinish ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SetStandbyAfterFinish(struct soap*, _tempuri__SetStandbyAfterFinish **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__LeaveStandby_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__LeaveStandby_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__LeaveStandby(struct soap*, _tempuri__LeaveStandby *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__LeaveStandby(struct soap*, const char *, int, _tempuri__LeaveStandby *const*, const char *);
SOAP_FMAC3 _tempuri__LeaveStandby ** SOAP_FMAC4 soap_in_PointerTo_tempuri__LeaveStandby(struct soap*, const char*, _tempuri__LeaveStandby **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__LeaveStandby(struct soap*, _tempuri__LeaveStandby *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__LeaveStandby ** SOAP_FMAC4 soap_get_PointerTo_tempuri__LeaveStandby(struct soap*, _tempuri__LeaveStandby **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__AbortScript_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__AbortScript_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__AbortScript(struct soap*, _tempuri__AbortScript *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__AbortScript(struct soap*, const char *, int, _tempuri__AbortScript *const*, const char *);
SOAP_FMAC3 _tempuri__AbortScript ** SOAP_FMAC4 soap_in_PointerTo_tempuri__AbortScript(struct soap*, const char*, _tempuri__AbortScript **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__AbortScript(struct soap*, _tempuri__AbortScript *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__AbortScript ** SOAP_FMAC4 soap_get_PointerTo_tempuri__AbortScript(struct soap*, _tempuri__AbortScript **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__ResetRunset_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__ResetRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ResetRunset(struct soap*, _tempuri__ResetRunset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ResetRunset(struct soap*, const char *, int, _tempuri__ResetRunset *const*, const char *);
SOAP_FMAC3 _tempuri__ResetRunset ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ResetRunset(struct soap*, const char*, _tempuri__ResetRunset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ResetRunset(struct soap*, _tempuri__ResetRunset *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__ResetRunset ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ResetRunset(struct soap*, _tempuri__ResetRunset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__ResumeRunset_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__ResumeRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ResumeRunset(struct soap*, _tempuri__ResumeRunset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ResumeRunset(struct soap*, const char *, int, _tempuri__ResumeRunset *const*, const char *);
SOAP_FMAC3 _tempuri__ResumeRunset ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ResumeRunset(struct soap*, const char*, _tempuri__ResumeRunset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ResumeRunset(struct soap*, _tempuri__ResumeRunset *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__ResumeRunset ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ResumeRunset(struct soap*, _tempuri__ResumeRunset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__PauseRunsetAfter_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__PauseRunsetAfter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__PauseRunsetAfter(struct soap*, _tempuri__PauseRunsetAfter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__PauseRunsetAfter(struct soap*, const char *, int, _tempuri__PauseRunsetAfter *const*, const char *);
SOAP_FMAC3 _tempuri__PauseRunsetAfter ** SOAP_FMAC4 soap_in_PointerTo_tempuri__PauseRunsetAfter(struct soap*, const char*, _tempuri__PauseRunsetAfter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__PauseRunsetAfter(struct soap*, _tempuri__PauseRunsetAfter *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__PauseRunsetAfter ** SOAP_FMAC4 soap_get_PointerTo_tempuri__PauseRunsetAfter(struct soap*, _tempuri__PauseRunsetAfter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__StartSelectedRunsetFrom_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__StartSelectedRunsetFrom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__StartSelectedRunsetFrom(struct soap*, _tempuri__StartSelectedRunsetFrom *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__StartSelectedRunsetFrom(struct soap*, const char *, int, _tempuri__StartSelectedRunsetFrom *const*, const char *);
SOAP_FMAC3 _tempuri__StartSelectedRunsetFrom ** SOAP_FMAC4 soap_in_PointerTo_tempuri__StartSelectedRunsetFrom(struct soap*, const char*, _tempuri__StartSelectedRunsetFrom **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__StartSelectedRunsetFrom(struct soap*, _tempuri__StartSelectedRunsetFrom *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__StartSelectedRunsetFrom ** SOAP_FMAC4 soap_get_PointerTo_tempuri__StartSelectedRunsetFrom(struct soap*, _tempuri__StartSelectedRunsetFrom **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__StartSelectedRunset_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__StartSelectedRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__StartSelectedRunset(struct soap*, _tempuri__StartSelectedRunset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__StartSelectedRunset(struct soap*, const char *, int, _tempuri__StartSelectedRunset *const*, const char *);
SOAP_FMAC3 _tempuri__StartSelectedRunset ** SOAP_FMAC4 soap_in_PointerTo_tempuri__StartSelectedRunset(struct soap*, const char*, _tempuri__StartSelectedRunset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__StartSelectedRunset(struct soap*, _tempuri__StartSelectedRunset *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__StartSelectedRunset ** SOAP_FMAC4 soap_get_PointerTo_tempuri__StartSelectedRunset(struct soap*, _tempuri__StartSelectedRunset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__MoveSamplePlateTrayIn_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__MoveSamplePlateTrayIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__MoveSamplePlateTrayIn(struct soap*, _tempuri__MoveSamplePlateTrayIn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__MoveSamplePlateTrayIn(struct soap*, const char *, int, _tempuri__MoveSamplePlateTrayIn *const*, const char *);
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayIn ** SOAP_FMAC4 soap_in_PointerTo_tempuri__MoveSamplePlateTrayIn(struct soap*, const char*, _tempuri__MoveSamplePlateTrayIn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__MoveSamplePlateTrayIn(struct soap*, _tempuri__MoveSamplePlateTrayIn *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayIn ** SOAP_FMAC4 soap_get_PointerTo_tempuri__MoveSamplePlateTrayIn(struct soap*, _tempuri__MoveSamplePlateTrayIn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__MoveSamplePlateTrayOut_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__MoveSamplePlateTrayOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__MoveSamplePlateTrayOut(struct soap*, _tempuri__MoveSamplePlateTrayOut *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__MoveSamplePlateTrayOut(struct soap*, const char *, int, _tempuri__MoveSamplePlateTrayOut *const*, const char *);
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayOut ** SOAP_FMAC4 soap_in_PointerTo_tempuri__MoveSamplePlateTrayOut(struct soap*, const char*, _tempuri__MoveSamplePlateTrayOut **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__MoveSamplePlateTrayOut(struct soap*, _tempuri__MoveSamplePlateTrayOut *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__MoveSamplePlateTrayOut ** SOAP_FMAC4 soap_get_PointerTo_tempuri__MoveSamplePlateTrayOut(struct soap*, _tempuri__MoveSamplePlateTrayOut **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetCurrentSamplePlateId_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetCurrentSamplePlateId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetCurrentSamplePlateId(struct soap*, _tempuri__GetCurrentSamplePlateId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetCurrentSamplePlateId(struct soap*, const char *, int, _tempuri__GetCurrentSamplePlateId *const*, const char *);
SOAP_FMAC3 _tempuri__GetCurrentSamplePlateId ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetCurrentSamplePlateId(struct soap*, const char*, _tempuri__GetCurrentSamplePlateId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetCurrentSamplePlateId(struct soap*, _tempuri__GetCurrentSamplePlateId *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetCurrentSamplePlateId ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetCurrentSamplePlateId(struct soap*, _tempuri__GetCurrentSamplePlateId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetSamplePlateId_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetSamplePlateId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetSamplePlateId(struct soap*, _tempuri__GetSamplePlateId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetSamplePlateId(struct soap*, const char *, int, _tempuri__GetSamplePlateId *const*, const char *);
SOAP_FMAC3 _tempuri__GetSamplePlateId ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetSamplePlateId(struct soap*, const char*, _tempuri__GetSamplePlateId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetSamplePlateId(struct soap*, _tempuri__GetSamplePlateId *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetSamplePlateId ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetSamplePlateId(struct soap*, _tempuri__GetSamplePlateId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__SetSamplePlateId_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__SetSamplePlateId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SetSamplePlateId(struct soap*, _tempuri__SetSamplePlateId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SetSamplePlateId(struct soap*, const char *, int, _tempuri__SetSamplePlateId *const*, const char *);
SOAP_FMAC3 _tempuri__SetSamplePlateId ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SetSamplePlateId(struct soap*, const char*, _tempuri__SetSamplePlateId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SetSamplePlateId(struct soap*, _tempuri__SetSamplePlateId *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__SetSamplePlateId ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SetSamplePlateId(struct soap*, _tempuri__SetSamplePlateId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__CreateRunset_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__CreateRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__CreateRunset(struct soap*, _tempuri__CreateRunset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__CreateRunset(struct soap*, const char *, int, _tempuri__CreateRunset *const*, const char *);
SOAP_FMAC3 _tempuri__CreateRunset ** SOAP_FMAC4 soap_in_PointerTo_tempuri__CreateRunset(struct soap*, const char*, _tempuri__CreateRunset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__CreateRunset(struct soap*, _tempuri__CreateRunset *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__CreateRunset ** SOAP_FMAC4 soap_get_PointerTo_tempuri__CreateRunset(struct soap*, _tempuri__CreateRunset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__SelectRunset_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__SelectRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SelectRunset(struct soap*, _tempuri__SelectRunset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SelectRunset(struct soap*, const char *, int, _tempuri__SelectRunset *const*, const char *);
SOAP_FMAC3 _tempuri__SelectRunset ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SelectRunset(struct soap*, const char*, _tempuri__SelectRunset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SelectRunset(struct soap*, _tempuri__SelectRunset *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__SelectRunset ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SelectRunset(struct soap*, _tempuri__SelectRunset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__SelectMethod_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__SelectMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SelectMethod(struct soap*, _tempuri__SelectMethod *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SelectMethod(struct soap*, const char *, int, _tempuri__SelectMethod *const*, const char *);
SOAP_FMAC3 _tempuri__SelectMethod ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SelectMethod(struct soap*, const char*, _tempuri__SelectMethod **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SelectMethod(struct soap*, _tempuri__SelectMethod *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__SelectMethod ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SelectMethod(struct soap*, _tempuri__SelectMethod **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetMethodNamesOfRunset_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetMethodNamesOfRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetMethodNamesOfRunset(struct soap*, _tempuri__GetMethodNamesOfRunset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetMethodNamesOfRunset(struct soap*, const char *, int, _tempuri__GetMethodNamesOfRunset *const*, const char *);
SOAP_FMAC3 _tempuri__GetMethodNamesOfRunset ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetMethodNamesOfRunset(struct soap*, const char*, _tempuri__GetMethodNamesOfRunset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetMethodNamesOfRunset(struct soap*, _tempuri__GetMethodNamesOfRunset *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetMethodNamesOfRunset ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetMethodNamesOfRunset(struct soap*, _tempuri__GetMethodNamesOfRunset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetAssayTypeOfRunset_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetAssayTypeOfRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetAssayTypeOfRunset(struct soap*, _tempuri__GetAssayTypeOfRunset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetAssayTypeOfRunset(struct soap*, const char *, int, _tempuri__GetAssayTypeOfRunset *const*, const char *);
SOAP_FMAC3 _tempuri__GetAssayTypeOfRunset ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetAssayTypeOfRunset(struct soap*, const char*, _tempuri__GetAssayTypeOfRunset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetAssayTypeOfRunset(struct soap*, _tempuri__GetAssayTypeOfRunset *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfRunset ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetAssayTypeOfRunset(struct soap*, _tempuri__GetAssayTypeOfRunset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetAssayTypeOfCurrentRunset_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetAssayTypeOfCurrentRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetAssayTypeOfCurrentRunset(struct soap*, _tempuri__GetAssayTypeOfCurrentRunset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetAssayTypeOfCurrentRunset(struct soap*, const char *, int, _tempuri__GetAssayTypeOfCurrentRunset *const*, const char *);
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentRunset ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetAssayTypeOfCurrentRunset(struct soap*, const char*, _tempuri__GetAssayTypeOfCurrentRunset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetAssayTypeOfCurrentRunset(struct soap*, _tempuri__GetAssayTypeOfCurrentRunset *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentRunset ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetAssayTypeOfCurrentRunset(struct soap*, _tempuri__GetAssayTypeOfCurrentRunset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetNameOfCurrentRunset_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetNameOfCurrentRunset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetNameOfCurrentRunset(struct soap*, _tempuri__GetNameOfCurrentRunset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetNameOfCurrentRunset(struct soap*, const char *, int, _tempuri__GetNameOfCurrentRunset *const*, const char *);
SOAP_FMAC3 _tempuri__GetNameOfCurrentRunset ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetNameOfCurrentRunset(struct soap*, const char*, _tempuri__GetNameOfCurrentRunset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetNameOfCurrentRunset(struct soap*, _tempuri__GetNameOfCurrentRunset *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetNameOfCurrentRunset ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetNameOfCurrentRunset(struct soap*, _tempuri__GetNameOfCurrentRunset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetAssayTypesOfAllRunsets_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetAssayTypesOfAllRunsets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetAssayTypesOfAllRunsets(struct soap*, _tempuri__GetAssayTypesOfAllRunsets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetAssayTypesOfAllRunsets(struct soap*, const char *, int, _tempuri__GetAssayTypesOfAllRunsets *const*, const char *);
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllRunsets ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetAssayTypesOfAllRunsets(struct soap*, const char*, _tempuri__GetAssayTypesOfAllRunsets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetAssayTypesOfAllRunsets(struct soap*, _tempuri__GetAssayTypesOfAllRunsets *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllRunsets ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetAssayTypesOfAllRunsets(struct soap*, _tempuri__GetAssayTypesOfAllRunsets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetNamesOfRunsetsOfAssayType_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetNamesOfRunsetsOfAssayType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetNamesOfRunsetsOfAssayType(struct soap*, _tempuri__GetNamesOfRunsetsOfAssayType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetNamesOfRunsetsOfAssayType(struct soap*, const char *, int, _tempuri__GetNamesOfRunsetsOfAssayType *const*, const char *);
SOAP_FMAC3 _tempuri__GetNamesOfRunsetsOfAssayType ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetNamesOfRunsetsOfAssayType(struct soap*, const char*, _tempuri__GetNamesOfRunsetsOfAssayType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetNamesOfRunsetsOfAssayType(struct soap*, _tempuri__GetNamesOfRunsetsOfAssayType *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfRunsetsOfAssayType ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetNamesOfRunsetsOfAssayType(struct soap*, _tempuri__GetNamesOfRunsetsOfAssayType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetNamesOfRunsets_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetNamesOfRunsets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetNamesOfRunsets(struct soap*, _tempuri__GetNamesOfRunsets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetNamesOfRunsets(struct soap*, const char *, int, _tempuri__GetNamesOfRunsets *const*, const char *);
SOAP_FMAC3 _tempuri__GetNamesOfRunsets ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetNamesOfRunsets(struct soap*, const char*, _tempuri__GetNamesOfRunsets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetNamesOfRunsets(struct soap*, _tempuri__GetNamesOfRunsets *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfRunsets ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetNamesOfRunsets(struct soap*, _tempuri__GetNamesOfRunsets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetAssayTypeOfMethod_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetAssayTypeOfMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetAssayTypeOfMethod(struct soap*, _tempuri__GetAssayTypeOfMethod *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetAssayTypeOfMethod(struct soap*, const char *, int, _tempuri__GetAssayTypeOfMethod *const*, const char *);
SOAP_FMAC3 _tempuri__GetAssayTypeOfMethod ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetAssayTypeOfMethod(struct soap*, const char*, _tempuri__GetAssayTypeOfMethod **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetAssayTypeOfMethod(struct soap*, _tempuri__GetAssayTypeOfMethod *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfMethod ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetAssayTypeOfMethod(struct soap*, _tempuri__GetAssayTypeOfMethod **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetAssayTypeOfCurrentMethod_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetAssayTypeOfCurrentMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetAssayTypeOfCurrentMethod(struct soap*, _tempuri__GetAssayTypeOfCurrentMethod *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetAssayTypeOfCurrentMethod(struct soap*, const char *, int, _tempuri__GetAssayTypeOfCurrentMethod *const*, const char *);
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentMethod ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetAssayTypeOfCurrentMethod(struct soap*, const char*, _tempuri__GetAssayTypeOfCurrentMethod **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetAssayTypeOfCurrentMethod(struct soap*, _tempuri__GetAssayTypeOfCurrentMethod *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypeOfCurrentMethod ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetAssayTypeOfCurrentMethod(struct soap*, _tempuri__GetAssayTypeOfCurrentMethod **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetNameOfCurrentMethod_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetNameOfCurrentMethod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetNameOfCurrentMethod(struct soap*, _tempuri__GetNameOfCurrentMethod *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetNameOfCurrentMethod(struct soap*, const char *, int, _tempuri__GetNameOfCurrentMethod *const*, const char *);
SOAP_FMAC3 _tempuri__GetNameOfCurrentMethod ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetNameOfCurrentMethod(struct soap*, const char*, _tempuri__GetNameOfCurrentMethod **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetNameOfCurrentMethod(struct soap*, _tempuri__GetNameOfCurrentMethod *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetNameOfCurrentMethod ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetNameOfCurrentMethod(struct soap*, _tempuri__GetNameOfCurrentMethod **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetAssayTypesOfAllMethods_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetAssayTypesOfAllMethods_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetAssayTypesOfAllMethods(struct soap*, _tempuri__GetAssayTypesOfAllMethods *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetAssayTypesOfAllMethods(struct soap*, const char *, int, _tempuri__GetAssayTypesOfAllMethods *const*, const char *);
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllMethods ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetAssayTypesOfAllMethods(struct soap*, const char*, _tempuri__GetAssayTypesOfAllMethods **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetAssayTypesOfAllMethods(struct soap*, _tempuri__GetAssayTypesOfAllMethods *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetAssayTypesOfAllMethods ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetAssayTypesOfAllMethods(struct soap*, _tempuri__GetAssayTypesOfAllMethods **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetNamesOfMethodsOfAssayType_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetNamesOfMethodsOfAssayType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetNamesOfMethodsOfAssayType(struct soap*, _tempuri__GetNamesOfMethodsOfAssayType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetNamesOfMethodsOfAssayType(struct soap*, const char *, int, _tempuri__GetNamesOfMethodsOfAssayType *const*, const char *);
SOAP_FMAC3 _tempuri__GetNamesOfMethodsOfAssayType ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetNamesOfMethodsOfAssayType(struct soap*, const char*, _tempuri__GetNamesOfMethodsOfAssayType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetNamesOfMethodsOfAssayType(struct soap*, _tempuri__GetNamesOfMethodsOfAssayType *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfMethodsOfAssayType ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetNamesOfMethodsOfAssayType(struct soap*, _tempuri__GetNamesOfMethodsOfAssayType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tempuri__GetNamesOfMethods_DEFINED
#define SOAP_TYPE_PointerTo_tempuri__GetNamesOfMethods_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetNamesOfMethods(struct soap*, _tempuri__GetNamesOfMethods *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetNamesOfMethods(struct soap*, const char *, int, _tempuri__GetNamesOfMethods *const*, const char *);
SOAP_FMAC3 _tempuri__GetNamesOfMethods ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetNamesOfMethods(struct soap*, const char*, _tempuri__GetNamesOfMethods **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetNamesOfMethods(struct soap*, _tempuri__GetNamesOfMethods *const*, const char*, const char*);
SOAP_FMAC3 _tempuri__GetNamesOfMethods ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetNamesOfMethods(struct soap*, _tempuri__GetNamesOfMethods **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToarr__ArrayOfstring_DEFINED
#define SOAP_TYPE_PointerToarr__ArrayOfstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfstring(struct soap*, arr__ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfstring(struct soap*, const char *, int, arr__ArrayOfstring *const*, const char *);
SOAP_FMAC3 arr__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfstring(struct soap*, const char*, arr__ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfstring(struct soap*, arr__ArrayOfstring *const*, const char*, const char*);
SOAP_FMAC3 arr__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfstring(struct soap*, arr__ArrayOfstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
