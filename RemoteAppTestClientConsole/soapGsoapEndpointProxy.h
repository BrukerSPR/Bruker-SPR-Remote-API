/* soapGsoapEndpointProxy.h
   Generated by gSOAP 2.8.89 for spr.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapGsoapEndpointProxy_H
#define soapGsoapEndpointProxy_H
#include "soapH.h"

    class SOAP_CMAC GsoapEndpointProxy {
      public:
        /// Context to manage proxy IO and data
        struct soap *soap;
        /// flag indicating that this context is owned by this proxy and should be deleted by the destructor
        bool soap_own;
        /// Endpoint URL of service 'GsoapEndpointProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in spr.h, if any
        /// Construct a proxy with new managing context
        GsoapEndpointProxy();
        /// Copy constructor
        GsoapEndpointProxy(const GsoapEndpointProxy& rhs);
        /// Construct proxy given a shared managing context
        GsoapEndpointProxy(struct soap*);
        /// Construct proxy given a shared managing context and endpoint URL
        GsoapEndpointProxy(struct soap*, const char *soap_endpoint_url);
        /// Constructor taking an endpoint URL
        GsoapEndpointProxy(const char *soap_endpoint_url);
        /// Constructor taking input and output mode flags for the new managing context
        GsoapEndpointProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        GsoapEndpointProxy(const char *soap_endpoint_url, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        GsoapEndpointProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context, when the context was allocated by the constructor
        virtual ~GsoapEndpointProxy();
        /// Initializer used by constructors
        virtual void GsoapEndpointProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual GsoapEndpointProxy *copy();
        /// Copy assignment
        GsoapEndpointProxy& operator=(const GsoapEndpointProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Add SOAP Header to message
        virtual void soap_header(struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, int __sizeIssuedTokens, struct wst__RequestSecurityTokenResponseCollectionType *wst__IssuedTokens, char *wst__RequestType, struct wsrm__SequenceType *wsrm__Sequence, int __sizeAckRequested, struct wsrm__AckRequestedType *wsrm__AckRequested, int __sizeSequenceAcknowledgement, struct _wsrm__SequenceAcknowledgement *wsrm__SequenceAcknowledgement, struct wsrm__SequenceFaultType *wsrm__SequenceFault);
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault subcode QName string (NULL when absent)
        virtual const char *soap_fault_subcode();
        /// Get SOAP Fault string/reason (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail XML string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        //
        /// Web service synchronous operation 'GetNamesOfMethods' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfMethods(_tempuri__GetNamesOfMethods *tempuri__GetNamesOfMethods, _tempuri__GetNamesOfMethodsResponse &tempuri__GetNamesOfMethodsResponse) { return this->GetNamesOfMethods(NULL, NULL, tempuri__GetNamesOfMethods, tempuri__GetNamesOfMethodsResponse); }
        /// Web service synchronous operation 'GetNamesOfMethods' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfMethods(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfMethods *tempuri__GetNamesOfMethods, _tempuri__GetNamesOfMethodsResponse &tempuri__GetNamesOfMethodsResponse) { return this->send_GetNamesOfMethods(soap_endpoint_url, soap_action, tempuri__GetNamesOfMethods) || this->recv_GetNamesOfMethods(tempuri__GetNamesOfMethodsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetNamesOfMethods' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetNamesOfMethods(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfMethods *tempuri__GetNamesOfMethods);
        /// Web service asynchronous operation 'recv_GetNamesOfMethods' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetNamesOfMethods(_tempuri__GetNamesOfMethodsResponse &tempuri__GetNamesOfMethodsResponse);
        //
        /// Web service synchronous operation 'GetNamesOfMethodsOfAssayType' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfMethodsOfAssayType(_tempuri__GetNamesOfMethodsOfAssayType *tempuri__GetNamesOfMethodsOfAssayType, _tempuri__GetNamesOfMethodsOfAssayTypeResponse &tempuri__GetNamesOfMethodsOfAssayTypeResponse) { return this->GetNamesOfMethodsOfAssayType(NULL, NULL, tempuri__GetNamesOfMethodsOfAssayType, tempuri__GetNamesOfMethodsOfAssayTypeResponse); }
        /// Web service synchronous operation 'GetNamesOfMethodsOfAssayType' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfMethodsOfAssayType(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfMethodsOfAssayType *tempuri__GetNamesOfMethodsOfAssayType, _tempuri__GetNamesOfMethodsOfAssayTypeResponse &tempuri__GetNamesOfMethodsOfAssayTypeResponse) { return this->send_GetNamesOfMethodsOfAssayType(soap_endpoint_url, soap_action, tempuri__GetNamesOfMethodsOfAssayType) || this->recv_GetNamesOfMethodsOfAssayType(tempuri__GetNamesOfMethodsOfAssayTypeResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetNamesOfMethodsOfAssayType' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetNamesOfMethodsOfAssayType(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfMethodsOfAssayType *tempuri__GetNamesOfMethodsOfAssayType);
        /// Web service asynchronous operation 'recv_GetNamesOfMethodsOfAssayType' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetNamesOfMethodsOfAssayType(_tempuri__GetNamesOfMethodsOfAssayTypeResponse &tempuri__GetNamesOfMethodsOfAssayTypeResponse);
        //
        /// Web service synchronous operation 'GetAssayTypesOfAllMethods' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypesOfAllMethods(_tempuri__GetAssayTypesOfAllMethods *tempuri__GetAssayTypesOfAllMethods, _tempuri__GetAssayTypesOfAllMethodsResponse &tempuri__GetAssayTypesOfAllMethodsResponse) { return this->GetAssayTypesOfAllMethods(NULL, NULL, tempuri__GetAssayTypesOfAllMethods, tempuri__GetAssayTypesOfAllMethodsResponse); }
        /// Web service synchronous operation 'GetAssayTypesOfAllMethods' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypesOfAllMethods(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypesOfAllMethods *tempuri__GetAssayTypesOfAllMethods, _tempuri__GetAssayTypesOfAllMethodsResponse &tempuri__GetAssayTypesOfAllMethodsResponse) { return this->send_GetAssayTypesOfAllMethods(soap_endpoint_url, soap_action, tempuri__GetAssayTypesOfAllMethods) || this->recv_GetAssayTypesOfAllMethods(tempuri__GetAssayTypesOfAllMethodsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAssayTypesOfAllMethods' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAssayTypesOfAllMethods(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypesOfAllMethods *tempuri__GetAssayTypesOfAllMethods);
        /// Web service asynchronous operation 'recv_GetAssayTypesOfAllMethods' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAssayTypesOfAllMethods(_tempuri__GetAssayTypesOfAllMethodsResponse &tempuri__GetAssayTypesOfAllMethodsResponse);
        //
        /// Web service synchronous operation 'GetNameOfCurrentMethod' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetNameOfCurrentMethod(_tempuri__GetNameOfCurrentMethod *tempuri__GetNameOfCurrentMethod, _tempuri__GetNameOfCurrentMethodResponse &tempuri__GetNameOfCurrentMethodResponse) { return this->GetNameOfCurrentMethod(NULL, NULL, tempuri__GetNameOfCurrentMethod, tempuri__GetNameOfCurrentMethodResponse); }
        /// Web service synchronous operation 'GetNameOfCurrentMethod' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetNameOfCurrentMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNameOfCurrentMethod *tempuri__GetNameOfCurrentMethod, _tempuri__GetNameOfCurrentMethodResponse &tempuri__GetNameOfCurrentMethodResponse) { return this->send_GetNameOfCurrentMethod(soap_endpoint_url, soap_action, tempuri__GetNameOfCurrentMethod) || this->recv_GetNameOfCurrentMethod(tempuri__GetNameOfCurrentMethodResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetNameOfCurrentMethod' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetNameOfCurrentMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNameOfCurrentMethod *tempuri__GetNameOfCurrentMethod);
        /// Web service asynchronous operation 'recv_GetNameOfCurrentMethod' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetNameOfCurrentMethod(_tempuri__GetNameOfCurrentMethodResponse &tempuri__GetNameOfCurrentMethodResponse);
        //
        /// Web service synchronous operation 'GetAssayTypeOfCurrentMethod' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypeOfCurrentMethod(_tempuri__GetAssayTypeOfCurrentMethod *tempuri__GetAssayTypeOfCurrentMethod, _tempuri__GetAssayTypeOfCurrentMethodResponse &tempuri__GetAssayTypeOfCurrentMethodResponse) { return this->GetAssayTypeOfCurrentMethod(NULL, NULL, tempuri__GetAssayTypeOfCurrentMethod, tempuri__GetAssayTypeOfCurrentMethodResponse); }
        /// Web service synchronous operation 'GetAssayTypeOfCurrentMethod' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypeOfCurrentMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfCurrentMethod *tempuri__GetAssayTypeOfCurrentMethod, _tempuri__GetAssayTypeOfCurrentMethodResponse &tempuri__GetAssayTypeOfCurrentMethodResponse) { return this->send_GetAssayTypeOfCurrentMethod(soap_endpoint_url, soap_action, tempuri__GetAssayTypeOfCurrentMethod) || this->recv_GetAssayTypeOfCurrentMethod(tempuri__GetAssayTypeOfCurrentMethodResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAssayTypeOfCurrentMethod' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAssayTypeOfCurrentMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfCurrentMethod *tempuri__GetAssayTypeOfCurrentMethod);
        /// Web service asynchronous operation 'recv_GetAssayTypeOfCurrentMethod' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAssayTypeOfCurrentMethod(_tempuri__GetAssayTypeOfCurrentMethodResponse &tempuri__GetAssayTypeOfCurrentMethodResponse);
        //
        /// Web service synchronous operation 'GetAssayTypeOfMethod' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypeOfMethod(_tempuri__GetAssayTypeOfMethod *tempuri__GetAssayTypeOfMethod, _tempuri__GetAssayTypeOfMethodResponse &tempuri__GetAssayTypeOfMethodResponse) { return this->GetAssayTypeOfMethod(NULL, NULL, tempuri__GetAssayTypeOfMethod, tempuri__GetAssayTypeOfMethodResponse); }
        /// Web service synchronous operation 'GetAssayTypeOfMethod' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypeOfMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfMethod *tempuri__GetAssayTypeOfMethod, _tempuri__GetAssayTypeOfMethodResponse &tempuri__GetAssayTypeOfMethodResponse) { return this->send_GetAssayTypeOfMethod(soap_endpoint_url, soap_action, tempuri__GetAssayTypeOfMethod) || this->recv_GetAssayTypeOfMethod(tempuri__GetAssayTypeOfMethodResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAssayTypeOfMethod' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAssayTypeOfMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfMethod *tempuri__GetAssayTypeOfMethod);
        /// Web service asynchronous operation 'recv_GetAssayTypeOfMethod' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAssayTypeOfMethod(_tempuri__GetAssayTypeOfMethodResponse &tempuri__GetAssayTypeOfMethodResponse);
        //
        /// Web service synchronous operation 'GetNamesOfRunsets' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfRunsets(_tempuri__GetNamesOfRunsets *tempuri__GetNamesOfRunsets, _tempuri__GetNamesOfRunsetsResponse &tempuri__GetNamesOfRunsetsResponse) { return this->GetNamesOfRunsets(NULL, NULL, tempuri__GetNamesOfRunsets, tempuri__GetNamesOfRunsetsResponse); }
        /// Web service synchronous operation 'GetNamesOfRunsets' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfRunsets(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfRunsets *tempuri__GetNamesOfRunsets, _tempuri__GetNamesOfRunsetsResponse &tempuri__GetNamesOfRunsetsResponse) { return this->send_GetNamesOfRunsets(soap_endpoint_url, soap_action, tempuri__GetNamesOfRunsets) || this->recv_GetNamesOfRunsets(tempuri__GetNamesOfRunsetsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetNamesOfRunsets' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetNamesOfRunsets(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfRunsets *tempuri__GetNamesOfRunsets);
        /// Web service asynchronous operation 'recv_GetNamesOfRunsets' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetNamesOfRunsets(_tempuri__GetNamesOfRunsetsResponse &tempuri__GetNamesOfRunsetsResponse);
        //
        /// Web service synchronous operation 'GetNamesOfRunsetsOfAssayType' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfRunsetsOfAssayType(_tempuri__GetNamesOfRunsetsOfAssayType *tempuri__GetNamesOfRunsetsOfAssayType, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse &tempuri__GetNamesOfRunsetsOfAssayTypeResponse) { return this->GetNamesOfRunsetsOfAssayType(NULL, NULL, tempuri__GetNamesOfRunsetsOfAssayType, tempuri__GetNamesOfRunsetsOfAssayTypeResponse); }
        /// Web service synchronous operation 'GetNamesOfRunsetsOfAssayType' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfRunsetsOfAssayType(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfRunsetsOfAssayType *tempuri__GetNamesOfRunsetsOfAssayType, _tempuri__GetNamesOfRunsetsOfAssayTypeResponse &tempuri__GetNamesOfRunsetsOfAssayTypeResponse) { return this->send_GetNamesOfRunsetsOfAssayType(soap_endpoint_url, soap_action, tempuri__GetNamesOfRunsetsOfAssayType) || this->recv_GetNamesOfRunsetsOfAssayType(tempuri__GetNamesOfRunsetsOfAssayTypeResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetNamesOfRunsetsOfAssayType' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetNamesOfRunsetsOfAssayType(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfRunsetsOfAssayType *tempuri__GetNamesOfRunsetsOfAssayType);
        /// Web service asynchronous operation 'recv_GetNamesOfRunsetsOfAssayType' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetNamesOfRunsetsOfAssayType(_tempuri__GetNamesOfRunsetsOfAssayTypeResponse &tempuri__GetNamesOfRunsetsOfAssayTypeResponse);
        //
        /// Web service synchronous operation 'GetAssayTypesOfAllRunsets' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypesOfAllRunsets(_tempuri__GetAssayTypesOfAllRunsets *tempuri__GetAssayTypesOfAllRunsets, _tempuri__GetAssayTypesOfAllRunsetsResponse &tempuri__GetAssayTypesOfAllRunsetsResponse) { return this->GetAssayTypesOfAllRunsets(NULL, NULL, tempuri__GetAssayTypesOfAllRunsets, tempuri__GetAssayTypesOfAllRunsetsResponse); }
        /// Web service synchronous operation 'GetAssayTypesOfAllRunsets' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypesOfAllRunsets(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypesOfAllRunsets *tempuri__GetAssayTypesOfAllRunsets, _tempuri__GetAssayTypesOfAllRunsetsResponse &tempuri__GetAssayTypesOfAllRunsetsResponse) { return this->send_GetAssayTypesOfAllRunsets(soap_endpoint_url, soap_action, tempuri__GetAssayTypesOfAllRunsets) || this->recv_GetAssayTypesOfAllRunsets(tempuri__GetAssayTypesOfAllRunsetsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAssayTypesOfAllRunsets' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAssayTypesOfAllRunsets(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypesOfAllRunsets *tempuri__GetAssayTypesOfAllRunsets);
        /// Web service asynchronous operation 'recv_GetAssayTypesOfAllRunsets' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAssayTypesOfAllRunsets(_tempuri__GetAssayTypesOfAllRunsetsResponse &tempuri__GetAssayTypesOfAllRunsetsResponse);
        //
        /// Web service synchronous operation 'GetNameOfCurrentRunset' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetNameOfCurrentRunset(_tempuri__GetNameOfCurrentRunset *tempuri__GetNameOfCurrentRunset, _tempuri__GetNameOfCurrentRunsetResponse &tempuri__GetNameOfCurrentRunsetResponse) { return this->GetNameOfCurrentRunset(NULL, NULL, tempuri__GetNameOfCurrentRunset, tempuri__GetNameOfCurrentRunsetResponse); }
        /// Web service synchronous operation 'GetNameOfCurrentRunset' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetNameOfCurrentRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNameOfCurrentRunset *tempuri__GetNameOfCurrentRunset, _tempuri__GetNameOfCurrentRunsetResponse &tempuri__GetNameOfCurrentRunsetResponse) { return this->send_GetNameOfCurrentRunset(soap_endpoint_url, soap_action, tempuri__GetNameOfCurrentRunset) || this->recv_GetNameOfCurrentRunset(tempuri__GetNameOfCurrentRunsetResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetNameOfCurrentRunset' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetNameOfCurrentRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNameOfCurrentRunset *tempuri__GetNameOfCurrentRunset);
        /// Web service asynchronous operation 'recv_GetNameOfCurrentRunset' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetNameOfCurrentRunset(_tempuri__GetNameOfCurrentRunsetResponse &tempuri__GetNameOfCurrentRunsetResponse);
        //
        /// Web service synchronous operation 'GetAssayTypeOfCurrentRunset' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypeOfCurrentRunset(_tempuri__GetAssayTypeOfCurrentRunset *tempuri__GetAssayTypeOfCurrentRunset, _tempuri__GetAssayTypeOfCurrentRunsetResponse &tempuri__GetAssayTypeOfCurrentRunsetResponse) { return this->GetAssayTypeOfCurrentRunset(NULL, NULL, tempuri__GetAssayTypeOfCurrentRunset, tempuri__GetAssayTypeOfCurrentRunsetResponse); }
        /// Web service synchronous operation 'GetAssayTypeOfCurrentRunset' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypeOfCurrentRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfCurrentRunset *tempuri__GetAssayTypeOfCurrentRunset, _tempuri__GetAssayTypeOfCurrentRunsetResponse &tempuri__GetAssayTypeOfCurrentRunsetResponse) { return this->send_GetAssayTypeOfCurrentRunset(soap_endpoint_url, soap_action, tempuri__GetAssayTypeOfCurrentRunset) || this->recv_GetAssayTypeOfCurrentRunset(tempuri__GetAssayTypeOfCurrentRunsetResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAssayTypeOfCurrentRunset' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAssayTypeOfCurrentRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfCurrentRunset *tempuri__GetAssayTypeOfCurrentRunset);
        /// Web service asynchronous operation 'recv_GetAssayTypeOfCurrentRunset' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAssayTypeOfCurrentRunset(_tempuri__GetAssayTypeOfCurrentRunsetResponse &tempuri__GetAssayTypeOfCurrentRunsetResponse);
        //
        /// Web service synchronous operation 'GetAssayTypeOfRunset' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypeOfRunset(_tempuri__GetAssayTypeOfRunset *tempuri__GetAssayTypeOfRunset, _tempuri__GetAssayTypeOfRunsetResponse &tempuri__GetAssayTypeOfRunsetResponse) { return this->GetAssayTypeOfRunset(NULL, NULL, tempuri__GetAssayTypeOfRunset, tempuri__GetAssayTypeOfRunsetResponse); }
        /// Web service synchronous operation 'GetAssayTypeOfRunset' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssayTypeOfRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfRunset *tempuri__GetAssayTypeOfRunset, _tempuri__GetAssayTypeOfRunsetResponse &tempuri__GetAssayTypeOfRunsetResponse) { return this->send_GetAssayTypeOfRunset(soap_endpoint_url, soap_action, tempuri__GetAssayTypeOfRunset) || this->recv_GetAssayTypeOfRunset(tempuri__GetAssayTypeOfRunsetResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAssayTypeOfRunset' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAssayTypeOfRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetAssayTypeOfRunset *tempuri__GetAssayTypeOfRunset);
        /// Web service asynchronous operation 'recv_GetAssayTypeOfRunset' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAssayTypeOfRunset(_tempuri__GetAssayTypeOfRunsetResponse &tempuri__GetAssayTypeOfRunsetResponse);
        //
        /// Web service synchronous operation 'GetMethodNamesOfRunset' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetMethodNamesOfRunset(_tempuri__GetMethodNamesOfRunset *tempuri__GetMethodNamesOfRunset, _tempuri__GetMethodNamesOfRunsetResponse &tempuri__GetMethodNamesOfRunsetResponse) { return this->GetMethodNamesOfRunset(NULL, NULL, tempuri__GetMethodNamesOfRunset, tempuri__GetMethodNamesOfRunsetResponse); }
        /// Web service synchronous operation 'GetMethodNamesOfRunset' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetMethodNamesOfRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetMethodNamesOfRunset *tempuri__GetMethodNamesOfRunset, _tempuri__GetMethodNamesOfRunsetResponse &tempuri__GetMethodNamesOfRunsetResponse) { return this->send_GetMethodNamesOfRunset(soap_endpoint_url, soap_action, tempuri__GetMethodNamesOfRunset) || this->recv_GetMethodNamesOfRunset(tempuri__GetMethodNamesOfRunsetResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetMethodNamesOfRunset' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetMethodNamesOfRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetMethodNamesOfRunset *tempuri__GetMethodNamesOfRunset);
        /// Web service asynchronous operation 'recv_GetMethodNamesOfRunset' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetMethodNamesOfRunset(_tempuri__GetMethodNamesOfRunsetResponse &tempuri__GetMethodNamesOfRunsetResponse);
        //
        /// Web service synchronous operation 'SelectMethod' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SelectMethod(_tempuri__SelectMethod *tempuri__SelectMethod, _tempuri__SelectMethodResponse &tempuri__SelectMethodResponse) { return this->SelectMethod(NULL, NULL, tempuri__SelectMethod, tempuri__SelectMethodResponse); }
        /// Web service synchronous operation 'SelectMethod' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SelectMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__SelectMethod *tempuri__SelectMethod, _tempuri__SelectMethodResponse &tempuri__SelectMethodResponse) { return this->send_SelectMethod(soap_endpoint_url, soap_action, tempuri__SelectMethod) || this->recv_SelectMethod(tempuri__SelectMethodResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SelectMethod' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SelectMethod(const char *soap_endpoint_url, const char *soap_action, _tempuri__SelectMethod *tempuri__SelectMethod);
        /// Web service asynchronous operation 'recv_SelectMethod' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SelectMethod(_tempuri__SelectMethodResponse &tempuri__SelectMethodResponse);
        //
        /// Web service synchronous operation 'SelectRunset' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SelectRunset(_tempuri__SelectRunset *tempuri__SelectRunset, _tempuri__SelectRunsetResponse &tempuri__SelectRunsetResponse) { return this->SelectRunset(NULL, NULL, tempuri__SelectRunset, tempuri__SelectRunsetResponse); }
        /// Web service synchronous operation 'SelectRunset' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SelectRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__SelectRunset *tempuri__SelectRunset, _tempuri__SelectRunsetResponse &tempuri__SelectRunsetResponse) { return this->send_SelectRunset(soap_endpoint_url, soap_action, tempuri__SelectRunset) || this->recv_SelectRunset(tempuri__SelectRunsetResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SelectRunset' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SelectRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__SelectRunset *tempuri__SelectRunset);
        /// Web service asynchronous operation 'recv_SelectRunset' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SelectRunset(_tempuri__SelectRunsetResponse &tempuri__SelectRunsetResponse);
        //
        /// Web service synchronous operation 'CreateRunset' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int CreateRunset(_tempuri__CreateRunset *tempuri__CreateRunset, _tempuri__CreateRunsetResponse &tempuri__CreateRunsetResponse) { return this->CreateRunset(NULL, NULL, tempuri__CreateRunset, tempuri__CreateRunsetResponse); }
        /// Web service synchronous operation 'CreateRunset' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int CreateRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__CreateRunset *tempuri__CreateRunset, _tempuri__CreateRunsetResponse &tempuri__CreateRunsetResponse) { return this->send_CreateRunset(soap_endpoint_url, soap_action, tempuri__CreateRunset) || this->recv_CreateRunset(tempuri__CreateRunsetResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_CreateRunset' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_CreateRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__CreateRunset *tempuri__CreateRunset);
        /// Web service asynchronous operation 'recv_CreateRunset' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_CreateRunset(_tempuri__CreateRunsetResponse &tempuri__CreateRunsetResponse);
        //
        /// Web service synchronous operation 'SetSamplePlateId' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetSamplePlateId(_tempuri__SetSamplePlateId *tempuri__SetSamplePlateId, _tempuri__SetSamplePlateIdResponse &tempuri__SetSamplePlateIdResponse) { return this->SetSamplePlateId(NULL, NULL, tempuri__SetSamplePlateId, tempuri__SetSamplePlateIdResponse); }
        /// Web service synchronous operation 'SetSamplePlateId' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetSamplePlateId(const char *soap_endpoint_url, const char *soap_action, _tempuri__SetSamplePlateId *tempuri__SetSamplePlateId, _tempuri__SetSamplePlateIdResponse &tempuri__SetSamplePlateIdResponse) { return this->send_SetSamplePlateId(soap_endpoint_url, soap_action, tempuri__SetSamplePlateId) || this->recv_SetSamplePlateId(tempuri__SetSamplePlateIdResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetSamplePlateId' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetSamplePlateId(const char *soap_endpoint_url, const char *soap_action, _tempuri__SetSamplePlateId *tempuri__SetSamplePlateId);
        /// Web service asynchronous operation 'recv_SetSamplePlateId' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetSamplePlateId(_tempuri__SetSamplePlateIdResponse &tempuri__SetSamplePlateIdResponse);
        //
        /// Web service synchronous operation 'GetSamplePlateId' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetSamplePlateId(_tempuri__GetSamplePlateId *tempuri__GetSamplePlateId, _tempuri__GetSamplePlateIdResponse &tempuri__GetSamplePlateIdResponse) { return this->GetSamplePlateId(NULL, NULL, tempuri__GetSamplePlateId, tempuri__GetSamplePlateIdResponse); }
        /// Web service synchronous operation 'GetSamplePlateId' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetSamplePlateId(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetSamplePlateId *tempuri__GetSamplePlateId, _tempuri__GetSamplePlateIdResponse &tempuri__GetSamplePlateIdResponse) { return this->send_GetSamplePlateId(soap_endpoint_url, soap_action, tempuri__GetSamplePlateId) || this->recv_GetSamplePlateId(tempuri__GetSamplePlateIdResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetSamplePlateId' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetSamplePlateId(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetSamplePlateId *tempuri__GetSamplePlateId);
        /// Web service asynchronous operation 'recv_GetSamplePlateId' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetSamplePlateId(_tempuri__GetSamplePlateIdResponse &tempuri__GetSamplePlateIdResponse);
        //
        /// Web service synchronous operation 'GetCurrentSamplePlateId' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetCurrentSamplePlateId(_tempuri__GetCurrentSamplePlateId *tempuri__GetCurrentSamplePlateId, _tempuri__GetCurrentSamplePlateIdResponse &tempuri__GetCurrentSamplePlateIdResponse) { return this->GetCurrentSamplePlateId(NULL, NULL, tempuri__GetCurrentSamplePlateId, tempuri__GetCurrentSamplePlateIdResponse); }
        /// Web service synchronous operation 'GetCurrentSamplePlateId' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetCurrentSamplePlateId(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetCurrentSamplePlateId *tempuri__GetCurrentSamplePlateId, _tempuri__GetCurrentSamplePlateIdResponse &tempuri__GetCurrentSamplePlateIdResponse) { return this->send_GetCurrentSamplePlateId(soap_endpoint_url, soap_action, tempuri__GetCurrentSamplePlateId) || this->recv_GetCurrentSamplePlateId(tempuri__GetCurrentSamplePlateIdResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetCurrentSamplePlateId' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetCurrentSamplePlateId(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetCurrentSamplePlateId *tempuri__GetCurrentSamplePlateId);
        /// Web service asynchronous operation 'recv_GetCurrentSamplePlateId' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetCurrentSamplePlateId(_tempuri__GetCurrentSamplePlateIdResponse &tempuri__GetCurrentSamplePlateIdResponse);
        //
        /// Web service synchronous operation 'MoveSamplePlateTrayOut' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int MoveSamplePlateTrayOut(_tempuri__MoveSamplePlateTrayOut *tempuri__MoveSamplePlateTrayOut, _tempuri__MoveSamplePlateTrayOutResponse &tempuri__MoveSamplePlateTrayOutResponse) { return this->MoveSamplePlateTrayOut(NULL, NULL, tempuri__MoveSamplePlateTrayOut, tempuri__MoveSamplePlateTrayOutResponse); }
        /// Web service synchronous operation 'MoveSamplePlateTrayOut' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int MoveSamplePlateTrayOut(const char *soap_endpoint_url, const char *soap_action, _tempuri__MoveSamplePlateTrayOut *tempuri__MoveSamplePlateTrayOut, _tempuri__MoveSamplePlateTrayOutResponse &tempuri__MoveSamplePlateTrayOutResponse) { return this->send_MoveSamplePlateTrayOut(soap_endpoint_url, soap_action, tempuri__MoveSamplePlateTrayOut) || this->recv_MoveSamplePlateTrayOut(tempuri__MoveSamplePlateTrayOutResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_MoveSamplePlateTrayOut' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_MoveSamplePlateTrayOut(const char *soap_endpoint_url, const char *soap_action, _tempuri__MoveSamplePlateTrayOut *tempuri__MoveSamplePlateTrayOut);
        /// Web service asynchronous operation 'recv_MoveSamplePlateTrayOut' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_MoveSamplePlateTrayOut(_tempuri__MoveSamplePlateTrayOutResponse &tempuri__MoveSamplePlateTrayOutResponse);
        //
        /// Web service synchronous operation 'MoveSamplePlateTrayIn' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int MoveSamplePlateTrayIn(_tempuri__MoveSamplePlateTrayIn *tempuri__MoveSamplePlateTrayIn, _tempuri__MoveSamplePlateTrayInResponse &tempuri__MoveSamplePlateTrayInResponse) { return this->MoveSamplePlateTrayIn(NULL, NULL, tempuri__MoveSamplePlateTrayIn, tempuri__MoveSamplePlateTrayInResponse); }
        /// Web service synchronous operation 'MoveSamplePlateTrayIn' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int MoveSamplePlateTrayIn(const char *soap_endpoint_url, const char *soap_action, _tempuri__MoveSamplePlateTrayIn *tempuri__MoveSamplePlateTrayIn, _tempuri__MoveSamplePlateTrayInResponse &tempuri__MoveSamplePlateTrayInResponse) { return this->send_MoveSamplePlateTrayIn(soap_endpoint_url, soap_action, tempuri__MoveSamplePlateTrayIn) || this->recv_MoveSamplePlateTrayIn(tempuri__MoveSamplePlateTrayInResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_MoveSamplePlateTrayIn' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_MoveSamplePlateTrayIn(const char *soap_endpoint_url, const char *soap_action, _tempuri__MoveSamplePlateTrayIn *tempuri__MoveSamplePlateTrayIn);
        /// Web service asynchronous operation 'recv_MoveSamplePlateTrayIn' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_MoveSamplePlateTrayIn(_tempuri__MoveSamplePlateTrayInResponse &tempuri__MoveSamplePlateTrayInResponse);
        //
        /// Web service synchronous operation 'StartSelectedRunset' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int StartSelectedRunset(_tempuri__StartSelectedRunset *tempuri__StartSelectedRunset, _tempuri__StartSelectedRunsetResponse &tempuri__StartSelectedRunsetResponse) { return this->StartSelectedRunset(NULL, NULL, tempuri__StartSelectedRunset, tempuri__StartSelectedRunsetResponse); }
        /// Web service synchronous operation 'StartSelectedRunset' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int StartSelectedRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__StartSelectedRunset *tempuri__StartSelectedRunset, _tempuri__StartSelectedRunsetResponse &tempuri__StartSelectedRunsetResponse) { return this->send_StartSelectedRunset(soap_endpoint_url, soap_action, tempuri__StartSelectedRunset) || this->recv_StartSelectedRunset(tempuri__StartSelectedRunsetResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_StartSelectedRunset' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_StartSelectedRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__StartSelectedRunset *tempuri__StartSelectedRunset);
        /// Web service asynchronous operation 'recv_StartSelectedRunset' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_StartSelectedRunset(_tempuri__StartSelectedRunsetResponse &tempuri__StartSelectedRunsetResponse);
        //
        /// Web service synchronous operation 'StartSelectedRunsetFrom' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int StartSelectedRunsetFrom(_tempuri__StartSelectedRunsetFrom *tempuri__StartSelectedRunsetFrom, _tempuri__StartSelectedRunsetFromResponse &tempuri__StartSelectedRunsetFromResponse) { return this->StartSelectedRunsetFrom(NULL, NULL, tempuri__StartSelectedRunsetFrom, tempuri__StartSelectedRunsetFromResponse); }
        /// Web service synchronous operation 'StartSelectedRunsetFrom' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int StartSelectedRunsetFrom(const char *soap_endpoint_url, const char *soap_action, _tempuri__StartSelectedRunsetFrom *tempuri__StartSelectedRunsetFrom, _tempuri__StartSelectedRunsetFromResponse &tempuri__StartSelectedRunsetFromResponse) { return this->send_StartSelectedRunsetFrom(soap_endpoint_url, soap_action, tempuri__StartSelectedRunsetFrom) || this->recv_StartSelectedRunsetFrom(tempuri__StartSelectedRunsetFromResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_StartSelectedRunsetFrom' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_StartSelectedRunsetFrom(const char *soap_endpoint_url, const char *soap_action, _tempuri__StartSelectedRunsetFrom *tempuri__StartSelectedRunsetFrom);
        /// Web service asynchronous operation 'recv_StartSelectedRunsetFrom' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_StartSelectedRunsetFrom(_tempuri__StartSelectedRunsetFromResponse &tempuri__StartSelectedRunsetFromResponse);
        //
        /// Web service synchronous operation 'PauseRunsetAfter' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int PauseRunsetAfter(_tempuri__PauseRunsetAfter *tempuri__PauseRunsetAfter, _tempuri__PauseRunsetAfterResponse &tempuri__PauseRunsetAfterResponse) { return this->PauseRunsetAfter(NULL, NULL, tempuri__PauseRunsetAfter, tempuri__PauseRunsetAfterResponse); }
        /// Web service synchronous operation 'PauseRunsetAfter' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int PauseRunsetAfter(const char *soap_endpoint_url, const char *soap_action, _tempuri__PauseRunsetAfter *tempuri__PauseRunsetAfter, _tempuri__PauseRunsetAfterResponse &tempuri__PauseRunsetAfterResponse) { return this->send_PauseRunsetAfter(soap_endpoint_url, soap_action, tempuri__PauseRunsetAfter) || this->recv_PauseRunsetAfter(tempuri__PauseRunsetAfterResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_PauseRunsetAfter' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_PauseRunsetAfter(const char *soap_endpoint_url, const char *soap_action, _tempuri__PauseRunsetAfter *tempuri__PauseRunsetAfter);
        /// Web service asynchronous operation 'recv_PauseRunsetAfter' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_PauseRunsetAfter(_tempuri__PauseRunsetAfterResponse &tempuri__PauseRunsetAfterResponse);
        //
        /// Web service synchronous operation 'ResumeRunset' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int ResumeRunset(_tempuri__ResumeRunset *tempuri__ResumeRunset, _tempuri__ResumeRunsetResponse &tempuri__ResumeRunsetResponse) { return this->ResumeRunset(NULL, NULL, tempuri__ResumeRunset, tempuri__ResumeRunsetResponse); }
        /// Web service synchronous operation 'ResumeRunset' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int ResumeRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__ResumeRunset *tempuri__ResumeRunset, _tempuri__ResumeRunsetResponse &tempuri__ResumeRunsetResponse) { return this->send_ResumeRunset(soap_endpoint_url, soap_action, tempuri__ResumeRunset) || this->recv_ResumeRunset(tempuri__ResumeRunsetResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_ResumeRunset' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_ResumeRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__ResumeRunset *tempuri__ResumeRunset);
        /// Web service asynchronous operation 'recv_ResumeRunset' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_ResumeRunset(_tempuri__ResumeRunsetResponse &tempuri__ResumeRunsetResponse);
        //
        /// Web service synchronous operation 'ResetRunset' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int ResetRunset(_tempuri__ResetRunset *tempuri__ResetRunset, _tempuri__ResetRunsetResponse &tempuri__ResetRunsetResponse) { return this->ResetRunset(NULL, NULL, tempuri__ResetRunset, tempuri__ResetRunsetResponse); }
        /// Web service synchronous operation 'ResetRunset' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int ResetRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__ResetRunset *tempuri__ResetRunset, _tempuri__ResetRunsetResponse &tempuri__ResetRunsetResponse) { return this->send_ResetRunset(soap_endpoint_url, soap_action, tempuri__ResetRunset) || this->recv_ResetRunset(tempuri__ResetRunsetResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_ResetRunset' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_ResetRunset(const char *soap_endpoint_url, const char *soap_action, _tempuri__ResetRunset *tempuri__ResetRunset);
        /// Web service asynchronous operation 'recv_ResetRunset' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_ResetRunset(_tempuri__ResetRunsetResponse &tempuri__ResetRunsetResponse);
        //
        /// Web service synchronous operation 'AbortScript' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int AbortScript(_tempuri__AbortScript *tempuri__AbortScript, _tempuri__AbortScriptResponse &tempuri__AbortScriptResponse) { return this->AbortScript(NULL, NULL, tempuri__AbortScript, tempuri__AbortScriptResponse); }
        /// Web service synchronous operation 'AbortScript' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int AbortScript(const char *soap_endpoint_url, const char *soap_action, _tempuri__AbortScript *tempuri__AbortScript, _tempuri__AbortScriptResponse &tempuri__AbortScriptResponse) { return this->send_AbortScript(soap_endpoint_url, soap_action, tempuri__AbortScript) || this->recv_AbortScript(tempuri__AbortScriptResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_AbortScript' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_AbortScript(const char *soap_endpoint_url, const char *soap_action, _tempuri__AbortScript *tempuri__AbortScript);
        /// Web service asynchronous operation 'recv_AbortScript' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_AbortScript(_tempuri__AbortScriptResponse &tempuri__AbortScriptResponse);
        //
        /// Web service synchronous operation 'LeaveStandby' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int LeaveStandby(_tempuri__LeaveStandby *tempuri__LeaveStandby, _tempuri__LeaveStandbyResponse &tempuri__LeaveStandbyResponse) { return this->LeaveStandby(NULL, NULL, tempuri__LeaveStandby, tempuri__LeaveStandbyResponse); }
        /// Web service synchronous operation 'LeaveStandby' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int LeaveStandby(const char *soap_endpoint_url, const char *soap_action, _tempuri__LeaveStandby *tempuri__LeaveStandby, _tempuri__LeaveStandbyResponse &tempuri__LeaveStandbyResponse) { return this->send_LeaveStandby(soap_endpoint_url, soap_action, tempuri__LeaveStandby) || this->recv_LeaveStandby(tempuri__LeaveStandbyResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_LeaveStandby' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_LeaveStandby(const char *soap_endpoint_url, const char *soap_action, _tempuri__LeaveStandby *tempuri__LeaveStandby);
        /// Web service asynchronous operation 'recv_LeaveStandby' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_LeaveStandby(_tempuri__LeaveStandbyResponse &tempuri__LeaveStandbyResponse);
        //
        /// Web service synchronous operation 'SetStandbyAfterFinish' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetStandbyAfterFinish(_tempuri__SetStandbyAfterFinish *tempuri__SetStandbyAfterFinish, _tempuri__SetStandbyAfterFinishResponse &tempuri__SetStandbyAfterFinishResponse) { return this->SetStandbyAfterFinish(NULL, NULL, tempuri__SetStandbyAfterFinish, tempuri__SetStandbyAfterFinishResponse); }
        /// Web service synchronous operation 'SetStandbyAfterFinish' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetStandbyAfterFinish(const char *soap_endpoint_url, const char *soap_action, _tempuri__SetStandbyAfterFinish *tempuri__SetStandbyAfterFinish, _tempuri__SetStandbyAfterFinishResponse &tempuri__SetStandbyAfterFinishResponse) { return this->send_SetStandbyAfterFinish(soap_endpoint_url, soap_action, tempuri__SetStandbyAfterFinish) || this->recv_SetStandbyAfterFinish(tempuri__SetStandbyAfterFinishResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetStandbyAfterFinish' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetStandbyAfterFinish(const char *soap_endpoint_url, const char *soap_action, _tempuri__SetStandbyAfterFinish *tempuri__SetStandbyAfterFinish);
        /// Web service asynchronous operation 'recv_SetStandbyAfterFinish' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetStandbyAfterFinish(_tempuri__SetStandbyAfterFinishResponse &tempuri__SetStandbyAfterFinishResponse);
        //
        /// Web service synchronous operation 'GetStandbyAfterFinish' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetStandbyAfterFinish(_tempuri__GetStandbyAfterFinish *tempuri__GetStandbyAfterFinish, _tempuri__GetStandbyAfterFinishResponse &tempuri__GetStandbyAfterFinishResponse) { return this->GetStandbyAfterFinish(NULL, NULL, tempuri__GetStandbyAfterFinish, tempuri__GetStandbyAfterFinishResponse); }
        /// Web service synchronous operation 'GetStandbyAfterFinish' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetStandbyAfterFinish(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetStandbyAfterFinish *tempuri__GetStandbyAfterFinish, _tempuri__GetStandbyAfterFinishResponse &tempuri__GetStandbyAfterFinishResponse) { return this->send_GetStandbyAfterFinish(soap_endpoint_url, soap_action, tempuri__GetStandbyAfterFinish) || this->recv_GetStandbyAfterFinish(tempuri__GetStandbyAfterFinishResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetStandbyAfterFinish' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetStandbyAfterFinish(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetStandbyAfterFinish *tempuri__GetStandbyAfterFinish);
        /// Web service asynchronous operation 'recv_GetStandbyAfterFinish' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetStandbyAfterFinish(_tempuri__GetStandbyAfterFinishResponse &tempuri__GetStandbyAfterFinishResponse);
        //
        /// Web service synchronous operation 'GetNamesOfMaintenanceProcedures' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfMaintenanceProcedures(_tempuri__GetNamesOfMaintenanceProcedures *tempuri__GetNamesOfMaintenanceProcedures, _tempuri__GetNamesOfMaintenanceProceduresResponse &tempuri__GetNamesOfMaintenanceProceduresResponse) { return this->GetNamesOfMaintenanceProcedures(NULL, NULL, tempuri__GetNamesOfMaintenanceProcedures, tempuri__GetNamesOfMaintenanceProceduresResponse); }
        /// Web service synchronous operation 'GetNamesOfMaintenanceProcedures' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetNamesOfMaintenanceProcedures(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfMaintenanceProcedures *tempuri__GetNamesOfMaintenanceProcedures, _tempuri__GetNamesOfMaintenanceProceduresResponse &tempuri__GetNamesOfMaintenanceProceduresResponse) { return this->send_GetNamesOfMaintenanceProcedures(soap_endpoint_url, soap_action, tempuri__GetNamesOfMaintenanceProcedures) || this->recv_GetNamesOfMaintenanceProcedures(tempuri__GetNamesOfMaintenanceProceduresResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetNamesOfMaintenanceProcedures' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetNamesOfMaintenanceProcedures(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetNamesOfMaintenanceProcedures *tempuri__GetNamesOfMaintenanceProcedures);
        /// Web service asynchronous operation 'recv_GetNamesOfMaintenanceProcedures' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetNamesOfMaintenanceProcedures(_tempuri__GetNamesOfMaintenanceProceduresResponse &tempuri__GetNamesOfMaintenanceProceduresResponse);
        //
        /// Web service synchronous operation 'RunMaintenanceProcedure' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int RunMaintenanceProcedure(_tempuri__RunMaintenanceProcedure *tempuri__RunMaintenanceProcedure, _tempuri__RunMaintenanceProcedureResponse &tempuri__RunMaintenanceProcedureResponse) { return this->RunMaintenanceProcedure(NULL, NULL, tempuri__RunMaintenanceProcedure, tempuri__RunMaintenanceProcedureResponse); }
        /// Web service synchronous operation 'RunMaintenanceProcedure' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int RunMaintenanceProcedure(const char *soap_endpoint_url, const char *soap_action, _tempuri__RunMaintenanceProcedure *tempuri__RunMaintenanceProcedure, _tempuri__RunMaintenanceProcedureResponse &tempuri__RunMaintenanceProcedureResponse) { return this->send_RunMaintenanceProcedure(soap_endpoint_url, soap_action, tempuri__RunMaintenanceProcedure) || this->recv_RunMaintenanceProcedure(tempuri__RunMaintenanceProcedureResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_RunMaintenanceProcedure' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_RunMaintenanceProcedure(const char *soap_endpoint_url, const char *soap_action, _tempuri__RunMaintenanceProcedure *tempuri__RunMaintenanceProcedure);
        /// Web service asynchronous operation 'recv_RunMaintenanceProcedure' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_RunMaintenanceProcedure(_tempuri__RunMaintenanceProcedureResponse &tempuri__RunMaintenanceProcedureResponse);
        //
        /// Web service synchronous operation 'GetOperationMode' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetOperationMode(_tempuri__GetOperationMode *tempuri__GetOperationMode, _tempuri__GetOperationModeResponse &tempuri__GetOperationModeResponse) { return this->GetOperationMode(NULL, NULL, tempuri__GetOperationMode, tempuri__GetOperationModeResponse); }
        /// Web service synchronous operation 'GetOperationMode' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetOperationMode(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetOperationMode *tempuri__GetOperationMode, _tempuri__GetOperationModeResponse &tempuri__GetOperationModeResponse) { return this->send_GetOperationMode(soap_endpoint_url, soap_action, tempuri__GetOperationMode) || this->recv_GetOperationMode(tempuri__GetOperationModeResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetOperationMode' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetOperationMode(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetOperationMode *tempuri__GetOperationMode);
        /// Web service asynchronous operation 'recv_GetOperationMode' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetOperationMode(_tempuri__GetOperationModeResponse &tempuri__GetOperationModeResponse);
        //
        /// Web service synchronous operation 'IsChipDocked' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int IsChipDocked(_tempuri__IsChipDocked *tempuri__IsChipDocked, _tempuri__IsChipDockedResponse &tempuri__IsChipDockedResponse) { return this->IsChipDocked(NULL, NULL, tempuri__IsChipDocked, tempuri__IsChipDockedResponse); }
        /// Web service synchronous operation 'IsChipDocked' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int IsChipDocked(const char *soap_endpoint_url, const char *soap_action, _tempuri__IsChipDocked *tempuri__IsChipDocked, _tempuri__IsChipDockedResponse &tempuri__IsChipDockedResponse) { return this->send_IsChipDocked(soap_endpoint_url, soap_action, tempuri__IsChipDocked) || this->recv_IsChipDocked(tempuri__IsChipDockedResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_IsChipDocked' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_IsChipDocked(const char *soap_endpoint_url, const char *soap_action, _tempuri__IsChipDocked *tempuri__IsChipDocked);
        /// Web service asynchronous operation 'recv_IsChipDocked' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_IsChipDocked(_tempuri__IsChipDockedResponse &tempuri__IsChipDockedResponse);
        //
        /// Web service synchronous operation 'IsSamplePlateTrayIn' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int IsSamplePlateTrayIn(_tempuri__IsSamplePlateTrayIn *tempuri__IsSamplePlateTrayIn, _tempuri__IsSamplePlateTrayInResponse &tempuri__IsSamplePlateTrayInResponse) { return this->IsSamplePlateTrayIn(NULL, NULL, tempuri__IsSamplePlateTrayIn, tempuri__IsSamplePlateTrayInResponse); }
        /// Web service synchronous operation 'IsSamplePlateTrayIn' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int IsSamplePlateTrayIn(const char *soap_endpoint_url, const char *soap_action, _tempuri__IsSamplePlateTrayIn *tempuri__IsSamplePlateTrayIn, _tempuri__IsSamplePlateTrayInResponse &tempuri__IsSamplePlateTrayInResponse) { return this->send_IsSamplePlateTrayIn(soap_endpoint_url, soap_action, tempuri__IsSamplePlateTrayIn) || this->recv_IsSamplePlateTrayIn(tempuri__IsSamplePlateTrayInResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_IsSamplePlateTrayIn' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_IsSamplePlateTrayIn(const char *soap_endpoint_url, const char *soap_action, _tempuri__IsSamplePlateTrayIn *tempuri__IsSamplePlateTrayIn);
        /// Web service asynchronous operation 'recv_IsSamplePlateTrayIn' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_IsSamplePlateTrayIn(_tempuri__IsSamplePlateTrayInResponse &tempuri__IsSamplePlateTrayInResponse);
        //
        /// Web service synchronous operation 'HasMessage' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int HasMessage(_tempuri__HasMessage *tempuri__HasMessage, _tempuri__HasMessageResponse &tempuri__HasMessageResponse) { return this->HasMessage(NULL, NULL, tempuri__HasMessage, tempuri__HasMessageResponse); }
        /// Web service synchronous operation 'HasMessage' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int HasMessage(const char *soap_endpoint_url, const char *soap_action, _tempuri__HasMessage *tempuri__HasMessage, _tempuri__HasMessageResponse &tempuri__HasMessageResponse) { return this->send_HasMessage(soap_endpoint_url, soap_action, tempuri__HasMessage) || this->recv_HasMessage(tempuri__HasMessageResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_HasMessage' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_HasMessage(const char *soap_endpoint_url, const char *soap_action, _tempuri__HasMessage *tempuri__HasMessage);
        /// Web service asynchronous operation 'recv_HasMessage' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_HasMessage(_tempuri__HasMessageResponse &tempuri__HasMessageResponse);
        //
        /// Web service synchronous operation 'GetMessage' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetMessage(_tempuri__GetMessage *tempuri__GetMessage, _tempuri__GetMessageResponse &tempuri__GetMessageResponse) { return this->GetMessage(NULL, NULL, tempuri__GetMessage, tempuri__GetMessageResponse); }
        /// Web service synchronous operation 'GetMessage' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetMessage(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetMessage *tempuri__GetMessage, _tempuri__GetMessageResponse &tempuri__GetMessageResponse) { return this->send_GetMessage(soap_endpoint_url, soap_action, tempuri__GetMessage) || this->recv_GetMessage(tempuri__GetMessageResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetMessage' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetMessage(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetMessage *tempuri__GetMessage);
        /// Web service asynchronous operation 'recv_GetMessage' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetMessage(_tempuri__GetMessageResponse &tempuri__GetMessageResponse);
        //
        /// Web service synchronous operation 'HasErrors' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int HasErrors(_tempuri__HasErrors *tempuri__HasErrors, _tempuri__HasErrorsResponse &tempuri__HasErrorsResponse) { return this->HasErrors(NULL, NULL, tempuri__HasErrors, tempuri__HasErrorsResponse); }
        /// Web service synchronous operation 'HasErrors' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int HasErrors(const char *soap_endpoint_url, const char *soap_action, _tempuri__HasErrors *tempuri__HasErrors, _tempuri__HasErrorsResponse &tempuri__HasErrorsResponse) { return this->send_HasErrors(soap_endpoint_url, soap_action, tempuri__HasErrors) || this->recv_HasErrors(tempuri__HasErrorsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_HasErrors' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_HasErrors(const char *soap_endpoint_url, const char *soap_action, _tempuri__HasErrors *tempuri__HasErrors);
        /// Web service asynchronous operation 'recv_HasErrors' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_HasErrors(_tempuri__HasErrorsResponse &tempuri__HasErrorsResponse);
        //
        /// Web service synchronous operation 'GetErrors' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetErrors(_tempuri__GetErrors *tempuri__GetErrors, _tempuri__GetErrorsResponse &tempuri__GetErrorsResponse) { return this->GetErrors(NULL, NULL, tempuri__GetErrors, tempuri__GetErrorsResponse); }
        /// Web service synchronous operation 'GetErrors' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetErrors(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetErrors *tempuri__GetErrors, _tempuri__GetErrorsResponse &tempuri__GetErrorsResponse) { return this->send_GetErrors(soap_endpoint_url, soap_action, tempuri__GetErrors) || this->recv_GetErrors(tempuri__GetErrorsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetErrors' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetErrors(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetErrors *tempuri__GetErrors);
        /// Web service asynchronous operation 'recv_GetErrors' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetErrors(_tempuri__GetErrorsResponse &tempuri__GetErrorsResponse);
        //
        /// Web service synchronous operation 'HasWarnings' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int HasWarnings(_tempuri__HasWarnings *tempuri__HasWarnings, _tempuri__HasWarningsResponse &tempuri__HasWarningsResponse) { return this->HasWarnings(NULL, NULL, tempuri__HasWarnings, tempuri__HasWarningsResponse); }
        /// Web service synchronous operation 'HasWarnings' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int HasWarnings(const char *soap_endpoint_url, const char *soap_action, _tempuri__HasWarnings *tempuri__HasWarnings, _tempuri__HasWarningsResponse &tempuri__HasWarningsResponse) { return this->send_HasWarnings(soap_endpoint_url, soap_action, tempuri__HasWarnings) || this->recv_HasWarnings(tempuri__HasWarningsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_HasWarnings' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_HasWarnings(const char *soap_endpoint_url, const char *soap_action, _tempuri__HasWarnings *tempuri__HasWarnings);
        /// Web service asynchronous operation 'recv_HasWarnings' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_HasWarnings(_tempuri__HasWarningsResponse &tempuri__HasWarningsResponse);
        //
        /// Web service synchronous operation 'GetWarnings' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetWarnings(_tempuri__GetWarnings *tempuri__GetWarnings, _tempuri__GetWarningsResponse &tempuri__GetWarningsResponse) { return this->GetWarnings(NULL, NULL, tempuri__GetWarnings, tempuri__GetWarningsResponse); }
        /// Web service synchronous operation 'GetWarnings' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetWarnings(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetWarnings *tempuri__GetWarnings, _tempuri__GetWarningsResponse &tempuri__GetWarningsResponse) { return this->send_GetWarnings(soap_endpoint_url, soap_action, tempuri__GetWarnings) || this->recv_GetWarnings(tempuri__GetWarningsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetWarnings' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetWarnings(const char *soap_endpoint_url, const char *soap_action, _tempuri__GetWarnings *tempuri__GetWarnings);
        /// Web service asynchronous operation 'recv_GetWarnings' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetWarnings(_tempuri__GetWarningsResponse &tempuri__GetWarningsResponse);
    };
#endif
