
// File generated by Wsutil Compiler version 1.0098 
// This file defines C/C++ functions, callbacks, types that correspond to operations,
// and types specified in WSDL and XSD files processed by Wsutil compiler. The generated 
// type definitions, function and callback declarations can be used with various 
// Web Services APIs either in applications that send and receive requests to and 
// from a running web service, or in the implementation of web services, or in both. 
//
// If Wsutil has generated this file from a WSDL file, the file may contain up to three 
// sets of C/C++ definitions. The first set consists of function declarations that can be 
// used in calling operations on a running web service from client applications. 
// The second set consists of callback declarations that can be used in the 
// implementation of web services.  
// The third set contains definitions C/C++ structures that are used for serialization of 
// C/C++ types to Schema types defined in the WSDL file.
//
// The set of function declarations for web services clients may contain the 
// following declaration: 
//
//    HRESULT WINAPI DefaultBinding_ICalculator_Add(
//       _In_ WS_SERVICE_PROXY* _serviceProxy,
//       _In_ int a, 
//       _In_ int b, 
//       _Out_ int* result, 
//       _In_ WS_HEAP* _heap,
//       _In_opt_ WS_CALL_PROPERTY* _callProperties,
//       _In_ const ULONG _callPropertyCount,
//       _In_opt_ const WS_ASYNC_CONTEXT*_asyncContext,
//       _In_opt_ WS_ERROR* _error);
//
// This function can be called from an application code to request ICalculator web 
// service to perform operation Add using two integers a and b as input data.
// Once the web service processes this request and sends the result back,
// the result is returned to the caller of this function in the "result" parameter.
// A WS_SERVICE_PROXY must be created using WsCreateServiceProxy() function
// before this proxy function can be invoked.
//
// The set of callbacks for implementation of web services may contain the following 
// definition of a callback: 
//
//    typedef HRESULT (CALLBACK* DefaultBinding_ICalculator_AddCallback) (
//       _In_ const WS_OPERATION_CONTEXT* _context,
//       _In_ int a, 
//       _In_ int b, 
//       _Out_ int* result, 
//       _In_ const WS_ASYNC_CONTEXT* _asyncContext,
//       _In_ WS_ERROR* _error); 
//
//    typedef struct DefaultBinding_ICalculatorFunctionTable 
//    {
//         DefaultBinding_ICalculator_AddCallback DefaultBinding_ICalculator_Add;
//    } DefaultBinding_ICalculatorFunctionTable;
//
// This definition can be used to implement a function that defines the Add operation 
// as a part of an ICalculator web service. Once this callback is implemented and 
// the web service is deployed and running, if a client applications attempts to 
// execute the operation Add, the implementation of this callback is called and 
// it receives two integers a and b as input data and it returns a third integer 
// that is the result of the operation. A WS_SERVICE_ENDPOINT must be filled out, 
// and its contract field set to instance of such a function table.  
// WsCreateServiceHost may then be used to register the endpoint as a service.
// 
// The set with definitions of C/C++ structures may contain a definition of the following 
// structure:
//    typedef struct ContactInfo 
//    {
//			WCHAR*  name;
//			WCHAR*  email;
//			__int64 contactID;
//	  } ContactInfo;
//
// This structure corresponds to the following complex type defined in the WSDL file:
//    <s:complexType name="ContactInfo">
//      <s:sequence>
//        <s:element minOccurs="1" maxOccurs="1" name="name" type="s:string" />
//        <s:element minOccurs="1" maxOccurs="1" name="email" type="s:string" />
//        <s:element minOccurs="1" maxOccurs="1" name="contactID" type="s:long" />
//      </s:sequence>
//    </s:complexType>
//
// For more information about content of this file, please see the documentation for
// Wsutil compiler.
// If Wsutil generates this file from a WSDL file and policy processing is enabled using
// policy switch, the file may contain declaration of functions that can be used 
// for creating a proxy to a web service or an endpoint of a web service. 
// For example, the file may contain declaration of the following function:
//
//    HRESULT DefaultBinding_ICalculator_CreateServiceProxy(
//    _In_ WS_HTTP_SSL_BINDING_TEMPLATE* templateValue,
//    _In_reads_opt_(proxyPropertyCount) const WS_PROXY_PROPERTY* proxyProperties,
//    _In_ const ULONG proxyPropertyCount,
//    _Outptr_ WS_SERVICE_PROXY** proxy,
//    _In_opt_ WS_ERROR* error);
//
// This function can be called from application code to create a service
// proxy object. A service proxy must be created before any request can be sent 
// to the web service.
//
// Also, the file may contain declaration of the following function:
//
//    HRESULT DefaultBinding_ICalculator_CreateServiceEndpoint(
//    _In_ WS_HTTP_SSL_BINDING_TEMPLATE* templateValue,
//    _In_opt_ WS_STRING address,
//    _In_opt_ struct DefaultBinding_ICalculatorFunctionTable* functionTable,
//    _In_opt_ WS_SERVICE_SECURITY_CALLBACK authorizationCallback,
//    _In_reads_opt_(endpointPropertyCount) WS_SERVICE_ENDPOINT_PROPERTY* endpointProperties,
//    _In_ const ULONG endpointPropertyCount,
//    _In_ WS_HEAP* heap,
//    _Outptr_ WS_SERVICE_ENDPOINT** serviceEndpoint,
//    _In_opt_ WS_ERROR* error);
//
// This function can be used to create a Service Host object, which has to be 
// created before a web services starts receiving requests from its clients.
//
// For more information about content of this file, please see the documentation for
// Wsutil compiler.
#if _MSC_VER > 1000 
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif

// The following client functions were generated:

//     GsoapEndpoint_GetNamesOfMethods
//     GsoapEndpoint_GetNamesOfMethodsOfAssayType
//     GsoapEndpoint_GetAssayTypesOfAllMethods
//     GsoapEndpoint_GetNameOfCurrentMethod
//     GsoapEndpoint_GetAssayTypeOfCurrentMethod
//     GsoapEndpoint_GetAssayTypeOfMethod
//     GsoapEndpoint_GetNamesOfRunsets
//     GsoapEndpoint_GetNamesOfRunsetsOfAssayType
//     GsoapEndpoint_GetAssayTypesOfAllRunsets
//     GsoapEndpoint_GetNameOfCurrentRunset
//     GsoapEndpoint_GetAssayTypeOfCurrentRunset
//     GsoapEndpoint_GetAssayTypeOfRunset
//     GsoapEndpoint_GetMethodNamesOfRunset
//     GsoapEndpoint_SelectMethod
//     GsoapEndpoint_SelectRunset
//     GsoapEndpoint_CreateRunset
//     GsoapEndpoint_SetSamplePlateId
//     GsoapEndpoint_GetSamplePlateId
//     GsoapEndpoint_GetCurrentSamplePlateId
//     GsoapEndpoint_MoveSamplePlateTrayOut
//     GsoapEndpoint_MoveSamplePlateTrayIn
//     GsoapEndpoint_StartSelectedRunset
//     GsoapEndpoint_StartSelectedRunsetFrom
//     GsoapEndpoint_PauseRunsetAfter
//     GsoapEndpoint_ResumeRunset
//     GsoapEndpoint_ResetRunset
//     GsoapEndpoint_AbortScript
//     GsoapEndpoint_LeaveStandby
//     GsoapEndpoint_SetStandbyAfterFinish
//     GsoapEndpoint_GetStandbyAfterFinish
//     GsoapEndpoint_GetNamesOfMaintenanceProcedures
//     GsoapEndpoint_RunMaintenanceProcedure
//     GsoapEndpoint_GetOperationMode
//     GsoapEndpoint_IsChipDocked
//     GsoapEndpoint_IsSamplePlateTrayIn
//     GsoapEndpoint_HasMessage
//     GsoapEndpoint_GetMessage
//     GsoapEndpoint_HasErrors
//     GsoapEndpoint_GetErrors
//     GsoapEndpoint_HasWarnings
//     GsoapEndpoint_GetWarnings
//     SoapEndpoint_GetNamesOfMethods
//     SoapEndpoint_GetNamesOfMethodsOfAssayType
//     SoapEndpoint_GetAssayTypesOfAllMethods
//     SoapEndpoint_GetNameOfCurrentMethod
//     SoapEndpoint_GetAssayTypeOfCurrentMethod
//     SoapEndpoint_GetAssayTypeOfMethod
//     SoapEndpoint_GetNamesOfRunsets
//     SoapEndpoint_GetNamesOfRunsetsOfAssayType
//     SoapEndpoint_GetAssayTypesOfAllRunsets
//     SoapEndpoint_GetNameOfCurrentRunset
//     SoapEndpoint_GetAssayTypeOfCurrentRunset
//     SoapEndpoint_GetAssayTypeOfRunset
//     SoapEndpoint_GetMethodNamesOfRunset
//     SoapEndpoint_SelectMethod
//     SoapEndpoint_SelectRunset
//     SoapEndpoint_CreateRunset
//     SoapEndpoint_SetSamplePlateId
//     SoapEndpoint_GetSamplePlateId
//     SoapEndpoint_GetCurrentSamplePlateId
//     SoapEndpoint_MoveSamplePlateTrayOut
//     SoapEndpoint_MoveSamplePlateTrayIn
//     SoapEndpoint_StartSelectedRunset
//     SoapEndpoint_StartSelectedRunsetFrom
//     SoapEndpoint_PauseRunsetAfter
//     SoapEndpoint_ResumeRunset
//     SoapEndpoint_ResetRunset
//     SoapEndpoint_AbortScript
//     SoapEndpoint_LeaveStandby
//     SoapEndpoint_SetStandbyAfterFinish
//     SoapEndpoint_GetStandbyAfterFinish
//     SoapEndpoint_GetNamesOfMaintenanceProcedures
//     SoapEndpoint_RunMaintenanceProcedure
//     SoapEndpoint_GetOperationMode
//     SoapEndpoint_IsChipDocked
//     SoapEndpoint_IsSamplePlateTrayIn
//     SoapEndpoint_HasMessage
//     SoapEndpoint_GetMessage
//     SoapEndpoint_HasErrors
//     SoapEndpoint_GetErrors
//     SoapEndpoint_HasWarnings
//     SoapEndpoint_GetWarnings
//     NetTcpEndpoint_GetNamesOfMethods
//     NetTcpEndpoint_GetNamesOfMethodsOfAssayType
//     NetTcpEndpoint_GetAssayTypesOfAllMethods
//     NetTcpEndpoint_GetNameOfCurrentMethod
//     NetTcpEndpoint_GetAssayTypeOfCurrentMethod
//     NetTcpEndpoint_GetAssayTypeOfMethod
//     NetTcpEndpoint_GetNamesOfRunsets
//     NetTcpEndpoint_GetNamesOfRunsetsOfAssayType
//     NetTcpEndpoint_GetAssayTypesOfAllRunsets
//     NetTcpEndpoint_GetNameOfCurrentRunset
//     NetTcpEndpoint_GetAssayTypeOfCurrentRunset
//     NetTcpEndpoint_GetAssayTypeOfRunset
//     NetTcpEndpoint_GetMethodNamesOfRunset
//     NetTcpEndpoint_SelectMethod
//     NetTcpEndpoint_SelectRunset
//     NetTcpEndpoint_CreateRunset
//     NetTcpEndpoint_SetSamplePlateId
//     NetTcpEndpoint_GetSamplePlateId
//     NetTcpEndpoint_GetCurrentSamplePlateId
//     NetTcpEndpoint_MoveSamplePlateTrayOut
//     NetTcpEndpoint_MoveSamplePlateTrayIn
//     NetTcpEndpoint_StartSelectedRunset
//     NetTcpEndpoint_StartSelectedRunsetFrom
//     NetTcpEndpoint_PauseRunsetAfter
//     NetTcpEndpoint_ResumeRunset
//     NetTcpEndpoint_ResetRunset
//     NetTcpEndpoint_AbortScript
//     NetTcpEndpoint_LeaveStandby
//     NetTcpEndpoint_SetStandbyAfterFinish
//     NetTcpEndpoint_GetStandbyAfterFinish
//     NetTcpEndpoint_GetNamesOfMaintenanceProcedures
//     NetTcpEndpoint_RunMaintenanceProcedure
//     NetTcpEndpoint_GetOperationMode
//     NetTcpEndpoint_IsChipDocked
//     NetTcpEndpoint_IsSamplePlateTrayIn
//     NetTcpEndpoint_HasMessage
//     NetTcpEndpoint_GetMessage
//     NetTcpEndpoint_HasErrors
//     NetTcpEndpoint_GetErrors
//     NetTcpEndpoint_HasWarnings
//     NetTcpEndpoint_GetWarnings

// The following server function tables were generated:

//     struct GsoapEndpointFunctionTable
//     struct SoapEndpointFunctionTable
//     struct NetTcpEndpointFunctionTable

// the following policy helpers were generated:

//  GsoapEndpoint_CreateServiceProxy;
//  GsoapEndpoint_CreateServiceEndpoint;
//  NetTcpEndpoint_CreateServiceProxy;
//  NetTcpEndpoint_CreateServiceEndpoint;

// The following header files must be included in this order before this one

// #include <WebServices.h>
// #include "schemas.microsoft.com.2003.10.Serialization.Arrays.xsd.h"
// #include "tempuri.org.xsd.h"

////////////////////////////////////////////////
// Policy helper routines
////////////////////////////////////////////////

//  WS_CHANNEL_PROPERTY_ENCODING = WS_ENCODING_XML_UTF8,
//  WS_CHANNEL_PROPERTY_ADDRESSING_VERSION = WS_ADDRESSING_VERSION_TRANSPORT,
//  WS_ENVELOPE_VERSION = WS_ENVELOPE_VERSION_SOAP_1_2,
// client channel type: WS_CHANNEL_TYPE_REQUEST, service endpoint channel type: WS_CHANNEL_TYPE_REPLY

HRESULT GsoapEndpoint_CreateServiceProxy(
    _In_opt_ WS_HTTP_BINDING_TEMPLATE* templateValue,
    _In_reads_opt_(proxyPropertyCount) const WS_PROXY_PROPERTY* proxyProperties,
    _In_ const ULONG proxyPropertyCount,
    _Outptr_ WS_SERVICE_PROXY** _serviceProxy,
    _In_opt_ WS_ERROR* error);

struct GsoapEndpointFunctionTable;
HRESULT GsoapEndpoint_CreateServiceEndpoint(
    _In_opt_ WS_HTTP_BINDING_TEMPLATE* templateValue,
    _In_opt_ CONST WS_STRING* address,
    _In_opt_ struct GsoapEndpointFunctionTable* functionTable,
    _In_opt_ WS_SERVICE_SECURITY_CALLBACK authorizationCallback,
    _In_reads_opt_(endpointPropertyCount) WS_SERVICE_ENDPOINT_PROPERTY* endpointProperties,
    _In_ const ULONG endpointPropertyCount,
    _In_ WS_HEAP* heap,
    _Outptr_ WS_SERVICE_ENDPOINT** serviceEndpoint,
    _In_opt_ WS_ERROR* error);

////////////////////////////////////////////////
// Client functions definitions
////////////////////////////////////////////////

// operation: GsoapEndpoint_GetNamesOfMethods
HRESULT WINAPI GsoapEndpoint_GetNamesOfMethods(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetNamesOfMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsResultCount) WCHAR*** GetNamesOfMethodsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetNamesOfMethodsOfAssayType
HRESULT WINAPI GsoapEndpoint_GetNamesOfMethodsOfAssayType(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfMethodsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsOfAssayTypeResultCount) WCHAR*** GetNamesOfMethodsOfAssayTypeResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetAssayTypesOfAllMethods
HRESULT WINAPI GsoapEndpoint_GetAssayTypesOfAllMethods(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetAssayTypesOfAllMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllMethodsResultCount) WCHAR*** GetAssayTypesOfAllMethodsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetNameOfCurrentMethod
HRESULT WINAPI GsoapEndpoint_GetNameOfCurrentMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetAssayTypeOfCurrentMethod
HRESULT WINAPI GsoapEndpoint_GetAssayTypeOfCurrentMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetAssayTypeOfMethod
HRESULT WINAPI GsoapEndpoint_GetAssayTypeOfMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* methodName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetNamesOfRunsets
HRESULT WINAPI GsoapEndpoint_GetNamesOfRunsets(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetNamesOfRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsResultCount) WCHAR*** GetNamesOfRunsetsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetNamesOfRunsetsOfAssayType
HRESULT WINAPI GsoapEndpoint_GetNamesOfRunsetsOfAssayType(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfRunsetsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsOfAssayTypeResultCount) WCHAR*** GetNamesOfRunsetsOfAssayTypeResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetAssayTypesOfAllRunsets
HRESULT WINAPI GsoapEndpoint_GetAssayTypesOfAllRunsets(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetAssayTypesOfAllRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllRunsetsResultCount) WCHAR*** GetAssayTypesOfAllRunsetsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetNameOfCurrentRunset
HRESULT WINAPI GsoapEndpoint_GetNameOfCurrentRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetAssayTypeOfCurrentRunset
HRESULT WINAPI GsoapEndpoint_GetAssayTypeOfCurrentRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetAssayTypeOfRunset
HRESULT WINAPI GsoapEndpoint_GetAssayTypeOfRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* runsetName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetMethodNamesOfRunset
HRESULT WINAPI GsoapEndpoint_GetMethodNamesOfRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ unsigned int* GetMethodNamesOfRunsetResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMethodNamesOfRunsetResultCount) WCHAR*** GetMethodNamesOfRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_SelectMethod
HRESULT WINAPI GsoapEndpoint_SelectMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* methodName, 
    _Out_ BOOL* SelectMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_SelectRunset
HRESULT WINAPI GsoapEndpoint_SelectRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ BOOL* SelectRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_CreateRunset
HRESULT WINAPI GsoapEndpoint_CreateRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ unsigned int methodNamesCount, 
    _In_reads_opt_(methodNamesCount) WCHAR** methodNames, 
    _Out_ BOOL* CreateRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_SetSamplePlateId
HRESULT WINAPI GsoapEndpoint_SetSamplePlateId(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int methodIndex, 
    _In_opt_z_ WCHAR* plateId, 
    _Out_ BOOL* SetSamplePlateIdResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetSamplePlateId
HRESULT WINAPI GsoapEndpoint_GetSamplePlateId(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int methodIndex, 
    _Outptr_result_maybenull_z_ WCHAR** GetSamplePlateIdResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetCurrentSamplePlateId
HRESULT WINAPI GsoapEndpoint_GetCurrentSamplePlateId(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetCurrentSamplePlateIdResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_MoveSamplePlateTrayOut
HRESULT WINAPI GsoapEndpoint_MoveSamplePlateTrayOut(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* MoveSamplePlateTrayOutResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_MoveSamplePlateTrayIn
HRESULT WINAPI GsoapEndpoint_MoveSamplePlateTrayIn(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* MoveSamplePlateTrayInResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_StartSelectedRunset
HRESULT WINAPI GsoapEndpoint_StartSelectedRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* StartSelectedRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_StartSelectedRunsetFrom
HRESULT WINAPI GsoapEndpoint_StartSelectedRunsetFrom(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int methodIndex, 
    _Out_ BOOL* StartSelectedRunsetFromResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_PauseRunsetAfter
HRESULT WINAPI GsoapEndpoint_PauseRunsetAfter(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int pauseMode, 
    _Out_ BOOL* PauseRunsetAfterResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_ResumeRunset
HRESULT WINAPI GsoapEndpoint_ResumeRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* ResumeRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_ResetRunset
HRESULT WINAPI GsoapEndpoint_ResetRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* ResetRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_AbortScript
HRESULT WINAPI GsoapEndpoint_AbortScript(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* AbortScriptResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_LeaveStandby
HRESULT WINAPI GsoapEndpoint_LeaveStandby(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* LeaveStandbyResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_SetStandbyAfterFinish
HRESULT WINAPI GsoapEndpoint_SetStandbyAfterFinish(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ BOOL goToStandby, 
    _Out_ BOOL* SetStandbyAfterFinishResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetStandbyAfterFinish
HRESULT WINAPI GsoapEndpoint_GetStandbyAfterFinish(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* GetStandbyAfterFinishResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetNamesOfMaintenanceProcedures
HRESULT WINAPI GsoapEndpoint_GetNamesOfMaintenanceProcedures(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetNamesOfMaintenanceProceduresResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMaintenanceProceduresResultCount) WCHAR*** GetNamesOfMaintenanceProceduresResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_RunMaintenanceProcedure
HRESULT WINAPI GsoapEndpoint_RunMaintenanceProcedure(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* procedureName, 
    _Out_ BOOL* RunMaintenanceProcedureResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetOperationMode
HRESULT WINAPI GsoapEndpoint_GetOperationMode(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ int* GetOperationModeResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_IsChipDocked
HRESULT WINAPI GsoapEndpoint_IsChipDocked(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ int* IsChipDockedResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_IsSamplePlateTrayIn
HRESULT WINAPI GsoapEndpoint_IsSamplePlateTrayIn(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ int* IsSamplePlateTrayInResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_HasMessage
HRESULT WINAPI GsoapEndpoint_HasMessage(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* HasMessageResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetMessage
HRESULT WINAPI GsoapEndpoint_GetMessage(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetMessageResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMessageResultCount) WCHAR*** GetMessageResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_HasErrors
HRESULT WINAPI GsoapEndpoint_HasErrors(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* HasErrorsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetErrors
HRESULT WINAPI GsoapEndpoint_GetErrors(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetErrorsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetErrorsResultCount) WCHAR*** GetErrorsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_HasWarnings
HRESULT WINAPI GsoapEndpoint_HasWarnings(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* HasWarningsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: GsoapEndpoint_GetWarnings
HRESULT WINAPI GsoapEndpoint_GetWarnings(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetWarningsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetWarningsResultCount) WCHAR*** GetWarningsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

////////////////////////////////////////////////
// Service functions definitions
////////////////////////////////////////////////

typedef HRESULT (CALLBACK* GsoapEndpoint_GetNamesOfMethodsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetNamesOfMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsResultCount) WCHAR*** GetNamesOfMethodsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetNamesOfMethodsOfAssayTypeCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfMethodsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsOfAssayTypeResultCount) WCHAR*** GetNamesOfMethodsOfAssayTypeResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetAssayTypesOfAllMethodsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetAssayTypesOfAllMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllMethodsResultCount) WCHAR*** GetAssayTypesOfAllMethodsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetNameOfCurrentMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetAssayTypeOfCurrentMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetAssayTypeOfMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* methodName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetNamesOfRunsetsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetNamesOfRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsResultCount) WCHAR*** GetNamesOfRunsetsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetNamesOfRunsetsOfAssayTypeCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfRunsetsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsOfAssayTypeResultCount) WCHAR*** GetNamesOfRunsetsOfAssayTypeResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetAssayTypesOfAllRunsetsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetAssayTypesOfAllRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllRunsetsResultCount) WCHAR*** GetAssayTypesOfAllRunsetsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetNameOfCurrentRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetAssayTypeOfCurrentRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetAssayTypeOfRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* runsetName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetMethodNamesOfRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ unsigned int* GetMethodNamesOfRunsetResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMethodNamesOfRunsetResultCount) WCHAR*** GetMethodNamesOfRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_SelectMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* methodName, 
    _Out_ BOOL* SelectMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_SelectRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ BOOL* SelectRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_CreateRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ unsigned int methodNamesCount, 
    _In_reads_opt_(methodNamesCount) WCHAR** methodNames, 
    _Out_ BOOL* CreateRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_SetSamplePlateIdCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int methodIndex, 
    _In_opt_z_ WCHAR* plateId, 
    _Out_ BOOL* SetSamplePlateIdResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetSamplePlateIdCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int methodIndex, 
    _Outptr_result_maybenull_z_ WCHAR** GetSamplePlateIdResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetCurrentSamplePlateIdCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetCurrentSamplePlateIdResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_MoveSamplePlateTrayOutCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* MoveSamplePlateTrayOutResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_MoveSamplePlateTrayInCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* MoveSamplePlateTrayInResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_StartSelectedRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* StartSelectedRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_StartSelectedRunsetFromCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int methodIndex, 
    _Out_ BOOL* StartSelectedRunsetFromResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_PauseRunsetAfterCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int pauseMode, 
    _Out_ BOOL* PauseRunsetAfterResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_ResumeRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* ResumeRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_ResetRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* ResetRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_AbortScriptCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* AbortScriptResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_LeaveStandbyCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* LeaveStandbyResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_SetStandbyAfterFinishCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ BOOL goToStandby, 
    _Out_ BOOL* SetStandbyAfterFinishResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetStandbyAfterFinishCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* GetStandbyAfterFinishResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetNamesOfMaintenanceProceduresCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetNamesOfMaintenanceProceduresResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMaintenanceProceduresResultCount) WCHAR*** GetNamesOfMaintenanceProceduresResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_RunMaintenanceProcedureCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* procedureName, 
    _Out_ BOOL* RunMaintenanceProcedureResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetOperationModeCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ int* GetOperationModeResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_IsChipDockedCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ int* IsChipDockedResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_IsSamplePlateTrayInCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ int* IsSamplePlateTrayInResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_HasMessageCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* HasMessageResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetMessageCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetMessageResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMessageResultCount) WCHAR*** GetMessageResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_HasErrorsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* HasErrorsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetErrorsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetErrorsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetErrorsResultCount) WCHAR*** GetErrorsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_HasWarningsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* HasWarningsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* GsoapEndpoint_GetWarningsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetWarningsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetWarningsResultCount) WCHAR*** GetWarningsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

// binding: GsoapEndpoint
typedef struct GsoapEndpointFunctionTable 
{
    GsoapEndpoint_GetNamesOfMethodsCallback GsoapEndpoint_GetNamesOfMethods;
    GsoapEndpoint_GetNamesOfMethodsOfAssayTypeCallback GsoapEndpoint_GetNamesOfMethodsOfAssayType;
    GsoapEndpoint_GetAssayTypesOfAllMethodsCallback GsoapEndpoint_GetAssayTypesOfAllMethods;
    GsoapEndpoint_GetNameOfCurrentMethodCallback GsoapEndpoint_GetNameOfCurrentMethod;
    GsoapEndpoint_GetAssayTypeOfCurrentMethodCallback GsoapEndpoint_GetAssayTypeOfCurrentMethod;
    GsoapEndpoint_GetAssayTypeOfMethodCallback GsoapEndpoint_GetAssayTypeOfMethod;
    GsoapEndpoint_GetNamesOfRunsetsCallback GsoapEndpoint_GetNamesOfRunsets;
    GsoapEndpoint_GetNamesOfRunsetsOfAssayTypeCallback GsoapEndpoint_GetNamesOfRunsetsOfAssayType;
    GsoapEndpoint_GetAssayTypesOfAllRunsetsCallback GsoapEndpoint_GetAssayTypesOfAllRunsets;
    GsoapEndpoint_GetNameOfCurrentRunsetCallback GsoapEndpoint_GetNameOfCurrentRunset;
    GsoapEndpoint_GetAssayTypeOfCurrentRunsetCallback GsoapEndpoint_GetAssayTypeOfCurrentRunset;
    GsoapEndpoint_GetAssayTypeOfRunsetCallback GsoapEndpoint_GetAssayTypeOfRunset;
    GsoapEndpoint_GetMethodNamesOfRunsetCallback GsoapEndpoint_GetMethodNamesOfRunset;
    GsoapEndpoint_SelectMethodCallback GsoapEndpoint_SelectMethod;
    GsoapEndpoint_SelectRunsetCallback GsoapEndpoint_SelectRunset;
    GsoapEndpoint_CreateRunsetCallback GsoapEndpoint_CreateRunset;
    GsoapEndpoint_SetSamplePlateIdCallback GsoapEndpoint_SetSamplePlateId;
    GsoapEndpoint_GetSamplePlateIdCallback GsoapEndpoint_GetSamplePlateId;
    GsoapEndpoint_GetCurrentSamplePlateIdCallback GsoapEndpoint_GetCurrentSamplePlateId;
    GsoapEndpoint_MoveSamplePlateTrayOutCallback GsoapEndpoint_MoveSamplePlateTrayOut;
    GsoapEndpoint_MoveSamplePlateTrayInCallback GsoapEndpoint_MoveSamplePlateTrayIn;
    GsoapEndpoint_StartSelectedRunsetCallback GsoapEndpoint_StartSelectedRunset;
    GsoapEndpoint_StartSelectedRunsetFromCallback GsoapEndpoint_StartSelectedRunsetFrom;
    GsoapEndpoint_PauseRunsetAfterCallback GsoapEndpoint_PauseRunsetAfter;
    GsoapEndpoint_ResumeRunsetCallback GsoapEndpoint_ResumeRunset;
    GsoapEndpoint_ResetRunsetCallback GsoapEndpoint_ResetRunset;
    GsoapEndpoint_AbortScriptCallback GsoapEndpoint_AbortScript;
    GsoapEndpoint_LeaveStandbyCallback GsoapEndpoint_LeaveStandby;
    GsoapEndpoint_SetStandbyAfterFinishCallback GsoapEndpoint_SetStandbyAfterFinish;
    GsoapEndpoint_GetStandbyAfterFinishCallback GsoapEndpoint_GetStandbyAfterFinish;
    GsoapEndpoint_GetNamesOfMaintenanceProceduresCallback GsoapEndpoint_GetNamesOfMaintenanceProcedures;
    GsoapEndpoint_RunMaintenanceProcedureCallback GsoapEndpoint_RunMaintenanceProcedure;
    GsoapEndpoint_GetOperationModeCallback GsoapEndpoint_GetOperationMode;
    GsoapEndpoint_IsChipDockedCallback GsoapEndpoint_IsChipDocked;
    GsoapEndpoint_IsSamplePlateTrayInCallback GsoapEndpoint_IsSamplePlateTrayIn;
    GsoapEndpoint_HasMessageCallback GsoapEndpoint_HasMessage;
    GsoapEndpoint_GetMessageCallback GsoapEndpoint_GetMessage;
    GsoapEndpoint_HasErrorsCallback GsoapEndpoint_HasErrors;
    GsoapEndpoint_GetErrorsCallback GsoapEndpoint_GetErrors;
    GsoapEndpoint_HasWarningsCallback GsoapEndpoint_HasWarnings;
    GsoapEndpoint_GetWarningsCallback GsoapEndpoint_GetWarnings;
} GsoapEndpointFunctionTable;

////////////////////////////////////////////////
// Client functions definitions
////////////////////////////////////////////////

// operation: SoapEndpoint_GetNamesOfMethods
HRESULT WINAPI SoapEndpoint_GetNamesOfMethods(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetNamesOfMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsResultCount) WCHAR*** GetNamesOfMethodsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetNamesOfMethodsOfAssayType
HRESULT WINAPI SoapEndpoint_GetNamesOfMethodsOfAssayType(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfMethodsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsOfAssayTypeResultCount) WCHAR*** GetNamesOfMethodsOfAssayTypeResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetAssayTypesOfAllMethods
HRESULT WINAPI SoapEndpoint_GetAssayTypesOfAllMethods(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetAssayTypesOfAllMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllMethodsResultCount) WCHAR*** GetAssayTypesOfAllMethodsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetNameOfCurrentMethod
HRESULT WINAPI SoapEndpoint_GetNameOfCurrentMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetAssayTypeOfCurrentMethod
HRESULT WINAPI SoapEndpoint_GetAssayTypeOfCurrentMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetAssayTypeOfMethod
HRESULT WINAPI SoapEndpoint_GetAssayTypeOfMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* methodName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetNamesOfRunsets
HRESULT WINAPI SoapEndpoint_GetNamesOfRunsets(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetNamesOfRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsResultCount) WCHAR*** GetNamesOfRunsetsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetNamesOfRunsetsOfAssayType
HRESULT WINAPI SoapEndpoint_GetNamesOfRunsetsOfAssayType(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfRunsetsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsOfAssayTypeResultCount) WCHAR*** GetNamesOfRunsetsOfAssayTypeResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetAssayTypesOfAllRunsets
HRESULT WINAPI SoapEndpoint_GetAssayTypesOfAllRunsets(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetAssayTypesOfAllRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllRunsetsResultCount) WCHAR*** GetAssayTypesOfAllRunsetsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetNameOfCurrentRunset
HRESULT WINAPI SoapEndpoint_GetNameOfCurrentRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetAssayTypeOfCurrentRunset
HRESULT WINAPI SoapEndpoint_GetAssayTypeOfCurrentRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetAssayTypeOfRunset
HRESULT WINAPI SoapEndpoint_GetAssayTypeOfRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* runsetName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetMethodNamesOfRunset
HRESULT WINAPI SoapEndpoint_GetMethodNamesOfRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ unsigned int* GetMethodNamesOfRunsetResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMethodNamesOfRunsetResultCount) WCHAR*** GetMethodNamesOfRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_SelectMethod
HRESULT WINAPI SoapEndpoint_SelectMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* methodName, 
    _Out_ BOOL* SelectMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_SelectRunset
HRESULT WINAPI SoapEndpoint_SelectRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ BOOL* SelectRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_CreateRunset
HRESULT WINAPI SoapEndpoint_CreateRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ unsigned int methodNamesCount, 
    _In_reads_opt_(methodNamesCount) WCHAR** methodNames, 
    _Out_ BOOL* CreateRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_SetSamplePlateId
HRESULT WINAPI SoapEndpoint_SetSamplePlateId(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int methodIndex, 
    _In_opt_z_ WCHAR* plateId, 
    _Out_ BOOL* SetSamplePlateIdResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetSamplePlateId
HRESULT WINAPI SoapEndpoint_GetSamplePlateId(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int methodIndex, 
    _Outptr_result_maybenull_z_ WCHAR** GetSamplePlateIdResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetCurrentSamplePlateId
HRESULT WINAPI SoapEndpoint_GetCurrentSamplePlateId(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetCurrentSamplePlateIdResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_MoveSamplePlateTrayOut
HRESULT WINAPI SoapEndpoint_MoveSamplePlateTrayOut(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* MoveSamplePlateTrayOutResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_MoveSamplePlateTrayIn
HRESULT WINAPI SoapEndpoint_MoveSamplePlateTrayIn(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* MoveSamplePlateTrayInResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_StartSelectedRunset
HRESULT WINAPI SoapEndpoint_StartSelectedRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* StartSelectedRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_StartSelectedRunsetFrom
HRESULT WINAPI SoapEndpoint_StartSelectedRunsetFrom(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int methodIndex, 
    _Out_ BOOL* StartSelectedRunsetFromResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_PauseRunsetAfter
HRESULT WINAPI SoapEndpoint_PauseRunsetAfter(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int pauseMode, 
    _Out_ BOOL* PauseRunsetAfterResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_ResumeRunset
HRESULT WINAPI SoapEndpoint_ResumeRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* ResumeRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_ResetRunset
HRESULT WINAPI SoapEndpoint_ResetRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* ResetRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_AbortScript
HRESULT WINAPI SoapEndpoint_AbortScript(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* AbortScriptResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_LeaveStandby
HRESULT WINAPI SoapEndpoint_LeaveStandby(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* LeaveStandbyResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_SetStandbyAfterFinish
HRESULT WINAPI SoapEndpoint_SetStandbyAfterFinish(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ BOOL goToStandby, 
    _Out_ BOOL* SetStandbyAfterFinishResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetStandbyAfterFinish
HRESULT WINAPI SoapEndpoint_GetStandbyAfterFinish(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* GetStandbyAfterFinishResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetNamesOfMaintenanceProcedures
HRESULT WINAPI SoapEndpoint_GetNamesOfMaintenanceProcedures(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetNamesOfMaintenanceProceduresResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMaintenanceProceduresResultCount) WCHAR*** GetNamesOfMaintenanceProceduresResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_RunMaintenanceProcedure
HRESULT WINAPI SoapEndpoint_RunMaintenanceProcedure(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* procedureName, 
    _Out_ BOOL* RunMaintenanceProcedureResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetOperationMode
HRESULT WINAPI SoapEndpoint_GetOperationMode(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ int* GetOperationModeResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_IsChipDocked
HRESULT WINAPI SoapEndpoint_IsChipDocked(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ int* IsChipDockedResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_IsSamplePlateTrayIn
HRESULT WINAPI SoapEndpoint_IsSamplePlateTrayIn(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ int* IsSamplePlateTrayInResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_HasMessage
HRESULT WINAPI SoapEndpoint_HasMessage(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* HasMessageResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetMessage
HRESULT WINAPI SoapEndpoint_GetMessage(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetMessageResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMessageResultCount) WCHAR*** GetMessageResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_HasErrors
HRESULT WINAPI SoapEndpoint_HasErrors(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* HasErrorsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetErrors
HRESULT WINAPI SoapEndpoint_GetErrors(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetErrorsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetErrorsResultCount) WCHAR*** GetErrorsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_HasWarnings
HRESULT WINAPI SoapEndpoint_HasWarnings(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* HasWarningsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: SoapEndpoint_GetWarnings
HRESULT WINAPI SoapEndpoint_GetWarnings(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetWarningsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetWarningsResultCount) WCHAR*** GetWarningsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

////////////////////////////////////////////////
// Service functions definitions
////////////////////////////////////////////////

typedef HRESULT (CALLBACK* SoapEndpoint_GetNamesOfMethodsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetNamesOfMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsResultCount) WCHAR*** GetNamesOfMethodsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetNamesOfMethodsOfAssayTypeCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfMethodsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsOfAssayTypeResultCount) WCHAR*** GetNamesOfMethodsOfAssayTypeResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetAssayTypesOfAllMethodsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetAssayTypesOfAllMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllMethodsResultCount) WCHAR*** GetAssayTypesOfAllMethodsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetNameOfCurrentMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetAssayTypeOfCurrentMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetAssayTypeOfMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* methodName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetNamesOfRunsetsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetNamesOfRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsResultCount) WCHAR*** GetNamesOfRunsetsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetNamesOfRunsetsOfAssayTypeCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfRunsetsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsOfAssayTypeResultCount) WCHAR*** GetNamesOfRunsetsOfAssayTypeResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetAssayTypesOfAllRunsetsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetAssayTypesOfAllRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllRunsetsResultCount) WCHAR*** GetAssayTypesOfAllRunsetsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetNameOfCurrentRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetAssayTypeOfCurrentRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetAssayTypeOfRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* runsetName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetMethodNamesOfRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ unsigned int* GetMethodNamesOfRunsetResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMethodNamesOfRunsetResultCount) WCHAR*** GetMethodNamesOfRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_SelectMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* methodName, 
    _Out_ BOOL* SelectMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_SelectRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ BOOL* SelectRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_CreateRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ unsigned int methodNamesCount, 
    _In_reads_opt_(methodNamesCount) WCHAR** methodNames, 
    _Out_ BOOL* CreateRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_SetSamplePlateIdCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int methodIndex, 
    _In_opt_z_ WCHAR* plateId, 
    _Out_ BOOL* SetSamplePlateIdResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetSamplePlateIdCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int methodIndex, 
    _Outptr_result_maybenull_z_ WCHAR** GetSamplePlateIdResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetCurrentSamplePlateIdCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetCurrentSamplePlateIdResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_MoveSamplePlateTrayOutCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* MoveSamplePlateTrayOutResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_MoveSamplePlateTrayInCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* MoveSamplePlateTrayInResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_StartSelectedRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* StartSelectedRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_StartSelectedRunsetFromCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int methodIndex, 
    _Out_ BOOL* StartSelectedRunsetFromResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_PauseRunsetAfterCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int pauseMode, 
    _Out_ BOOL* PauseRunsetAfterResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_ResumeRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* ResumeRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_ResetRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* ResetRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_AbortScriptCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* AbortScriptResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_LeaveStandbyCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* LeaveStandbyResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_SetStandbyAfterFinishCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ BOOL goToStandby, 
    _Out_ BOOL* SetStandbyAfterFinishResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetStandbyAfterFinishCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* GetStandbyAfterFinishResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetNamesOfMaintenanceProceduresCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetNamesOfMaintenanceProceduresResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMaintenanceProceduresResultCount) WCHAR*** GetNamesOfMaintenanceProceduresResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_RunMaintenanceProcedureCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* procedureName, 
    _Out_ BOOL* RunMaintenanceProcedureResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetOperationModeCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ int* GetOperationModeResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_IsChipDockedCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ int* IsChipDockedResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_IsSamplePlateTrayInCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ int* IsSamplePlateTrayInResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_HasMessageCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* HasMessageResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetMessageCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetMessageResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMessageResultCount) WCHAR*** GetMessageResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_HasErrorsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* HasErrorsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetErrorsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetErrorsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetErrorsResultCount) WCHAR*** GetErrorsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_HasWarningsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* HasWarningsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* SoapEndpoint_GetWarningsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetWarningsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetWarningsResultCount) WCHAR*** GetWarningsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

// binding: SoapEndpoint
typedef struct SoapEndpointFunctionTable 
{
    SoapEndpoint_GetNamesOfMethodsCallback SoapEndpoint_GetNamesOfMethods;
    SoapEndpoint_GetNamesOfMethodsOfAssayTypeCallback SoapEndpoint_GetNamesOfMethodsOfAssayType;
    SoapEndpoint_GetAssayTypesOfAllMethodsCallback SoapEndpoint_GetAssayTypesOfAllMethods;
    SoapEndpoint_GetNameOfCurrentMethodCallback SoapEndpoint_GetNameOfCurrentMethod;
    SoapEndpoint_GetAssayTypeOfCurrentMethodCallback SoapEndpoint_GetAssayTypeOfCurrentMethod;
    SoapEndpoint_GetAssayTypeOfMethodCallback SoapEndpoint_GetAssayTypeOfMethod;
    SoapEndpoint_GetNamesOfRunsetsCallback SoapEndpoint_GetNamesOfRunsets;
    SoapEndpoint_GetNamesOfRunsetsOfAssayTypeCallback SoapEndpoint_GetNamesOfRunsetsOfAssayType;
    SoapEndpoint_GetAssayTypesOfAllRunsetsCallback SoapEndpoint_GetAssayTypesOfAllRunsets;
    SoapEndpoint_GetNameOfCurrentRunsetCallback SoapEndpoint_GetNameOfCurrentRunset;
    SoapEndpoint_GetAssayTypeOfCurrentRunsetCallback SoapEndpoint_GetAssayTypeOfCurrentRunset;
    SoapEndpoint_GetAssayTypeOfRunsetCallback SoapEndpoint_GetAssayTypeOfRunset;
    SoapEndpoint_GetMethodNamesOfRunsetCallback SoapEndpoint_GetMethodNamesOfRunset;
    SoapEndpoint_SelectMethodCallback SoapEndpoint_SelectMethod;
    SoapEndpoint_SelectRunsetCallback SoapEndpoint_SelectRunset;
    SoapEndpoint_CreateRunsetCallback SoapEndpoint_CreateRunset;
    SoapEndpoint_SetSamplePlateIdCallback SoapEndpoint_SetSamplePlateId;
    SoapEndpoint_GetSamplePlateIdCallback SoapEndpoint_GetSamplePlateId;
    SoapEndpoint_GetCurrentSamplePlateIdCallback SoapEndpoint_GetCurrentSamplePlateId;
    SoapEndpoint_MoveSamplePlateTrayOutCallback SoapEndpoint_MoveSamplePlateTrayOut;
    SoapEndpoint_MoveSamplePlateTrayInCallback SoapEndpoint_MoveSamplePlateTrayIn;
    SoapEndpoint_StartSelectedRunsetCallback SoapEndpoint_StartSelectedRunset;
    SoapEndpoint_StartSelectedRunsetFromCallback SoapEndpoint_StartSelectedRunsetFrom;
    SoapEndpoint_PauseRunsetAfterCallback SoapEndpoint_PauseRunsetAfter;
    SoapEndpoint_ResumeRunsetCallback SoapEndpoint_ResumeRunset;
    SoapEndpoint_ResetRunsetCallback SoapEndpoint_ResetRunset;
    SoapEndpoint_AbortScriptCallback SoapEndpoint_AbortScript;
    SoapEndpoint_LeaveStandbyCallback SoapEndpoint_LeaveStandby;
    SoapEndpoint_SetStandbyAfterFinishCallback SoapEndpoint_SetStandbyAfterFinish;
    SoapEndpoint_GetStandbyAfterFinishCallback SoapEndpoint_GetStandbyAfterFinish;
    SoapEndpoint_GetNamesOfMaintenanceProceduresCallback SoapEndpoint_GetNamesOfMaintenanceProcedures;
    SoapEndpoint_RunMaintenanceProcedureCallback SoapEndpoint_RunMaintenanceProcedure;
    SoapEndpoint_GetOperationModeCallback SoapEndpoint_GetOperationMode;
    SoapEndpoint_IsChipDockedCallback SoapEndpoint_IsChipDocked;
    SoapEndpoint_IsSamplePlateTrayInCallback SoapEndpoint_IsSamplePlateTrayIn;
    SoapEndpoint_HasMessageCallback SoapEndpoint_HasMessage;
    SoapEndpoint_GetMessageCallback SoapEndpoint_GetMessage;
    SoapEndpoint_HasErrorsCallback SoapEndpoint_HasErrors;
    SoapEndpoint_GetErrorsCallback SoapEndpoint_GetErrors;
    SoapEndpoint_HasWarningsCallback SoapEndpoint_HasWarnings;
    SoapEndpoint_GetWarningsCallback SoapEndpoint_GetWarnings;
} SoapEndpointFunctionTable;

////////////////////////////////////////////////
// Policy helper routines
////////////////////////////////////////////////

//  WS_CHANNEL_PROPERTY_ENCODING = WS_ENCODING_XML_BINARY_SESSION_1,
//  WS_CHANNEL_PROPERTY_ADDRESSING_VERSION = WS_ADDRESSING_VERSION_1_0,
//  WS_ENVELOPE_VERSION = WS_ENVELOPE_VERSION_SOAP_1_2,
// channel type: WS_CHANNEL_TYPE_DUPLEX_SESSION 

HRESULT NetTcpEndpoint_CreateServiceProxy(
    _In_opt_ WS_TCP_BINDING_TEMPLATE* templateValue,
    _In_reads_opt_(proxyPropertyCount) const WS_PROXY_PROPERTY* proxyProperties,
    _In_ const ULONG proxyPropertyCount,
    _Outptr_ WS_SERVICE_PROXY** _serviceProxy,
    _In_opt_ WS_ERROR* error);

struct NetTcpEndpointFunctionTable;
HRESULT NetTcpEndpoint_CreateServiceEndpoint(
    _In_opt_ WS_TCP_BINDING_TEMPLATE* templateValue,
    _In_opt_ CONST WS_STRING* address,
    _In_opt_ struct NetTcpEndpointFunctionTable* functionTable,
    _In_opt_ WS_SERVICE_SECURITY_CALLBACK authorizationCallback,
    _In_reads_opt_(endpointPropertyCount) WS_SERVICE_ENDPOINT_PROPERTY* endpointProperties,
    _In_ const ULONG endpointPropertyCount,
    _In_ WS_HEAP* heap,
    _Outptr_ WS_SERVICE_ENDPOINT** serviceEndpoint,
    _In_opt_ WS_ERROR* error);

////////////////////////////////////////////////
// Client functions definitions
////////////////////////////////////////////////

// operation: NetTcpEndpoint_GetNamesOfMethods
HRESULT WINAPI NetTcpEndpoint_GetNamesOfMethods(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetNamesOfMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsResultCount) WCHAR*** GetNamesOfMethodsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetNamesOfMethodsOfAssayType
HRESULT WINAPI NetTcpEndpoint_GetNamesOfMethodsOfAssayType(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfMethodsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsOfAssayTypeResultCount) WCHAR*** GetNamesOfMethodsOfAssayTypeResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetAssayTypesOfAllMethods
HRESULT WINAPI NetTcpEndpoint_GetAssayTypesOfAllMethods(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetAssayTypesOfAllMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllMethodsResultCount) WCHAR*** GetAssayTypesOfAllMethodsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetNameOfCurrentMethod
HRESULT WINAPI NetTcpEndpoint_GetNameOfCurrentMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetAssayTypeOfCurrentMethod
HRESULT WINAPI NetTcpEndpoint_GetAssayTypeOfCurrentMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetAssayTypeOfMethod
HRESULT WINAPI NetTcpEndpoint_GetAssayTypeOfMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* methodName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetNamesOfRunsets
HRESULT WINAPI NetTcpEndpoint_GetNamesOfRunsets(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetNamesOfRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsResultCount) WCHAR*** GetNamesOfRunsetsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetNamesOfRunsetsOfAssayType
HRESULT WINAPI NetTcpEndpoint_GetNamesOfRunsetsOfAssayType(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfRunsetsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsOfAssayTypeResultCount) WCHAR*** GetNamesOfRunsetsOfAssayTypeResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetAssayTypesOfAllRunsets
HRESULT WINAPI NetTcpEndpoint_GetAssayTypesOfAllRunsets(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetAssayTypesOfAllRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllRunsetsResultCount) WCHAR*** GetAssayTypesOfAllRunsetsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetNameOfCurrentRunset
HRESULT WINAPI NetTcpEndpoint_GetNameOfCurrentRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetAssayTypeOfCurrentRunset
HRESULT WINAPI NetTcpEndpoint_GetAssayTypeOfCurrentRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetAssayTypeOfRunset
HRESULT WINAPI NetTcpEndpoint_GetAssayTypeOfRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* runsetName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetMethodNamesOfRunset
HRESULT WINAPI NetTcpEndpoint_GetMethodNamesOfRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ unsigned int* GetMethodNamesOfRunsetResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMethodNamesOfRunsetResultCount) WCHAR*** GetMethodNamesOfRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_SelectMethod
HRESULT WINAPI NetTcpEndpoint_SelectMethod(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* methodName, 
    _Out_ BOOL* SelectMethodResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_SelectRunset
HRESULT WINAPI NetTcpEndpoint_SelectRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ BOOL* SelectRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_CreateRunset
HRESULT WINAPI NetTcpEndpoint_CreateRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ unsigned int methodNamesCount, 
    _In_reads_opt_(methodNamesCount) WCHAR** methodNames, 
    _Out_ BOOL* CreateRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_SetSamplePlateId
HRESULT WINAPI NetTcpEndpoint_SetSamplePlateId(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int methodIndex, 
    _In_opt_z_ WCHAR* plateId, 
    _Out_ BOOL* SetSamplePlateIdResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetSamplePlateId
HRESULT WINAPI NetTcpEndpoint_GetSamplePlateId(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int methodIndex, 
    _Outptr_result_maybenull_z_ WCHAR** GetSamplePlateIdResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetCurrentSamplePlateId
HRESULT WINAPI NetTcpEndpoint_GetCurrentSamplePlateId(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Outptr_result_maybenull_z_ WCHAR** GetCurrentSamplePlateIdResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_MoveSamplePlateTrayOut
HRESULT WINAPI NetTcpEndpoint_MoveSamplePlateTrayOut(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* MoveSamplePlateTrayOutResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_MoveSamplePlateTrayIn
HRESULT WINAPI NetTcpEndpoint_MoveSamplePlateTrayIn(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* MoveSamplePlateTrayInResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_StartSelectedRunset
HRESULT WINAPI NetTcpEndpoint_StartSelectedRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* StartSelectedRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_StartSelectedRunsetFrom
HRESULT WINAPI NetTcpEndpoint_StartSelectedRunsetFrom(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int methodIndex, 
    _Out_ BOOL* StartSelectedRunsetFromResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_PauseRunsetAfter
HRESULT WINAPI NetTcpEndpoint_PauseRunsetAfter(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int pauseMode, 
    _Out_ BOOL* PauseRunsetAfterResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_ResumeRunset
HRESULT WINAPI NetTcpEndpoint_ResumeRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* ResumeRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_ResetRunset
HRESULT WINAPI NetTcpEndpoint_ResetRunset(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* ResetRunsetResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_AbortScript
HRESULT WINAPI NetTcpEndpoint_AbortScript(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* AbortScriptResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_LeaveStandby
HRESULT WINAPI NetTcpEndpoint_LeaveStandby(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* LeaveStandbyResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_SetStandbyAfterFinish
HRESULT WINAPI NetTcpEndpoint_SetStandbyAfterFinish(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ BOOL goToStandby, 
    _Out_ BOOL* SetStandbyAfterFinishResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetStandbyAfterFinish
HRESULT WINAPI NetTcpEndpoint_GetStandbyAfterFinish(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* GetStandbyAfterFinishResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetNamesOfMaintenanceProcedures
HRESULT WINAPI NetTcpEndpoint_GetNamesOfMaintenanceProcedures(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetNamesOfMaintenanceProceduresResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMaintenanceProceduresResultCount) WCHAR*** GetNamesOfMaintenanceProceduresResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_RunMaintenanceProcedure
HRESULT WINAPI NetTcpEndpoint_RunMaintenanceProcedure(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_opt_z_ WCHAR* procedureName, 
    _Out_ BOOL* RunMaintenanceProcedureResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetOperationMode
HRESULT WINAPI NetTcpEndpoint_GetOperationMode(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ int* GetOperationModeResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_IsChipDocked
HRESULT WINAPI NetTcpEndpoint_IsChipDocked(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ int* IsChipDockedResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_IsSamplePlateTrayIn
HRESULT WINAPI NetTcpEndpoint_IsSamplePlateTrayIn(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ int* IsSamplePlateTrayInResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_HasMessage
HRESULT WINAPI NetTcpEndpoint_HasMessage(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* HasMessageResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetMessage
HRESULT WINAPI NetTcpEndpoint_GetMessage(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetMessageResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMessageResultCount) WCHAR*** GetMessageResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_HasErrors
HRESULT WINAPI NetTcpEndpoint_HasErrors(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* HasErrorsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetErrors
HRESULT WINAPI NetTcpEndpoint_GetErrors(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetErrorsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetErrorsResultCount) WCHAR*** GetErrorsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_HasWarnings
HRESULT WINAPI NetTcpEndpoint_HasWarnings(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ BOOL* HasWarningsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: NetTcpEndpoint_GetWarnings
HRESULT WINAPI NetTcpEndpoint_GetWarnings(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetWarningsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetWarningsResultCount) WCHAR*** GetWarningsResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

////////////////////////////////////////////////
// Service functions definitions
////////////////////////////////////////////////

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetNamesOfMethodsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetNamesOfMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsResultCount) WCHAR*** GetNamesOfMethodsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetNamesOfMethodsOfAssayTypeCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfMethodsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMethodsOfAssayTypeResultCount) WCHAR*** GetNamesOfMethodsOfAssayTypeResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetAssayTypesOfAllMethodsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetAssayTypesOfAllMethodsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllMethodsResultCount) WCHAR*** GetAssayTypesOfAllMethodsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetNameOfCurrentMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetAssayTypeOfCurrentMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetAssayTypeOfMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* methodName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetNamesOfRunsetsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetNamesOfRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsResultCount) WCHAR*** GetNamesOfRunsetsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetNamesOfRunsetsOfAssayTypeCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* assayType, 
    _Out_ unsigned int* GetNamesOfRunsetsOfAssayTypeResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfRunsetsOfAssayTypeResultCount) WCHAR*** GetNamesOfRunsetsOfAssayTypeResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetAssayTypesOfAllRunsetsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetAssayTypesOfAllRunsetsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetAssayTypesOfAllRunsetsResultCount) WCHAR*** GetAssayTypesOfAllRunsetsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetNameOfCurrentRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetNameOfCurrentRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetAssayTypeOfCurrentRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfCurrentRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetAssayTypeOfRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* runsetName, 
    _Outptr_result_maybenull_z_ WCHAR** GetAssayTypeOfRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetMethodNamesOfRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ unsigned int* GetMethodNamesOfRunsetResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMethodNamesOfRunsetResultCount) WCHAR*** GetMethodNamesOfRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_SelectMethodCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* methodName, 
    _Out_ BOOL* SelectMethodResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_SelectRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* runsetName, 
    _Out_ BOOL* SelectRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_CreateRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ unsigned int methodNamesCount, 
    _In_reads_opt_(methodNamesCount) WCHAR** methodNames, 
    _Out_ BOOL* CreateRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_SetSamplePlateIdCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int methodIndex, 
    _In_opt_z_ WCHAR* plateId, 
    _Out_ BOOL* SetSamplePlateIdResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetSamplePlateIdCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int methodIndex, 
    _Outptr_result_maybenull_z_ WCHAR** GetSamplePlateIdResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetCurrentSamplePlateIdCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Outptr_result_maybenull_z_ WCHAR** GetCurrentSamplePlateIdResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_MoveSamplePlateTrayOutCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* MoveSamplePlateTrayOutResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_MoveSamplePlateTrayInCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* MoveSamplePlateTrayInResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_StartSelectedRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* StartSelectedRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_StartSelectedRunsetFromCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int methodIndex, 
    _Out_ BOOL* StartSelectedRunsetFromResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_PauseRunsetAfterCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int pauseMode, 
    _Out_ BOOL* PauseRunsetAfterResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_ResumeRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* ResumeRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_ResetRunsetCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* ResetRunsetResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_AbortScriptCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* AbortScriptResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_LeaveStandbyCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* LeaveStandbyResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_SetStandbyAfterFinishCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ BOOL goToStandby, 
    _Out_ BOOL* SetStandbyAfterFinishResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetStandbyAfterFinishCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* GetStandbyAfterFinishResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetNamesOfMaintenanceProceduresCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetNamesOfMaintenanceProceduresResultCount, 
    _Outptr_result_buffer_maybenull_(*GetNamesOfMaintenanceProceduresResultCount) WCHAR*** GetNamesOfMaintenanceProceduresResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_RunMaintenanceProcedureCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_opt_z_ WCHAR* procedureName, 
    _Out_ BOOL* RunMaintenanceProcedureResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetOperationModeCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ int* GetOperationModeResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_IsChipDockedCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ int* IsChipDockedResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_IsSamplePlateTrayInCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ int* IsSamplePlateTrayInResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_HasMessageCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* HasMessageResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetMessageCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetMessageResultCount, 
    _Outptr_result_buffer_maybenull_(*GetMessageResultCount) WCHAR*** GetMessageResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_HasErrorsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* HasErrorsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetErrorsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetErrorsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetErrorsResultCount) WCHAR*** GetErrorsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_HasWarningsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ BOOL* HasWarningsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* NetTcpEndpoint_GetWarningsCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetWarningsResultCount, 
    _Outptr_result_buffer_maybenull_(*GetWarningsResultCount) WCHAR*** GetWarningsResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

// binding: NetTcpEndpoint
typedef struct NetTcpEndpointFunctionTable 
{
    NetTcpEndpoint_GetNamesOfMethodsCallback NetTcpEndpoint_GetNamesOfMethods;
    NetTcpEndpoint_GetNamesOfMethodsOfAssayTypeCallback NetTcpEndpoint_GetNamesOfMethodsOfAssayType;
    NetTcpEndpoint_GetAssayTypesOfAllMethodsCallback NetTcpEndpoint_GetAssayTypesOfAllMethods;
    NetTcpEndpoint_GetNameOfCurrentMethodCallback NetTcpEndpoint_GetNameOfCurrentMethod;
    NetTcpEndpoint_GetAssayTypeOfCurrentMethodCallback NetTcpEndpoint_GetAssayTypeOfCurrentMethod;
    NetTcpEndpoint_GetAssayTypeOfMethodCallback NetTcpEndpoint_GetAssayTypeOfMethod;
    NetTcpEndpoint_GetNamesOfRunsetsCallback NetTcpEndpoint_GetNamesOfRunsets;
    NetTcpEndpoint_GetNamesOfRunsetsOfAssayTypeCallback NetTcpEndpoint_GetNamesOfRunsetsOfAssayType;
    NetTcpEndpoint_GetAssayTypesOfAllRunsetsCallback NetTcpEndpoint_GetAssayTypesOfAllRunsets;
    NetTcpEndpoint_GetNameOfCurrentRunsetCallback NetTcpEndpoint_GetNameOfCurrentRunset;
    NetTcpEndpoint_GetAssayTypeOfCurrentRunsetCallback NetTcpEndpoint_GetAssayTypeOfCurrentRunset;
    NetTcpEndpoint_GetAssayTypeOfRunsetCallback NetTcpEndpoint_GetAssayTypeOfRunset;
    NetTcpEndpoint_GetMethodNamesOfRunsetCallback NetTcpEndpoint_GetMethodNamesOfRunset;
    NetTcpEndpoint_SelectMethodCallback NetTcpEndpoint_SelectMethod;
    NetTcpEndpoint_SelectRunsetCallback NetTcpEndpoint_SelectRunset;
    NetTcpEndpoint_CreateRunsetCallback NetTcpEndpoint_CreateRunset;
    NetTcpEndpoint_SetSamplePlateIdCallback NetTcpEndpoint_SetSamplePlateId;
    NetTcpEndpoint_GetSamplePlateIdCallback NetTcpEndpoint_GetSamplePlateId;
    NetTcpEndpoint_GetCurrentSamplePlateIdCallback NetTcpEndpoint_GetCurrentSamplePlateId;
    NetTcpEndpoint_MoveSamplePlateTrayOutCallback NetTcpEndpoint_MoveSamplePlateTrayOut;
    NetTcpEndpoint_MoveSamplePlateTrayInCallback NetTcpEndpoint_MoveSamplePlateTrayIn;
    NetTcpEndpoint_StartSelectedRunsetCallback NetTcpEndpoint_StartSelectedRunset;
    NetTcpEndpoint_StartSelectedRunsetFromCallback NetTcpEndpoint_StartSelectedRunsetFrom;
    NetTcpEndpoint_PauseRunsetAfterCallback NetTcpEndpoint_PauseRunsetAfter;
    NetTcpEndpoint_ResumeRunsetCallback NetTcpEndpoint_ResumeRunset;
    NetTcpEndpoint_ResetRunsetCallback NetTcpEndpoint_ResetRunset;
    NetTcpEndpoint_AbortScriptCallback NetTcpEndpoint_AbortScript;
    NetTcpEndpoint_LeaveStandbyCallback NetTcpEndpoint_LeaveStandby;
    NetTcpEndpoint_SetStandbyAfterFinishCallback NetTcpEndpoint_SetStandbyAfterFinish;
    NetTcpEndpoint_GetStandbyAfterFinishCallback NetTcpEndpoint_GetStandbyAfterFinish;
    NetTcpEndpoint_GetNamesOfMaintenanceProceduresCallback NetTcpEndpoint_GetNamesOfMaintenanceProcedures;
    NetTcpEndpoint_RunMaintenanceProcedureCallback NetTcpEndpoint_RunMaintenanceProcedure;
    NetTcpEndpoint_GetOperationModeCallback NetTcpEndpoint_GetOperationMode;
    NetTcpEndpoint_IsChipDockedCallback NetTcpEndpoint_IsChipDocked;
    NetTcpEndpoint_IsSamplePlateTrayInCallback NetTcpEndpoint_IsSamplePlateTrayIn;
    NetTcpEndpoint_HasMessageCallback NetTcpEndpoint_HasMessage;
    NetTcpEndpoint_GetMessageCallback NetTcpEndpoint_GetMessage;
    NetTcpEndpoint_HasErrorsCallback NetTcpEndpoint_HasErrors;
    NetTcpEndpoint_GetErrorsCallback NetTcpEndpoint_GetErrors;
    NetTcpEndpoint_HasWarningsCallback NetTcpEndpoint_HasWarnings;
    NetTcpEndpoint_GetWarningsCallback NetTcpEndpoint_GetWarnings;
} NetTcpEndpointFunctionTable;

////////////////////////////////////////////////
// Global web service descriptions.
////////////////////////////////////////////////

typedef struct _tempuri_org_wsdl
{
    struct // messages
    {
        // message: IBrukerSprRemoteService_GetNamesOfMethods_InputMessage
        // c type: _GetNamesOfMethods
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfMethods"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfMethods_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfMethods_InputMessage;
        
        // message: IBrukerSprRemoteService_GetNamesOfMethods_OutputMessage
        // c type: _GetNamesOfMethodsResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfMethodsResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfMethods_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfMethods_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_InputMessage
        // c type: _GetNamesOfMethodsOfAssayType
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfMethodsOfAssayType"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_InputMessage;
        
        // message: IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_OutputMessage
        // c type: _GetNamesOfMethodsOfAssayTypeResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfMethodsOfAssayTypeResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypesOfAllMethods_InputMessage
        // c type: _GetAssayTypesOfAllMethods
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypesOfAllMethods"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypesOfAllMethods_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypesOfAllMethods_InputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypesOfAllMethods_OutputMessage
        // c type: _GetAssayTypesOfAllMethodsResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypesOfAllMethodsResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypesOfAllMethods_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypesOfAllMethods_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetNameOfCurrentMethod_InputMessage
        // c type: _GetNameOfCurrentMethod
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNameOfCurrentMethod"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNameOfCurrentMethod_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNameOfCurrentMethod_InputMessage;
        
        // message: IBrukerSprRemoteService_GetNameOfCurrentMethod_OutputMessage
        // c type: _GetNameOfCurrentMethodResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNameOfCurrentMethodResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNameOfCurrentMethod_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNameOfCurrentMethod_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_InputMessage
        // c type: _GetAssayTypeOfCurrentMethod
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfCurrentMethod"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_InputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_OutputMessage
        // c type: _GetAssayTypeOfCurrentMethodResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfCurrentMethodResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypeOfMethod_InputMessage
        // c type: _GetAssayTypeOfMethod
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfMethod"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypeOfMethod_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypeOfMethod_InputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypeOfMethod_OutputMessage
        // c type: _GetAssayTypeOfMethodResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfMethodResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypeOfMethod_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypeOfMethod_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetNamesOfRunsets_InputMessage
        // c type: _GetNamesOfRunsets
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfRunsets"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfRunsets_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfRunsets_InputMessage;
        
        // message: IBrukerSprRemoteService_GetNamesOfRunsets_OutputMessage
        // c type: _GetNamesOfRunsetsResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfRunsetsResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfRunsets_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfRunsets_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_InputMessage
        // c type: _GetNamesOfRunsetsOfAssayType
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfRunsetsOfAssayType"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_InputMessage;
        
        // message: IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_OutputMessage
        // c type: _GetNamesOfRunsetsOfAssayTypeResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfRunsetsOfAssayTypeResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_InputMessage
        // c type: _GetAssayTypesOfAllRunsets
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypesOfAllRunsets"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_InputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_OutputMessage
        // c type: _GetAssayTypesOfAllRunsetsResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypesOfAllRunsetsResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetNameOfCurrentRunset_InputMessage
        // c type: _GetNameOfCurrentRunset
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNameOfCurrentRunset"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNameOfCurrentRunset_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNameOfCurrentRunset_InputMessage;
        
        // message: IBrukerSprRemoteService_GetNameOfCurrentRunset_OutputMessage
        // c type: _GetNameOfCurrentRunsetResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNameOfCurrentRunsetResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNameOfCurrentRunset_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNameOfCurrentRunset_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_InputMessage
        // c type: _GetAssayTypeOfCurrentRunset
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfCurrentRunset"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_InputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_OutputMessage
        // c type: _GetAssayTypeOfCurrentRunsetResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfCurrentRunsetResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypeOfRunset_InputMessage
        // c type: _GetAssayTypeOfRunset
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfRunset"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypeOfRunset_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypeOfRunset_InputMessage;
        
        // message: IBrukerSprRemoteService_GetAssayTypeOfRunset_OutputMessage
        // c type: _GetAssayTypeOfRunsetResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetAssayTypeOfRunsetResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetAssayTypeOfRunset_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetAssayTypeOfRunset_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetMethodNamesOfRunset_InputMessage
        // c type: _GetMethodNamesOfRunset
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetMethodNamesOfRunset"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetMethodNamesOfRunset_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetMethodNamesOfRunset_InputMessage;
        
        // message: IBrukerSprRemoteService_GetMethodNamesOfRunset_OutputMessage
        // c type: _GetMethodNamesOfRunsetResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetMethodNamesOfRunsetResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetMethodNamesOfRunset_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetMethodNamesOfRunset_OutputMessage;
        
        // message: IBrukerSprRemoteService_SelectMethod_InputMessage
        // c type: _SelectMethod
        // action: "http://tempuri.org/IBrukerSprRemoteService/SelectMethod"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_SelectMethod_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_SelectMethod_InputMessage;
        
        // message: IBrukerSprRemoteService_SelectMethod_OutputMessage
        // c type: _SelectMethodResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/SelectMethodResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_SelectMethod_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_SelectMethod_OutputMessage;
        
        // message: IBrukerSprRemoteService_SelectRunset_InputMessage
        // c type: _SelectRunset
        // action: "http://tempuri.org/IBrukerSprRemoteService/SelectRunset"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_SelectRunset_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_SelectRunset_InputMessage;
        
        // message: IBrukerSprRemoteService_SelectRunset_OutputMessage
        // c type: _SelectRunsetResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/SelectRunsetResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_SelectRunset_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_SelectRunset_OutputMessage;
        
        // message: IBrukerSprRemoteService_CreateRunset_InputMessage
        // c type: _CreateRunset
        // action: "http://tempuri.org/IBrukerSprRemoteService/CreateRunset"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_CreateRunset_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_CreateRunset_InputMessage;
        
        // message: IBrukerSprRemoteService_CreateRunset_OutputMessage
        // c type: _CreateRunsetResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/CreateRunsetResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_CreateRunset_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_CreateRunset_OutputMessage;
        
        // message: IBrukerSprRemoteService_SetSamplePlateId_InputMessage
        // c type: _SetSamplePlateId
        // action: "http://tempuri.org/IBrukerSprRemoteService/SetSamplePlateId"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_SetSamplePlateId_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_SetSamplePlateId_InputMessage;
        
        // message: IBrukerSprRemoteService_SetSamplePlateId_OutputMessage
        // c type: _SetSamplePlateIdResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/SetSamplePlateIdResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_SetSamplePlateId_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_SetSamplePlateId_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetSamplePlateId_InputMessage
        // c type: _GetSamplePlateId
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetSamplePlateId"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetSamplePlateId_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetSamplePlateId_InputMessage;
        
        // message: IBrukerSprRemoteService_GetSamplePlateId_OutputMessage
        // c type: _GetSamplePlateIdResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetSamplePlateIdResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetSamplePlateId_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetSamplePlateId_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetCurrentSamplePlateId_InputMessage
        // c type: _GetCurrentSamplePlateId
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetCurrentSamplePlateId"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetCurrentSamplePlateId_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetCurrentSamplePlateId_InputMessage;
        
        // message: IBrukerSprRemoteService_GetCurrentSamplePlateId_OutputMessage
        // c type: _GetCurrentSamplePlateIdResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetCurrentSamplePlateIdResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetCurrentSamplePlateId_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetCurrentSamplePlateId_OutputMessage;
        
        // message: IBrukerSprRemoteService_MoveSamplePlateTrayOut_InputMessage
        // c type: _MoveSamplePlateTrayOut
        // action: "http://tempuri.org/IBrukerSprRemoteService/MoveSamplePlateTrayOut"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_MoveSamplePlateTrayOut_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_MoveSamplePlateTrayOut_InputMessage;
        
        // message: IBrukerSprRemoteService_MoveSamplePlateTrayOut_OutputMessage
        // c type: _MoveSamplePlateTrayOutResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/MoveSamplePlateTrayOutResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_MoveSamplePlateTrayOut_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_MoveSamplePlateTrayOut_OutputMessage;
        
        // message: IBrukerSprRemoteService_MoveSamplePlateTrayIn_InputMessage
        // c type: _MoveSamplePlateTrayIn
        // action: "http://tempuri.org/IBrukerSprRemoteService/MoveSamplePlateTrayIn"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_MoveSamplePlateTrayIn_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_MoveSamplePlateTrayIn_InputMessage;
        
        // message: IBrukerSprRemoteService_MoveSamplePlateTrayIn_OutputMessage
        // c type: _MoveSamplePlateTrayInResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/MoveSamplePlateTrayInResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_MoveSamplePlateTrayIn_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_MoveSamplePlateTrayIn_OutputMessage;
        
        // message: IBrukerSprRemoteService_StartSelectedRunset_InputMessage
        // c type: _StartSelectedRunset
        // action: "http://tempuri.org/IBrukerSprRemoteService/StartSelectedRunset"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_StartSelectedRunset_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_StartSelectedRunset_InputMessage;
        
        // message: IBrukerSprRemoteService_StartSelectedRunset_OutputMessage
        // c type: _StartSelectedRunsetResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/StartSelectedRunsetResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_StartSelectedRunset_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_StartSelectedRunset_OutputMessage;
        
        // message: IBrukerSprRemoteService_StartSelectedRunsetFrom_InputMessage
        // c type: _StartSelectedRunsetFrom
        // action: "http://tempuri.org/IBrukerSprRemoteService/StartSelectedRunsetFrom"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_StartSelectedRunsetFrom_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_StartSelectedRunsetFrom_InputMessage;
        
        // message: IBrukerSprRemoteService_StartSelectedRunsetFrom_OutputMessage
        // c type: _StartSelectedRunsetFromResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/StartSelectedRunsetFromResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_StartSelectedRunsetFrom_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_StartSelectedRunsetFrom_OutputMessage;
        
        // message: IBrukerSprRemoteService_PauseRunsetAfter_InputMessage
        // c type: _PauseRunsetAfter
        // action: "http://tempuri.org/IBrukerSprRemoteService/PauseRunsetAfter"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_PauseRunsetAfter_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_PauseRunsetAfter_InputMessage;
        
        // message: IBrukerSprRemoteService_PauseRunsetAfter_OutputMessage
        // c type: _PauseRunsetAfterResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/PauseRunsetAfterResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_PauseRunsetAfter_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_PauseRunsetAfter_OutputMessage;
        
        // message: IBrukerSprRemoteService_ResumeRunset_InputMessage
        // c type: _ResumeRunset
        // action: "http://tempuri.org/IBrukerSprRemoteService/ResumeRunset"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_ResumeRunset_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_ResumeRunset_InputMessage;
        
        // message: IBrukerSprRemoteService_ResumeRunset_OutputMessage
        // c type: _ResumeRunsetResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/ResumeRunsetResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_ResumeRunset_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_ResumeRunset_OutputMessage;
        
        // message: IBrukerSprRemoteService_ResetRunset_InputMessage
        // c type: _ResetRunset
        // action: "http://tempuri.org/IBrukerSprRemoteService/ResetRunset"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_ResetRunset_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_ResetRunset_InputMessage;
        
        // message: IBrukerSprRemoteService_ResetRunset_OutputMessage
        // c type: _ResetRunsetResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/ResetRunsetResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_ResetRunset_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_ResetRunset_OutputMessage;
        
        // message: IBrukerSprRemoteService_AbortScript_InputMessage
        // c type: _AbortScript
        // action: "http://tempuri.org/IBrukerSprRemoteService/AbortScript"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_AbortScript_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_AbortScript_InputMessage;
        
        // message: IBrukerSprRemoteService_AbortScript_OutputMessage
        // c type: _AbortScriptResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/AbortScriptResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_AbortScript_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_AbortScript_OutputMessage;
        
        // message: IBrukerSprRemoteService_LeaveStandby_InputMessage
        // c type: _LeaveStandby
        // action: "http://tempuri.org/IBrukerSprRemoteService/LeaveStandby"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_LeaveStandby_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_LeaveStandby_InputMessage;
        
        // message: IBrukerSprRemoteService_LeaveStandby_OutputMessage
        // c type: _LeaveStandbyResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/LeaveStandbyResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_LeaveStandby_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_LeaveStandby_OutputMessage;
        
        // message: IBrukerSprRemoteService_SetStandbyAfterFinish_InputMessage
        // c type: _SetStandbyAfterFinish
        // action: "http://tempuri.org/IBrukerSprRemoteService/SetStandbyAfterFinish"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_SetStandbyAfterFinish_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_SetStandbyAfterFinish_InputMessage;
        
        // message: IBrukerSprRemoteService_SetStandbyAfterFinish_OutputMessage
        // c type: _SetStandbyAfterFinishResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/SetStandbyAfterFinishResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_SetStandbyAfterFinish_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_SetStandbyAfterFinish_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetStandbyAfterFinish_InputMessage
        // c type: _GetStandbyAfterFinish
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetStandbyAfterFinish"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetStandbyAfterFinish_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetStandbyAfterFinish_InputMessage;
        
        // message: IBrukerSprRemoteService_GetStandbyAfterFinish_OutputMessage
        // c type: _GetStandbyAfterFinishResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetStandbyAfterFinishResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetStandbyAfterFinish_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetStandbyAfterFinish_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_InputMessage
        // c type: _GetNamesOfMaintenanceProcedures
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfMaintenanceProcedures"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_InputMessage;
        
        // message: IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_OutputMessage
        // c type: _GetNamesOfMaintenanceProceduresResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetNamesOfMaintenanceProceduresResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_OutputMessage;
        
        // message: IBrukerSprRemoteService_RunMaintenanceProcedure_InputMessage
        // c type: _RunMaintenanceProcedure
        // action: "http://tempuri.org/IBrukerSprRemoteService/RunMaintenanceProcedure"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_RunMaintenanceProcedure_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_RunMaintenanceProcedure_InputMessage;
        
        // message: IBrukerSprRemoteService_RunMaintenanceProcedure_OutputMessage
        // c type: _RunMaintenanceProcedureResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/RunMaintenanceProcedureResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_RunMaintenanceProcedure_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_RunMaintenanceProcedure_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetOperationMode_InputMessage
        // c type: _GetOperationMode
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetOperationMode"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetOperationMode_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetOperationMode_InputMessage;
        
        // message: IBrukerSprRemoteService_GetOperationMode_OutputMessage
        // c type: _GetOperationModeResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetOperationModeResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetOperationMode_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetOperationMode_OutputMessage;
        
        // message: IBrukerSprRemoteService_IsChipDocked_InputMessage
        // c type: _IsChipDocked
        // action: "http://tempuri.org/IBrukerSprRemoteService/IsChipDocked"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_IsChipDocked_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_IsChipDocked_InputMessage;
        
        // message: IBrukerSprRemoteService_IsChipDocked_OutputMessage
        // c type: _IsChipDockedResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/IsChipDockedResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_IsChipDocked_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_IsChipDocked_OutputMessage;
        
        // message: IBrukerSprRemoteService_IsSamplePlateTrayIn_InputMessage
        // c type: _IsSamplePlateTrayIn
        // action: "http://tempuri.org/IBrukerSprRemoteService/IsSamplePlateTrayIn"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_IsSamplePlateTrayIn_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_IsSamplePlateTrayIn_InputMessage;
        
        // message: IBrukerSprRemoteService_IsSamplePlateTrayIn_OutputMessage
        // c type: _IsSamplePlateTrayInResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/IsSamplePlateTrayInResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_IsSamplePlateTrayIn_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_IsSamplePlateTrayIn_OutputMessage;
        
        // message: IBrukerSprRemoteService_HasMessage_InputMessage
        // c type: _HasMessage
        // action: "http://tempuri.org/IBrukerSprRemoteService/HasMessage"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_HasMessage_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_HasMessage_InputMessage;
        
        // message: IBrukerSprRemoteService_HasMessage_OutputMessage
        // c type: _HasMessageResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/HasMessageResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_HasMessage_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_HasMessage_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetMessage_InputMessage
        // c type: _GetMessage
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetMessage"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetMessage_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetMessage_InputMessage;
        
        // message: IBrukerSprRemoteService_GetMessage_OutputMessage
        // c type: _GetMessageResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetMessageResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetMessage_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetMessage_OutputMessage;
        
        // message: IBrukerSprRemoteService_HasErrors_InputMessage
        // c type: _HasErrors
        // action: "http://tempuri.org/IBrukerSprRemoteService/HasErrors"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_HasErrors_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_HasErrors_InputMessage;
        
        // message: IBrukerSprRemoteService_HasErrors_OutputMessage
        // c type: _HasErrorsResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/HasErrorsResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_HasErrors_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_HasErrors_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetErrors_InputMessage
        // c type: _GetErrors
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetErrors"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetErrors_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetErrors_InputMessage;
        
        // message: IBrukerSprRemoteService_GetErrors_OutputMessage
        // c type: _GetErrorsResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetErrorsResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetErrors_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetErrors_OutputMessage;
        
        // message: IBrukerSprRemoteService_HasWarnings_InputMessage
        // c type: _HasWarnings
        // action: "http://tempuri.org/IBrukerSprRemoteService/HasWarnings"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_HasWarnings_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_HasWarnings_InputMessage;
        
        // message: IBrukerSprRemoteService_HasWarnings_OutputMessage
        // c type: _HasWarningsResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/HasWarningsResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_HasWarnings_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_HasWarnings_OutputMessage;
        
        // message: IBrukerSprRemoteService_GetWarnings_InputMessage
        // c type: _GetWarnings
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetWarnings"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetWarnings_InputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetWarnings_InputMessage;
        
        // message: IBrukerSprRemoteService_GetWarnings_OutputMessage
        // c type: _GetWarningsResponse
        // action: "http://tempuri.org/IBrukerSprRemoteService/GetWarningsResponse"
        // messageDescription: tempuri_org_wsdl.messages.IBrukerSprRemoteService_GetWarnings_OutputMessage
        WS_MESSAGE_DESCRIPTION IBrukerSprRemoteService_GetWarnings_OutputMessage;
        
    } messages;
    struct // contracts
    {
        // binding: GsoapEndpoint
        // portType: IBrukerSprRemoteService
        // operation: GsoapEndpoint_GetNamesOfMethods
        //     input message: IBrukerSprRemoteService_GetNamesOfMethods_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfMethods_OutputMessage
        // operation: GsoapEndpoint_GetNamesOfMethodsOfAssayType
        //     input message: IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_OutputMessage
        // operation: GsoapEndpoint_GetAssayTypesOfAllMethods
        //     input message: IBrukerSprRemoteService_GetAssayTypesOfAllMethods_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypesOfAllMethods_OutputMessage
        // operation: GsoapEndpoint_GetNameOfCurrentMethod
        //     input message: IBrukerSprRemoteService_GetNameOfCurrentMethod_InputMessage
        //     output message: IBrukerSprRemoteService_GetNameOfCurrentMethod_OutputMessage
        // operation: GsoapEndpoint_GetAssayTypeOfCurrentMethod
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_OutputMessage
        // operation: GsoapEndpoint_GetAssayTypeOfMethod
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfMethod_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfMethod_OutputMessage
        // operation: GsoapEndpoint_GetNamesOfRunsets
        //     input message: IBrukerSprRemoteService_GetNamesOfRunsets_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfRunsets_OutputMessage
        // operation: GsoapEndpoint_GetNamesOfRunsetsOfAssayType
        //     input message: IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_OutputMessage
        // operation: GsoapEndpoint_GetAssayTypesOfAllRunsets
        //     input message: IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_OutputMessage
        // operation: GsoapEndpoint_GetNameOfCurrentRunset
        //     input message: IBrukerSprRemoteService_GetNameOfCurrentRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetNameOfCurrentRunset_OutputMessage
        // operation: GsoapEndpoint_GetAssayTypeOfCurrentRunset
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_OutputMessage
        // operation: GsoapEndpoint_GetAssayTypeOfRunset
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfRunset_OutputMessage
        // operation: GsoapEndpoint_GetMethodNamesOfRunset
        //     input message: IBrukerSprRemoteService_GetMethodNamesOfRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetMethodNamesOfRunset_OutputMessage
        // operation: GsoapEndpoint_SelectMethod
        //     input message: IBrukerSprRemoteService_SelectMethod_InputMessage
        //     output message: IBrukerSprRemoteService_SelectMethod_OutputMessage
        // operation: GsoapEndpoint_SelectRunset
        //     input message: IBrukerSprRemoteService_SelectRunset_InputMessage
        //     output message: IBrukerSprRemoteService_SelectRunset_OutputMessage
        // operation: GsoapEndpoint_CreateRunset
        //     input message: IBrukerSprRemoteService_CreateRunset_InputMessage
        //     output message: IBrukerSprRemoteService_CreateRunset_OutputMessage
        // operation: GsoapEndpoint_SetSamplePlateId
        //     input message: IBrukerSprRemoteService_SetSamplePlateId_InputMessage
        //     output message: IBrukerSprRemoteService_SetSamplePlateId_OutputMessage
        // operation: GsoapEndpoint_GetSamplePlateId
        //     input message: IBrukerSprRemoteService_GetSamplePlateId_InputMessage
        //     output message: IBrukerSprRemoteService_GetSamplePlateId_OutputMessage
        // operation: GsoapEndpoint_GetCurrentSamplePlateId
        //     input message: IBrukerSprRemoteService_GetCurrentSamplePlateId_InputMessage
        //     output message: IBrukerSprRemoteService_GetCurrentSamplePlateId_OutputMessage
        // operation: GsoapEndpoint_MoveSamplePlateTrayOut
        //     input message: IBrukerSprRemoteService_MoveSamplePlateTrayOut_InputMessage
        //     output message: IBrukerSprRemoteService_MoveSamplePlateTrayOut_OutputMessage
        // operation: GsoapEndpoint_MoveSamplePlateTrayIn
        //     input message: IBrukerSprRemoteService_MoveSamplePlateTrayIn_InputMessage
        //     output message: IBrukerSprRemoteService_MoveSamplePlateTrayIn_OutputMessage
        // operation: GsoapEndpoint_StartSelectedRunset
        //     input message: IBrukerSprRemoteService_StartSelectedRunset_InputMessage
        //     output message: IBrukerSprRemoteService_StartSelectedRunset_OutputMessage
        // operation: GsoapEndpoint_StartSelectedRunsetFrom
        //     input message: IBrukerSprRemoteService_StartSelectedRunsetFrom_InputMessage
        //     output message: IBrukerSprRemoteService_StartSelectedRunsetFrom_OutputMessage
        // operation: GsoapEndpoint_PauseRunsetAfter
        //     input message: IBrukerSprRemoteService_PauseRunsetAfter_InputMessage
        //     output message: IBrukerSprRemoteService_PauseRunsetAfter_OutputMessage
        // operation: GsoapEndpoint_ResumeRunset
        //     input message: IBrukerSprRemoteService_ResumeRunset_InputMessage
        //     output message: IBrukerSprRemoteService_ResumeRunset_OutputMessage
        // operation: GsoapEndpoint_ResetRunset
        //     input message: IBrukerSprRemoteService_ResetRunset_InputMessage
        //     output message: IBrukerSprRemoteService_ResetRunset_OutputMessage
        // operation: GsoapEndpoint_AbortScript
        //     input message: IBrukerSprRemoteService_AbortScript_InputMessage
        //     output message: IBrukerSprRemoteService_AbortScript_OutputMessage
        // operation: GsoapEndpoint_LeaveStandby
        //     input message: IBrukerSprRemoteService_LeaveStandby_InputMessage
        //     output message: IBrukerSprRemoteService_LeaveStandby_OutputMessage
        // operation: GsoapEndpoint_SetStandbyAfterFinish
        //     input message: IBrukerSprRemoteService_SetStandbyAfterFinish_InputMessage
        //     output message: IBrukerSprRemoteService_SetStandbyAfterFinish_OutputMessage
        // operation: GsoapEndpoint_GetStandbyAfterFinish
        //     input message: IBrukerSprRemoteService_GetStandbyAfterFinish_InputMessage
        //     output message: IBrukerSprRemoteService_GetStandbyAfterFinish_OutputMessage
        // operation: GsoapEndpoint_GetNamesOfMaintenanceProcedures
        //     input message: IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_OutputMessage
        // operation: GsoapEndpoint_RunMaintenanceProcedure
        //     input message: IBrukerSprRemoteService_RunMaintenanceProcedure_InputMessage
        //     output message: IBrukerSprRemoteService_RunMaintenanceProcedure_OutputMessage
        // operation: GsoapEndpoint_GetOperationMode
        //     input message: IBrukerSprRemoteService_GetOperationMode_InputMessage
        //     output message: IBrukerSprRemoteService_GetOperationMode_OutputMessage
        // operation: GsoapEndpoint_IsChipDocked
        //     input message: IBrukerSprRemoteService_IsChipDocked_InputMessage
        //     output message: IBrukerSprRemoteService_IsChipDocked_OutputMessage
        // operation: GsoapEndpoint_IsSamplePlateTrayIn
        //     input message: IBrukerSprRemoteService_IsSamplePlateTrayIn_InputMessage
        //     output message: IBrukerSprRemoteService_IsSamplePlateTrayIn_OutputMessage
        // operation: GsoapEndpoint_HasMessage
        //     input message: IBrukerSprRemoteService_HasMessage_InputMessage
        //     output message: IBrukerSprRemoteService_HasMessage_OutputMessage
        // operation: GsoapEndpoint_GetMessage
        //     input message: IBrukerSprRemoteService_GetMessage_InputMessage
        //     output message: IBrukerSprRemoteService_GetMessage_OutputMessage
        // operation: GsoapEndpoint_HasErrors
        //     input message: IBrukerSprRemoteService_HasErrors_InputMessage
        //     output message: IBrukerSprRemoteService_HasErrors_OutputMessage
        // operation: GsoapEndpoint_GetErrors
        //     input message: IBrukerSprRemoteService_GetErrors_InputMessage
        //     output message: IBrukerSprRemoteService_GetErrors_OutputMessage
        // operation: GsoapEndpoint_HasWarnings
        //     input message: IBrukerSprRemoteService_HasWarnings_InputMessage
        //     output message: IBrukerSprRemoteService_HasWarnings_OutputMessage
        // operation: GsoapEndpoint_GetWarnings
        //     input message: IBrukerSprRemoteService_GetWarnings_InputMessage
        //     output message: IBrukerSprRemoteService_GetWarnings_OutputMessage
        // contractDescription: tempuri_org_wsdl.contracts.GsoapEndpoint
        WS_CONTRACT_DESCRIPTION GsoapEndpoint;
        
        // binding: SoapEndpoint
        // portType: IBrukerSprRemoteService
        // operation: SoapEndpoint_GetNamesOfMethods
        //     input message: IBrukerSprRemoteService_GetNamesOfMethods_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfMethods_OutputMessage
        // operation: SoapEndpoint_GetNamesOfMethodsOfAssayType
        //     input message: IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_OutputMessage
        // operation: SoapEndpoint_GetAssayTypesOfAllMethods
        //     input message: IBrukerSprRemoteService_GetAssayTypesOfAllMethods_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypesOfAllMethods_OutputMessage
        // operation: SoapEndpoint_GetNameOfCurrentMethod
        //     input message: IBrukerSprRemoteService_GetNameOfCurrentMethod_InputMessage
        //     output message: IBrukerSprRemoteService_GetNameOfCurrentMethod_OutputMessage
        // operation: SoapEndpoint_GetAssayTypeOfCurrentMethod
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_OutputMessage
        // operation: SoapEndpoint_GetAssayTypeOfMethod
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfMethod_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfMethod_OutputMessage
        // operation: SoapEndpoint_GetNamesOfRunsets
        //     input message: IBrukerSprRemoteService_GetNamesOfRunsets_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfRunsets_OutputMessage
        // operation: SoapEndpoint_GetNamesOfRunsetsOfAssayType
        //     input message: IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_OutputMessage
        // operation: SoapEndpoint_GetAssayTypesOfAllRunsets
        //     input message: IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_OutputMessage
        // operation: SoapEndpoint_GetNameOfCurrentRunset
        //     input message: IBrukerSprRemoteService_GetNameOfCurrentRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetNameOfCurrentRunset_OutputMessage
        // operation: SoapEndpoint_GetAssayTypeOfCurrentRunset
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_OutputMessage
        // operation: SoapEndpoint_GetAssayTypeOfRunset
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfRunset_OutputMessage
        // operation: SoapEndpoint_GetMethodNamesOfRunset
        //     input message: IBrukerSprRemoteService_GetMethodNamesOfRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetMethodNamesOfRunset_OutputMessage
        // operation: SoapEndpoint_SelectMethod
        //     input message: IBrukerSprRemoteService_SelectMethod_InputMessage
        //     output message: IBrukerSprRemoteService_SelectMethod_OutputMessage
        // operation: SoapEndpoint_SelectRunset
        //     input message: IBrukerSprRemoteService_SelectRunset_InputMessage
        //     output message: IBrukerSprRemoteService_SelectRunset_OutputMessage
        // operation: SoapEndpoint_CreateRunset
        //     input message: IBrukerSprRemoteService_CreateRunset_InputMessage
        //     output message: IBrukerSprRemoteService_CreateRunset_OutputMessage
        // operation: SoapEndpoint_SetSamplePlateId
        //     input message: IBrukerSprRemoteService_SetSamplePlateId_InputMessage
        //     output message: IBrukerSprRemoteService_SetSamplePlateId_OutputMessage
        // operation: SoapEndpoint_GetSamplePlateId
        //     input message: IBrukerSprRemoteService_GetSamplePlateId_InputMessage
        //     output message: IBrukerSprRemoteService_GetSamplePlateId_OutputMessage
        // operation: SoapEndpoint_GetCurrentSamplePlateId
        //     input message: IBrukerSprRemoteService_GetCurrentSamplePlateId_InputMessage
        //     output message: IBrukerSprRemoteService_GetCurrentSamplePlateId_OutputMessage
        // operation: SoapEndpoint_MoveSamplePlateTrayOut
        //     input message: IBrukerSprRemoteService_MoveSamplePlateTrayOut_InputMessage
        //     output message: IBrukerSprRemoteService_MoveSamplePlateTrayOut_OutputMessage
        // operation: SoapEndpoint_MoveSamplePlateTrayIn
        //     input message: IBrukerSprRemoteService_MoveSamplePlateTrayIn_InputMessage
        //     output message: IBrukerSprRemoteService_MoveSamplePlateTrayIn_OutputMessage
        // operation: SoapEndpoint_StartSelectedRunset
        //     input message: IBrukerSprRemoteService_StartSelectedRunset_InputMessage
        //     output message: IBrukerSprRemoteService_StartSelectedRunset_OutputMessage
        // operation: SoapEndpoint_StartSelectedRunsetFrom
        //     input message: IBrukerSprRemoteService_StartSelectedRunsetFrom_InputMessage
        //     output message: IBrukerSprRemoteService_StartSelectedRunsetFrom_OutputMessage
        // operation: SoapEndpoint_PauseRunsetAfter
        //     input message: IBrukerSprRemoteService_PauseRunsetAfter_InputMessage
        //     output message: IBrukerSprRemoteService_PauseRunsetAfter_OutputMessage
        // operation: SoapEndpoint_ResumeRunset
        //     input message: IBrukerSprRemoteService_ResumeRunset_InputMessage
        //     output message: IBrukerSprRemoteService_ResumeRunset_OutputMessage
        // operation: SoapEndpoint_ResetRunset
        //     input message: IBrukerSprRemoteService_ResetRunset_InputMessage
        //     output message: IBrukerSprRemoteService_ResetRunset_OutputMessage
        // operation: SoapEndpoint_AbortScript
        //     input message: IBrukerSprRemoteService_AbortScript_InputMessage
        //     output message: IBrukerSprRemoteService_AbortScript_OutputMessage
        // operation: SoapEndpoint_LeaveStandby
        //     input message: IBrukerSprRemoteService_LeaveStandby_InputMessage
        //     output message: IBrukerSprRemoteService_LeaveStandby_OutputMessage
        // operation: SoapEndpoint_SetStandbyAfterFinish
        //     input message: IBrukerSprRemoteService_SetStandbyAfterFinish_InputMessage
        //     output message: IBrukerSprRemoteService_SetStandbyAfterFinish_OutputMessage
        // operation: SoapEndpoint_GetStandbyAfterFinish
        //     input message: IBrukerSprRemoteService_GetStandbyAfterFinish_InputMessage
        //     output message: IBrukerSprRemoteService_GetStandbyAfterFinish_OutputMessage
        // operation: SoapEndpoint_GetNamesOfMaintenanceProcedures
        //     input message: IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_OutputMessage
        // operation: SoapEndpoint_RunMaintenanceProcedure
        //     input message: IBrukerSprRemoteService_RunMaintenanceProcedure_InputMessage
        //     output message: IBrukerSprRemoteService_RunMaintenanceProcedure_OutputMessage
        // operation: SoapEndpoint_GetOperationMode
        //     input message: IBrukerSprRemoteService_GetOperationMode_InputMessage
        //     output message: IBrukerSprRemoteService_GetOperationMode_OutputMessage
        // operation: SoapEndpoint_IsChipDocked
        //     input message: IBrukerSprRemoteService_IsChipDocked_InputMessage
        //     output message: IBrukerSprRemoteService_IsChipDocked_OutputMessage
        // operation: SoapEndpoint_IsSamplePlateTrayIn
        //     input message: IBrukerSprRemoteService_IsSamplePlateTrayIn_InputMessage
        //     output message: IBrukerSprRemoteService_IsSamplePlateTrayIn_OutputMessage
        // operation: SoapEndpoint_HasMessage
        //     input message: IBrukerSprRemoteService_HasMessage_InputMessage
        //     output message: IBrukerSprRemoteService_HasMessage_OutputMessage
        // operation: SoapEndpoint_GetMessage
        //     input message: IBrukerSprRemoteService_GetMessage_InputMessage
        //     output message: IBrukerSprRemoteService_GetMessage_OutputMessage
        // operation: SoapEndpoint_HasErrors
        //     input message: IBrukerSprRemoteService_HasErrors_InputMessage
        //     output message: IBrukerSprRemoteService_HasErrors_OutputMessage
        // operation: SoapEndpoint_GetErrors
        //     input message: IBrukerSprRemoteService_GetErrors_InputMessage
        //     output message: IBrukerSprRemoteService_GetErrors_OutputMessage
        // operation: SoapEndpoint_HasWarnings
        //     input message: IBrukerSprRemoteService_HasWarnings_InputMessage
        //     output message: IBrukerSprRemoteService_HasWarnings_OutputMessage
        // operation: SoapEndpoint_GetWarnings
        //     input message: IBrukerSprRemoteService_GetWarnings_InputMessage
        //     output message: IBrukerSprRemoteService_GetWarnings_OutputMessage
        // contractDescription: tempuri_org_wsdl.contracts.SoapEndpoint
        WS_CONTRACT_DESCRIPTION SoapEndpoint;
        
        // binding: NetTcpEndpoint
        // portType: IBrukerSprRemoteService
        // operation: NetTcpEndpoint_GetNamesOfMethods
        //     input message: IBrukerSprRemoteService_GetNamesOfMethods_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfMethods_OutputMessage
        // operation: NetTcpEndpoint_GetNamesOfMethodsOfAssayType
        //     input message: IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfMethodsOfAssayType_OutputMessage
        // operation: NetTcpEndpoint_GetAssayTypesOfAllMethods
        //     input message: IBrukerSprRemoteService_GetAssayTypesOfAllMethods_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypesOfAllMethods_OutputMessage
        // operation: NetTcpEndpoint_GetNameOfCurrentMethod
        //     input message: IBrukerSprRemoteService_GetNameOfCurrentMethod_InputMessage
        //     output message: IBrukerSprRemoteService_GetNameOfCurrentMethod_OutputMessage
        // operation: NetTcpEndpoint_GetAssayTypeOfCurrentMethod
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfCurrentMethod_OutputMessage
        // operation: NetTcpEndpoint_GetAssayTypeOfMethod
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfMethod_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfMethod_OutputMessage
        // operation: NetTcpEndpoint_GetNamesOfRunsets
        //     input message: IBrukerSprRemoteService_GetNamesOfRunsets_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfRunsets_OutputMessage
        // operation: NetTcpEndpoint_GetNamesOfRunsetsOfAssayType
        //     input message: IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfRunsetsOfAssayType_OutputMessage
        // operation: NetTcpEndpoint_GetAssayTypesOfAllRunsets
        //     input message: IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypesOfAllRunsets_OutputMessage
        // operation: NetTcpEndpoint_GetNameOfCurrentRunset
        //     input message: IBrukerSprRemoteService_GetNameOfCurrentRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetNameOfCurrentRunset_OutputMessage
        // operation: NetTcpEndpoint_GetAssayTypeOfCurrentRunset
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfCurrentRunset_OutputMessage
        // operation: NetTcpEndpoint_GetAssayTypeOfRunset
        //     input message: IBrukerSprRemoteService_GetAssayTypeOfRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetAssayTypeOfRunset_OutputMessage
        // operation: NetTcpEndpoint_GetMethodNamesOfRunset
        //     input message: IBrukerSprRemoteService_GetMethodNamesOfRunset_InputMessage
        //     output message: IBrukerSprRemoteService_GetMethodNamesOfRunset_OutputMessage
        // operation: NetTcpEndpoint_SelectMethod
        //     input message: IBrukerSprRemoteService_SelectMethod_InputMessage
        //     output message: IBrukerSprRemoteService_SelectMethod_OutputMessage
        // operation: NetTcpEndpoint_SelectRunset
        //     input message: IBrukerSprRemoteService_SelectRunset_InputMessage
        //     output message: IBrukerSprRemoteService_SelectRunset_OutputMessage
        // operation: NetTcpEndpoint_CreateRunset
        //     input message: IBrukerSprRemoteService_CreateRunset_InputMessage
        //     output message: IBrukerSprRemoteService_CreateRunset_OutputMessage
        // operation: NetTcpEndpoint_SetSamplePlateId
        //     input message: IBrukerSprRemoteService_SetSamplePlateId_InputMessage
        //     output message: IBrukerSprRemoteService_SetSamplePlateId_OutputMessage
        // operation: NetTcpEndpoint_GetSamplePlateId
        //     input message: IBrukerSprRemoteService_GetSamplePlateId_InputMessage
        //     output message: IBrukerSprRemoteService_GetSamplePlateId_OutputMessage
        // operation: NetTcpEndpoint_GetCurrentSamplePlateId
        //     input message: IBrukerSprRemoteService_GetCurrentSamplePlateId_InputMessage
        //     output message: IBrukerSprRemoteService_GetCurrentSamplePlateId_OutputMessage
        // operation: NetTcpEndpoint_MoveSamplePlateTrayOut
        //     input message: IBrukerSprRemoteService_MoveSamplePlateTrayOut_InputMessage
        //     output message: IBrukerSprRemoteService_MoveSamplePlateTrayOut_OutputMessage
        // operation: NetTcpEndpoint_MoveSamplePlateTrayIn
        //     input message: IBrukerSprRemoteService_MoveSamplePlateTrayIn_InputMessage
        //     output message: IBrukerSprRemoteService_MoveSamplePlateTrayIn_OutputMessage
        // operation: NetTcpEndpoint_StartSelectedRunset
        //     input message: IBrukerSprRemoteService_StartSelectedRunset_InputMessage
        //     output message: IBrukerSprRemoteService_StartSelectedRunset_OutputMessage
        // operation: NetTcpEndpoint_StartSelectedRunsetFrom
        //     input message: IBrukerSprRemoteService_StartSelectedRunsetFrom_InputMessage
        //     output message: IBrukerSprRemoteService_StartSelectedRunsetFrom_OutputMessage
        // operation: NetTcpEndpoint_PauseRunsetAfter
        //     input message: IBrukerSprRemoteService_PauseRunsetAfter_InputMessage
        //     output message: IBrukerSprRemoteService_PauseRunsetAfter_OutputMessage
        // operation: NetTcpEndpoint_ResumeRunset
        //     input message: IBrukerSprRemoteService_ResumeRunset_InputMessage
        //     output message: IBrukerSprRemoteService_ResumeRunset_OutputMessage
        // operation: NetTcpEndpoint_ResetRunset
        //     input message: IBrukerSprRemoteService_ResetRunset_InputMessage
        //     output message: IBrukerSprRemoteService_ResetRunset_OutputMessage
        // operation: NetTcpEndpoint_AbortScript
        //     input message: IBrukerSprRemoteService_AbortScript_InputMessage
        //     output message: IBrukerSprRemoteService_AbortScript_OutputMessage
        // operation: NetTcpEndpoint_LeaveStandby
        //     input message: IBrukerSprRemoteService_LeaveStandby_InputMessage
        //     output message: IBrukerSprRemoteService_LeaveStandby_OutputMessage
        // operation: NetTcpEndpoint_SetStandbyAfterFinish
        //     input message: IBrukerSprRemoteService_SetStandbyAfterFinish_InputMessage
        //     output message: IBrukerSprRemoteService_SetStandbyAfterFinish_OutputMessage
        // operation: NetTcpEndpoint_GetStandbyAfterFinish
        //     input message: IBrukerSprRemoteService_GetStandbyAfterFinish_InputMessage
        //     output message: IBrukerSprRemoteService_GetStandbyAfterFinish_OutputMessage
        // operation: NetTcpEndpoint_GetNamesOfMaintenanceProcedures
        //     input message: IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_InputMessage
        //     output message: IBrukerSprRemoteService_GetNamesOfMaintenanceProcedures_OutputMessage
        // operation: NetTcpEndpoint_RunMaintenanceProcedure
        //     input message: IBrukerSprRemoteService_RunMaintenanceProcedure_InputMessage
        //     output message: IBrukerSprRemoteService_RunMaintenanceProcedure_OutputMessage
        // operation: NetTcpEndpoint_GetOperationMode
        //     input message: IBrukerSprRemoteService_GetOperationMode_InputMessage
        //     output message: IBrukerSprRemoteService_GetOperationMode_OutputMessage
        // operation: NetTcpEndpoint_IsChipDocked
        //     input message: IBrukerSprRemoteService_IsChipDocked_InputMessage
        //     output message: IBrukerSprRemoteService_IsChipDocked_OutputMessage
        // operation: NetTcpEndpoint_IsSamplePlateTrayIn
        //     input message: IBrukerSprRemoteService_IsSamplePlateTrayIn_InputMessage
        //     output message: IBrukerSprRemoteService_IsSamplePlateTrayIn_OutputMessage
        // operation: NetTcpEndpoint_HasMessage
        //     input message: IBrukerSprRemoteService_HasMessage_InputMessage
        //     output message: IBrukerSprRemoteService_HasMessage_OutputMessage
        // operation: NetTcpEndpoint_GetMessage
        //     input message: IBrukerSprRemoteService_GetMessage_InputMessage
        //     output message: IBrukerSprRemoteService_GetMessage_OutputMessage
        // operation: NetTcpEndpoint_HasErrors
        //     input message: IBrukerSprRemoteService_HasErrors_InputMessage
        //     output message: IBrukerSprRemoteService_HasErrors_OutputMessage
        // operation: NetTcpEndpoint_GetErrors
        //     input message: IBrukerSprRemoteService_GetErrors_InputMessage
        //     output message: IBrukerSprRemoteService_GetErrors_OutputMessage
        // operation: NetTcpEndpoint_HasWarnings
        //     input message: IBrukerSprRemoteService_HasWarnings_InputMessage
        //     output message: IBrukerSprRemoteService_HasWarnings_OutputMessage
        // operation: NetTcpEndpoint_GetWarnings
        //     input message: IBrukerSprRemoteService_GetWarnings_InputMessage
        //     output message: IBrukerSprRemoteService_GetWarnings_OutputMessage
        // contractDescription: tempuri_org_wsdl.contracts.NetTcpEndpoint
        WS_CONTRACT_DESCRIPTION NetTcpEndpoint;
        
    } contracts;
    struct // policies
    {
        // policy for binding: GsoapEndpoint
        // port name: GsoapEndpoint, binding: GsoapEndpoint, namespace: http://tempuri.org/
        WS_HTTP_POLICY_DESCRIPTION GsoapEndpoint;
        // policy for binding: NetTcpEndpoint
        // port name: NetTcpEndpoint, binding: NetTcpEndpoint, namespace: http://tempuri.org/
        WS_TCP_POLICY_DESCRIPTION NetTcpEndpoint;
    } policies;
    struct
    { // endpointReferences
        struct
        {  // SoapEndpoint
            WS_ENDPOINT_ADDRESS_DESCRIPTION endpointAddressDescription;
            WS_XML_STRING* endpointReferenceString;
        } SoapEndpoint;  // endof SoapEndpoint
        struct
        {  // NetTcpEndpoint
            WS_ENDPOINT_ADDRESS_DESCRIPTION endpointAddressDescription;
            WS_XML_STRING* endpointReferenceString;
        } NetTcpEndpoint;  // endof NetTcpEndpoint
    } endpointReferences;  // endof endpointReferences 
} _tempuri_org_wsdl;

extern const _tempuri_org_wsdl tempuri_org_wsdl;

#ifdef __cplusplus
}
#endif

